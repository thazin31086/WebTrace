<Issues>
  <Issue>
    <IssueID>41480</IssueID>
    <Title>Visual studio crashes when typing out a null-conditional index operation in Roslyn</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/899758/visual-studio-crashes-when-typing-out-a-null-condi.html)._

---
Version Used:
Version 16.4.2
VisualStudio.16.Release/16.4.2+29613.14
Microsoft .NET Framework
Version 4.8.03752

Steps to Reproduce:

Open the C# interactive window.
Type the following two lines into the interactive window as separate statements (so the first runs before you start typing the second):
    
```
String[] foo = null
foo?[0]
```


Expected Behavior:
The output null
Actual Behavior:
Visual Studio crashes when you type '['. I have tried verifying that is was not an extension by starting in safe mode, but Roslyn won't run when in safe mode. I have attached a debugger and I don't see any extensions in the stack trace, so I think it is all first party code. The stack trace I have gotten is as follows:
```&gt; Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler) Line 212	C#
&gt;  	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.ComputeItemsAsync(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&gt; providers = Length = 1, Microsoft.VisualStudio.Text.SnapshotPoint caretPosition = {Microsoft.VisualStudio.Text.SnapshotPoint}, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo triggerInfo = {Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo}, Microsoft.CodeAnalysis.Document document = Submission#2, System.Threading.CancellationToken cancellationToken = IsCancellationRequested = false)	Unknown
&gt;  	[Resuming Async Method]	
&gt;  	[Native to Managed Transition]	
&gt;  	mscorlib.dll!System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task task = Id = 86752, Status = Faulted, Method = "{null}", Result = "{Not yet computed}")	Unknown
&gt;  	mscorlib.dll!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task)	Unknown
&gt;  	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.ComputeItemsAsync(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&gt; providers = Length = 1, Microsoft.VisualStudio.Text.SnapshotPoint caretPosition = {Microsoft.VisualStudio.Text.SnapshotPoint}, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo triggerInfo = {Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo}, Microsoft.CodeAnalysis.Document document = Submission#2, System.Threading.CancellationToken cancellationToken = IsCancellationRequested = false)	Unknown
&gt;  	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.ComputeItemsAsync(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&gt; providers = Length = 1, Microsoft.VisualStudio.Text.SnapshotPoint caretPosition = {Microsoft.VisualStudio.Text.SnapshotPoint}, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo triggerInfo = {Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo}, Microsoft.CodeAnalysis.Document document = Submission#2, System.Threading.CancellationToken cancellationToken = IsCancellationRequested = false)	Unknown
&gt;  	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.ComputeModelInBackgroundAsync(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model currentModel = null, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&gt; providers = Length = 1, Microsoft.VisualStudio.Text.SnapshotPoint caretPosition = {Microsoft.VisualStudio.Text.SnapshotPoint}, Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.DisconnectedBufferGraph disconnectedBufferGraph = {Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.DisconnectedBufferGraph}, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo triggerInfo = {Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo}, System.Threading.CancellationToken cancellationToken = IsCancellationRequested = false)	Unknown
&gt;  	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.ComputeModel.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model model, System.Threading.CancellationToken cancellationToken)	Unknown
&gt;  	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation&lt;System.__Canon&gt;.ChainTaskAndNotifyControllerWhenFinished.AnonymousMethod__0(System.Threading.Tasks.Task&lt;System.__Canon&gt; t)	Unknown
&gt;  	Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.TaskExtensions.SafeContinueWithFromAsync.AnonymousMethod__0(System.Threading.Tasks.Task antecedent) Line 309	C#
&gt;  	mscorlib.dll!System.Threading.Tasks.ContinuationResultTaskFromTask&lt;System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model&gt;&gt;.InnerInvoke()	Unknown
&gt;  	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
&gt;  	mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
&gt;  	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
&gt;  	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
&gt;  	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 86629, Status = Running, Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context., Result = "{Not yet computed}")	Unknown
&gt;  	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
&gt;  	mscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
&gt;  	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
&gt;  	mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown
```

---
### Original Comments

#### Visual Studio Feedback System on 2/3/2020, 04:53 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>07/02/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>41432</IssueID>
    <Title>IDE0004 'Unnecessary cast' suggestion breaks code</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/903817/ide0004-unnecessary-cast-suggestion-breaks-code.html)._

---
```csharp
unsafe int Test(IntPtr safePointer)
{
    // Suggests to remove the "int*" cast.
    return ((int*)safePointer)[0];
}

unsafe int Test(IntPtr safePointer)
{
    // Error after using suggestion.
    return safePointer[0];
}
```
`IntPtr` cannot even be indexed, so this suggestion really breaks code.

---
### Original Comments

#### Visual Studio Feedback System on 2/3/2020, 04:23 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>05/02/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>41410</IssueID>
    <Title>IntegrationTests.VisualBasic.BasicWinForms.ChangeControlProperty throws in CI</Title>
    <Description>
https://dev.azure.com/dnceng/public/_build/results?buildId=507587&amp;view=artifacts&amp;type=publishedArtifacts
```
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; Xunit.Sdk.ContainsException: Assert.Contains() Failure
Not found: Me.SomeButton.Text = "NewButtonText"
In value:  &lt;Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()&gt; _
Partial Class Form1
    Inherits System.Windows.Forms.Form

    'Form overrides dispose to clean up the component list.
    &lt;System.Diagnostics.DebuggerNonUserCode()&gt; _
    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        Try
            If disposing AndAlso components IsNot Nothing Then
                components.Dispose()
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _
    Private Sub InitializeComponent()
        components = New System.ComponentModel.Container()
        Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
        Me.ClientSize = New System.Drawing.Size(800, 450)
        Me.Text = "Form1"
    End Sub

End Class

   at Xunit.Assert.Contains(String expectedSubstring, String actualString) in C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:line 22
   at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlProperty() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicWinForms.cs:line 78
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task).GetType().Name
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
```</Description>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>05/02/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>41109</IssueID>
    <Title>Access violation on null-conditional access of tuple item when tuple is a generic class property</Title>
    <Description>When a generic class has a tuple property utilizing its generic type, a null-conditional access of the tuple's item causes `System.AccessViolationException: Attempted to read or write protected memory.`

Observed on .NET Core runtimes `3.1`, `2.2`, and `2.1` in Windows, and `2.2` in Ubuntu 16. The `2.x` runtimes do not display the error to console, but it is logged under Application in the Windows Event Log.

.NET Framework runtime appears to be unaffected.

## Minimal example

`Program.cs` -
```csharp
using System;

class Program
{
    static void Main()
    {
        GenericMethod&lt;string&gt;();
        Console.WriteLine("Hello World!");
    }
    static void GenericMethod&lt;T&gt;()
    {
        new GenericClass&lt;T&gt;().Prop.Item2?.ToString();
    }
}

public class GenericClass&lt;T&gt;
{
    public ValueTuple&lt;long, T&gt; Prop { get; }
}
```

`Crasher.csproj` -
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.1&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
```

### Expected output

```
&gt; dotnet run -c Release
Hello World!
```

### Actual output

```
&gt; dotnet run -c Release
Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at Program.GenericMethod[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]()
   at Program.Main()
```</Description>
    <CreatedDate>21/01/2020</CreatedDate>
    <ClosedDate>21/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>41040</IssueID>
    <Title>CS8601 false positive</Title>
    <Description>#### Analyzer package

I suppose Microsoft.CodeQuality.CSharp.Analyzers

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

CS8601	Possible null reference assignment.

#### Repro steps
```
private readonly Dictionary&lt;int, string&gt; values = new Dictionary&lt;int, string&gt;();
public bool TryGet(int index, [MaybeNullWhen(false)] out string value)
{
   return this.values.TryGetValue(index, out value);
}
```
#### Expected behavior
CS8601 shouldn't happen

#### Actual behavior
![image](https://user-images.githubusercontent.com/5107375/72632552-cc8d3b80-3956-11ea-9eca-84b79e78a913.png)
</Description>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>41013</IssueID>
    <Title>Escape quotes when pasting into verbatim string C#</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/883317/escape-quotes-when-pasting-into-verbatim-string-c.html)._

---
When pasting into a verbatim string (@""), if the pasted contents contain quotes (such as in a JSON or XML snippet), it would be really nice to automatically escape that content.  For example:

string sample = @"";
&lt;paste text:&gt; { "foo": "bar" }

**Desired:**
string sample = @"{ ""foo"": ""bar"" }";

**Currently:**
string sample = @"{ "foo": "bar" }"; // and a slew of syntax errors to fix up...

---
### Original Comments

#### Visual Studio Feedback System on 1/14/2020, 00:24 AM: 

Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>16/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40956</IssueID>
    <Title>Inaccurate IDE0051 Messages</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/875313/inaccurate-ide0051-messages.html)._

---
Using this code:
https://github.com/DragonSpark/Framework/blob/5a9801baf55beb255d11068fe0c4237fe88f59ac/DragonSpark.Application.Hosting.Server.Testing.Application/HelloWorldControllerTests.cs

IDE0051 messages occur that state the methods in the class are not used, when in fact, they are.

https://i.imgur.com/LrENm63.png

---
### Original Comments

#### Visual Studio Feedback System on 1/5/2020, 11:57 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 1/13/2020, 11:24 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40850</IssueID>
    <Title>[Flaky] CSharp_FixupSpanDuringResolvableConflict_NonReferenceConflict is flaky</Title>
    <Description>Seen in https://dev.azure.com/dnceng/public/_build/results?buildId=477708&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=15180274&amp;resultId=156922&amp;paneView=debug</Description>
    <CreatedDate>09/01/2020</CreatedDate>
    <ClosedDate>09/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40800</IssueID>
    <Title>Show &lt;exception&gt; description in XML Document Comment</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/870945/use-of-c-xml-document-comment-tagc-xml-document-co.html)._

In VisualStudio, I think the ability to display annotations of variables using XML Document is very good, but i think that it is particularly useful in describing whether it is a good exception to ignore if you can display it because there is a column that describes "description" in the &lt;exception&gt; tag, so I want the ability to display not only the exception that occurs, but also the description of the exception that occurs.
</Description>
    <CreatedDate>08/01/2020</CreatedDate>
    <ClosedDate>08/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40720</IssueID>
    <Title>Visual Studio 2019 crashing when click RMB on rule in Analyzers' dependencies.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/549993/visual-studio-2019-crashing-when-click-rmb-on-rule.html)._

---
Visual Studio 2019 crashing when I added too many analyzers to project.

Steps to reproduce:
-  Create .NET Standard library with setup:

```
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="AspNetCoreAnalyzers" Version="0.2.0-dev" /&gt;
    &lt;PackageReference Include="AsyncFixer" Version="1.1.6" /&gt;
    &lt;PackageReference Include="codecracker.CSharp" Version="1.1.0" /&gt;
    &lt;PackageReference Include="DotNetAnalyzers.DocumentationAnalyzers.Unstable" Version="1.0.0.59" /&gt;
    &lt;PackageReference Include="ErrorProne.NET.CoreAnalyzers" Version="0.1.2" /&gt;
    &lt;PackageReference Include="ErrorProne.NET.Structs" Version="0.1.2" /&gt;
    &lt;PackageReference Include="IDisposableAnalyzers" Version="2.1.2" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="2.9.2" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="2.9.2" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.2" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="2.9.2" /&gt;
    &lt;PackageReference Include="Microsoft.VisualStudio.Threading.Analyzers" Version="16.0.102" /&gt;
    &lt;PackageReference Include="NuGet.CommandLine" Version="4.9.4" /&gt;
    &lt;PackageReference Include="Puma.Security.Rules" Version="2.1.0" /&gt;
    &lt;PackageReference Include="RefactoringEssentials" Version="5.6.0" /&gt;
    &lt;PackageReference Include="Roslynator.Analyzers" Version="2.0.0" /&gt;
    &lt;PackageReference Include="Roslynator.CodeFixes" Version="2.0.0" /&gt;
    &lt;PackageReference Include="SecurityCodeScan" Version="3.2.0" /&gt;
    &lt;PackageReference Include="StyleCop.Analyzers.Unstable" Version="1.1.1.114" /&gt;
    &lt;PackageReference Include="Wintellect.Analyzers" Version="1.0.6" /&gt;
    &lt;PackageReference Include="xunit.analyzers" Version="0.10.0" /&gt;

    &lt;PackageReference Update="NETStandard.Library" PrivateAssets="all" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
```
- Click RMB on any rule in analyzers window.


This produces event as below:
```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.NullReferenceException
   at Microsoft.VisualStudio.LanguageServices.Implementation.SolutionExplorer.AnalyzersCommandHandler.UpdateSeverityMenuItemsChecked()
   at Microsoft.VisualStudio.LanguageServices.Implementation.SolutionExplorer.AnalyzersCommandHandler.UpdateDiagnosticContextMenu()
   at Microsoft.VisualStudio.LanguageServices.Implementation.SolutionExplorer.ContextMenuController.ShowContextMenu(System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;, System.Windows.Point)
   at Microsoft.Internal.VisualStudio.PlatformUI.ContextMenuController.ShowContextMenu(System.Collections.Generic.IEnumerable`1&lt;Microsoft.Internal.VisualStudio.PlatformUI.IContextMenuPattern&gt;, System.Windows.Point, System.Func`2&lt;Microsoft.Internal.VisualStudio.PlatformUI.IContextMenuPattern,Microsoft.Internal.VisualStudio.PlatformUI.IContextMenuController&gt;)
   at Microsoft.Internal.VisualStudio.PlatformUI.ContextMenuController.ShowContextMenu(System.Collections.Generic.IEnumerable`1&lt;Microsoft.Internal.VisualStudio.PlatformUI.IContextMenuPattern&gt;, System.Windows.Point)
   at Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
   at System.Windows.FrameworkElement.OnContextMenuOpeningThunk(System.Object, System.Windows.Controls.ContextMenuEventArgs)
   at System.Windows.Controls.ContextMenuEventArgs.InvokeEventHandler(System.Delegate, System.Object)
   at System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate, System.Object)
   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)
   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)
   at System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject, System.Windows.RoutedEventArgs)
   at System.Windows.ContentElement.RaiseTrustedEvent(System.Windows.RoutedEventArgs)
   at System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs, Boolean)
   at System.Windows.Controls.PopupControlService.RaiseContextMenuOpeningEvent(System.Windows.IInputElement, Double, Double, Boolean)
   at System.Windows.Controls.PopupControlService.ProcessMouseUp(System.Object, System.Windows.Input.MouseButtonEventArgs)
   at System.Windows.Controls.PopupControlService.OnPostProcessInput(System.Object, System.Windows.Input.ProcessInputEventArgs)
   at System.Windows.Input.InputManager.RaiseProcessInputEventHandlers(System.Windows.Input.ProcessInputEventHandler, System.Windows.Input.ProcessInputEventArgs)
   at System.Windows.Input.InputManager.ProcessStagingArea()
   at System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)
   at System.Windows.Input.InputProviderSite.ReportInput(System.Windows.Input.InputReport)
   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr, System.Windows.Input.InputMode, Int32, System.Windows.Input.RawMouseActions, Int32, Int32, Int32)
   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr, MS.Internal.Interop.WindowMessage, IntPtr, IntPtr, Boolean ByRef)
   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
   at MS.Win32.UnsafeNativeMethods.CallWindowProc(IntPtr, IntPtr, Int32, IntPtr, IntPtr)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```

---
### Original Comments

#### Visual Studio Feedback System on 4/29/2019, 00:01 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 5/1/2019, 10:08 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 12/31/2019, 00:23 AM: 

&lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq&lt;/a&gt;. In case you need answers to common questions or need assisted support, be sure to use &lt;a target='_blank' href="https://visualstudio.microsoft.com/vs/support/"&gt;https://visualstudio.microsoft.com/vs/support/&lt;/a&gt;. We’ll keep you posted on any updates to this feedback.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>10/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40592</IssueID>
    <Title>InvalidOperationException from CSharpSyncNamespaceCodeRefactoringProvider</Title>
    <Description>**Version Used**: vs 16.4 preview 4

**Stacktrace**:

```
System.InvalidOperationException : This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.CSharp.Binder.BindOutVariableDeclarationArgument(DeclarationExpressionSyntax declarationExpression,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindOutDeclarationArgument(DeclarationExpressionSyntax declarationExpression,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentValue(DiagnosticBag diagnostics,ArgumentSyntax argumentSyntax,Boolean allowArglist,RefKind refKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(AnalyzedArguments result,DiagnosticBag diagnostics,Boolean&amp; hadError,Boolean&amp; hadLangVersionError,ArgumentSyntax argumentSyntax,Boolean allowArglist,Boolean isDelegateCreation)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSpeculativelyBoundExpression(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption,Binder&amp; binder,ImmutableArray`1&amp; crefSymbols)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSpeculativelyBoundExpression(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption,Binder&amp; binder,ImmutableArray`1&amp; crefSymbols)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSpeculativeSymbolInfo(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel semanticModel,Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpExtensionMethodReducer.TryReduceExtensionMethod(InvocationExpressionSyntax node,SemanticModel semanticModel,InvocationExpressionSyntax rewrittenNode,SimpleNameSyntax expressionName)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpExtensionMethodReducer.SimplifyExtensionMethod(InvocationExpressionSyntax node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpExtensionMethodReducer.Rewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpExtensionMethodReducer.Rewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitExpressionStatement(ExpressionStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(ForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_1.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.FixDeclarationDocumentAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.ChangeNamespaceInSingleDocumentAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.ChangeNamespaceAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
```

This looks very similar to the stacktrace observed for #40559
</Description>
    <CreatedDate>26/12/2019</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40580</IssueID>
    <Title>Seemingly flakey VB renaming tests </Title>
    <Description>**Steps to Reproduce**:

1. Run Test Suite
2. Get some failing tests reported like [here](https://dev.azure.com/dnceng/public/_build/results?buildId=464563&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=14784826&amp;resultId=155520&amp;paneView=debug)
3. Re-run tests against the same code
4. All tests pass

**Expected Behavior**:
Tests should either always fail or always succeed

**Actual Behavior**:
Tests fail seemingly at random
</Description>
    <CreatedDate>24/12/2019</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40481</IssueID>
    <Title>Incorrect quick fix opton in editorconfig `IDE0037 Member name can be simplified` for anonymous type member names</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/853373/incorrect-quick-fix-opton-in-editorconfig-ide0037.html)._

---
It's suggesting `dotnet_style_prefer_inferred_tuple_names` instead of `dotnet_style_prefer_inferred_anonymous_type_member_names`

e.g.
```
_ = new { Length = "". Length };
```

using Visual Studio 2019 16.3.5

---
### Original Comments

#### Visual Studio Feedback System on 12/12/2019, 00:34 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 12/18/2019, 03:05 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>18/12/2019</CreatedDate>
    <ClosedDate>19/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40313</IssueID>
    <Title>abilty of indentation in XML documentation (inserting spaces)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/778040/abilty-of-indentation-in-xml-documentation-inserti.html)._

---
&lt;p&gt;If an example is inserted into docmenatation (summary), spaces are ignored, no indentation is possible. This reduces the readability of the documentation. Also, line breaks must be used.&lt;/p&gt; &lt;p&gt;        /// &amp;lt;summary&amp;gt;&lt;br&gt;        /// &amp;lt;example&amp;gt;&amp;lt;code&amp;gt;&lt;br&gt;        /// &amp;lt;br&amp;gt;&amp;quot;cfg_t&amp;quot;: {&amp;lt;/br&amp;gt; &lt;br&gt;        /// &amp;lt;br&amp;gt;    &amp;quot;members&amp;quot;: {&amp;lt;/br&amp;gt;&lt;br&gt;        /// &amp;lt;br&amp;gt;         &amp;quot;cfg&amp;quot;: {&amp;quot;class&amp;quot;: &amp;quot;cfg_t&amp;quot;},,.... &amp;lt;/br&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/example&amp;gt;&lt;br&gt;        /// &amp;lt;/summary&amp;gt;&lt;/p&gt;&lt;p&gt;will be shown with all lines starting at the same column. Without breaks, single line will be shown.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 10/15/2019, 07:26 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;

#### Matteo Taveggia [MSFT] on 11/26/2019, 06:34 PM: 

&lt;p&gt;Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input&lt;/p&gt;
</Description>
    <CreatedDate>11/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40299</IssueID>
    <Title>`TypeLoadException` for co-/contravariant interfaces with default methods having a closure</Title>
    <Description>**Version Used**: 

`%ProgramFiles%\dotnet\sdk\3.1.100\Roslyn\bincore\Microsoft.CodeAnalysis.CSharp.dll`
File SHA1: `46f61df92a8fb01930a0f8b529b0abb365ffd64b`
File Version: `3.400.19.56205`
Product Version: [`3.4.0-beta4-19562-05+ff930dec4565e2bc424ad3bf3e22ecb20542c87d`](https://github.com/dotnet/roslyn/commit/ff930dec4565e2bc424ad3bf3e22ecb20542c87d)

`%ProgramFiles%\dotnet\dotnet.exe`
File SHA1: `755f1b51255447383e514cb0a2d0e2f43b4b27c9`
File Version: `3.100.19.56502`
Product Version: `3,100,19,56502 @Commit: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89`

**Steps to Reproduce**:

Compile and run:
```csharp
using System;

interface IA&lt;in T&gt;
{
    public Action Bind(Action&lt;object&gt; a, T x)
    {
        return () =&gt; a(x);
    }
}

class C : IA&lt;object&gt;
{
    static void Main()
    {
        IA&lt;string&gt; x = new C();
        Action a = x.Bind(Console.WriteLine, "hi");
        a();
    }
}
```

**Expected Behavior**:

The program compiles successfully and prints `hi`.

**Actual Behavior**:

No compile-time errors, but the program throws an exception:
```
Unhandled exception. System.TypeLoadException: Could not load type '&lt;&gt;c__DisplayClass0_0'
    from assembly 'ConsoleApp2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because
    it declares a covariant or contravariant type parameter and is not an interface or delegate.
   at IA`1.Bind(Action`1 a, T x)
   at C.Main()
```</Description>
    <CreatedDate>11/12/2019</CreatedDate>
    <ClosedDate>13/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40266</IssueID>
    <Title>Unexpected possible null reference warning on MaybeNullWhen out parameter</Title>
    <Description>**Version Used**: 
16.5.0 Preview 2.0 [29529.20.master]

**Steps to Reproduce**:

```C#
#nullable enable

using System.Diagnostics.CodeAnalysis;

abstract class C&lt;T&gt;
{
    public abstract bool TryGetValue([MaybeNullWhen(false)]out T value);
}

class D&lt;T&gt; : C&lt;T&gt;
    where T : class
{
    private readonly C&lt;T&gt; _source;

    public D(C&lt;T&gt; source)
    {
        _source = source;
    }

    public override bool TryGetValue([MaybeNullWhen(false)]out T value)
    {
        return _source.TryGetValue(out value); // warning on out value
    }
}

```

**Expected Behavior**:

No warnings.

**Actual Behavior**:

```
D.cs(22,40,22,45): warning CS8601: Possible null reference assignment.
```

</Description>
    <CreatedDate>10/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40256</IssueID>
    <Title>Enum implicit cast to string fails when element is named "ToString"</Title>
    <Description>_From @agustins on Tuesday, November 19, 2019 10:05:16 PM_

When you have an enum with an element named "ToString" compiler fails with

`"csc.exe" exited with code -2146232797. ...Bin\Roslyn\Microsoft.CSharp.Core.targets	59`

# Environment
 * .NET Core 3.0 and SDK Version 3.0.100
 * Visual Studio Enterprise 2019 Version 16.3.9

# Reproduce

``` csharp
using System;

namespace ConsoleApp
{
    class Program
    {
        public enum Foo
        {
            ToString
        }

        static void Main(string[] args)
        {
            Console.WriteLine(Foo.ToString + "");
        }
    }
}
```


_Copied from original issue: dotnet/core#3850_</Description>
    <CreatedDate>09/12/2019</CreatedDate>
    <ClosedDate>09/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40130</IssueID>
    <Title>Error: Microsoft.Net.Compilers is only supported on MSBuild v16.3 and above</Title>
    <Description>**Version Used**: Microsoft.Net.Compilers 3.4.0

**Steps to Reproduce**:

1. Update package Microsoft.Net.Compilers from 3.3.1 to 3.4.0 in project A (.Net Framework 4.8 MVC 5 Web App)
2. Build MSTest project that references project A (.Net Framework 4.8 class library)

**Expected Behavior**: No error message

**Actual Behavior**: Error message "Microsoft.Net.Compilers is only supported on MSBuild v16.3 and above."

It seems that inside "Microsoft.Net.Compilers.Props" the variable $(MSBuildToolsVersion) evaluates to "Current". Hence the condition "'$(MSBuildToolsVersion)' &amp;lt; '16.3'" is not met

</Description>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>04/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40113</IssueID>
    <Title>Cast with user-defined conversion doesn't honor [AllowNull].</Title>
    <Description>**Version Used**: C# 8, .Net Standard 2.1, Nullable Reference Context enabled

**Steps to Reproduce**:

1. Create a generic wrapper for all variables, fields, parameters and returns, to protect them from future syntax changes in C#, such as J{Y} where Y is anything and everything.
2. Add implicit casts to make everything transparent, in and out of code, new and old, however interpolated and strung together.
3. I still get compiler warnings!

**Expected Behavior**:

I must not get compiler warnings.

**Actual Behavior**:

I get compiler warnings.

```
 [Serializable]
 public readonly partial struct J&lt;Y&gt;
 {
  public static implicit operator J&lt;Y&gt;([AllowNull]Y x) =&gt; new J&lt;Y&gt;(x);
  internal J([AllowNull]Y y) =&gt; _y = y;
  [MaybeNull] private Y _y { get; }
 }
 partial struct JHopper&lt;Y&gt; where Y : class
 {
  private Y? _q;
  public J&lt;Y&gt; ZHop() =&gt; _q; // &lt;= NULLABILITY WARNING HERE?! [AllowNull] isn't honored, obviously.
 }
```
[sharplab](https://sharplab.io/#v2:D4AQDABCCMB0AiBLAhgcwHYHsDOAXRAxtrAMKYAmApgILrIA2AntotgNwCwAUNwMToBXevWQAjepQiU64yt25QAzBABOlZOUzomEAA7IV+BhDwqBBXBABSAHgCaAPgUBvBUqjQAbBEQBbXfSEiJaYupQqyLiYKtb2DgAUANrUwpgA7gByQvQAunYQAB4AlBAAvA4Q6JRpsY7xxZxcED7ouOF09NZJKfTpWcJ5EIwl5RAA+oxlQ43NiQCyyIyilP25eiqIAG6RkvkTEM4QqJS4bBAAvgqXTfqGKJ2m5pZWABKhYSpxEGkAFuG7EAAXFAAEwuNy6DbbNoQOwAfnGAEcZu5bI4IAAtN66eIjCpjZEQAD0RIgNlKEAyAFUADI06gAIQAkjSmQAVfIAdWoACUMkyMgBxCAvACiPNFcIAhBBkqlMtkcj5sOgAOSWH5aaKUcgAGggmFEm0QmAE2CYsCuQA=)

Why is this valuable? Well, C# can change syntax and semantics however it wants, but all my variables, fields, parameters and returns will ALWAYS be protected in J{Y}, saving them from most possible future rewrites. Performance is fairly good, as short methods are ALWAYS inlined, the best of both worlds!</Description>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40061</IssueID>
    <Title>MaybeNull seems not working in method body</Title>
    <Description>**Version Used**: .NET Core 3.0.101/.NET Core 3.1 preview 3

**Steps to Reproduce**:

```csharp
[MaybeNull] public T Test =&gt; default;
```
or
```csharp
public T Test
{
    [return: MaybeNull]
    get
    {
        return default;
    }
}
```
or
```csharp
[return: MaybeNull] public T Test() =&gt; default;
```
or
```csharp
[return: MaybeNull] string Test() =&gt; null;
```

**Expected Behavior**:
Nothing happen.

**Actual Behavior**:
warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.  
warning CS8603: Possible null reference return.</Description>
    <CreatedDate>29/11/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40060</IssueID>
    <Title>Assertion failure in AnalyzerDriver</Title>
    <Description>```
&gt;	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.GetOperationsToAnalyze(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; operationBlocks) Line 2552	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions.__getOperationsToAnalyzeWithStackGuard|4(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; operationBlocksToAnalyze) Line 2333	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions.__executeExecutableCodeActions|3() Line 2305	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference decl, int declarationIndex, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.GroupedAnalyzerActions additionalPerSymbolActions, bool shouldExecuteSyntaxNodeActions, bool shouldExecuteOperationActions, bool shouldExecuteCodeBlockActions, bool shouldExecuteOperationBlockActions, bool isInGeneratedCode, System.Threading.CancellationToken cancellationToken) Line 2228	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCodeSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions additionalPerSymbolActionsOpt, System.Threading.CancellationToken cancellationToken) Line 2116	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1348	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1289	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1223	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 1210	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 1140	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool usingPrePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 508	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 437	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken) Line 894	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Line 728	C#
```

Hitting this line of code:

```
switch (operationBlock.Parent.Kind)
...
                            default:
                                Debug.Fail($"Expected operation with kind '{operationBlock.Kind}' to be the root operation with null 'Parent', but instead it has a non-null Parent with kind '{operationBlock.Parent.Kind}'");
                                break;
```

In this case, `operationBlock.Parent.Kind` is `ExpressionStatement`.</Description>
    <CreatedDate>29/11/2019</CreatedDate>
    <ClosedDate>29/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>40022</IssueID>
    <Title>IntelliSense lists not filtering for generic constraints on extension methods</Title>
    <Description>This is similar to #38382, but this is with constraints.  I believe that in past versions this worked, not 100% sure though.

**Version Used**: 

I tried Framework 4.7.2 and 3.1.0-preview3.19553.2, Visual Studio 2017 and Visual Studio 2019 Preview

**Steps to Reproduce**:
```
    class Program
    {
        static void Main(string[] args)
        {
            var list1 = new List&lt;Entity1&gt;();
            list1.FindEntity("");

            var list2 = new List&lt;Entity2&gt;();
            list2.FindEntity("", 1);
        }
    }
```

    public interface IIdentity&lt;T1&gt;
    {

    }

    public interface IIdentity&lt;T1, T2&gt;
    {

    }

    public class Entity1 : IIdentity&lt;string&gt;
    {
    }

    public class Entity2 : IIdentity&lt;string, int&gt;
    {
    }


    public static class ListExtensions
    {
        
        public static TEntity FindEntity&lt;TEntity, T1&gt;(this List&lt;TEntity&gt; list, T1 key1)
            where TEntity : IIdentity&lt;T1&gt;
        {
            return default(TEntity);
        }

        public static TEntity FindEntity&lt;TEntity, T1, T2&gt;(this List&lt;TEntity&gt; list, T1 key1, T2 key2)
            where TEntity : IIdentity&lt;T1, T2&gt;
        {
            return default(TEntity);
        }
    }

**Expected Behavior**:
I expect the generic types to be inferred and only 1 of the extension methods show up.

![TypedMethodShows](https://user-images.githubusercontent.com/4741884/69663547-75ed3a80-1054-11ea-85ce-bab0ffac53f0.PNG)

**Actual Behavior**:
Both extension methods show up without generics being applied.

![BothExtensionsShow](https://user-images.githubusercontent.com/4741884/69663559-7c7bb200-1054-11ea-8411-37adf505859a.PNG)

</Description>
    <CreatedDate>26/11/2019</CreatedDate>
    <ClosedDate>27/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39915</IssueID>
    <Title>Attempting to change severity of an analyzer fails and throws up yellow bar</Title>
    <Description>**Version Used**: 
Version 16.5.0 Preview 2.0 [29520.138.master

**Steps to Reproduce**:

1. `git clone http://github.com/dotnet/project-system`
2. `cd project-system`
3. `git checkout 8a68d2b7737fbf19d96ba41a53cc1c6617d396c8`
4. `ProjectSystem.sln`
5. Navigate to src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\Packaging\ManagedProjectSystemPackage.cs
6. On line 43, drop down Lightbulb
7. Choose: 
![image](https://user-images.githubusercontent.com/1103906/69299990-1ebb2480-0c66-11ea-8845-75291efd74d1.png)


**Expected Behavior**:
.editorconfig to be changed.

**Actual Behavior**:
Yellow bar with the following:

```
    &lt;type&gt;Error&lt;/type&gt;
    &lt;source&gt;Editor or Editor Extension&lt;/source&gt;
    &lt;description&gt;System.Runtime.InteropServices.COMException (0x80004005): Error HRESULT E_FAIL has been returned from a call to a COM component.&amp;#x000D;&amp;#x000A;   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor..ctor(IServiceProvider serviceProvider, String filePath, IVsHierarchy hierarchyOpt, Boolean needsSave, Boolean needsUndoDisabled)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.RoslynVisualStudioWorkspace.OpenInvisibleEditor(DocumentId documentId)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId, SourceText newText)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyAnalyzerConfigDocumentTextChanged(DocumentId documentId, SourceText newText)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace, ImmutableArray`1 operations, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.Apply(Workspace workspace, Document fromDocument, ImmutableArray`1 operations, String title, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;lt;&amp;gt;c__DisplayClass20_0.&amp;lt;InvokeCore&amp;gt;b__0()&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager, Object extension, Action action)&amp;#x000D;&amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;/description&gt;
  &lt;/entry&gt;
```</Description>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>21/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39861</IssueID>
    <Title>Index From End Operator Causing Error MSB6006 "csc.exe" exited with code -2146232797</Title>
    <Description>VS2019 Version 16.3.9.
Console App targeting .NET Core 3.0

&gt; MSB6006 "csc.exe" exited with code -2146232797

When trying to build this...

```
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        IList&lt;int&gt; list = new int[1];
        list[^1] = list[^1] + 1; //&lt;-This line works fine
        list[^1] += 1; //&lt;-Errors During Build 
    }
}
```</Description>
    <CreatedDate>18/11/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39827</IssueID>
    <Title>Add option to default all analyzer rules to a specific severity</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/819126/add-option-to-default-all-analyzer-rules-to-a-spec.html)._

---
It would be nice for the purpose of organization and control if all analyzers could be defaulted to a severity.

One could then default all rules to 'None' and then opt-in on all rules they care about.

The current pattern can be hard to track since rules have a variety of defaults, some of which a user might agree with or not.

This provides a clear way to do both opt-in and opt-out patterns for analyzers.

Possibly it would be good if this was on a per analyzer namespace basis.

---
### Original Comments

#### Visual Studio Feedback System on 11/13/2019, 11:22 PM: 

Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
    <CreatedDate>14/11/2019</CreatedDate>
    <ClosedDate>04/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39803</IssueID>
    <Title>Roslyn NormalizeWhitespace messing with InterpolatedStringExpressionSyntax statements</Title>
    <Description>**Version Used**: Please see the packages.config. Microsoft.CodeAnalysis packages 2.6.0

**Steps to Reproduce**:

```
static void Main(string[] args)
        {
            var workspace = new Microsoft.CodeAnalysis.AdhocWorkspace();
            var projectId = Microsoft.CodeAnalysis.ProjectId.CreateNewId();
            var versionStamp = Microsoft.CodeAnalysis.VersionStamp.Create();
            var projectInfo = ProjectInfo.Create(projectId, versionStamp, "NewProject", "projName", Microsoft.CodeAnalysis.LanguageNames.CSharp);
            var newProject = workspace.AddProject(projectInfo);

            Console.WriteLine("i");
          
            var sourceText = SourceText.From(
              @"
                  using System;
                  using System.IO;
                  using System.Linq;
                  using System.Text;

                  namespace HelloWorld
                  {
                      class Program
                      {
                          static void Main(string[] args)
                          {
                              int i = 0;                           
                                
                              /**
                               Roslyn normalize whitespace issue
                              **/
                           var a = "1234";
                           var empSsn = $"{int.Parse(a):000000000}";
                          }

                      }
                  }");

            var document = workspace.AddDocument(newProject.Id, "NewFile.cs", sourceText);
            var syntaxRoot = document.GetSyntaxRootAsync().Result;

            var changedSyntaxRoot = syntaxRoot.NormalizeWhitespace();
            

            Console.Read();
        }
```

**Expected Behavior**:

```
 var empSsn = $"{int.Parse(a):000000000}";
```
**Actual Behavior**:

```
 var empSsn = $"{int.Parse(a): 000000000}";
```

Adds space after **Colon ":"**
</Description>
    <CreatedDate>13/11/2019</CreatedDate>
    <ClosedDate>13/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39788</IssueID>
    <Title>Method/property intellisense tooltips should show contents of &lt;exception&gt; XML tags.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/800099/methodproperty-intellisense-tooltips-should-show-c.html)._

---
''' &amp;lt;summary&amp;gt;
''' Retrieves the ADO.NET connection string.
''' &amp;lt;/summary&amp;gt;
''' &amp;lt;param name=&amp;quot;session&amp;quot;&amp;gt;The session state.&amp;lt;/param&amp;gt;
''' &amp;lt;returns&amp;gt;The ADO.NET connection string.&amp;lt;/returns&amp;gt;
''' &amp;lt;exception cref=&amp;quot;Exception&amp;quot;&amp;gt;if the connection string was not found.&amp;lt;/exception&amp;gt;
&amp;lt;Extension()&amp;gt;
Public Function GetConnectionString(ByVal session As HttpSessionState)\
...
End Function

So now if I hover over `GetConnectionString` I get a nice tooltip but for the exception it just says Exception, and the contents of the &amp;lt;exception&amp;gt; tag are nowhere to be found. It would be nice to have this in the tooltip, e.g. &amp;quot;Exception if the connection string was not found.&amp;quot;

This feature request applies to both VB and C#, but the example I have at the moment is VB.

---
### Original Comments

#### Visual Studio Feedback System on 10/31/2019, 07:41 PM: 

Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
    <CreatedDate>12/11/2019</CreatedDate>
    <ClosedDate>12/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39715</IssueID>
    <Title>MisplacedUsingDirectivesDiagnosticAnalyzer crashes with ArgumentOutOfRangeException</Title>
    <Description>**Version Used**: 
Version 16.5.0 Preview 1.0 [29506.167.master]

**Steps to Reproduce**:

``` C#
namespace Microsoft.VisualStudio.ProjectSystem.Build
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.ComponentModel.Composition;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Build.Execution;
    using Microsoft.Build.Framework;
    using Microsoft.VisualStudio.ProjectServices;
    using Microsoft.VisualStudio.Threading;

    /// &lt;summary&gt;
    /// Standard implementation of the &lt;see cref="IDesignTimeBuildServiceBridge"/&gt; service.
    /// &lt;/summary&gt;
    [Export(typeof(IDesignTimeBuildManagerService))]
    [Export(typeof(IDesignTimeBuildManagerServiceInternal))]
    [Export(typeof(IDesignTimeBuildCacheParticipant))]
    [AppliesTo(ProjectCapabilities.AlwaysApplicable)]
    [Order(int.MaxValue)]
    internal partial class DesignTimeBuildManagerService : IDesignTimeBuildManagerServiceInternal, IDesignTimeBuildCacheParticipant
    {
[...]
   }
```


```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.MisplacedUsingDirectives.MisplacedUsingDirectivesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentOutOfRangeException' with message 'Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index'.	Microsoft.VisualStudio.ProjectSystem.Implementation		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.MisplacedUsingDirectives.MisplacedUsingDirectivesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.VisualStudio.ProjectSystem.Implementation
SyntaxTree: C:\CPS\src\Microsoft.VisualStudio.ProjectSystem.Implementation\Build\DesignTimeBuildManagerService.cs
SyntaxNode: namespace Microsoft.VisualStudio ... [NamespaceDeclarationSyntax]@[301..30792) (6,0)-(646,1)

System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at Microsoft.CodeAnalysis.AnalyzerConfigSet.SequenceEqualComparer.Equals(List`1 x, List`1 y)
   at Microsoft.CodeAnalysis.ConcurrentCache`2.TryAdd(TKey key, TValue value)
   at Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath(String sourcePath)
   at Microsoft.CodeAnalysis.ProjectState.WorkspaceAnalyzerConfigOptionsProvider.GetOptions(SyntaxTree tree)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.GetFilteredDiagnostic(Diagnostic diagnostic, Compilation compilation, AnalyzerOptions analyzerOptions)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;&gt;c__DisplayClass117_0.&lt;GetDiagnosticSink&gt;b__0(Diagnostic diagnostic, DiagnosticAnalyzer analyzer, Boolean isSyntaxDiagnostic)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.AnalyzerDiagnosticReporter.AddDiagnostic(Diagnostic diagnostic)
   at Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Diagnostic diagnostic)
   at Microsoft.CodeAnalysis.CSharp.MisplacedUsingDirectives.MisplacedUsingDirectivesDiagnosticAnalyzer.ReportDiagnostics(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, IEnumerable`1 usingDirectives, CodeStyleOption`1 option)
   at Microsoft.CodeAnalysis.CSharp.MisplacedUsingDirectives.MisplacedUsingDirectivesDiagnosticAnalyzer.AnalyzeNamespaceNode(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`1.&lt;ExecuteSyntaxNodeAction&gt;b__55_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.

```</Description>
    <CreatedDate>07/11/2019</CreatedDate>
    <ClosedDate>07/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39681</IssueID>
    <Title>Wrapping a call with [MaybeNullWhen] results in incorrect compiler warnings</Title>
    <Description>**Version Used**: 
dotnet sdk 3.0.100

**Steps to Reproduce**:

1. `dotnet new console`
2. Add `&lt;Nullable&gt;enable` to the .csproj file:
```xml
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3&lt;/TargetFramework&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
  &lt;/PropertyGroup&gt;
```
3. Add a method with a `[MaybeNullWhen]` attribute that wraps a call to another method using a `[MaybeNullWhen]` attribute. Eg:

```c#
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace MaybeNullWhen_Propagation
{
    class Program
    {
        private Dictionary&lt;int, Process&gt; _processes = new Dictionary&lt;int, Process&gt;();

        public bool TryGetProcessById(int processId, [MaybeNullWhen(false)] out Process process)
        {
            return _processes.TryGetValue(processId, out process);
        }

        public static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
```
4. `dotnet build`

**Expected Behavior**:
No warnings

**Actual Behavior**:
Received warning CS8601

```
Program.cs(14,58): warning CS8601: Possible null reference assignment. [C:\src\cc\test-cases\MaybeNullWhen-Propagation\MaybeNullWhen-Propagation.csproj]
    1 Warning(s)
    0 Error(s)
```

I'm not able to find a good workaround without disabling a warning. Using an additional local variable, and then assigning null to the `out` param when returning false, results in a different warning:

```c#
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace MaybeNullWhen_Propagation
{
    class Program
    {
        private Dictionary&lt;int, Process&gt; _processes = new Dictionary&lt;int, Process&gt;();

        public bool TryGetProcessById(int processId, [MaybeNullWhen(false)] out Process process)
        {
            if (_processes.TryGetValue(processId, out Process? p))
            {
                process = p;
                return true;
            }
            else
            {
                process = null;
                return false;
            }
        }

        public static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
```

Results in:
```
Program.cs(21,27): warning CS8625: Cannot convert null literal to non-nullable reference type. [C:\src\cc\test-cases\MaybeNullWhen-Propagation\MaybeNullWhen-Propagation.csproj]
    1 Warning(s)
    0 Error(s)
```
</Description>
    <CreatedDate>04/11/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39656</IssueID>
    <Title>CS8717 mis-fires for MaybeNullWhen out parameter</Title>
    <Description>**Version Used**: VS 16.5 Preview 1 (29502.12.master)

**Steps to Reproduce**:

1. Create a .NET Core 3.0 library or console app.
2. Introduce a source file with this content:

```cs
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

#nullable enable

class WKD&lt;TValue&gt;
{
    private readonly Dictionary&lt;int, TValue&gt; dictionary = new Dictionary&lt;int, TValue&gt;();

    public bool TryGetValue(int key, [MaybeNullWhen(false)] out TValue value)
    {
        return this.dictionary.TryGetValue(key, out value);
    }
}
``` 

**Expected Behavior**:

No warnings. I declare that `value` may be null when false is returned just like the method I'm calling.

**Actual Behavior**:

&gt; Warning	CS8717	A member returning a [MaybeNull] value introduces a null value when 'TValue' is a non-nullable reference type.	

![image](https://user-images.githubusercontent.com/3548/68086519-31ca9980-fe0a-11e9-9c3d-efb883f0c17e.png)

I can't figure out any code change other than suppressing the warning with `#pragma` to eliminate the warning.</Description>
    <CreatedDate>03/11/2019</CreatedDate>
    <ClosedDate>14/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39628</IssueID>
    <Title>Internal Compiler Error (with Stacktrace)</Title>
    <Description>**Version Used**: 

VS2019 16.3.7

The bug triggered by our backend code. The codebase **compiles fine until at least VS2019 16.2.5.**

**Steps to Reproduce**:

1. Compile using MSBuild

**Expected Behavior**:
Compiles fine.
**Actual Behavior**:

C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets(59,5): error MSB6006: "csc.exe" exited with code -2146232797.

Stacktrace:
```
Application: VBCSCompiler.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidCastException: Unable to cast object of type 'ImplicitValuedEnumConstantSymbol' to type 'Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol'.
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.ConvertConcatExprToString(SyntaxNode syntax, BoundExpression expr)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteStringConcatenation(SyntaxNode syntax, BinaryOperatorKind operatorKind, BoundExpression loweredLeft, BoundExpression loweredRight, TypeSymbol type)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeBinaryOperator(BoundBinaryOperator oldNode, SyntaxNode syntax, BinaryOperatorKind operatorKind, BoundExpression loweredLeft, BoundExpression loweredRight, TypeSymbol type, MethodSymbol method, Boolean isPointerElementAccess, Boolean isCompoundAssignment, BoundUnaryOperator applyParentUnaryOperator)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBinaryOperator(BoundBinaryOperator node, BoundUnaryOperator applyParentUnaryOperator)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitExpressionImpl(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitReturnStatement(BoundReturnStatement node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitReturnStatement(BoundReturnStatement node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitPossibleUsingDeclaration(BoundStatement node, ImmutableArray`1 statements, Int32 statementIndex, Boolean&amp; replacedLocalDeclarations)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitStatementSubList(ArrayBuilder`1 builder, ImmutableArray`1 statements, Int32 startIndex)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.ConvertConcatExprToString(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteStringConcatenation(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeBinaryOperator(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Boolean, Boolean, Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBinaryOperator(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator, Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitExpressionImpl(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.BoundReturnStatement)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.BoundReturnStatement)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitPossibleUsingDeclaration(Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;, Int32, Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitStatementSubList(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;, Int32)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Boolean ByRef, Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```</Description>
    <CreatedDate>01/11/2019</CreatedDate>
    <ClosedDate>07/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39578</IssueID>
    <Title>IsNodeUnderselected crash</Title>
    <Description>This is probably a dupe.  but i thought we already fixed this.  I'm still getting this in Preview 2 though:

```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

If htis is a dupe, feel free to close.  However, if this was expected to be fixed by now, i hope this helps!</Description>
    <CreatedDate>29/10/2019</CreatedDate>
    <ClosedDate>30/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39553</IssueID>
    <Title>RPS: Split RPS tests into smaller tests</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
    <CreatedDate>28/10/2019</CreatedDate>
    <ClosedDate>28/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39504</IssueID>
    <Title>New line setting for C# switch expression is missing</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/785993/new-line-setting-for-c-switch-expression-is-missin.html)._

---
I hope that &amp;quot;Place open brace on new line for switch expression&amp;quot; setting will be added to 
&amp;quot;Options -&amp;gt; Text Editor -&amp;gt; C# -&amp;gt; Code Style -&amp;gt; Formatting -&amp;gt; New Lines -&amp;gt; New line options for braces&amp;quot;.

Visual Studio now formats the switch expression as follows.

```cs
int value = sample switch
{
    EnumSample.A =&amp;gt; 0,
    EnumSample.B =&amp;gt; 1,
    _ =&amp;gt; 2,
};
```

But I want to format as follows.

```cs
int value = sample switch {
    EnumSample.A =&amp;gt; 0,
    EnumSample.B =&amp;gt; 1,
    _ =&amp;gt; 2,
};
```

---
### Original Comments

#### Visual Studio Feedback System on 10/21/2019, 11:04 PM: 

Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
    <CreatedDate>24/10/2019</CreatedDate>
    <ClosedDate>24/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39475</IssueID>
    <Title>Live Share - Support Empty -&gt; Nonempty Workspace</Title>
    <Description>Live Share recently added a feature for empty workspace sharing. After sharing an empty workspace, the host may then open a solution/folder. Today, Roslyn will not update its remote workspace to reflect the added solution/folder, which results in the absence of many language feature, e.g. FAR and go to def. Roslyn should subscribe to a "workspace roots changed event" and update the remote workspace appropriately. 
</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>02/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39362</IssueID>
    <Title>'CS8602 Dereference of a possibly null reference' in a local function</Title>
    <Description>**Version Used**: New in VS 16.4p2, not present in 16.4p1 or 16.3.5

The local function is never called from a point where `value` might be null:

```cs
class C
{
    void M()
    {
        string? value = null;
        value = "Hi";

        LocalFunction();

        void LocalFunction()
        {
            // CS8602 Dereference of a possibly null reference.
            // ↓
            value.ToString();
        }
    }
}
```
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39355</IssueID>
    <Title>Add switch-case collapse</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/776275/add-switch-case-collapse.html)._

---
&amp;quot;switch&amp;quot; already has it, might as well add to &amp;quot;case&amp;quot;. Having to type #region is kind of annoying.

---
### Original Comments

#### Jane Wu [MSFT] on 10/14/2019, 07:53 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>23/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39345</IssueID>
    <Title>"Make field readonly" doesn't consider designer writes</Title>
    <Description>**Version Used**: Version 16.4.0 Preview 3.0 [29416.158.master]

**Steps to Reproduce**:

## `C.cs`

```c#
partial class C
{
    private object _foo; // IDE0044 Add readonly modifier

    public C()
    {
        _foo = new object();
    }

    public int O() =&gt; _foo.GetHashCode();
}
```

## `C.Designer.cs`

```c#
partial class C
{
    void M()
    {
        _foo = null;
    }
}
```

**Expected Behavior**:

Do not suggest adding `readonly` modifier when field has writes from designer files.

**Actual Behavior**:

Adding `readonly` is suggested.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39298</IssueID>
    <Title>Roslyn doesn't understand 'string.IsNullOrWhiteSpace(x) == false' null check</Title>
    <Description>**Version Used**: 
.NET Core SDK 3.0.100

**Steps to Reproduce**:
Compile the following code:

```cs
#nullable enable
class C
{
    string? field;

    void M1(C c)
    {
        if (!string.IsNullOrWhiteSpace(c.field))
        {
            c.field.ToString();
        }
    }

    void M2(C c)
    {
        if (string.IsNullOrWhiteSpace(c.field) == false)
        {
            c.field.ToString(); // incorrect CS8602
        }
    }
}
```

**Expected Behavior**:
Both methods report no warnings

**Actual Behavior**:
`M2` has an incorrect warning `CS8602: Dereference of a possibly null reference` reported for `c.field.ToString()`

Might be related to #39264 ?</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39293</IssueID>
    <Title>CodeRefactoringService IntroduceVariable fails with ArgumentOutOfRangeException</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 3.0 [29409.185.master]

![image](https://user-images.githubusercontent.com/41759/66856739-b5dfde80-ef3a-11e9-8a5a-28f9e7a0654c.png)

while editing `src\EditorFeatures\Test\EditAndContinue\EditAndContinueWorkspaceServiceTests.cs` in Roslyn.sln.

```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39290</IssueID>
    <Title>CS8602 No warning/error should be given when using string.IsNullOrEmpty and returning that same string within ?: operator</Title>
    <Description>**Version Used**: 
dotnet 3.0.100
Visual Studio 2019 version 16.3.4

**Steps to Reproduce**:
```C#
class Test
{
    public string? MyVar { get; set; }
    public string Computed =&gt; !string.IsNullOrEmpty(MyVar) ? MyVar : string.Empty;
}
```

**Expected Behavior**:
No warning/error should be given here, as the NullOrEmpty check suggests that `null` is never returned.

**Actual Behavior**:
The compiler throws a warning (or error when WarningsAsErrors is enabled) that the condition is possibly returning null.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39289</IssueID>
    <Title>Provide a hidden diagnostic for unnecessary suppression operator</Title>
    <Description>Correct implementation of the "Unnecessary suppression operator" analyzer would benefit from a hidden compiler diagnostic similar to the one reported for unnecessary using directives. This diagnostic would be available for _all_ unnecessary suppression operators (including ones in generated code). The IDE team would provide an analyzer that reported the locations which are not in generated code (similar to IDE0005).</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39174</IssueID>
    <Title>Renaming local variable with "Attribute" suffix inserts another "Attribute" in the name</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/66525688-21ddc500-eaab-11e9-8021-34993d1ecfe1.png)

**Steps to Reproduce**:
 
```C#
class C
{
        void F()
        {
            C myAttribute = new C();
        }
}
```

Inline rename `myAttribute`.

**Expected Behavior**:

No `Attribute` duplication.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/41759/66525732-4043c080-eaab-11e9-9a31-afc7b5ee9753.png)
</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39120</IssueID>
    <Title>IntroduceVariableCondeRefactoringProvider threw an exception</Title>
    <Description>```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39113</IssueID>
    <Title>Add support for xmldoc tags on local functions (C# 7.0+)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/739055/add-support-for-xmldoc-tags-on-local-functions-c-7.html)._

---
Support for [local functions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions) was added in C# 7.0, which is awesome.  However, decorating a local function with `&amp;lt;summary&amp;gt;...&amp;lt;/summary&amp;gt; ` tags will not produce any Intellisense in Visual Studio 2019 (as of version 16.2.5):
```
private static string GetText(string path, string filename)
{
    /// &amp;lt;summary&amp;gt;
    /// Append a path separator character to the specified file path.
    /// &amp;lt;/summary&amp;gt;
    string AppendPathSeparator(string filepath)
    {
        if (!filepath. EndsWith(@&amp;quot;\&amp;quot;))
           filepath += @&amp;quot;\&amp;quot;;

return filepath;   
    }

// No Intellisense for the &amp;quot;AppendPathSeparator&amp;quot; local function will appear here.
    var sr = File.OpenText(AppendPathSeparator(path) + filename);
    var text = sr. ReadToEnd();
    return text;
} 
```

It would be great to have some way of producing Intellisense for local functions.

---
### Original Comments

#### Jane Wu [MSFT] on 9/18/2019, 08:07 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39111</IssueID>
    <Title>Automatically fix naming style across file/project/solution</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/740419/automatically-fix-naming-style-across-fileprojects.html)._

---
Would love do see something like what Resharper does: https://www.jetbrains.com/help/resharper/Coding_Assistance__Naming_Style.html#detect

I especially need it when doing the following:
- I want to create C# classes from some json file. The Paste Special feature is great for that.
- However, the sample json files I have usually use camel case
- I need to change to Pascal case
- Today, VS only allows me to do it one by one, which becomes very tedious as I have tens of properties.

---
### Original Comments

#### Jane Wu [MSFT] on 9/20/2019, 01:16 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39000</IssueID>
    <Title>Crash in OOP tore down VS (hard crash, not yellow bar).</Title>
    <Description>Watson bucket and other relevant information.

```
Fault bucket 125730739576, type 5
Event Name: PerfWatsonVS12Data
Response: Not available
Cab Id: 1196763729810304088

Problem signature:
P1: PerfWatsonTcdb
P2: 0
P3: 0
P4: 0
P5: 0
P6: 
P7: 
P8: 
P9: 
P10: 

Attached files:
\\?\C:\Users\cyrus\AppData\Local\Temp\VSTelem.Out\201910021820_D16.4_16.4.29319.158_17696_b97f4571-7b9e-4f72-a70f-8ea07281a5cd.tcdb
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6675.tmp.WERInternalMetadata.xml
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER66A5.tmp.xml
WPR_initiated_DiagTrackMiniLogger_OneTrace User Logger 20190930 1 Event Collector_0_inject.etl
\\?\C:\Users\cyrus\AppData\Local\Temp\WER66E5.tmp.etl
WPR_initiated_DiagTrackMiniLogger_WPR System Collector_inject.etl
\\?\C:\Users\cyrus\AppData\Local\Temp\WER66F5.tmp.etl
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6706.tmp.csv
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6765.tmp.txt
\\?\C:\Users\cyrus\AppData\Local\Temp\WER6A90.tmp.WERDataCollectionStatus.txt

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportArchive\NonCritical_PerfWatsonTcdb_688f135dd185f2a8133a474a2518efc6ce6cc4a_00000000_cab_9769bf93-8256-46a3-9794-2743f97428f4

Analysis symbol: 
Rechecking for solution: 0
Report Id: 9769bf93-8256-46a3-9794-2743f97428f4
Report Status: 268435464
Hashed bucket: fb30d2b9a7acf0305d4da51668259751
Cab Guid: 797189b6-552d-47a5-b09b-c245836a2c58
```

```
Faulting application name: devenv.exe, version: 16.4.29319.158, time stamp: 0x5d845bb8
Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000
Exception code: 0x80131623
Fault offset: 0x62ac6b4a
Faulting process id: 0x4ee8
Faulting application start time: 0x01d578b6a67c1fc8
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\Common7\IDE\devenv.exe
Faulting module path: unknown
Report Id: bff26ea4-c774-46df-9501-c81b19986300
Faulting package full name: 
Faulting package-relative application ID: 
```

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidOperationException: This instance must be flushed before being reinitialized.
   at Nerdbank.Streams.BufferTextWriter.Initialize(IBufferWriter`1 bufferWriter, Encoding encoding)
   at StreamJsonRpc.JsonMessageFormatter.WriteJToken(IBufferWriter`1 contentBuffer, JToken json)
   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer, JsonRpcMessage message)
   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content, CancellationToken cancellationToken)
   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken)
   at StreamJsonRpc.MessageHandlerBase.&lt;WriteAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at StreamJsonRpc.JsonRpc.&lt;TransmitAsync&gt;d__115.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()
   at StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__94`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Framework.RemoteServiceBroker.&lt;GetPipeAsync&gt;d__29.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Client.HubClient.&lt;GetPipeAsync&gt;d__33.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Client.HubClient.&lt;RequestServiceAsync&gt;d__30.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RetryRemoteCallAsync&gt;d__0`2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RequestServiceAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.&lt;TryCreateNewConnectionAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.&lt;TryGetConnectionFromPoolAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.&lt;TryRunRemoteAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.SolutionChecksumUpdater.&lt;&gt;c__DisplayClass17_0.&lt;&lt;PushTextChanges&gt;b__0&gt;d.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)
   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

```</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38931</IssueID>
    <Title>Intellsense left hand talk to right</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/730687/intellsense-left-hand-talk-to-right.html)._

---
There are a number of rules and tools to help the developer. One of these is being able to add a missing USING reference. Another is enforcing rules about where a USING statement should appear in a code file. PLEASE make it so the two understand each other. It's really annoying to have an automatically added 'anything' immediatley become a problem.

---
### Original Comments

#### Jane Wu [MSFT] on 9/11/2019, 11:44 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38918</IssueID>
    <Title>Inline Rename: Cannot type "." when renaming namespace</Title>
    <Description>**Version Used**: 3.3

**Steps to Reproduce**:

1. Right-click a namespace in any C# file.
2. Select "Rename" menu item.
3. Type a new namespace that include a "." character.

**Expected Behavior**:

You can type or paste a "." character as long as it is a valid namespace string.

**Actual Behavior**:

You cannot type a "." character. If you attempt to paste one, the outline becomes red, and the popup in the corner of the editor says "The new name is not a valid identifier."

**Bonus**: In an ASP.NET Core app, if you hit return anyway at this point, a yellow bar appears indicating that a `NotSupportedException` has been raised.

```
    &lt;description&gt;System.NotSupportedException: Changing document &amp;apos;C:\Users\sandy\source\repos\WebApplication1\WebApplication1\Pages\_ViewImports.g.cs&amp;apos; is not supported.&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename(Solution newSolution, IWaitContext waitContext)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore(IWaitContext waitContext, Boolean previewChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.&amp;lt;&amp;gt;c__DisplayClass76_0.&amp;lt;Commit&amp;gt;b__0(IWaitContext waitContext)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(String title, String message, Boolean allowCancel, Boolean showProgress, Action`1 action)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit(Boolean previewChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(ReturnKeyCommandArgs args, CommandExecutionContext context)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&amp;lt;&amp;gt;c__DisplayClass13_1`1.&amp;lt;Execute&amp;gt;b__1()&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter)&amp;#x000D;&amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;/description&gt;
```

In a simple console app, you can hit return and the namespace rename will be successful.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38896</IssueID>
    <Title>The IDE does not respect 'open brace on new line' preferences for switch expressions.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/719582/the-ide-does-not-respect-open-brace-on-new-line-pr.html)._

---
The 'fix formatting' option and automatic formatting seem to really want to put the open brace on a new line in code such as the following:
```
allWires.Append(i switch {
	0 =&amp;gt; &amp;quot;CutFirstWire CutSecondWire&amp;quot;,
	1 =&amp;gt; &amp;quot; CutThirdWire&amp;quot;,
	2 =&amp;gt; &amp;quot; CutFourthWire&amp;quot;,
	3 =&amp;gt; &amp;quot; CutFifthWire&amp;quot;,
	_ =&amp;gt; &amp;quot;&amp;quot;
});
```
This occurs even with `csharp_new_line_before_open_brace = none` specified in `.editorconfig`, and there is no option in the GUI for switch expressions. Such an option should be added.

---
### Original Comments

#### Visual Studio Feedback System on 9/2/2019, 00:38 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38865</IssueID>
    <Title>Crash in suppression</Title>
    <Description>Not sure how to repro this.

Got this error:

```

System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. Parameter name: length   at Microsoft.CodeAnalysis.Text.TextSpan..ctor(Int32 start, Int32 length)   at
 Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaHelpers.NormalizeTriviaOnTokens(AbstractSuppressionCodeFixProvider fixer, Document&amp; document, SuppressionTargetInfo&amp; suppressionTargetInfo)   at
 Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.&lt;GetSuppressionsAsync&gt;d__30.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at
 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at
 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.&lt;GetSuppressionsAsync&gt;d__28.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at
 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at
 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.&lt;PerformFunctionAsync&gt;d__3`1.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at
 Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
--
```</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38857</IssueID>
    <Title>Crash in add-import</Title>
    <Description>Getting this callstack that is bringing down add-import:

```
System.InvalidOperationException : This instance must be flushed before being reinitialized.
   at Nerdbank.Streams.BufferTextWriter.Initialize(IBufferWriter`1 bufferWriter,Encoding encoding)
   at StreamJsonRpc.JsonMessageFormatter.WriteJToken(IBufferWriter`1 contentBuffer,JToken json)
   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer,JsonRpcMessage message)
   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content,CancellationToken cancellationToken)
   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content,CancellationToken cancellationToken)
   at async StreamJsonRpc.MessageHandlerBase.WriteAsync(&lt;Unknown Parameters&gt;)
   at async StreamJsonRpc.JsonRpc.TransmitAsync(&lt;Unknown Parameters&gt;)
   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()
   at async StreamJsonRpc.JsonRpc.InvokeCoreAsync[TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetPipeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.ServiceHub.Client.HubClient.GetPipeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.ServiceHub.Client.HubClient.RequestServiceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.RetryRemoteCallAsync[TException,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.RequestServiceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.TryCreateNewConnectionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.TryCreateSessionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.TryCreateCodeAnalysisSessionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.TryRunCodeAnalysisRemoteAsync[T](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetFixesAsync[TSimpleNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetFixesForDiagnosticsAsync[TSimpleNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.RegisterCodeFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.CodeFixService.GetCodeFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
```

Something is up with OOP.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38812</IssueID>
    <Title>C#8 compiler reports CS8620 for IEnumerable&lt;T?&gt; after filtering for not null</Title>
    <Description>**Version Used**: 
dotnet-sdk-3.0.100

**Steps to Reproduce**:
enable nullable
```csharp
public static void Run()
{
    var enumerable = Enumerable.Range(1, 10).Select(i =&gt; i % 2 == 0 ? null : i.ToString());
    var notNulls = enumerable.Where(item =&gt; item != null);
    Check(notNulls);
}
private static void Check(IEnumerable&lt;string&gt; notNull) { }
```

**Expected Behavior**:
no warning

**Actual Behavior**:
Warning CS8620 Argument of type 'IEnumerable&lt;string?&gt;' cannot be used for parameter 'notNull' of type 'IEnumerable&lt;string&gt;' in 'void Check(IEnumerable&lt;string&gt; notNull)' due to differences in the nullability of reference types.

my current workaround is
```csharp
    var notNulls = enumerable.Where(item =&gt; item != null).Select(item =&gt; item!);
```</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>13/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38795</IssueID>
    <Title>Nullability-related bug producing BadImageFormatException</Title>
    <Description>While doing some NRE work on Npgsql, I came across a subtle bug that triggers a BadImageFormatException in runtime. Following is a minimal repro, using dotnet SDK 3.0.100-rc1-014190:

```c#
static class Program
{
    static void Main()
    {
        var x = typeof(Bar&lt;&gt;);
        Console.WriteLine(x);
    }
}

public class Bar&lt;T&gt;
{
    public override bool Equals(object? o) =&gt; o is Bar&lt;T&gt; range;
    public override int GetHashCode() =&gt; 0;
}
```

Disabling nullability specifically around the Equals method makes the error go away.

The repro is available in https://github.com/roji/CompilerNullabilityBug.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38791</IssueID>
    <Title>Compiler incorrectly interprets ?? operator and reports CS8602 on later dereference</Title>
    <Description>**Version Used**: .NET Core SDK 3.0.100-rc1-014190

**Steps to Reproduce**:

```
git clone https://github.com/aarnott/Nerdbank.Streams.git
cd Nerdbank.Streams
git checkout efceb295908f8d5fe1904ed139347fcf12c0871e
dotnet build src
```

**Expected Behavior**:

No warnings.

**Actual Behavior**:

```
StreamPipeReader.cs(128,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
StreamPipeWriter.cs(98,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(252,25): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(592,21): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(252,25): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
StreamPipeWriter.cs(98,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
StreamPipeReader.cs(128,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(592,21): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
```

Each of these warnings comes after a `??` operator. For example:

```cs
            if (this.flushCancellationSource?.IsCancellationRequested ?? true)
            {
                this.flushCancellationSource = new CancellationTokenSource();
            }

            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, this.flushCancellationSource.Token))
```

The compiler flags the last dereference of `this.flushCancellationSource` as a possible null dereference even though the if check above guarantees otherwise.</Description>
    <CreatedDate>21/09/2019</CreatedDate>
    <ClosedDate>22/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38782</IssueID>
    <Title>Problem with using common .editorconfig file (imported in csproj) in Visual Studio 2019 Preview 4</Title>
    <Description>**Version Used**: 

Visual Studio 2019 Preview 4
Microsoft.CodeAnalysis.FxCopAnalyzers v2.9.4

**Steps to Reproduce**:

I want to streamlime code analysis and the respetive rules accross multiple projects and teams.

We used to do that by having a NuGet package that imported analyzers to projects (Microsoft.CodeAnalysis.FxCopAnalyzers and StyleCop.Analyzers) and defined a ruleset to define how each rule was handled by VS (error, warning, etc.).

I have been trying to setup this using a common .editorconfig file instead of the ruleset. The problem is that settings like the following just seem to be ignored when the .editorconfig file is imported from a shared folder.

```
dotnet_diagnostic.CA1062.severity = error
```

For the purpose of testing this, I have a very simple scenario that illustrates the problem.

The .editorconfig file is as follows:

```
[*.cs]
dotnet_diagnostic.CA1062.severity = error
#dotnet_code_quality.null_check_validation_methods = NotNull
```

Now this file is imported in a csproj like this:

```
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
    &lt;PropertyGroup&gt;
        &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;/PropertyGroup&gt;
    &lt;Import Project="..\..\_Shared\Build.props" /&gt;
    &lt;ItemGroup&gt;
        &lt;PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.4"&gt;
            &lt;PrivateAssets&gt;All&lt;/PrivateAssets&gt;
        &lt;/PackageReference&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

Build.props is like this:

```
&lt;Project&gt;
    &lt;PropertyGroup&gt;
    &lt;SkipDefaultEditorConfigAsAdditionalFile&gt;true&lt;/SkipDefaultEditorConfigAsAdditionalFile&gt;
    &lt;/PropertyGroup&gt;
    &lt;ItemGroup Condition="Exists('$(MSBuildThisFileDirectory)\.editorconfig')" &gt;
        &lt;AdditionalFiles Include="$(MSBuildThisFileDirectory)\.editorconfig" /&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

**Expected Behavior**:

The following code is supposed to trigger an **error on CA1062** (validation of input):

```
public int Calculate(InputData input)
{
    SmartGuard.NotNull(nameof(input), input);
    if (this.Multiply)
    {
        return input.Value * 2;
    }
    else
    {
        return input.Value + 2;
    }
}
```

**Actual Behavior**:

But the result is a **warning**, which means that `CA1062.severity` is being ignored.

Now, if I change .editorconfig and uncomment the second line:

```
[*.cs]
dotnet_diagnostic.CA1062.severity = error
dotnet_code_quality.null_check_validation_methods = NotNull
```

The error goes way which means that `null_check_validation_methods` is being considered.

Why is that `CA1062.severity` is being ignored?

</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>28/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38777</IssueID>
    <Title>Warning IDE0044 - not valid</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/734633/warning-ide0044-not-valid.html)._

---
The following class gives a warning on the field Foo &amp;quot;IDE0044 Make field readonly&amp;quot; which seems invalid.
Public Class Class1
    Private Foo(10) As Integer    ' or Dim Foo

Public Sub Bar()     ' or Private Sub
        Foo(0) = 1
    End Sub
End Class

Also the &amp;quot;Quick Actions&amp;quot; provided are not valid, for example making it a property.

---
### Original Comments

#### Visual Studio Feedback System on 9/16/2019, 02:14 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39717</IssueID>
    <Title>VS Error List window missing errors from Output window on build</Title>
    <Description>**Visual Studio Version**:
Visual Studio Enterprise 2019 16.2.5

**Summary**:
I'm running into an issue where build errors that come from building a solution are reported in the Output window, but not in the Error List window.

Searching around, this looks like a symptom that never quite seems to go away, and has had multiple different causes in the past (typically, it seems, a race condition), so I've tried to get as reliable a repro as possible.  Trying out the steps from https://github.com/dotnet/project-system/issues/1411#issuecomment-277796618 seemed to do it, and I minimized it from there.

**Steps to Reproduce**:
1. File &gt; New &gt; Project...
1. Console App (.NET Core)
    - (name / location don't seem to matter)
1. Wait for background tasks to finish (bottom-left should say "No background tasks running." when clicked)
1. File &gt; Close Solution
1. Restart Visual Studio
1. Using an external text editor, edit the generated `Program.cs` file to have an error.
    - I changed "`using System;`" to "`using Cystum;`" for this.
1. Read the next two steps before continuing, because speed seems to matter.
1. File &gt; Recent Projects and Solutions &gt; (what should be the most recent solution)
1. Run "Build &gt; Build Solution" **as soon as** the "Build" menu becomes available

**Expected Behavior**:
The build fails, and the "Error List" window lists why.

**Actual Behavior**:
The build fails as expected, but the "Error List" window is empty.

The error does show up on the "Output" window; eventually, errors from future attempts do manage to make it into the "Error List" window.

**User Impact**:
With a much more complex solution, the window for reproducing this bug seems to be larger, to the point where I was worried I would have to live in the "Output" window for a while.</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>07/11/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38766</IssueID>
    <Title>Feature Request: NewLinesForBracesInMethodsWithMultilineParameters</Title>
    <Description>I was directed here from an `omnisharp-vscode` issue: https://github.com/OmniSharp/omnisharp-vscode/issues/3283

With dependency injection. I like my constructors formatted like this:

```
public MyClass(
    MyClass2 myClass2,
    MyClass3 myClass3
) {
    _myClass2 = myClass2;
    _myClass3 = myClass3;
}
```

However, the best I can do (that I know of) with the options given is:

```
public MyClass(
    MyClass2 myClass2,
    MyClass3 myClass3
) 
{ // gross
    _myClass2 = myClass2;
    _myClass3 = myClass3;
}
```

Is it possible to add a special option for that case? I'd still like a child constructor to appear like this:

```
public MyClass(
    MyClass2 myClass2,
    MyClass3 myClass3
) : base(myClass2, myClass3)
{
    _myClass2 = myClass2;
    _myClass3 = myClass3;
}
```</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38744</IssueID>
    <Title>'Convert switch statement to switch expression' (IDE0066) throws away comments</Title>
    <Description>example:

``` c#
using System;

static class P
{
    static void Main()
    {
        string input = Whatever();
        int size;
        // IDE0066 here
        switch(input)
        {
            case "abc": size = 12; break; // because magic
            case "def": size = 42; break; // important comment
            default: size = -1; break; // everything else
        }
        Console.WriteLine(size);
    }

    static string Whatever() =&gt; throw new NotImplementedException();
}
```

expected output:

``` c#
        var size = input switch
        {
            "abc" =&gt; 12, // because magic
            "def" =&gt; 42, // important comment
            _ =&gt; -1, // everything else
        };
```

actual output:

``` c#
        var size = input switch
        {
            "abc" =&gt; 12,
            "def" =&gt; 42,
            _ =&gt; -1,
        };
```

Note: I haven't thought through what this should do in the general case where comments could be on multiple lines, but; comments are important - throwing them away seems bad.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38728</IssueID>
    <Title>Bad Change Preview</Title>
    <Description>Original code:
![image](https://user-images.githubusercontent.com/2371880/65068892-665bc200-d93e-11e9-9544-a0a8ef42c200.png)
Invoking ctrl+. on the `localFunction` variable:
![image](https://user-images.githubusercontent.com/2371880/65068874-5cd25a00-d93e-11e9-93c2-d7575735c1e0.png)

Note that the refactoring worked as you'd expect, but the preview didn't show the change.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38572</IssueID>
    <Title>CS0103 Generate method preview shows empty line only</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61

**Steps to Reproduce**:
```C#
class Program
{
    static void Main()
    {
        Test();
    }

    void OtherMethod()
    {
    }
}
```
Preview the quick fix of generating the `Test()` method

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/10546952/64474455-0cecd980-d16d-11e9-9c69-cd64ce8a7dd2.png)

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/10546952/64474445-f6df1900-d16c-11e9-9b8b-a2bf8aea1559.png)
</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38567</IssueID>
    <Title>Unnecessary code colapse points </Title>
    <Description>**Version Used**: 
16.4.intpreview

**Steps to Reproduce**:
Have code with sufficient amount of constructs that have header and then block. Look at collapsible regions.

```
        /// &lt;summary&gt;
        /// Use this helper to register multiple refactorings (&lt;paramref name="actions"/&gt;).
        /// &lt;/summary&gt;
        internal static void RegisterRefactorings&lt;TCodeAction&gt;(
            this CodeRefactoringContext context, ImmutableArray&lt;TCodeAction&gt; actions)
            where TCodeAction : CodeAction
        {
            if (!actions.IsDefault)
            {
                foreach (var action in actions)
                {
                    context.RegisterRefactoring(action);
                }
            }
        }
````

![image](https://user-images.githubusercontent.com/1764721/64466836-e70df900-d0c8-11e9-8d71-3543dbf6209b.png)


**Expected Behavior**:
Only the top marked collapsible region is there.

**Actual Behavior**:
Both are, the lower one is redundant from UX point of view.

Useful:
![image](https://user-images.githubusercontent.com/1764721/64466920-47049f80-d0c9-11e9-8eb6-ef52ffee4164.png)

Not useful:
![image](https://user-images.githubusercontent.com/1764721/64466896-2fc5b200-d0c9-11e9-8e9b-0fdde809c7d1.png)

</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38552</IssueID>
    <Title>IDE1006 doesn't provide a "fix all"?</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

IDE1006 (naming violations) doesn't provide a "fix all".  My project has &gt; 1000 violations; how do I fix them all based on my editorconfig settings without going through one-by-one?</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38515</IssueID>
    <Title>Wrap parameters style should be configurable from code style</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/699244/wrap-parameters-style-should-be-configurable-from.html)._

---
When you right click on a method name you get options on the context menu to wrap and align parameters.

Rather than picking the style of wrapping each time it is used, I would like to be able to configure which style of wrapping is to be used for the whole solution in the code style options and save them to .editorConfig rather than having each developer choose on a case-by-ca se basis.

I would also like code cleanup to automatically wrap parameters using my chosen style when the line length is over a configured length.

---
### Original Comments

#### Jane Wu [MSFT] on 8/20/2019, 03:54 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38485</IssueID>
    <Title>C# compiler fails to parse is operator with a recursive pattern using type parameters</Title>
    <Description>**Version Used**: master (31 Aug 2019) on SharpLab

**Steps to Reproduce**:
1.  Create a type with generic type parameters:
```cs
public readonly struct Box&lt;T&gt;
{
    public T Obj { get; }

    public Box(T obj)
    {
        this.Obj = obj;
    }
}
```
2. Attempt to use that type in an `is` expression with recursive pattern matching:
```cs
public static bool RecursiveIsBox&lt;T&gt;(object x)
{
    return x is Box&lt;T&gt; { Obj: T _ };
}
```
3. The following 5 errors are emitted:
```
error CS1525: Invalid expression term '{'
error CS1002: ; expected
error CS1002: ; expected
error CS0305: Using the generic type 'Box&lt;T&gt;' requires 1 type arguments
error CS0119: 'T' is a type, which is not valid in the given context
```

p.s.: SharpLab sample [here](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEDMACBcIBMD2AdgDYCeGsCArgMYwYBC+AHgDwAqAfALABQA3nwzCM6DOwwB5YACsM/DAHM4MANwYAvnyEixTZgAoJ+WQEodwwbxE2MMABYBLKADppcgLwYTM1Rc18Wrx8YigAjABsogBMjHxWNqGRGMD4+MQYAJJQ+hycBj5wdBjM5tYiCbbCKADsJRjOjCx5KSwYAGTtrcxusg1Q4hgA+n7lwkE2/klRqekYAEpFVAhQjgBucNm5XAWyRfSl/pVVtfWN25zyUrIgg0OaozZBGkA=)

**Expected Behavior**:
The code is parsed and accepted and works in the same way as if the operations were done separately as in the following code:
```cs
public static bool IsBox&lt;T&gt;(object x)
{
    return x is Box&lt;T&gt; box &amp;&amp; box.Obj is T _;
}
```

**Actual Behavior**:
The errors are emitted.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38464</IssueID>
    <Title>Flaky test `VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict`</Title>
    <Description>Failed in https://dev.azure.com/dnceng/public/_build/results?buildId=335629&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=9892310&amp;resultId=100349&amp;paneView=debug

```
Assert.Equal() Failure\r\nExpected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[143..146), [208..211)]\r\nActual: List&lt;Span&gt; [[143..146), [208..211), [208..211)]

   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_19_VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 723
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```
</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38463</IssueID>
    <Title>Flaky test `CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping`</Title>
    <Description>Failed at https://dev.azure.com/dnceng/public/_build/results?buildId=335585&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=9891168&amp;resultId=100396&amp;paneView=debug

``` none
Assert.Equal() Failure\r\nExpected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[46..49), [75..78)]\r\nActual: List&lt;Span&gt; [[46..49), [75..78), [75..78)]

   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_22_CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 935
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

```
</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38442</IssueID>
    <Title>DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer: ArgumentOutOfRange in GetAnonymousFunctionControlFlowGraph</Title>
    <Description>**Version Used**: 
Roslyn 3.3

Seeing a first-chance ArgumentOutOfRangeException in DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer on a pretty complicated type. I was unable to isolate a short repro. Long repro available upon request.

This could be a dupe of https://github.com/dotnet/roslyn/issues/29836 but I'm filing just in case.
The ArgumentOutOfRange is caught here:
https://github.com/dotnet/roslyn-analyzers/blob/3f44df7de96267a2b0bf7a4ba6a0086fc560fc18/src/Utilities/FlowAnalysis/FlowAnalysis/Framework/DataFlow/AbstractDataFlowAnalysisContext.cs#L134-L140

See also: https://github.com/dotnet/roslyn-analyzers/issues/1812

```
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph.GetAnonymousFunctionControlFlowGraph
-- | -- | --
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext`4.GetAnonymousFunctionControlFlowGraph
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass216_0.&lt;VisitInvocation_Lambda&gt;g__getCfg\|0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_Lambda
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_Lambda
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass211_3.&lt;VisitInvocation_LambdaOrDelegateOrLocalFunction&gt;b__7
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass211_0.&lt;VisitInvocation_LambdaOrDelegateOrLocalFunction&gt;g__AnalyzePossibleTargetInvocation\|5
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass211_0.&lt;VisitInvocation_LambdaOrDelegateOrLocalFunction&gt;g__AnalyzePossibleTargetInvocations\|4
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_LambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.FlowBranch
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.FlowBranch
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+&lt;&gt;c__DisplayClass8_0.&lt;TryGetOrComputeResultCore&gt;b__0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitSimpleAssignment
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseSimpleAssignmentOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+&lt;&gt;c__DisplayClass8_0.&lt;TryGetOrComputeResultCore&gt;b__0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitConversion
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitConversion
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseConversionOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitSimpleAssignment
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseSimpleAssignmentOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitArray
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.DefaultVisit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.DefaultVisit
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.OperationVisitor`2.VisitExpressionStatement
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseExpressionStatementOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+&lt;&gt;c__DisplayClass8_0.&lt;TryGetOrComputeResultCore&gt;b__0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeAnalysisHelper.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer.PerformFlowAnalysisOnOperationBlock
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer.AnalyzeOperationBlock
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer+&lt;&gt;c__DisplayClass4_0.&lt;InitializeWorker&gt;b__1
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor+&lt;&gt;c__58`2.&lt;ExecuteBlockActions&gt;b__58_1
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActionsCore
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationBlockActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+&lt;&gt;c__DisplayClass14_0.&lt;TryExecuteDeclaringReferenceActions&gt;g__executeOperationsBlockActions\|7
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+&lt;&gt;c__DisplayClass14_0.&lt;TryExecuteDeclaringReferenceActions&gt;g__executeExecutableCodeActions\|3
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessSymbolDeclaredAsync&gt;d__96.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessEventCoreAsync&gt;d__95.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessEventAsync&gt;d__93.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessCompilationEventsCoreAsync&gt;d__92.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessCompilationEventsAsync&gt;d__91.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ExecutePrimaryAnalysisTaskAsync&gt;d__64.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;AttachQueueAndProcessAllEventsAsync&gt;d__62.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;&gt;c__DisplayClass57_1+&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;&gt;c__DisplayClass57_1.&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1
  | mscorlib | System.Threading.Tasks.Task`1.InnerInvoke
  | mscorlib | System.Threading.Tasks.Task.Execute
  | mscorlib | System.Threading.Tasks.Task.ExecutionContextCallback
  | mscorlib | System.Threading.ExecutionContext.RunInternal
  | mscorlib | System.Threading.ExecutionContext.Run
  | mscorlib | System.Threading.Tasks.Task.ExecuteWithThreadLocal
  | mscorlib | System.Threading.Tasks.Task.ExecuteEntry
  | mscorlib | System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
  | mscorlib | System.Threading.ThreadPoolWorkQueue.Dispatch
  | mscorlib | System.Threading._ThreadPoolWaitCallback.PerformWaitCallback

```</Description>
    <CreatedDate>01/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38401</IssueID>
    <Title>CS1580 fired with a paramater that is generic and nullable (xml doc)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/589446/cs1580-fired-with-a-paramater-that-is-generic-and.html)._

---
I'm using VS2019 16.1.1 (in VS2017 15.9.12 this does not happen)
The app is using .net core 2.2, and the analyzers Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.2
StyleCop.Analyzers 1.1.118 

I have method with this definition:

```
public static bool HasValue&amp;lt;T&amp;gt;(this T? source) where T : struct
```

and in a xml doc I have this:

&lt;pre&gt;
/// &amp;lt;summary&amp;gt;
/// Internally uses &amp;lt;see cref=&amp;quot;TypeValidations.HasValue{T}(T?) &amp;quot;/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
&lt;/pre&gt;

In VS2019 this fires the error:

&gt; Error	CS1580	Invalid type for parameter T? in XML comment cref attribute: 'TypeValidations.HasValue{T}(T?) '

If I change the documentation to `TypeValidations.HasValue{T}(Nullable{T})`  now I got an analyzer error (SA1125) telling me that I should use the shorthand notation for nullable types.

---
### Original Comments

#### Visual Studio Feedback System on 5/30/2019, 07:14 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 02:19 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 04:13 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38382</IssueID>
    <Title>IntelliSense lists unfitting generic extension methods</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/705931/intellisense-lists-unfitting-generic-extension-met.html)._

---
Hence the following code:

```cs
using System;
using System.IO;

namespace ExampleLib
{
    public class Class1
    {
        public void Test()
        {
            object x;
            x. // use IntelliSense here
        }
    }

public static class StreamExtensions
    {
        public static T Read&amp;lt;T&amp;gt;(this T self, out int result) where T : Stream
        {
            result = 1234; // sample code
            return self;
        }
    }
}
```

I defined an extension method using a generic type parameter for the extended class, but it is limited to `Stream` instances due to the type constraint on `T`. This was done to return an extended, typed instance to allow chain calling such methods.

However, when typing `x.` at the marked position in `Class1::Test`, IntelliSense also lists the `Stream` only extension method `Read&amp;lt;&amp;gt;` even though `object` is not guaranteed to be of type `Stream`. The full list shown by IntelliSense then is
- Equals
- GetHashCode
- GetType
- Read&amp;lt;&amp;gt;
- ToString

Is this expected behavior? Of course, theoretically `x` could be passed by calling the method &amp;quot;normally&amp;quot; without syntactic extension method sugar. However, it turns generic extension methods into IntelliSense-cluttering bad guys.

Can this behavior be made optional?

---
### Original Comments

#### Visual Studio Feedback System on 8/22/2019, 09:36 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38366</IssueID>
    <Title>C# compiler should emit CS0161 for expression-bodied async iterator methods</Title>
    <Description>**Version Used**: csc 3.3.0-beta3-19407-03 (d961190a)

**Steps to Reproduce**:

```csharp
public static async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; GenerateSequence() 
     =&gt; await Task.FromResult(0);
```

**Expected Behavior**:
A compiler error message along the lines of "GenerateSequence(): not all code paths return a value"

**Actual Behavior**:
Compiler error CS7038 Failed to emit module '{0}'.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38365</IssueID>
    <Title>[Regression] Code fix previews are not visible by default</Title>
    <Description>**Visual Studio Version**:
Version 16.4.0 Preview 1.0 [29228.128.master]

**Summary**:

Not sure if this also occurs in 16.3 as don't currently have build installed.


**Steps to Reproduce**:

1. Navigate to a code fix/refactoring that has a preview

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/1103906/63910494-3ec5b800-ca6a-11e9-8c96-167f84a4dc07.png)


**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1103906/63910496-44bb9900-ca6a-11e9-8274-e48ffd1031e1.png)

**User Impact**:
</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38291</IssueID>
    <Title>C# 8 Nullable dataflow doesn't handle ^ xor operator correctly</Title>
    <Description>**Version Used**: VS 16.4.0 Preview 1 (29224.8.master)

**Steps to Reproduce**:

With a .NET Core SDK Preview 8 toolset, with LangVersion=8 and Nullable=warnings, define the following method:

```cs
public bool Equals(AssemblyName x, AssemblyName y)
{
    if (x == null ^ y == null)
    {
        return false;
    }

    if (x == null)
    {
        return true;
    }

    return y.Flags == AssemblyNameFlags.None; // y dereference produces warning
}
```

**Expected Behavior**:

No null ref warnings.

**Actual Behavior**:

The `y.Flags` expression gets a warning on dereferencing `y`. Yet it's impossible for `y` to be null at this point because `x != null` (or it would have returned, and therefore if `y == null` that would have evaluated true for the xor expression at the top of the method and returned.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38247</IssueID>
    <Title>Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict unit test is flaky</Title>
    <Description>I have a PR https://github.com/dotnet/roslyn/pull/38230 that targets release/dev16.3 branch and the 
Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict unit test fails for it (failed on rerun as well) only in Windows_Desktop_Unit_Tests release_32 build. Note, the PR doesn’t make any changes to VB.
Here is a link to the build https://dev.azure.com/dnceng/public/_build/results?buildId=321462&amp;view=logs.

```
    Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict [STARTING]
      Assert.Equal() Failure
      Expected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[21..24), [72..75), [78..81)]
      Actual:   List&lt;Span&gt; [[21..24), [72..75), [72..75), [78..81), [78..81)]
      Stack Trace:
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(91,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(26,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(61,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(865,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_21_VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>10/01/2020</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38193</IssueID>
    <Title>Members marked [MaybeNull] should not get uninitialized field warnings</Title>
    <Description>Found when triaging #37987

It looks like in #37507 we added some tests which verify the uninitialized field warnings on members marked `[MaybeNull]`. Today the behavior is that a generic type field with a `[MaybeNull]` attribute can still get WRN_UninitializedNonNullableField warnings.

A generic field marked `[MaybeNull]` will never be a non-nullable reference type, though, so it seems like we should not give uninitialized field warnings in such cases.

```cs
using System.Diagnostics.CodeAnalysis;

class C&lt;T&gt;
{
    [MaybeNull]
    public T field; // currently gives WRN_UninitializedNonNullableField
}
```

Here's a test showing the current behavior:
https://github.com/dotnet/roslyn/blob/2802137e22c19153028c5565f6350cbdee9c0060/src/Compilers/CSharp/Test/Semantic/Semantics/UninitializedNonNullableFieldTests.cs#L819
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38115</IssueID>
    <Title>Intellisense incorrectly lists extension methods with type constraints on all types</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/695953/intellisense-incorrectly-lists-extension-methods-w.html)._

---
[regression] [worked-in:16.3.0 Preview 1.0]
Intellisense lists extension methods with the type constraints on all types, while it should only list it for types that match the constraint.

To reproduce:
```c#
public static class EnumExtensions
{
    public static bool ExampleExtensionMethod&amp;lt;TEnum&amp;gt;(this TEnum value) where TEnum : unmanaged, System.Enum =&amp;gt; true;
}

public static class Program
{
    public static void Main()
    {
        var obj = new object();
        obj. // look at intellisense, ExampleExtensionMethod will be listed while it should't.
    }
}
```

---
### Original Comments

#### Visual Studio Feedback System on 8/16/2019, 00:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38019</IssueID>
    <Title>Possibly null warning following Debug.Assert()</Title>
    <Description>When compiling with .NET Framework, the use of `Debug.Assert()` adds warnings rather than removing.
```C#
using System.Diagnostics;

class Program
{
    static void F(
        object x,
#nullable enable 
        object y)
    {
        Debug.Assert(x != null);
        Debug.Assert(y != null);

        x.ToString(); // warning: possibly null
        y.ToString(); // warning: possibly null
    }
}
```
</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37980</IssueID>
    <Title>IDE0001 incorrect when converting to nullable reference type</Title>
    <Description>**Version Used**: `VisualStudio.16.int.d16.3/16.3.0-pre.3.0+29213.96.d16.3` with `Microsoft.Net.Compilers` package version 3.3.0-beta3-19407-05

**Steps to Reproduce**:

```c#
class C
{
    public Task&lt;string?&gt; M(string s)
    {
        return Task.FromResult&lt;string?&gt;(s);
        //                    ^^^^^^^^^ IDE0001 Name can be simplified
    }
}
```

Removing the code marked as redundant gives:

```c#
class C
{
    public Task&lt;string?&gt; M(string s)
    {
        return Task.FromResult(s);
        //     ^^^^^^^^^^^^^^^^^^ CS8619 'Task&lt;string&gt;' does not match 'Task&lt;string?&gt;'
    }
}
```

**Expected Behavior**:

No diagnostic.

**Actual Behavior**:

Diagnostic.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37927</IssueID>
    <Title>CS8614 false warning again.</Title>
    <Description>

**Version Used**:

-  VS2019 16.2.1
-  .Net Core 3.0 Preview 7
 
**Steps to Reproduce**:

1. Create a solution with two .Net Core libraries (Lib2 references Lib1).

		&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

			&lt;PropertyGroup&gt;
				&lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
				&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
				&lt;Nullable&gt;enable&lt;/Nullable&gt;
			&lt;/PropertyGroup&gt;

		&lt;/Project&gt;

2. Add following interface to Lib1 project:

		using System;

		namespace Lib1
		{
			public interface IFace
			{
				string? FilePath { get; }
				int StateIndex { get; set; }
			}
		}

3. Add foloowing class to Lib2 project

		using Lib1;

		namespace Lib2
		{
			public class Implementation : IFace
			{
				public string? FilePath =&gt; null;
				public int StateIndex { get =&gt; 0; set =&gt; _ = 0; }
			}
		}


**Expected Behavior**:

No warnings.

**Actual Behavior**:

Warning CS8614 Nullability of reference types in type of parameter 'value' of 'void Implementation.StateIndex.set' doesn't match implicitly implemented member 'void IFace.StateIndex.set'.

This warning is related to StateIndex property but when you remove FilePath property from the interface and from the class, this warning disappear.

</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37924</IssueID>
    <Title>GenerateConstructorCodeFixProvider crashed</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/683583/generateconstructorcodefixprovider-crashed.html)._

---
Randomly got the following reported:
'GenerateConstructorCodeFixProvider ' encountered an error and has been disabled.

Stack trace follows:

System.ArgumentException : Node is not within syntax tree
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.CheckSyntaxNode(VisualBasicSyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfo(ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfoForNode(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfoCore(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(SemanticModel semanticModel,SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.GenerateConstructor.VisualBasicGenerateConstructorService.GetDelegatingConstructor(State state,SemanticDocument document,Int32 argumentCount,INamedTypeSymbol namedType,ISet`1 candidates, CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateThisOrBaseDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt; )
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateThisOrBaseDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt; )
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GetEditAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.GenerateConstructorCodeAction.GetEditAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.GenerateConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)

---
### Original Comments

#### Visual Studio Feedback System on 8/9/2019, 03:27 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37870</IssueID>
    <Title>Support NotNullIfNotNull on operator</Title>
    <Description>**16.2.1**: 

**Steps to Reproduce**:

```c#
class Program
{
	class A { }
	class B
	{
		[return: NotNullIfNotNull("b")]
		public static implicit operator A?(B? b) =&gt; b == null ? null : new A();
	}

	static void Main(string[] args)
	{
		B b = new B();
		A a = b;
	}
}
```
[sharplab](https://sharplab.io/#v2:D4AQDABCCMB0AiBLAhgcwHYHsDOAXRAxtrAMKYAmApgILrIA2AntotgNwCwAUNwMToBXevWQAjepQiU64ytxAAmKNADs3AN7cAkIojUI6iAF9tugELbNXLVoDaIFQC4IAOUy4XQ+gEkAZm48vAAoAIlEQgEoAXW0dAGZlADYIRABbAAd6QkRcCEx0ygAnZFxMQr0AfiCzCohRCIgAXgA+OqbGiEFhCFqu+ghndEoAdz0giM5rEx5rGGSQABYIAFlkRHQgmDBbKIhkQtRsCMtYszaOodGzccmbfWQmurYIAHoXiGH99HXUCBIAZQAHIkwGBnGR0AA3Ir4dC/PoQLK4IoMPLldI4FiyTpeCCQhgCSSlTqYdAAWj6YgkEFwjAKsG00yMQA=)

**Expected Behavior**:

This code should not generate any warnings.

**Actual Behavior**:

```
warning CS8600: Converting null literal or possible null value to non-nullable type.
```</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37849</IssueID>
    <Title>Code analysis settings</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/488819/code-analysis-settings.html)._

---
&lt;p&gt;I miss the location where I can alter the code analysis settings in visual studio 2019 Version 16.0.0. Preview 4.2 on my .net core project&lt;/p&gt;&lt;p&gt;Would be nice to understand where it has gone to. &lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 3/14/2019, 02:21 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37720</IssueID>
    <Title>XML documentation feature: Embeding &lt;see href=""/&gt; link into VS doc hint window</Title>
    <Description>I wish to have the ability to embed a link in (what others are telling me to call) the "parameter info box" that shows you the summary of the XML documentation when you hover over a Type or type member. I want to embed a link to the official documentation of a class or member that's clickable from the hint window.

An example:
```cs
/// &lt;summary&gt;
/// My Function. &lt;see href="http://www.example.com/path/to/documentation.xml"&gt;See this documentation&lt;/see&gt;
/// &lt;/summary&gt;
public static void MyFunction()
{
}
```

If this isn't possible, please explain why. ^^ It would be awesome to have this.
Edit: This is an IDE feature request btw</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37552</IssueID>
    <Title>Editorconfig suggestions </Title>
    <Description>Creating new editorconfig by hand is difficult because visual studio suggests properties which are already defined which makes browsing through all of the properties and picking the ones we want unnecessarily difficult. I suggest Visual Studio to not show items which are already defined in .editorconfig file.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/582512/editorconfig-suggestions.html
VSTS ticketId: 899254_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/27/2019, 01:08 AM (63 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>30/07/2019</CreatedDate>
    <ClosedDate>30/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37451</IssueID>
    <Title>C# Tuple is zeroed when accessed via collection</Title>
    <Description>**Version Used**: Visual Studio 15.9.04012.0. File -&gt; New -&gt; Project -&gt; Console (DotNet Core)

**Steps to Reproduce**:

1. Paste the following code:
    ```csharp
   using System;
   using System.Collections.Generic;
   
   namespace CompilerBugZero
   {
       class Program
       {
           static void Main(string[] args)
           {
               var hdl = FindHandle();
               if (IntPtr.Zero == hdl)
               {
                   throw new InvalidOperationException();
               }
           }
   
           static IntPtr FindHandle()
           {
               var candidates = new List&lt;(IntPtr hwnd, string title, string className)&gt;();
               candidates.Add((new IntPtr(123), "title", "className"));
   
               if (candidates.Count == 1)
               {
                   // Breakpoint here
                   return candidates[0].hwnd;
               }
   
               throw new InvalidOperationException();
           }
       }
   }

   ```

2. Set a breakpoint the line below `// Breakpoint here`
3. See how everything is Zero when it shouldn't: 
![image](https://user-images.githubusercontent.com/1866463/61797637-14a82700-ae28-11e9-9b1d-a764993d13f1.png)


   Note how the list still has the correct value but accessing `[0]` returns a zeroed tuple apparently.

**Expected Behavior**:
Debugger shows the correct values. Code works at runtime.

**Actual Behavior**:
Debugger doesn't show correct value. In fact in our real application I feel like we had the wrong behavior (ie `IntPtr.Zero`) at runtime. In the real application this happened in a PInvoke scenario. However, I couldn't reproduce this here. This might be a wrong positive, but worth considering when investigating this.

**Workaround**:

Change the code to

```diff
            if (candidates.Count == 1)
            {
                // Breakpoint here
-               return candidates[0].hwnd;
+               var t = candidates[0];
+               return t.hwnd;
            }
```

</Description>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37415</IssueID>
    <Title>Invalid Inline variable declaration code fix</Title>
    <Description>&lt;pre&gt;class Foo
{
    public Bar Bar;
}
class Bar
{
    public int Value;
}


public static int Test(out int bar) =&amp;gt; throw new NotImplementedException();


public void Inline()
{
    int bar; // This can be inlined
    _ = new Foo()
    {
        Bar =
        {
            Value = Test(out bar)
        }
    };
}&lt;/pre&gt;&lt;p&gt;When using the code-fix to apply inline variable declaration on the variable `bar` in the `Inline` function, the generated code will be `Value = Test(out intbar)` instead of `Value = Test(out int bar)` (note the missing space).&lt;/p&gt;&lt;p&gt;This only happens when using nested initializer syntax.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/517656/invalid-inline-variable-declaration-code-fix.html
VSTS ticketId: 839184_
_These are the original issue comments:_

Visual Studio Feedback System on 4/8/2019, 00:56 AM (105 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37408</IssueID>
    <Title>Statement indentation level gets broken with comment</Title>
    <Description>
```
if (true)
{
    //some comment
}
```

If you hit enter twice after the comment, the caret moves to curly bracket level.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/649720/statement-indentation-level-gets-broken-with-comme.html
VSTS ticketId: 948418_
_These are the original issue comments:_

Visual Studio Feedback System on 7/18/2019, 02:37 AM (4 days ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
Enbi Zhang [MSFT] on 7/19/2019, 00:40 AM (3 days ago): &lt;markdown&gt;&lt;p&gt;Thanks for your feedback.&lt;br&gt;
Which language of your project used? C#, VB or C++?&lt;br&gt;
Also did you install any extension? If yes, can you disable/uninstall them and reopen vs, see if the issue still occurs?&lt;/p&gt;
&lt;/markdown&gt;
savascilve on 7/19/2019, 02:19 AM (3 days ago): Hi,&lt;br&gt;&lt;br&gt;It's C#. I've tried disabling all extensions one by one, no luck. Also I've tried on diiferent type of projects (class library, web api, console app, winforms..) on net framework 4.6.2, 4.7, .net core 2.1, .net core 2.2. &lt;br&gt;&lt;br&gt;Attached a gif.&lt;br&gt;
Enbi Zhang [MSFT] on 7/21/2019, 06:42 PM (17 hours ago): &lt;markdown&gt;&lt;p&gt;We have redirected your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>22/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37386</IssueID>
    <Title>EditorTextFactoryService should handle exceptions better when calling editor's CreateTextBuffer</Title>
    <Description>http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/Workspaces/EditorTextFactoryService.cs,79 calls an editor API to CreateTextBuffer.

This can throw more exceptions than are currently handled, (file access exceptions for files in excess of 3gb, binary characters (new exception), etc.).

Currently this is causing VS to crash when opening Roslyn on VS master as changes were made to throw a FileFormatException when binary characters are encountered.  I've created an issue to track down where these files are and why.
https://github.com/dotnet/roslyn/issues/37385  

Even if these are not valid, we still should probably not be crashing / provide a better error to help diagnose which file has the issue.</Description>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37363</IssueID>
    <Title>Visual Studio crash opening CPS solution</Title>
    <Description>On Visual Studio master, 16.3.0-pre.2.0+29118.169.master

Opening the CPS.sln crashes Visual Studio. Looks like SolutionCrawlerRegistrationService is doing a FailFast (why does that ever happen?!)

I've seen it with various files, but today `DefaultStandardCommandSet97Handler.cs` was opened from solution restore, but if I doubt there is anything specific in there, as I have no local changes and it loads fine in IntPreview.

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.IO.FileFormatException: File contains non-text characters
   at Microsoft.VisualStudio.Text.Implementation.TextImageLoader.ParseBlock(Char[] buffer, Int32 length, NewlineState&amp; newlineState, Int32&amp; currentLineLength, Int32&amp; longestLineLength)
   at Microsoft.VisualStudio.Text.Implementation.TextImageLoader.Load(TextReader reader, Int64 fileSize, NewlineState&amp; newlineState, Int32&amp; longestLineLength, Int32 blockSize, Int32 minCompressedBlockSize)
   at Microsoft.VisualStudio.Text.Implementation.BufferFactoryService.CreateTextBuffer(TextReader reader, IContentType contentType, Int64 length, String traceId)
   at Microsoft.VisualStudio.Text.Implementation.BufferFactoryService.CreateTextBuffer(TextReader reader, IContentType contentType)
   at Microsoft.CodeAnalysis.Editor.Implementation.Workspaces.EditorTextFactoryService.CreateTextInternal(Stream stream, Encoding encoding, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Workspaces.EditorTextFactoryService.CreateText(Stream stream, Encoding defaultEncoding, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FileTextLoader.CreateText(Stream stream, Workspace workspace)
   at Microsoft.CodeAnalysis.FileTextLoader.&lt;LoadTextAndVersionAsync&gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.TextDocumentState.&lt;LoadTextAsync&gt;d__29.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.CrashUnlessCanceled(System.AggregateException)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__35`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__35`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;&gt;c__DisplayClass32_1`1+&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions+&lt;SynchronizePrimaryWorkspaceAsync&gt;d__21.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.SolutionState+&lt;GetChecksumAsync&gt;d__152.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37349</IssueID>
    <Title>CS8019 violation in Resources.Designer.cs</Title>
    <Description>Visual Studio 2019 Enterprise (16.1.6)

I have a `Resources.resx` file in a .NET FX 4.6 C# project. IntelliSense reports &amp;quot;Unnecessary using directive. (CS8019)&amp;quot; in the the auto-generated `Resources.Designer.cs`, complaining `using System;` is unnecessary.

Auto generated file should not have compile/CA warnings. Please either fix the code generation tool or the compiler.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/639401/cs8019-violation-in-resourcesdesignercs.html
VSTS ticketId: 944547_
_These are the original issue comments:_

Visual Studio Feedback System on 7/10/2019, 00:44 AM (8 days ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
Drew Noakes [MSFT] on 7/17/2019, 02:31 AM (37 hours ago): &lt;markdown&gt;&lt;p&gt;Thanks for the feedback. Can you please confirm whether you’re seeing the CS8019 diagnostic in the build output (when you compile) or only in the IDE when the file is opened in the editor?&lt;/p&gt;
&lt;/markdown&gt;
James Liang [MSFT] on 7/17/2019, 08:58 PM (19 hours ago): &lt;p&gt;The CS8019 violations are shown in IDE Error List (with IntelliSense on) only, not yet observed in build output.&lt;/p&gt;&lt;p&gt;By the way, I have "Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.3" installed for the projects, configed with customzied ruleset file, and have .editconfig file above.&lt;/p&gt;

Visual Studio Feedback System on 7/17/2019, 09:10 PM (18 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>19/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37343</IssueID>
    <Title>Incorrect `IDE0007 use 'var' instead of explicit type` for List&lt;T&gt;</Title>
    <Description>```csharp
var result = new List&lt;CorrespondenceModel&gt;();
// ...
List&lt;CorrespondenceModel&gt; sortedresult = result.OrderByDescending(r =&gt; r.CreationDate).ToList();
```

I'm getting "use 'var' instead of explicit type" for line "List&lt;...&gt;"

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/520039/incorrect-ide0007-use-var-instead-of-explicit-type.html
VSTS ticketId: 841177_
_These are the original issue comments:_

Visual Studio Feedback System on 4/8/2019, 01:55 AM (101 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 7/18/2019, 00:54 PM (42 sec ago): &lt;markdown&gt;&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>19/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37336</IssueID>
    <Title>Static local functions cannot reference locally defined constants.</Title>
    <Description>If a function in which a local function is defined has locally defined constants, IDE0062 will appear suggesting to make the local function static.

However, doing so will produce CS8421: A static local function cannot contain a reference to 'LocalConstant'.

Since constants are... well, constant, it should not quite matter where -- or how many times -- they are defined as long as they are in scope. Probably the compiler would have to re-generate these local constants or hoist them from the outer function to the class that receives the local functions and just fixup the references whether they appear in the local function or the function in which they are defined.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/637299/static-local-functions-cannot-reference-locally-de.html
VSTS ticketId: 943805_
_These are the original issue comments:_

Visual Studio Feedback System on 7/9/2019, 03:43 AM (9 days ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37302</IssueID>
    <Title>Build error started occuring out of the blue:  Error	 AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.SimplifyThisOrMe.CSharpSimplifyThisOrMeDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException  with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019
Version 16.1.6
VisualStudio.16.Release/16.1.6+29102.190
Microsoft .NET Framework
Version 4.7.03190

Installed Version: Enterprise

Architecture Diagrams and Analysis Tools   00435-60000-00000-AA172
Microsoft Architecture Diagrams and Analysis Tools

ADL Tools Service Provider   1.0
This package contains services used by Data Lake tools

Application Insights Tools for Visual Studio Package   9.1.00429.1
Application Insights Tools for Visual Studio

ASP.NET and Web Tools 2019   16.1.429.50124
ASP.NET and Web Tools 2019

ASP.NET Web Frameworks and Tools 2019   16.1.429.50124
For additional information, visit https://www.asp.net/

Azure App Service Tools v3.0.0   16.1.429.50124
Azure App Service Tools v3.0.0

Azure Data Lake Node   1.0
This package contains the Data Lake integration nodes for Server Explorer.

Azure Data Lake Tools for Visual Studio   2.3.9000.0
Microsoft Azure Data Lake Tools for Visual Studio

Azure Functions and Web Jobs Tools   16.1.429.50124
Azure Functions and Web Jobs Tools

Azure Stream Analytics Tools for Visual Studio   2.3.9000.0
Microsoft Azure Stream Analytics Tools for Visual Studio

C# Tools   3.1.1-beta4-19281-06+58a4b1e79aea28115e66b06f850c83a3f1fcb6d3
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

Fabric.DiagnosticEvents   1.0
Fabric Diagnostic Events

Microsoft Azure HDInsight Azure Node   2.3.9000.0
HDInsight Node under Azure Node

Microsoft Azure Hive Query Language Service   2.3.9000.0
Language service for Hive query

Microsoft Azure Service Fabric Tools for Visual Studio   2.5
Microsoft Azure Service Fabric Tools for Visual Studio

Microsoft Azure Stream Analytics Language Service   2.3.9000.0
Language service for Azure Stream Analytics

Microsoft Azure Stream Analytics Node   1.0
Azure Stream Analytics Node under Azure Node

Microsoft Azure Tools   2.9
Microsoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.20419.2

Microsoft Continuous Delivery Tools for Visual Studio   0.4
Simplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft Library Manager   1.0
Install client-side libraries easily to any web project

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual Studio Tools for Containers   1.1
Develop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit &amp; refresh your app without having to rebuild the container.

Node.js Tools   1.5.10424.1 Commit Hash:c3ce0ae0b29c0b3a755ffc12f8a685fe7ddd3600
Adds support for developing and debugging Node.js apps in Visual Studio

NuGet Package Manager   5.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Snapshot Debugging Extension   1.0
Snapshot Debugging Visual Studio Extension Detailed Info

SQL Server Data Tools   16.0.61904.23160
Microsoft SQL Server Data Tools

Syntax Visualizer   1.0
An extension for visualizing Roslyn SyntaxTrees.

ToolWindowHostedEditor   1.0
Hosting json editor into a tool window

TypeScript Tools   16.0.10506.2004
TypeScript Tools for Microsoft Visual Studio

Visual Basic Tools   3.1.1-beta4-19281-06+58a4b1e79aea28115e66b06f850c83a3f1fcb6d3
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.4 for F# 4.6   16.1.0-beta.19253.3+42526fe359672a05fd562dc16a91a43d0fe047a7
Microsoft Visual F# Tools 10.4 for F# 4.6

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

Visual Studio Tools for Containers   1.0
Visual Studio Tools for Containers

Visual Studio Tools for Kubernetes   1.0
Visual Studio Tools for Kubernetes
**Steps to Reproduce**:

1.  Perform solution build


**Expected Behavior**:

No AD0001 errors occurring.

**Actual Behavior**:
Error	 AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.SimplifyThisOrMe.CSharpSimplifyThisOrMeDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException  with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.	
</Description>
    <CreatedDate>17/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37273</IssueID>
    <Title>Remove unused parameters analyzer threw InvalidOperationException</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.1.6

**Steps to Reproduce**:

1. I had some C# code like the following:

    ```csharp
    public class Class1
    {
        public int GetNum(int arg1) { return 1; }
        int GetNum3(int arg1) { return 1; }
    }
    ````

2. Add an .EditorConfig file to the project.
3. Add the following line to the EditorConfig file:

    `dotnet_code_quality_unused_parameters = nonpublic:suggestion`

**Expected Behavior**:

No exception

**Actual Behavior**:

An exception appeared in the Error List as an AD0001 warning as follows:

'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Conventions
ISymbol: GetNum (Method)

System.InvalidOperationException: This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.ShouldReportUnusedParameters(ISymbol symbol, UnusedParametersPreference unusedParametersPreference, ReportDiagnostic unusedParametersSeverity)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
</Description>
    <CreatedDate>16/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37008</IssueID>
    <Title>Short cut CTRL+K+D Clean references</Title>
    <Description>Was implemented a feature to clear (not used) references when input Ctrl+K+D. But when i have a &amp;quot;#if DEBUG&amp;quot;, it cleaned All used  references on release mode.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/631890/short-cut-ctrlkd-clean-references.html
VSTS ticketId: 941886_
_These are the original issue comments:_

Visual Studio Feedback System on 7/4/2019, 01:04 AM (34 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>05/07/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36910</IssueID>
    <Title>Rename namespaces.</Title>
    <Description>VSF_TYPE_MARKDOWNCan you add a way to rename namespaces in Visual Studio?
Not the one which offers to rename only one part of it but a feature to rename the entire namespace and change its depth.

For instance, I would like to rename the namespace of a class &amp;quot;Company.Project.Subfolder.MyClass&amp;quot; to &amp;quot;Company.Project.MyClass&amp;quot;, or &amp;quot;OtherCompany.OtherProject.MyClass&amp;quot;.

Thanks!

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/627968/rename-namespaces.html
VSTS ticketId: 940134_
_These are the original issue comments:_

Jane Wu [MSFT] on 7/1/2019, 04:03 AM (10 hours ago): &lt;markdown&gt;&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
&lt;/markdown&gt;</Description>
    <CreatedDate>01/07/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36758</IssueID>
    <Title>IDE0044 'Add readonly modifier' reported on field exposed by reference</Title>
    <Description>VSF_TYPE_MARKDOWNWhen implementing a ref property, Visual Studio 16.1.3 suggests adding the readonly modifier to the backing field:

```
class Foo
{
    private int _bar; // IDE0044 Add readonly modifier
    public ref int Bar =&gt; ref _bar;
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/617707/ide0044-add-readonly-modifier-reported-on-field-ex.html
VSTS ticketId: 935990_
_These are the original issue comments:_

Visual Studio Feedback System on 6/24/2019, 01:19 AM (37 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36742</IssueID>
    <Title>Highlight references to symbol under caret not working for symbols used in tuple types (value tuples)</Title>
    <Description>VSF_TYPE_MARKDOWNWhen a variable (local variable or class field) is used in a value tuple, placing the cursor on the symbol in value tuple, does not highlight the other references. This only happens when the symbol is used as a single value in a member of a value tuple. When the symbol is used in an expression, the highlighting works correctly.

Code example:

var value = 1;       // #1
    var x = (value, 2);  // #2

If the cursor is on `value` in line #2, the other `value` in line #1 is not highlighted, and the shortcut keys for navigation between highlighted references (Ctrl+Shift+Up/Down arrow) will do nothing.
If the cursor is placed on the first usage (line #1) it works correctly.

Also this code sample works with no problem:

var value = 1;
    var x = (value + 1, 2);

because `value` is used in an expression.

It just happens in VS 2019.
It is all fine in VS 2017.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/620242/highlight-references-to-symbol-under-caret-not-wor.html
VSTS ticketId: 937020_
_These are the original issue comments:_

Visual Studio Feedback System on 6/25/2019, 04:00 AM (7 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36716</IssueID>
    <Title>ArgumentOutOfRangeException from CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer in AspNetCore solution </Title>
    <Description>**Version Used**: 
16.2 Preview 2

**Steps to Reproduce**:

1. Clone https://github.com/aspnet/AspNetCore and install dependencies
2. Enable full solution analysis.
3. Run `restore.cmd`
4. Open `src\MusicStore\MusicStore.sln`
5. Wait

**Expected Behavior**:
No `AD0001` failure

**Actual Behavior**:
```
Severity    Code    Description Project File    Line    Suppression State   Detail Description
Error   AD0001  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentOutOfRangeException' with message 'Specified argument was out of the range of valid values.
Parameter name: localFunction'. Microsoft.AspNetCore.Mvc.RazorPages     1   Active  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.AspNetCore.Mvc.RazorPages
ISymbol: ApplyConventions (Method)
System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: localFunction
   at Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraphExtensions.GetLocalFunctionControlFlowGraphInScope(ControlFlowGraph controlFlowGraph, IMethodSymbol localFunction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.AddDescendantOperationsInRange(ControlFlowGraph cfg, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, PooledHashSet`1 operationsBuilder, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateSymbolWritesInBlockRange(Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.HandleCatchOrFilterOrFinallyInitialization(BasicBlock basicBlock, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateBlockAnalysisData(BasicBlock basicBlock, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.SetCurrentAnalysisData(BasicBlock basicBlock, BasicBlockAnalysisData data, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__StepThroughSingleFinally|1_2(ControlFlowRegion finally, TBlockAnalysisData&amp; currentAnalysisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__StepThroughFinally|1_1(ControlFlowRegion region, Int32 destinationOrdinal, TBlockAnalysisData&amp; currentAnalysisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__FollowBranch|1_0(BasicBlock current, ControlFlowBranch branch, TBlockAnalysisData currentAnalsisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.Run(ControlFlowGraph controlFlowGraph, DataFlowAnalyzer`1 analyzer, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.RunAnalysis(ControlFlowGraph cfg, ISymbol owningSymbol, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean&amp; hasBlockWithAllUsedSymbolWrites)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
```</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36693</IssueID>
    <Title>Attributes have a "attribute" suffix when "Show items from unimported namespaces" is turned on</Title>
    <Description>Unlike when they are in scope, attributes in unimported namespaces show up and are committed with the "attribute" syntax.

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/1103906/59991880-72601c80-968c-11e9-8519-43c36d8e8bc6.png)

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1103906/59991842-48a6f580-968c-11e9-8c64-13791e86c23c.png)



</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36619</IssueID>
    <Title>Don't analyse generated code</Title>
    <Description>VSF_TYPE_MARKDOWNI'm working on a project that uses a lot of generated code and VS2019 shows a lot of activity analysing it on every build. It would be useful to be able to specify files / folders to exclude from analysis. 

Annoyingly in this specific case the files are dumped in with other, non generated files and they're not named anything useful to distinguish them from regular code so I'd need the ability to specify specific files rather than a heuristic.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/613709/dont-analyse-generated-code.html
VSTS ticketId: 934239_
_These are the original issue comments:_

Visual Studio Feedback System on 6/20/2019, 02:05 AM (8 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36589</IssueID>
    <Title>Unexpected default formatting for multi-line switch expressions</Title>
    <Description>Type the following code (IDE will format it as follows):
```
            var i = 3;
            var str = i switch
            {
                1 =&gt; "1",
                2 =&gt; "2",
                3 =&gt; "3",
            };
```

Expected: The body of the expression should be indented to the right.
Like this:
```
            var str = i switch
                {
                    1 =&gt; "1",
                    2 =&gt; "2",
                    3 =&gt; "3",
                };
```

Or even better like this:
```
            var i = 3;
            var str = i switch
                      {
                          1 =&gt; "1",
                          2 =&gt; "2",
                          3 =&gt; "3",
                      };
```

Motivation - improved readability.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36583</IssueID>
    <Title>Runtime Exception : Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.</Title>
    <Description>**Version Used:**
3.1.0

 **Visual Studios Version Used  :** 
Visual Studios 2017 Community Version 15.9.13


**Steps to Reproduce:**

Create a .VSIX project using Visual Studios 2017 Community Version 15.9.13

Add Nuget References to following:
```
Microsoft.CodeAnalysis (3.1.0.0)
Microsoft.VisualStudio.LanguageServices(3.1.0.0)
Microsoft.VisualStudio.ComponentModelHost (16.0.0.0)
```

Following code is used for getting the current solution instance:
```
var componentModel = (Microsoft.VisualStudio.ComponentModelHost.IComponentModel)Microsoft.VisualStudio.Shell.Package.GetGlobalService(typeof(Microsoft.VisualStudio.ComponentModelHost.SComponentModel));
VisualStudioWorkspace workspace = componentModel.GetService&lt;VisualStudioWorkspace&gt;();
```

When we run the .VSIX package in debug mode and try to run the above code an exception is thrown : **System.InvalidCastException
  HResult=0x80004002
  Message=Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.**

**Important points:**

**I am trying to build a .vsix for VS 2017**.
I am having Visual Studios 2015 Update 3 Community version, Visual Studios 2017 Community Version 15.9.13 and Visual Studios 2019 (2) Version 16.1.1 installed on my machine.

The Microsoft.VisualStudio.LanguageServices dll and Microsoft.VisualStudio.ComponentModelHost.dll  has Copy Local option set to True.

The GAC entries that i can see are as below:

  ```
Microsoft.VisualStudio.ComponentModelHost, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
  Microsoft.VisualStudio.ComponentModelHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
  Microsoft.VisualStudio.ComponentModelHost.Implementation, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
  Microsoft.VisualStudio.ComponentModelHost.Implementation, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
```

**Expected Behavior:**
The current Solution should be loaded in the VisualStudioWorkspace reference.

**Actual Behavior:**
System.InvalidCastException
  HResult=0x80004002
  Message=Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36520</IssueID>
    <Title>LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC</Title>
    <Description>Failed with

```
System.NullReferenceException : Object reference not set to an instance of an object.
```

```
Server stack trace: 
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass8_0.&lt;PlaceCaret&gt;b__0(IWpfTextView view)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass13_0.&lt;GetExecuteOnActionViewCallback&gt;b__0(CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.&lt;&gt;c__DisplayClass6_0.&lt;InvokeOnUIThread&gt;b__0()
   at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.InvokeOnUIThread(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ExecuteOnActiveView(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.PlaceCaret(String marker, Int32 charsOffset, Int32 occurrence, Boolean extendSelection, Boolean selectBlock)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.SelectText(String text)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.&lt;&gt;c__DisplayClass19_0.&lt;ReplaceText&gt;b__0(IWpfTextView view)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass13_0.&lt;GetExecuteOnActionViewCallback&gt;b__0(CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.&lt;&gt;c__DisplayClass6_0.&lt;InvokeOnUIThread&gt;b__0()
   at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.InvokeOnUIThread(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ExecuteOnActiveView(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.ReplaceText(String oldText, String newText)
   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies

```


https://dev.azure.com/dnceng/public/_build/results?buildId=227877&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=5653270&amp;resultId=100247&amp;paneView=debug</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36431</IssueID>
    <Title>Better compiler feedback on its determination of a lambda expression's type in C# (VB? C++?)</Title>
    <Description>VSF_TYPE_MARKDOWNThe C# compiler error message:

CS0173 Type of conditional expression cannot be determined because there is no implicit conversion between 'lambda expression' and 'lambda expression'

leaves the developer with very little information about why the compiler thinks the two lambdas in the conditional expression are not the same.

I've provided an example case below, but it's just an example to demonstrate a larger issue. This isn't about this example specifically.  The larger issue is having the compile report the &amp;quot;method signature&amp;quot; it is seeing when working with a lambda rather than just the generic &amp;quot;lambda expression&amp;quot; would be of great benefit.  The developer could then easily see in the reported signature where the compiler most likely is in need of better clarification.

A lot of times the developer can poke around and guess. However I was just faced with a conditional expression where I could find no reason why the compile throught the two lambdas had different signatures.

In my example the lambdas were even so simple and straight-forward they could be expressed as expression bodies (or not, I've tried both ways). The conditional expression result was being assigned to a strongly typed delegate type so no ambiguity there.  Even adding explicit types to the lambda's parameters didn't resolve it.

I finally gave up and resorted to an if-then-else where the compiler demonstrated it had no problem with either lambda separately.

But again, the main point is really having the compiler report the &amp;quot;method signature&amp;quot; it is seeing for a lambda rather than only &amp;quot;lambda expression&amp;quot; could prove very useful to developers in various situations.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/600000/better-compiler-feedback-on-its-determination-of-a.html
VSTS ticketId: 915678_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/11/2019, 00:06 AM (2 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36429</IssueID>
    <Title>C# "where T : enum"</Title>
    <Description>VSF_TYPE_MARKDOWNOver the years we keep finding ourselves using generics where one of the parms is invariably required to be an enum. Currently the best restriction which can be placed on the parm is &amp;quot;where T : struct&amp;quot;. So rather than imposing an enum restriction at compile time, the restriction gets deferred to runtime.

We actually do impose an explicit check at runtime (assuming we remember) up-front in constructors to signal the problem as early as possible with as minimum a testing sequence as possible. However even static constructors do not run until the class is actually used. The explicit check specifically for Type.IsEnum helps ensure the compiler's willingness to do implicit type conversions isn't masking a problem. 

This would be a nice stepping stone toward (in the future) introducing an Enum&amp;lt;T&amp;gt; class to &amp;quot;modernize&amp;quot; the use of the very ancient Enum class.  The class having extension methods would go a long way toward &amp;quot;moderizing&amp;quot; code that manipulates enums. Of course such a class &amp;quot;could&amp;quot; be introduced without &amp;quot;where T : enum&amp;quot; (we have such a class), but it might lead to backward compatibility concerns if it were to be converted to &amp;quot;where T : enum&amp;quot; after having been introduced as &amp;quot;where T : struct&amp;quot;.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/602871/c-where-t-enum.html
VSTS ticketId: 916592_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/12/2019, 02:24 AM (36 hours ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36353</IssueID>
    <Title>[Regression] Naming style rules are no longer being enforced or used</Title>
    <Description>This works in 15.9 &amp; 16.1.2 and has regressed in Version 16.2.0 Preview 3.0 [29010.160.d16.2stg].

EditorConfig: https://github.com/dotnet/project-system/blob/master/.editorconfig#L115.

Naming style rules (at least for fields) are no longer being enforced or used.

15.9/16.1.2:
![image](https://user-images.githubusercontent.com/1103906/59329588-93427c80-8d32-11e9-8f92-c1c1f13418da.png)

16.2:
![image](https://user-images.githubusercontent.com/1103906/59329652-b705c280-8d32-11e9-9a95-373ce846ff07.png)

The warnings are 16.2 are the new ones telling me that they can be literals.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36317</IssueID>
    <Title>VS 2019 Disables Extension on Add Missing Usings</Title>
    <Description>VSF_TYPE_MARKDOWN
Visual Studio 2019 is crashes when I press &amp;quot;Ctrl + Space&amp;quot; and higlight &amp;quot;Add missing usings&amp;quot;.  This disables the feature from the context menu.  I was trying to added the missing using for  `DuplicateKeyException` from `System.Data.Linq.DuplicateKeyException`
```
System.NotImplementedException : The method or operation is not implemented.
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedDocumentAsync(CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.GetChangesForCodeActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.ApplyFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.AddMissingImportsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsRefactoringProvider.AddMissingImports(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0.&amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/516580/vs-2019-disables-extension-on-add-missing-usings.html
VSTS ticketId: 838562_
_These are the original issue comments:_

Visual Studio Feedback System on 4/4/2019, 00:38 AM (68 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/4/2019, 01:46 AM (68 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

sethg on 4/4/2019, 11:12 AM (67 days ago): Not that it changes the issue, but I did find that System.Data.Linq.DuplicateKeyException was not the actual exception I was looking for.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36316</IssueID>
    <Title>RenameTagProducerTests.RenamingEscapedIdentifiers Failed</Title>
    <Description>Failed during signed build [Test Logs](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2754501&amp;view=ms.vss-test-web.test-result-details)

```
      Assert.Equal() Failure
      Expected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[24..26)]
      Actual:   List&lt;Span&gt; [[23..26), [24..26)]
      Stack Trace:
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(91,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(31,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_3_VerifyTaggedSpans.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(72,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_7_VerifySpansAndBufferForConflictResolution.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(518,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_16_RenamingEscapedIdentifiers.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36201</IssueID>
    <Title>Problem with C# lambda expression auto-formatting</Title>
    <Description>VSF_TYPE_MARKDOWNI'm writing a C# lambda expression somewhat like this:

```csharp
    static Action action(() =&gt;
    {
        doThings();
    });
```
At least that's how I meant it. I had typed it like this:
```csharp
    static Action action( () =&gt; // with a space right here
    {
        doThings();
    });
```
When I deleted and retyped the semicolon at the end to auto format it, this happened:
```csharp
    static Action action(() =&gt;
   {
       doThings();
   });
```
It shifts all of the text over by as many spaces as there are between the two `(`s, I tested it. This wasn't a difficult bug to deal with, but I thought I'd report it, because I'm fairly sure this is unintended.

Thanks to whoever read through this.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/597221/problem-with-c-lambda-expression-auto-formatting.html
VSTS ticketId: 909893_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36175</IssueID>
    <Title>'CS8629: Nullable value type may be null' reported when it can not be null after HasValue</Title>
    <Description>This occurs with C# 8

```
public struct Foo
{
    int get_value( )
   {
        int? value = get_value_from_somewhere( );

        // This test will not generate a 'Nullable value type may be null' 
        // if( value == null ) return 0;

        // This test will not generate a 'Nullable value type may be null' 
        // if( !value.HasValue ) return 0;

        // This test will generate a 'Nullable value type may be null' 
        if( value.HasValue == false ) return 0;

        return value.Value; // Warning on this line
    }

    // In reality do something that may or may not return a value
    int? get_value_from_somewhere( ) =&gt; 0; 
}
```
I think the last test is simple enough that it should not generate a warning

</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36133</IssueID>
    <Title>Code style:  built-in types rule trumps apparent type rule, when type is not apparent</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.2.0 Preview 3.0 [29002.38.d16.2stg]
VisualStudio.16.IntPreview/16.2.0-pre.3.0+29002.38.d16.2stg
Microsoft .NET Framework
Version 4.8.03752

Installed Version: Enterprise

Visual C++ 2019   00435-60000-00000-AA784
Microsoft Visual C++ 2019

Application Insights Tools for Visual Studio Package   9.1.00429.1
Application Insights Tools for Visual Studio

ASP.NET and Web Tools 2019   16.2.154.3618
ASP.NET and Web Tools 2019

ASP.NET Web Frameworks and Tools 2019   16.2.154.3618
For additional information, visit https://www.asp.net/

Azure App Service Tools v3.0.0   16.2.154.3618
Azure App Service Tools v3.0.0

Azure Functions and Web Jobs Tools   16.2.154.3618
Azure Functions and Web Jobs Tools

C# Tools   3.2.0-beta2-19277-03+50ce8972ca70993faaa7c130a19cfd174452ee68
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

GitHub.VisualStudio   2.9.1.7781
A Visual Studio Extension that brings the GitHub Flow into Visual Studio.

Microsoft Azure Tools   2.9
Microsoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.20419.2

Microsoft Continuous Delivery Tools for Visual Studio   0.4
Simplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft Library Manager   1.0
Install client-side libraries easily to any web project

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio Tools for Containers   1.1
Develop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit &amp; refresh your app without having to rebuild the container.

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

NuGet Package Manager   5.2.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Snapshot Debugging Extension   1.0
Snapshot Debugging Visual Studio Extension Detailed Info

SQL Server Data Tools   16.0.61905.20080
Microsoft SQL Server Data Tools

Test Adapter for Boost.Test   1.0
Enables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.

Test Adapter for Google Test   1.0
Enables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.

TypeScript Tools   16.0.10529.2001
TypeScript Tools for Microsoft Visual Studio

Visual Basic Tools   3.2.0-beta2-19277-03+50ce8972ca70993faaa7c130a19cfd174452ee68
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.4 for F# 4.6   16.2.0-beta.19277.5+42c125e3cbb5cb06256a413c4e742199fb0df1f3
Microsoft Visual F# Tools 10.4 for F# 4.6

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

Visual Studio Tools for CMake   1.0
Visual Studio Tools for CMake

Visual Studio Tools for CMake   1.0
Visual Studio Tools for CMake

Visual Studio Tools for Containers   1.0
Visual Studio Tools for Containers

**Steps to Reproduce**:

1.  Use these .editorconfig rules:
```
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
```
2.  Open this file:
```
using System.Collections.Generic;
using System.Reflection;

class A
{
    internal Dictionary&lt;string, int&gt; B { get; }
}

class C
{
    private void D(A a, PropertyInfo e)
    {
        /*1*/ var f = false;

        foreach (/*2*/ var g in a.B.Keys)
        {
        }

        /*3*/ var h = e.GetValue(this);
    }
}
```

**Expected Behavior**:
`csharp_style_var_when_type_is_apparent` will trump the `csharp_style_var_for_built_in_types` rule.
* /\*1\*/ will not warn, because the type is apparent.
* /\*2\*/ and /\*3\*/ will warn because the types are not apparent.

Irrespective of whether or not a type is built in, the goal is to encourage use of `var` when the type is apparent but encourage use of the explicit type when the type is not apparent.

**Actual Behavior**:
The `csharp_style_var_for_built_in_types` rule trumps the `csharp_style_var_when_type_is_apparent` rule.

No warnings are generated.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36111</IssueID>
    <Title>FAR crashes ServiceHub.RoslynCodeAnalysisService32.exe</Title>
    <Description>**Version Used**: eb082c8f9afb24b196d634adc3844de72af65259

**Steps to Reproduce**: Link to internal repo available upon request

**Expected Behavior**: FAR terminates

**Actual Behavior**: Gold bar indicates external process has crashed and FAR progress indicator loops forever

```
&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.Contract.ThrowIfNull&lt;System.__Canon&gt;(System.__Canon value, string message) Line 19	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypes(System.Collections.Generic.Dictionary&lt;Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.INamedTypeSymbol&gt; equivalentTypesWithDifferingAssemblies, Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Generic.HashSet&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt; verifiedKeys, bool isSearchSymbolCompilation) Line 530	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypes(System.Collections.Generic.Dictionary&lt;Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.INamedTypeSymbol&gt; equivalentTypesWithDifferingAssemblies, Microsoft.CodeAnalysis.ISymbol searchSymbol, Microsoft.CodeAnalysis.ISymbol symbolToMatch, Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Compilation searchSymbolCompilation, Microsoft.CodeAnalysis.Compilation symbolToMatchCompilation, System.Threading.CancellationToken cancellationToken) Line 519	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.OriginalSymbolsMatchCore(Microsoft.CodeAnalysis.ISymbol searchSymbol, Microsoft.CodeAnalysis.ISymbol symbolToMatch, Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Compilation searchSymbolCompilation, Microsoft.CodeAnalysis.Compilation symbolToMatchCompilation, System.Threading.CancellationToken cancellationToken) Line 468	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.OriginalSymbolsMatch(Microsoft.CodeAnalysis.ISymbol searchSymbol, Microsoft.CodeAnalysis.ISymbol symbolToMatch, Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Compilation searchSymbolCompilation, Microsoft.CodeAnalysis.Compilation symbolToMatchCompilation, System.Threading.CancellationToken cancellationToken) Line 395	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.FindImplementationsForInterfaceMemberAsync.AnonymousMethod__1(Microsoft.CodeAnalysis.ISymbol m) Line 178	C#
 	System.Collections.Immutable.dll!System.Linq.ImmutableArrayExtensions.FirstOrDefault&lt;Microsoft.CodeAnalysis.ISymbol&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt; immutableArray, System.Func&lt;Microsoft.CodeAnalysis.ISymbol, bool&gt; predicate) Line 405	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.FindImplementationsForInterfaceMemberAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; typeSymbolAndProjectId, Microsoft.CodeAnalysis.ISymbol interfaceMember, Microsoft.CodeAnalysis.Solution solution, System.Threading.CancellationToken cancellationToken) Line 213	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, System.Threading.CancellationToken cancellationToken) Line 250	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractMethodOrPropertyOrEventSymbolReferenceFinder&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt;.DetermineCascadedSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt; symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions options, System.Threading.CancellationToken cancellationToken) Line 33	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.Finders.PropertyAccessorSymbolReferenceFinder.DetermineCascadedSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt; symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions options, System.Threading.CancellationToken cancellationToken) Line 23	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt;.DetermineCascadedSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions options, System.Threading.CancellationToken cancellationToken) Line 749	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsCoreAsync.AnonymousMethod__0() Line 136	C#
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.(ref Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;&gt;c__DisplayClass21_1.&lt;&lt;DetermineAllSymbolsCoreAsync&gt;b__0&gt;d stateMachine) Line 316	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsCoreAsync.AnonymousMethod__0()	Unknown
```
</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36079</IssueID>
    <Title>??= operator in C# 8 marks parameter as unused</Title>
    <Description>Expected Behaviour: 
Parameters reassigned with ??= should be marked as used and referenced.

Actual Behaviour:
Parameters reassigned with ??= are marked as unused.

Screenshot 1: Parameter "user" is marked as "used" when not using ??= but the conventional way instead
![grafik](https://user-images.githubusercontent.com/1809172/58676206-0970d780-8360-11e9-8c94-cef72a5cc1c3.png)

Screenshot 2: Parameter "user" is marked as "unused" when using ??=
![grafik](https://user-images.githubusercontent.com/1809172/58676217-168dc680-8360-11e9-811a-c50fd5b1d5a1.png)

(Note: the "user" variable is referenced in code after the screenshots)</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36071</IssueID>
    <Title>Object initializer syntax suggests assignment to Getter-Only Properties</Title>
    <Description>**Version Used**: 
Visual Studio 2019

**Steps to Reproduce**:

If you have this class:
````
public class Foo {
  public string Name {get; set;}
  public int Age {get; private set;}
}
````

When you type:
````
var F = new Foo() {
  //Popup appears here
````
The autocomplete popup lists Age as a member.  It shouldn't.  It can't be set.


**Expected Behavior**:
Don't suggest that I can assign to a getter only property.

**Actual Behavior**:
It suggests that I assign to a getter only property.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36016</IssueID>
    <Title>NotNullWhenTrue pattern fails when bool stored in temporary</Title>
    <Description>**Version Used**: VS 16.2.0-pre.1.0+28917.182

**Steps to Reproduce**:

```c#
bool TryGet([NotNullWhenTrue] out object? o)
{
    o = default;
    return false;
}

void M()
{
    bool b = TryGet(out var o);

    if (!b)
    {
        o = new object();
    }

    o.ToString();
//  ^ CS8602 Dereference of a possibly null reference
}
```

Note that if you inline `b` the warning goes away.

**Expected Behavior**:

No warning.

**Actual Behavior**:

Warning.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35926</IssueID>
    <Title>Codelens for internal static variables is not showing up</Title>
    <Description>VSF_TYPE_MARKDOWNI have _internal static class_ and declared some _internal static variables_ at class level. The codelens is not working for this particular variables. Seems to me its a bug.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/542962/codelens-for-internal-static-variables-is-not-show.html
VSTS ticketId: 853984_
_These are the original issue comments:_

Visual Studio Feedback System on 4/23/2019, 01:15 AM (30 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35886</IssueID>
    <Title>Invalid warning IDE0059 when more than two assignments are on the same line</Title>
    <Description>VSF_TYPE_MARKDOWNIDE0059 can't handle more than two declaration/assignments on the same line. The following console app repros 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using static System.Console;

    namespace InvalidWarningIDE0059
    {
        class Program
        {
            static void Main(string[] args)
            {
                int first, second, third, fourth = -1;
                first = DERP();
                second = DERP();
                third = DERP();
                fourth = DERP();
                WriteLine(first);
                WriteLine(second);
                WriteLine(third);
                WriteLine(fourth);
            }
            static int DERP()
            {
                return 1;
            }
        }
    }

The last variable when 2+ variables are declared and assigned on a single line triggers IDE0059. In this example, ```fourth``` is marked with the warning. If you remove ```fourth``` then ```third``` is.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/552602/invalid-warning-ide0059-when-more-than-two-assignm.html
VSTS ticketId: 860172_
_These are the original issue comments:_

Visual Studio Feedback System on 5/4/2019, 07:54 PM (17 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35864</IssueID>
    <Title>C# Text Editor - Add spacing option for tuples</Title>
    <Description>VSF_TYPE_MARKDOWNThere is currently no option to set spacing preferences for tuples.
As a result, the automatic formatting will change something like:
( &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; )
into:
(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
For those who prefer the first, please add &amp;quot;Insert space within element list parentheses (for tuples)&amp;quot;
in Text Editor &amp;gt; C# &amp;gt; Code Style &amp;gt; Formatting &amp;gt; Spacing.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/565361/c-text-editor-add-spacing-option-for-tuples.html
VSTS ticketId: 891843_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/13/2019, 02:11 AM (8 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35860</IssueID>
    <Title>.editorconfig rules for private const fields don't seem to apply</Title>
    <Description>**Version Used**: 

Visual Studio Enterprise 2019 Preview 16.2.0 Preview 1.0

**Steps to Reproduce**:

1. Download the attached editorconfig.txt and rename it to .editorconfig
[editorconfig.txt](https://github.com/dotnet/roslyn/files/3204962/editorconfig.txt)
2. Create a project with some private const fields
3. Name the fields in the UPPERCASE_WITH_UNDERSCORES format

**Expected Behavior**:

VS should suggest that I change these names to PascalCase

**Actual Behavior**:

VS doesn't suggest anything</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35854</IssueID>
    <Title>'Make local function static' removes empty line above local function</Title>
    <Description>**Version Used**: VS 16.1 and C#8 preview

**Steps to Reproduce**:

1. `Ctrl+.` on `LocalFunc` and hit `Make local function static`

```C#
using System;
namespace ConsoleApp9 {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello World!");

            int LocalFunc() =&gt; 123;
        }
    }
}
```

**Expected Behavior**:

The empty line above the local function is preserved

```C#
using System;
namespace ConsoleApp9 {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello World!");

            static int LocalFunc() =&gt; 123;
        }
    }
}
```

**Actual Behavior**:

The empty line above the local function is removed

```C#
using System;
namespace ConsoleApp9 {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello World!");
            static int LocalFunc() =&gt; 123;
        }
    }
}
```</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35845</IssueID>
    <Title>"IDE0059: Value assigned to variable is never used" is appearing with local function</Title>
    <Description>VSF_TYPE_MARKDOWNThe warning appears on variable &amp;quot;check&amp;quot; in the following code:

```
       public bool TestMethod()
        {
            bool check = true;
            LocalFunction();
            return check;

void LocalFunction()
            {
                check = false;
                Console.WriteLine(check);
            }
        }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/575232/ide0059-value-assigned-to-variable-is-never-used-i.html
VSTS ticketId: 896188_
_These are the original issue comments:_

Visual Studio Feedback System on 5/20/2019, 09:35 PM (13 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35817</IssueID>
    <Title>Nullable warnings for contravariant interface implementations</Title>
    <Description>**Version Used**: 
3.2.0-beta1-19266-05+04c76c9d58c7911e2fd199da145cd97bbf283438

**Steps to Reproduce**:
```C#
#nullable enable
class Program : IFoo
{
    static void Main() { }

    public bool MyEquals(object? o) =&gt; true;
}

interface IFoo
{
    bool MyEquals(object o);
}
```

**Expected Behavior**:
Compiles without warning.

**Actual Behavior**:
```
warning CS8614: Nullability of reference types in type of parameter 'o' doesn't match implicitly implemented member 'bool IFoo.MyEquals(object o)'.
```</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35736</IssueID>
    <Title>Getting thousands of naming-style violations with latest VS build</Title>
    <Description>I'm seeing this error over basically the entirety of my codebase:

![image](https://user-images.githubusercontent.com/4564579/57811498-419cd700-771f-11e9-8605-3eb740661bae.png)

To get an idea, this is now upwards of tens of thousands of messages:

![image](https://user-images.githubusercontent.com/4564579/57811526-52e5e380-771f-11e9-99d0-823b4060d21f.png)

It effectively makes messages useless and very much clitters up the entire UI since nearly 100% of all our fields in all our projects are marked this way.  

This is def a regression and doesn't match our editorconfig rules (which state that private fields should begin with underscore). 

I'm running:

![image](https://user-images.githubusercontent.com/4564579/57811589-77da5680-771f-11e9-9f8d-348c8087e947.png)

I can provide more details if necessary.  But i really would like this fixed asap.  Thanks!</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35735</IssueID>
    <Title>Code fix adding access modifier removes "extern"</Title>
    <Description>VSF_TYPE_MARKDOWNFor a static extern method (P/Invoke), I get the suggestion to add an access modifier. When I use it, the &amp;quot;private&amp;quot; is added but the &amp;quot;extern&amp;quot; is removed. This breaks the code.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/564842/code-fix-adding-access-modifier-removes-extern.html
VSTS ticketId: 891487_
_These are the original issue comments:_

Visual Studio Feedback System on 5/13/2019, 01:08 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35721</IssueID>
    <Title>Invalid color of an interpolated string parameter of the http URL.</Title>
    <Description>
The whole interpolated string including the parameter looks like a link and CTRL + click even follows it. I would expect `{param}` is not displayed as a link and has a different color.

![param](https://user-images.githubusercontent.com/34036102/57769514-663c8300-770e-11e9-803b-a0f555cec120.png)
Version: Visual Studio Community 16.0.4

</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35684</IssueID>
    <Title>Should `static bool IsDefault&lt;T&gt;(T xx = default) =&gt; xx == default;` compile?</Title>
    <Description>**Version Used**: 
sharplab.io(master/2.9.0)

**Steps to Reproduce**:
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/DwogNn2AHt+AG3wBJKABE4AMwgBXITCIAeACoA+ABSr8AD134AvPhQz5igJRH1eg4eMA7BUPIVOXXgOFjJZhTDo1LR19IxM/S2tbfABLKHwnIRd2TmJPQRFxKVl/aiDtaONTHMjDG1D7cJKYV3cAejq0vgyfbPMYABZ8kLsq9qsywqKImG0LVwBfIA=

**Expected Behavior**:
https://github.com/dotnet/csharplang/blob/98043cdc889303d956d540d7ab3bc4f5044a9d3b/proposals/csharp-7.1/target-typed-default.md
`xx == default` should be the same as `xx == default(T)`, and can't compile.

**Actual Behavior**:
`xx == default` is compile as `xx == null` without warns, and so `default(T) == default` is always false for struct.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35592</IssueID>
    <Title>#nullable enable should detect nested initialization of fields</Title>
    <Description>**Version Used**: 
C# 8.0, .Net Core SDK 2.1.700

**Steps to Reproduce**:
With #nullable enable, "Non-nullable field is uninitialized" warning will show up if some field is not initialized in constructor. But sometimes we want to initialize some thing in a function so that it can be well structured, or we need to call an abstract function on children class. So this is bug is filed as a suggestion to consider detect nested initialization for #nullable enable. Thank you so much!
Code example: 

```
 public PipeProgressEventArgs(Stream stream)​
            : base(stream)​
        {​
            Initialize();​
        }​
​
        private void Initialize()​
        {​
            Progress = new ProgressEventArgs("Package", 12, ProgressType.Install);​
        }​
```

**Expected Behavior**:
No warning.
**Actual Behavior**:
 "Non-nullable field is uninitialized" shows up around the constructor.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35583</IssueID>
    <Title>CSharpSimplifyTypeNamesDiagnosticAnalyzer throws InvalidCastException</Title>
    <Description>#### Package Version

Latest VS Int.Preview

#### Diagnostic ID

CSharpSimplifyTypeNamesDiagnosticAnalyzer

#### Repro steps

On a line where not all the symbols are resolved (in this case due to a failed design-time build and assemblies are missing), we see analyzer exceptions, including this one:

#### Actual behavior

```
Severity	Code	Description	Project	File	Line	Source	Suppression State	Tool	Detail Description
Error	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.			1	IntelliSense	Active	Microsoft.CodeAnalysis.CSharp.Features	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.VisualStudio.CMake.Package
SyntaxTree: D:\VS\src\vc\projbld\CMake\Package\Telemetry\Telemetry.cs
SyntaxNode: Microsoft.VisualStudio.Workspace ... [MemberAccessExpressionSyntax]@[35955..36052) (794,35)-(794,132)

System.InvalidOperationException: Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'
   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)
   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion, Conversion newConversion)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel, CommonForEachStatementSyntax originalForEach, SemanticModel newModel, CommonForEachStatementSyntax newForEach)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement, TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(MemberAccessExpressionSyntax memberAccess, ExpressionSyntax reducedName, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(MemberAccessExpressionSyntax memberAccess, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, Boolean&amp; inDeclaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpressionCore(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, Boolean&amp; inDeclaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.SimplifyTypeNames.SimplifyTypeNamesDiagnosticAnalyzerBase`1.TrySimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, AnalyzerOptions analyzerOptions, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.&lt;&gt;c__DisplayClass2_0.&lt;AnalyzeNode&gt;g__descendIntoChildren|1(SyntaxNode n)
   at Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.PushChildren(SyntaxNode node, Func`2 descendIntoChildren)
   at Microsoft.CodeAnalysis.SyntaxNode.&lt;DescendantNodesOnly&gt;d__167.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.AnalyzeNode(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__50`1.&lt;ExecuteSyntaxNodeAction&gt;b__50_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35559</IssueID>
    <Title>"Format document" no longer removes unused using directives</Title>
    <Description>VSF_TYPE_MARKDOWNIn the previous version of Visual Studio, &amp;quot;Format document&amp;quot; (or CTRL+E, D) would format the code and also remove unnecessary using directives. 

In VS2019 the unnecessary using directives are no longer being removed.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/550620/format-document-no-longer-removes-unused-using-dir.html
VSTS ticketId: 858086_
_These are the original issue comments:_

Visual Studio Feedback System on 4/29/2019, 10:56 PM (7 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35533</IssueID>
    <Title>The program text fragment with the initialization of the dictionary Is not formatted properly.</Title>
    <Description>VSF_TYPE_MARKDOWNThere is no Proper alignment when inserting the trailing parenthesis **&amp;quot;}&amp;quot;** or the &amp;quot;Format Document&amp;quot; command (**Ctrl-K, Ctrl-D**).
The Correct formatting can only be obtained by **manually** adding dictionary values.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/507237/the-program-text-fragment-with-the-initialization.html
VSTS ticketId: 829994_
_These are the original issue comments:_

Visual Studio Feedback System on 3/27/2019, 09:37 PM (39 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Enbi Zhang [MSFT] on 4/3/2019, 00:19 AM (33 days ago): &lt;p&gt;Thanks for your feedback.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Could you provide a video or gif for reproduce steps?&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;

Konstantin 'Office 365' Dyakov on 4/3/2019, 01:33 AM (33 days ago): &lt;p&gt;Я могу дать вам файл с текстом, который не форматируется.&lt;/p&gt;

Konstantin 'Office 365' Dyakov on 4/3/2019, 01:55 AM (33 days ago): &lt;p&gt;Вот такой файл. &lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/attachments/66234-ctrlkd-testcs.zip"&gt;ctrlkd-testcs.zip&lt;/a&gt;&lt;/p&gt;

Wendy Wang [MSFT] on 4/3/2019, 11:16 PM (32 days ago): &lt;p&gt;Translated from Bing:&lt;/p&gt;&lt;p&gt;Here's a file.&lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/temp/66234-ctrlkd-testcs.zip"&gt;ctrlkd-testcs.zip&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

Wendy Wang [MSFT] on 4/3/2019, 11:16 PM (32 days ago): &lt;p&gt;Translated from Bing:&lt;/p&gt;&lt;p&gt;I can give you a file with text that is not formatted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

Visual Studio Feedback System on 4/9/2019, 10:57 PM (26 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35519</IssueID>
    <Title>Strange bug about const</Title>
    <Description>**Version Used**: 16.0.3

**Steps to Reproduce**:

1. Type this code:
```
    class Program
    {
        const int length = 5;

        static void Main(string[] args)
        {
            int len = 2;
            if (len &lt; length)
                Console.WriteLine("OK");
        }
    }
```
2. Find All References for `length`

result:
![bug](https://user-images.githubusercontent.com/2529999/57193341-83ce5780-6f6c-11e9-8fa7-423756d8257f.png)

**Expected Behavior**: `if (len &lt; length)`

**Actual Behavior**: `if (len &lt; )`
</Description>
    <CreatedDate>05/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35429</IssueID>
    <Title>False "remove unused fields" &amp; methods from XAML events</Title>
    <Description>**Version Used**: latest

**Steps to Reproduce**:

1. Clone https://github.com/NuGetPackageExplorer/NuGetPackageExplorer
2. Look at the information roslyn detects

**Expected Behavior**:
It should not have suggestions for removing unused parameters from event handlers where the signature matters. It also misses one event entirely and sees it as unused.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1427284/57051494-c7b11c00-6c4f-11e9-8140-79f4393a6897.png)
</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35409</IssueID>
    <Title>CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping failed in CI</Title>
    <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=175271&amp;view=logs</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35296</IssueID>
    <Title>Visual Studio reports incorrect type for nullable reference type when using `var`</Title>
    <Description>VSF_TYPE_MARKDOWNVisual Studio 2019 Preview, C# 8.0 beta, .NET Core 3.0 preview of some kind. Nullable reference types enabled through `&amp;lt;NullableContextOptions&amp;gt;enable&amp;lt;/NullableContextOptions&amp;gt;` in the `.csproj`.

For this code snippet:

```
string? meh = null;
var t = meh?.GetType(); // VS thinks t is Type
```

Visual Studio, on mouse hover over `t`, reports the type of `t` as `Type` and not `Type?`.

As far as I can tell, this is incorrect. `t` is of type `Type?` and behaves as expected. For example, an attempt to then assign it to a variable of `Type` will fail:

```
Type t2 = t; // warning, as expected
Type? t3 = t; // no warning, as expected
```

Here's my `.csproj`:

```
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp3.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;LangVersion&amp;gt;8.0&amp;lt;/LangVersion&amp;gt;
    &amp;lt;NullableContextOptions&amp;gt;enable&amp;lt;/NullableContextOptions&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;PropertyGroup Condition=&amp;quot;'$(Configuration)|$(Platform)'=='Debug|AnyCPU'&amp;quot;&amp;gt;
    &amp;lt;WarningsAsErrors&amp;gt;NU1605;CS8600;CS8602&amp;lt;/WarningsAsErrors&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
```

Thanks!

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/476671/visual-studio-reports-incorrect-type-for-nullable.html
VSTS ticketId: 807802_
_These are the original issue comments:_

Visual Studio Feedback System on 3/4/2019, 06:32 PM (52 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35224</IssueID>
    <Title>Code Cleanup having trouble with switch expression</Title>
    <Description>See the screenshot from Roslyn source below. The switch expression is flagged for IDE0055, but click "Run code clean up" in VS doesn't do anything.

```
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(82,9,82,13): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(83,13,83,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(84,13,84,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(85,13,85,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(86,9,86,13): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\MoveToNamespaceResult.cs(21,38,21,39): warning IDE0055: Fix formatting
```


![image](https://user-images.githubusercontent.com/788783/56619457-6b5c5580-65da-11e9-9f40-526553c5863d.png)
http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/MoveToNamespace/AbstractMoveToNamespaceCodeAction.cs,49
</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35222</IssueID>
    <Title>Completion is incorrect for lambda parameters</Title>
    <Description>```C#
using System;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            Test(prog =&gt; prog.[||]); // Invoke completion on prog.
        }

        static void Test(Action&lt;Program&gt; d)
        {
        }
    }
}
```

Invoking completion here brings up the members of `Action&lt;Program&gt;`, not the members of `Program`, rendering completion completely useless. cc @ivanbasov.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35101</IssueID>
    <Title>Migrate ALM IVTs to the External Access pattern</Title>
    <Description>Applies to **Microsoft.VisualStudio.Alm.Shared.CodeAnalysisClient**.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34986</IssueID>
    <Title>Provide an extension point to disable IDE0051 on selected members</Title>
    <Description>We have private methods in our codebase that trigger an IDE0051, because there are no references visible to the analyzer.

These methods get called by reflection and therefore shouldn't be removed. They are all decorated with a custom attribute. 

I found #31036 wich adds a list of attributes that disable IDE0051 on selected members.

My suggestion is to make these list extensible bei either an attribute or a marker interface to decorate custom attributes. Something like

```c#
[
    IndicatesUsage
]
public sealed class MyAttribute : Attribute
{}
```
or

```c#
public sealed class MyAttribute : Attribute, IUsageIndicator
{}
```
Members decorated with such an attribute should not trigger IDE0051:

```c#
[
    MyAttribute
]
private void GetsMagicallyCalled()
{}
```
This would enable library authors to prevent false positives for users of their libraries.

**Version Used**: 
VS2019

</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34957</IssueID>
    <Title>Unexpected value 'UnsetConversionKind'</Title>
    <Description>**Version Used**: 
Visual Studio 16.1.0 Preview 1.0

**Steps to Reproduce**:
I don't have an exact case as the crash happened during rewriting some code and I haven't been able to reproduce it yet.
The code was somewhat similar to:
```
var a = new List&lt;int&gt;();
var b = new List&lt;int&gt;();

foreach ((int x, int y, int z) in
    a.Zip(
    b.Join(b,
            e =&gt; e,
            e =&gt; e,
            (s, t) =&gt; (s, t)),
    (f, g) =&gt; (f, g.s, g.t)))
{
}
```

**Expected Behavior**:
No exception.

**Actual Behavior**:
```
System.InvalidOperationException : Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'
   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)
   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion,Conversion newConversion)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel,CommonForEachStatementSyntax originalForEach,SemanticModel newModel,CommonForEachStatementSyntax newForEach)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode previousOriginalNode,SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_1.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

It looks like https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/ConversionKindExtensions.cs is missing a case for `UnsetConversionKind` after that enum was added in #33648.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34954</IssueID>
    <Title>References of kind Qualify are missing method name</Title>
    <Description>**Version Used**: 
16.1.0 Preview 1.0

**Steps to Reproduce**:
```c#
public class Class1
{
    public async void Bar() =&gt; await Task.Delay(0);

    public async Task Baz() =&gt; await Task.Delay(0);
}
```

1. Find all references on `Task` 
2. Look at the "'Task' references" window.

**Expected Behavior**:
The two references of kind Qualify should both show `Task.Delay(0)`

**Actual Behavior**:
For `Bar` it only shows `Task.(0)`
![image](https://user-images.githubusercontent.com/919634/56020957-9c9a7300-5d08-11e9-934c-7263182e8445.png)
</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34936</IssueID>
    <Title>Make CommandLineProject available via NuGet</Title>
    <Description>As of Roslyn 3.0.0 NuGet family the type https://github.com/dotnet/roslyn/blob/0c47f8d51f7f6533b3045f36e63eb55b2f7647c2/src/Workspaces/Core/Desktop/Workspace/CommandLineProject.cs#L17 is not shipping via NuGet.

It is a useful type and we should find a new home for it.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34829</IssueID>
    <Title>AD0001 (unreachable) for the CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer</Title>
    <Description>**Version Used**:
16.0.0

**Steps to Reproduce**:
```csharp
public class C
{
    private const string m = "";
}
```

Opening my solution with this file already open immediately results in
```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'This program location is thought to be unreachable.'.	*		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: *
ISymbol: m (Field)

System.InvalidOperationException: This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.ShouldReportUnusedParameters(ISymbol symbol, UnusedParametersPreference unusedParametersPreference, ReportDiagnostic unusedParametersSeverity)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```

**Expected Behavior**:
No AD0001, but an actual diagnostic

**Actual Behavior**:
AD0001 with stack trace</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34803</IssueID>
    <Title>Highlighting call to local function calls ExtractMethodCodeRefactoringProvider to throw</Title>
    <Description>**Version Used**: 

Visual Studio 2017

**Steps to Reproduce**:

```cs
class Program {
    public static void Main() {
        int x = 1;
        int Func() =&gt; x + (x = 2);
        Func();
    }
}
```

Highlight the call to `Func();` on the last line

**Expected Behavior**:

Not throw an exception

**Actual Behavior**:

`ExtractMethodCodeRefactoringProvider encountered an error and has been disabled`

```
System.InvalidOperationException : Matrix does not contain Key 'AB'.
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
```

---

Method extraction with local functions turns out to be really hard yet again :wink: (Sorry if I spammed y'all with a bajillion Watsons while narrowing this down to a minimal repro)</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34645</IssueID>
    <Title>Decimal literal parsing is not deterministic</Title>
    <Description>Roslyn uses the function `decimal.TryParse` from BCL to parse decimal literals.  Some versions of the BCL do not get the precisely correct result in edge cases, therefore the compiler's output may depend on which runtime library it is run with.  See also #375 and https://github.com/dotnet/roslyn/issues/372#issuecomment-478350734 .</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>31/12/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34641</IssueID>
    <Title>Light bulb suggest to remove a parameter</Title>
    <Description>VB 16 RC4

make a XML variable with a embeded vb variable see picture:

Don't suggest to remove the parameter
![URI-Parameter](https://user-images.githubusercontent.com/49092462/55347520-67468780-54b5-11e9-927e-4c2c2a15f1b1.png)
</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34604</IssueID>
    <Title>Automatic completion of ToString override should make return non-nullable</Title>
    <Description>Prerequsite: https://github.com/dotnet/roslyn/issues/23268

See long discussion on https://github.com/dotnet/coreclr/pull/23466

It appears System.Object will return `string?`. If that decision is changed, this can be closed.

Part of the rationale of that decision is that subclasses can override and indicate that they do not return null. We should encourage new subclasses to do that by having an appropriate completion.

**Steps to Reproduce**:

1. Create a new project in VS
2. Enable nullable reference types
3. Reference a corefx where `Object.ToString()` returns `string?
4. Create a new type in the project and have it complete a ToString override

``` C#
class Foo
{
   // Put cursor here and type `override ToString [TAB]`
}
````

**Expected Behavior**:

The new override is generated with signature `public override string ToString()`

**Actual Behavior**:

The new override is generated with signature `public override string? ToString()`

</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34566</IssueID>
    <Title>Value Tracking</Title>
    <Description>[Internal Ask]
aka. Inspect or Value Origin/Destination

**Version Used**: Visual Studio 2019

**Scenarios**:
&gt; 1. If I change the value of this variable, what code in which methods will be impacted? 
&gt; 2. We hit a NullReferenceException due to some parameter or other variable being null. How could this have happened? Where and from which methods could this value have come from? (The value doesn't have to be null, could be any other constant value, but null is probably the most common case)

**Expected Behavior**:
Visual Studio provides some way to open a separate window (keyboard shortcut or context menu) and you can inspect origin or destination of the value.
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34373</IssueID>
    <Title>Intellisense commits unselected entry after Backspace and Tab in snippets</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.4.3+28714.193

**Steps to Reproduce**:

Enable _Show completion list after a character is deleted_

1. Type `foreach` and press Tab twice to insert the snippet.
2. Tab into the `collection` variable and press Backspace to delete the whole word. At this point, the intellisense will appear with nothing preselected:
![image](https://user-images.githubusercontent.com/10546952/54865505-9d259680-4d66-11e9-95ad-584f5ad43d8c.png)

4. Press Tab.

**Expected Behavior**: Select the next field in the snippet, i.e. `var`. The same behavior when the intellisense is dismissed with Esc first and then Tab is pressed.

**Actual Behavior**: `#if` (or other last selected item) is inserted.

I have snippets where removing the whole entry is a valid input and this behavior breaks it. Regardless of that scenario, there is nothing selected in the intellisense so nothing should be inserted.
</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34354</IssueID>
    <Title>Spanish_Unit_Tests Job test timeout exceeded</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=130642&amp;view=logs&amp;jobId=25fa373a-98a5-5235-2ed8-ead0b7a28f80)
[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=130679&amp;view=logs)

```
   6 running,  0 queued, 54 completed
   5 running,  0 queued, 55 completed
   4 running,  0 queued, 56 completed
   3 running,  0 queued, 57 completed
   2 running,  0 queued, 58 completed
   1 running,  0 queued, 59 completed
Roslyn Error: test timeout exceeded, dumping remaining processes
Dumping xunit.console.x86 5456 to F:\workspace\_work\1\s\artifacts\log\Debug\xunit.console.x86-0.dmp ... succeeded
Command failed to execute with exit code 1: F:\workspace\_work\1\s\artifacts\bin\RunTests\Debug\net472\RunTests.exe "C:\Users\vsagent\.nuget\packages\xunit.runner.console\2.4.1-pre.build.4059\tools\net472" "-out:F:\workspace\_work\1\s\artifacts\TestResults\Debug" "-logs:F:\workspace\_work\1\s\artifacts\log\Debug" -nocache -tfm:net472 -xml -timeout:65 -procdumppath:F:\workspace\_work\1\s\.tools\ProcDump F:\workspace\_work\1\s\artifacts\bin\InteractiveHost.UnitTests\Debug\net472\InteractiveHost.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.Build.Tasks.CodeAnalysis.UnitTests\Debug\net472\Microsoft.Build.Tasks.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.FunctionResolver.UnitTests\Debug\net472\Microsoft.CodeAnalysis.ExpressionEvaluator.FunctionResolver.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.UnitTests\Debug\net472\Microsoft.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.Compilers.VisualBasic.IOperation.UnitTests\Debug\net472\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.VisualStudio.Next.UnitTests\Debug\net472\Roslyn.VisualStudio.Next.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\VBCSCompiler.UnitTests\Debug\net472\VBCSCompiler.UnitTests.dll
System.Management.Automation.RuntimeException: Command failed to execute with exit code 1: F:\workspace\_work\1\s\artifacts\bin\RunTests\Debug\net472\RunTests.exe "C:\Users\vsagent\.nuget\packages\xunit.runner.console\2.4.1-pre.build.4059\tools\net472" "-out:F:\workspace\_work\1\s\artifacts\TestResults\Debug" "-logs:F:\workspace\_work\1\s\artifacts\log\Debug" -nocache -tfm:net472 -xml -timeout:65 -procdumppath:F:\workspace\_work\1\s\.tools\ProcDump F:\workspace\_work\1\s\artifacts\bin\InteractiveHost.UnitTests\Debug\net472\InteractiveHost.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.Build.Tasks.CodeAnalysis.UnitTests\Debug\net472\Microsoft.Build.Tasks.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.FunctionResolver.UnitTests\Debug\net472\Microsoft.CodeAnalysis.ExpressionEvaluator.FunctionResolver.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.UnitTests\Debug\net472\Microsoft.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.Compilers.VisualBasic.IOperation.UnitTests\Debug\net472\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.VisualStudio.Next.UnitTests\Debug\net472\Roslyn.VisualStudio.Next.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\VBCSCompiler.UnitTests\Debug\net472\VBCSCompiler.UnitTests.dll
en Exec-CommandCore, F:\workspace\_work\1\s\eng\build-utils.ps1: línea 81
en Exec-Console, F:\workspace\_work\1\s\eng\build-utils.ps1: línea 150
en TestUsingOptimizedRunner, F:\workspace\_work\1\s\eng\build.ps1: línea 429
en &lt;ScriptBlock&gt;, F:\workspace\_work\1\s\eng\build.ps1: línea 611
en &lt;ScriptBlock&gt;, &lt;sin archivo&gt;: línea 1
Killing running build processes...
##[error]Cmd.exe exited with code '1'.
##[section]Finishing: Build and Test
```
</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34308</IssueID>
    <Title>VS2019 RC.2 Find References window displays references incorrectly</Title>
    <Description>VSF_TYPE_MARKDOWNIn my code there is a line like below;

IFoobar foo = GetFooBar();

if i press Shift + F12 (Find All References) on IFooBar

Find References windows shows like this;

IFoobar foo = ();

I attached a sample screenshot..

![vs15 9](https://user-images.githubusercontent.com/611219/54726454-6b2aef00-4b30-11e9-986c-e4e4be7139c0.jpg)
VS 2017.9 on the left  vs VS 2019 RC on the right


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489651/vs2019-rc2-find-references-window-displays-referen.html
VSTS ticketId: 820583_
_These are the original issue comments:_

Visual Studio Feedback System on 3/14/2019, 07:46 PM (5 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/20/2019, 00:41 PM (4 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34221</IssueID>
    <Title>RenameTagProducerTests.CSharp_FixupSpanDuringResolvableConflict_NonReferenceConflict Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=126806&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Equal() Failure
Expected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[173..176), [266..269)]
Actual: List&lt;Span&gt; [[173..176), [266..269), [266..269)]
```</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34155</IssueID>
    <Title>Debugger incorrectly evaluates indexer of generic type</Title>
    <Description>**Version Used**: Microsoft Visual Studio Enterprise 2019 Int Preview Version 16.0.0 Preview 4.3 [28711.165.d16.0stg]

**Steps to Reproduce**:

1.  Compile the following program
2.  Set a breakpoint at the end of `Main`
3.  Evaluate `d[1].Item1` in the Watch window

``` c#
using System.Collections.Generic;

class Program
{
    public unsafe static void Main()
    {
        var d = new Dictionary&lt;int, (string, int)&gt;();
        d.Add(1, ("string", 1));
        var tmp = d[1];
    }
}
```

**Expected Behavior**:

Displays `"string"`

**Actual Behavior**:

Displays `null`

![image](https://user-images.githubusercontent.com/3804346/54448246-7c2ac900-4708-11e9-93af-e444ed036916.png)
</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34008</IssueID>
    <Title>Code Formatting option to enforce using directive inside a namespace</Title>
    <Description>Apologies if I missed this. I did my best to search through issues.

Both Resharper and StyleCop had formatting rules where they could enforce using directives to be placed inside the namespace.

At the moment Visual Studio lets me place using directives inside the namespace and it works fine with them when refactoring but it does not let me *enforce* that all using directive *should* be inside a namespace.
</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33898</IssueID>
    <Title>Parameter used in XML literal reported as unused</Title>
    <Description>&gt; @mavasani This parameter is incorrectly reported as unused.

_Originally posted by @sharwell in https://github.com/dotnet/roslyn/pull/33028#discussion_r262971002_</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33751</IssueID>
    <Title>Suppress in source option for suppressing errors and warnings from analyzers etc.. ALWAYS uses #pragma instead of attributes</Title>
    <Description>VSF_TYPE_MARKDOWNUsing pragmas for suppression inline in the source is just plain ugly and intrusive. This is especially egregious in cases where the reason for suppressing the analyzer is one of readability. Previous versions of the IDE used an attribute. Please at least provide an option/setting somewhere (ideally visible at the moment I choose to suppress) to allow me to choose the form used. 

Note: This is a clone of https://developercommunity.visualstudio.com/content/problem/4846/suppress-in-source-option-for-suppressing-errors-a.html, but I'm providing a repro.

Reproducible at least in VS2017 and VS 2019 Preview 3 and Preview 4.

Steps to replicate:
1. Create a new .NET Framework class library, C#
2. Add the Microsoft.CodeQuality.Analyzers NuGet package (using v2.6.3)
3. Add a public method like this:

  
```
  public void Foo(CancellationToken cancellationToken, int num)
  {
    this.GetHashCode();
  }
```


There will be a CA1068 warning reported in the error list. When right-clicking, you have the option to either suppress &amp;quot;in source&amp;quot; or in a &amp;quot;suppression file&amp;quot;. If you choose the former, it does this:

```
#pragma warning disable CA1068 // CancellationToken parameters must come last
  public void Foo(CancellationToken cancellationToken, int num)
#pragma warning restore CA1068 // CancellationToken parameters must come last
  {
    this.GetHashCode();
  }
```

This is way ugly. The problem is, that it's totally possible to suppress this warning with an attribute, as evidenced by the fact that it lets you suppress via suppression file. When choosing that option, you get something like:

```
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(&amp;quot;Design&amp;quot;, &amp;quot;CA1068:CancellationToken parameters must come last&amp;quot;, Justification = &amp;quot;&amp;lt;Pending&amp;gt;&amp;quot;, Scope = &amp;quot;member&amp;quot;, Target = &amp;quot;~M:SuppressWarningTest.Class1.Bar(System.Threading.CancellationToken,System.Int32)&amp;quot;)]
```

What I would expect, is that supressing in source would give me something the following:

```
  [SuppressMessage(&amp;quot;Design&amp;quot;, &amp;quot;CA1068:CancellationToken parameters must come last&amp;quot;, Justification = &amp;quot;Pending&amp;quot;)]
  public void Foo(CancellationToken cancellationToken, int num)
  {
    this.GetHashCode();
  }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/471804/suppress-in-source-option-for-suppressing-errors-a-1.html
VSTS ticketId: 803342_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_

Manish Vasani [MSFT] solved on 2/27/2019, 00:31 PM (6 hours ago), 1 votes: &lt;p&gt;Dupe of &lt;a target='_blank' href="https://github.com/dotnet/roslyn-analyzers/issues/1902#issuecomment-440772228."&gt;https://github.com/dotnet/roslyn-analyzers/issues/1902#issuecomment-440772228.&lt;/a&gt; We should probably consider porting this issue to &lt;a target='_blank' href="https://github.com/dotnet/roslyn/issues,"&gt;https://github.com/dotnet/roslyn/issues,&lt;/a&gt; as the feature request belongs to that repo.&lt;/p&gt;&lt;p&gt;Regards,&lt;/p&gt;&lt;p&gt; Manish&lt;/p&gt;


robsiklos on 2/27/2019, 00:53 PM (5 hours ago): 
&lt;p&gt;Done: https://github.com/dotnet/roslyn/issues/33724&lt;/p&gt; 
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33737</IssueID>
    <Title>IDE0060 false positive with null coalescing assignment</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0
VisualStudio.16.Preview/16.0.0-pre.3.0+28608.199

**Steps to Reproduce**:

```
namespace ConsoleApp15
{
    class Program
    {
        static void Main(string[] args)
        {
            args ??= new string[] { "hi there" };
            System.Console.WriteLine(args[0]);
        }
    }
}
```

**Expected Behavior**:

No warning.

**Actual Behavior**:

```
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0060	Remove unused parameter 'args', its initial value is never used	ConsoleApp15	E:\Scratch\ConsoleApp15\ConsoleApp15\Program.cs	5	Active
```

*Note: * Changing to use the old style `args = args ?? ...` removes IDE0060 warning, but shows up IDE0054 warning instead :)</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33724</IssueID>
    <Title>Suppress in source as an attribute should be one option</Title>
    <Description>Porting from https://github.com/dotnet/roslyn-analyzers/issues/1902, as suggested in https://developercommunity.visualstudio.com/content/problem/471804/suppress-in-source-option-for-suppressing-errors-a-1.html

#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)
#### Package Version

v2.6.3
#### Diagnostic ID

All code analysis rules.
#### Repro steps

    1. Create a project which violates some CA rule.

    2. Compile.

    3. Use quick action "Suppress &gt; In Source..."

    4. Notice that it uses `#pragma disable … #pragma enable` pair.

#### Expected behavior

I would expect that "suppress in source..." would insert `[SuppressMessage]` attribute, same as "suppress in suppression file" does. `[SuppressMessage]` attribute can be placed on members, too, like this:

[SuppressMessage("Globalization", "CA1304:Specify CultureInfo", Justification = "")]

At least, it should be an option:

    * Suppress &gt; In source as a #pragma directive...

    * Suppress &gt; In source as an attribute...

    * Suppress &gt; In suppression file...</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33689</IssueID>
    <Title>No warnings or errors are shown inside Visual Studio for rules in .editorconfig</Title>
    <Description>**Version Used**: 

Visual Studio 2017 15.9.7

**Steps to Reproduce**:

1. Create a .net core console app (I'm using .net core 2.2)
2. Add an .editorconfig
3. Make some change that violate a rule that has :error or :warning

&lt;img width="187" alt="vs_solution" src="https://user-images.githubusercontent.com/19637414/53400220-b167b500-39ad-11e9-87c3-f5b8b231e6d9.png"&gt;
&lt;img width="452" alt="vs_editorconfig" src="https://user-images.githubusercontent.com/19637414/53400231-b4fb3c00-39ad-11e9-8f67-138903be400d.png"&gt;
&lt;img width="521" alt="vs_program" src="https://user-images.githubusercontent.com/19637414/53400237-b6c4ff80-39ad-11e9-820f-7b6bcb8951fa.png"&gt;

**Expected Behavior**:
An error or a warning is shown inside the text editor view

**Actual Behavior**:
No change in the text editor view

**Notes**
I've tried reloading/restarting but that does not help.
Visual Studio automatically fixes the violation if I format the document.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33644</IssueID>
    <Title>DeclarePublicAPIFix code fix crashing</Title>
    <Description>**Version Used**:
dev16 preview. Doesn't reproduce in dev15.

**Steps to Reproduce**:

1. Add public API to Microsoft.CodeAnalysis.CSharp
2. Inspect the new diagnostic on the member not added to PublicAPI.Unshipped.txt
3. Run the DeclarePublicAPIFix

**Expected Behavior**:

Line added to PublicAPI.Unshipped.txt

**Actual Behavior**:

Code fix is disabled with the exception/stack trace below:
```
System.AggregateException : One or more errors occurred. ---&gt; Object reference not set to an instance of an object.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId,SourceText newText)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyAdditionalDocumentTextChanged(DocumentId documentId,SourceText newText)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.Apply(Workspace workspace,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)&lt;---
```
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33538</IssueID>
    <Title>VBCSCompiler not cancelling when existing VS</Title>
    <Description>I have a lot of analyzers for a particular build configuration and even after exiting VS, VBCSCompiler will continue to run - looks like cancellation when there are slow analyzers is no longer working in latest preview.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/438750/vbcscompiler-not-cancelling-when-existing-vs.html
VSTS ticketId: 780026_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33471</IssueID>
    <Title>“x &amp; y” can be false when both x and y are true</Title>
    <Description>Original post: https://stackoverflow.com/questions/24683107/how-can-x-y-be-false-when-both-x-and-y-are-true

Just passing this on since it seems to be an existing discrepancy between the compiler &amp; C# specification.

Here's the main body of explanation from that external post:

&gt; The puzzle is exploiting what, in my opinion, is a bug in the C# compiler. (The bug affects VB.NET as well.)
&gt; 
&gt; In the C# 5.0 specification, §4.1.8 says that "The possible values of type bool are true and false", and §7.11.3 says that operator &amp;(bool x, bool y) is a logical operator:
&gt; 
&gt; The result of x &amp; y is true if both x and y are true. Otherwise, the result is false.
&gt; 
&gt; It's obviously a violation of the specification for true &amp; true to yield false. What's going on?
&gt; 
&gt; At run time, a bool is represented by a 1-byte integer. The C# compiler uses 0 to represent false and 1 to represent true. To implement the &amp; operator, the C# compiler emits a bitwise AND instruction in the generated IL. At first glance, this seems to be okay: bitwise AND operations involving 0 and 1 correspond exactly with logical AND operations involving false and true.
&gt; 
&gt; However, §III.1.1.2 of the CLI specification explicitly allows a bool to be represented by an integer other than 0 or 1:
&gt; 
&gt; A CLI Boolean type occupies 1 byte in memory. A bit pattern of all zeroes denotes a value of false. A bit pattern with any one or more bits set (analogous to a non-zero integer) denotes a value of true.
&gt; 
&gt; By going beyond the scope of C#, it is indeed possible—and perfectly legal—to create a bool whose value is, say, 2, thus causing &amp; to behave unexpectedly. This is what the Pex site is doing.
&gt; 
&gt; Here's a demonstration:
&gt; 
&gt; using System;
&gt; using System.Reflection.Emit;
&gt; 
&gt; class Program
&gt; {
&gt;     static void Main()
&gt;     {
&gt;         DynamicMethod method =
&gt;             new DynamicMethod("ByteToBoolean", typeof(bool), new[] { typeof(byte) });
&gt;         ILGenerator il = method.GetILGenerator();
&gt;         il.Emit(OpCodes.Ldarg_0); // Load the byte argument...
&gt;         il.Emit(OpCodes.Ret);     // and "cast" it directly to bool.
&gt;         var byteToBoolean =
&gt;             (Func&lt;byte, bool&gt;)method.CreateDelegate(typeof(Func&lt;byte, bool&gt;));
&gt; 
&gt;         bool x = true;
&gt;         bool y = byteToBoolean(2);
&gt;         Console.WriteLine(x);               // True
&gt;         Console.WriteLine(y);               // True
&gt;         Console.WriteLine(x &amp;&amp; y);          // True
&gt;         Console.WriteLine(x &amp; y);           // False (!) because 1 &amp; 2 == 0
&gt;         Console.WriteLine(y.Equals(false)); // False
&gt;         Console.WriteLine(y.Equals(true));  // False (!) because 2 != 1
&gt;     }
&gt; }
&gt; So the answers to your questions are:
&gt; 
&gt; Currently, it's possible for x &amp; y and x &amp;&amp; y to have different values. However, this behavior violates the C# specification.
&gt; Currently, you can use Boolean.Equals (as shown above) to differentiate between true values. However, this behavior violates the CLI specification of Boolean.Equals.</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>18/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33460</IssueID>
    <Title>IDE0032 suggestion on improper case</Title>
    <Description>Version: 15.9 

In the following code, VS throws an IDE0032 suggestion:

```csharp
        private (double X, double Y) position;

        public (double X, double Y) Position
        {
            get =&gt; position;
            set =&gt; position = value;
        }
        public double X
        {
            get =&gt; position.X;
            set =&gt; position.X = value;
        }
        public double Y
        {
            get =&gt; position.Y;
            set =&gt; position.Y = value;
        }
```

Converting this to an auto property results in a compiler error, which makes sense, since properties' members may not be changed.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/436930/ide0032-suggestion-on-improper-case.html
VSTS ticketId: 778746_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33390</IssueID>
    <Title>Incorrect quick fix suggestion with default parameters</Title>
    <Description>**Version Used**: 
.NET Core 3 Preview 2 / VS 2019 Preview 3

When an optional parameter is combined with compound assignment, the analyzers show an incorrect suggestion to remove a redundant parameter:

![image](https://user-images.githubusercontent.com/1427284/52813682-4ee6ee80-3068-11e9-8cd2-54363df7071b.png)

Same code before changing to the compound assignment does not show any suggestions on the parameters:

![image](https://user-images.githubusercontent.com/1427284/52813831-a84f1d80-3068-11e9-860c-135e93aa7168.png)

</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33380</IssueID>
    <Title>Script generation slows down after many compilation/execution cycles</Title>
    <Description>**Version Used**: 2.10.0 / master

**Steps to Reproduce**:

Tested with .NET Framework 4.7.2

*Example Program:*
``` csharp
            var watch = new Stopwatch();
            watch.Start();
            for (int i = 0; i &lt; 5000; ++i)
            {
                var script = CSharpScript.Create&lt;int&gt;("1", ScriptOptions.Default);
                int foo = script.RunAsync().Result.ReturnValue;
                if (i % 250 == 0)
                {
                    watch.Stop();
                    Console.WriteLine(watch.ElapsedMilliseconds);
                    watch.Restart();
                }
            }
```


**Expected Behavior**:

Compilation time stays within a certain border, outputted numbers do not increase.

**Actual Behavior**:

Compilation time keeps increasing

Output of program:

```
1263
2435
2487
2509
2615
2665
2684
2711
2774
2824
2932
2971
3016
3046
3105
3172
3229
3374
3434
3410
```</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33335</IssueID>
    <Title>Check expression for null</Title>
    <Description>Customer request copying here.

**Version Used**: Visual Studio 2017

**Steps to Reproduce**:

&gt; 1. Have a potential nullreferenceexception 
![image](https://user-images.githubusercontent.com/8293542/52672308-5a081600-2ed2-11e9-9ef9-6d792c343f15.png)

&gt; 2. The variable attrib can be null and attrib.Value throws NullReferenceException. Resharper prompts an option to add null check or use ?. to avoid this exception.
![image](https://user-images.githubusercontent.com/8293542/52672333-68eec880-2ed2-11e9-81c6-cc41e13da191.png)


**Expected Behavior**:
Receive warning on potential null reference exception.

**Actual Behavior**:
No warning is given.
</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33305</IssueID>
    <Title>Navigate to Decompiled Sources Cancel</Title>
    <Description>There should be a way to cancel Navigate to Decompiled Sources in the dialog. Even selecting `No` will still open the metadata view.

**Steps to Reproduce**:

1. Ctrl+click on an external reference that triggers Navigate to Decompiled Sources. (The experimental Navigate to Decompiled sources setting in Tools &gt; Options would need to be on.)
2. Hit `No` in dialog
![image](https://user-images.githubusercontent.com/8293542/52600458-8ce9d580-2e10-11e9-88ef-a01d57238d91.png)

**Expected Behavior**:
Does not navigate to metadata, or there is an option to cancel navigating entirely.

**Actual Behavior**:
Navigates to metadata.

Originated from [customer tweet](https://twitter.com/mortenmertner/status/1094625474079268871).</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33296</IssueID>
    <Title>Keep all using imports within namespace</Title>
    <Description>Customer request:

&gt; My team code style is to keep all using imports within the scope of the namespace. VS 2017 auto import throws them wherever it wants. Sometimes inside the namespace, sometimes outside this scope (I think based on precedence of where they already exist?) 

&gt; I’d like to select a checkbox (like I can in ReSharper) import in deepest nested scope. Matching my team’s code style should be trivial with the help of an IDE. 

Our only editorconfig settings for imports are [organizing and sorting usings](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2017#usings). This would be a new editorconfig rule.
</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33282</IssueID>
    <Title>Indentation after a comment indents more than expected</Title>
    <Description>If you press return twice after a comment line in a class the second line is indented an extra level compared with the first line. Not sure if this is expected.

![image](https://user-images.githubusercontent.com/341098/52549837-84c07480-2dd5-11e9-920f-0a81a779ced9.png)

Original bug report: https://github.com/mono/monodevelop/issues/7047</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33278</IssueID>
    <Title>Questionable CS8602 'Possible dereference of null reference' with array indexer after check</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.2

**Steps to Reproduce**:
```csharp
void M()
{
    string?[] t = new[] { "Hello" };
    if (t[0] != null)
        t[0].Substring(1); // CS8602
}
```

**Expected Behavior**:
Right after checking `t[0]` for `null`, accessing it should not show a nullability warning.

**Actual Behavior**:
CS8602

A comparatively easy fix is to "Introduce local" =&gt; "For all occurrences"  on `t[0]`. The local variable's nullability then flows correctly.</Description>
    <CreatedDate>10/02/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33268</IssueID>
    <Title>Include naming convention when exporting from Tools &gt; Options to .editorconfig</Title>
    <Description>Originally submitted on [developer community](https://developercommunity.visualstudio.com/content/idea/411815/include-also-naming-convention-when-export-to-edit.html).

**Version Used**: 
Visual Studio 2019 Preview 2

**Steps to Reproduce**:

1.  Create a naming rule in editor settings.
2. Export code style settings to editorconfig

**Expected Behavior**:
Editorconfig has generated naming rule that follows the [dotnet_naming](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions) conventions.

**Actual Behavior**:
Editorconfig does not export naming rules.
</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33238</IssueID>
    <Title>csharp_space_between_method_call_parameter_list_parentheses appears to have no effect inside object initializers</Title>
    <Description>**Version Used**: 
Visual Studio 2017 Community v15.9.6

**Steps to Reproduce**:

1. Create a new .NET Standard Class Library project
2. Replace the contents of `Class1.cs` with the following code:
```csharp
using System.Collections.Generic;
using System.Net;

namespace Tests
{
    public class IsolatedStorageServerListProviderFacts
    {
        public object ReadsUpdatedServerList(object foo)
        {
            var list = new List&lt;object&gt;()
            {
                CreateSocketServer(new IPEndPoint(IPAddress.Any, 1234)),
                CreateSocketServer(new IPEndPoint(IPAddress.Loopback, 4321))
            };

            return ReadsUpdatedServerList(list);
        }

        static object CreateSocketServer(object o) =&gt; throw null;
    }
}

```
3. Create a new Solution Item using the Text File template and make the file name `.editorconfig`
4. Add the following to the blank `.editorconfig` file:
```
root = true

[*]
indent_style = space
insert_final_newline = true
indent_size = 4

csharp_space_between_method_call_parameter_list_parentheses = true
```
5. Open `Class1.cs`
6. Press Ctrl+K then Ctrl+D to reformat the document

**Expected Behavior**:
```csharp
using System.Collections.Generic;
using System.Net;

namespace Tests
{
    public class IsolatedStorageServerListProviderFacts
    {
        public object ReadsUpdatedServerList(object foo)
        {
            var list = new List&lt;object&gt;()
            {
                CreateSocketServer( new IPEndPoint( IPAddress.Any, 1234 ) ),
                CreateSocketServer( new IPEndPoint( IPAddress.Loopback, 4321 ) )
            };

            return ReadsUpdatedServerList( list );
        }

        static object CreateSocketServer(object o) =&gt; throw null;
    }
}

```

**Actual Behavior**:
```csharp
using System.Collections.Generic;
using System.Net;

namespace Tests
{
    public class IsolatedStorageServerListProviderFacts
    {
        public object ReadsUpdatedServerList(object foo)
        {
            var list = new List&lt;object&gt;()
            {
                CreateSocketServer(new IPEndPoint(IPAddress.Any, 1234)),
                CreateSocketServer(new IPEndPoint(IPAddress.Loopback, 4321))
            };

            return ReadsUpdatedServerList( list );
        }

        static object CreateSocketServer(object o) =&gt; throw null;
    }
}

```

**Observations**:

The regular method call to `ReadsUpdatedServerList` has whitespace inserted around the parameter list, but the calls to `CreateSocketServer` and `IPEndPoint`'s constructor do not.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33231</IssueID>
    <Title>csharp_space_between_method_call_parameter_list_parentheses is not respected when formatting code</Title>
    <Description>**Version Used**: 
Visual Studio Community v15.9.6

**Steps to Reproduce**:

1. Clone https://github.com/yaakov-h/SteamKit/tree/editorconfig (the editorconfig branch of the repo)
2. Open SteamKit2/SteamKit2.sln
3. Open a file such as CMClient.cs that has spaces between parameter lists and their surrounding parentheses
4. Press Ctrl+K Ctrl+D to reformat the document.

**Expected Behavior**:

The spaces between the parameter lists and their surrounding parentheses are preserved, e.g.:

```csharp
Debug.Assert( connection == null );
```

**Actual Behavior**:

The spaces between the parameter lists and their surrounding parentheses are removed, e.g.:

```csharp
Debug.Assert(connection == null);
```

**Additional Notes**:

The same also happens to `csharp_space_between_method_declaration_parameter_list_parentheses`.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33220</IssueID>
    <Title>Both Signature Help and Intellisense are showing at the same time and interferring</Title>
    <Description>Paste this code into a C# project:
```C#
class C
{
    void M1(int int1, int int2, int int3)
    {
		// Type here
    }

    void M1(int int1, int int2) { }
}
```

At `// Type here`, start typing `M1(int`. At this point, both the signature help popup for selecting an overload and intellisense for completing the current word will be showing. Up and down will control signature help, not intellisense, and you can't control intellisense without either using the mouse or hitting escape and ctrl+space.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33169</IssueID>
    <Title>Missing expected nullable mismatch warnings around method constraints check</Title>
    <Description>**Version Used**: 
VS 2019 - Preview 2

In Preview2, if I declare a generic method with a nullable type constraint `class?` for the type `T`, no warning is shown, even if one generic parameter has the non-nullable type constraint `class` for `T`:

**Steps to Reproduce**:
![image](https://user-images.githubusercontent.com/338856/52331055-70583280-29f7-11e9-8909-8e71070e29a8.png)

**Expected Behavior**:

I think a warning should be prompted with the squiggle surrounding the following block `where T : class?`:

Proposal:
`The constraint 'class?' cannot be used in the generic method 'Class1.Method&lt;T&gt;'. Nullability of type argument 'T' doesn't match 'class' constraint of 'Class1.Samle&lt;T&gt;'.`

</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33163</IssueID>
    <Title>Improve spell-check</Title>
    <Description>**Version Used**: VS 2019 Preview 2.1
Copying a customer request.

**Steps to Reproduce**:
```csharp
const string connnectionString = "TBD";
```

**Expected Behavior**:
Get codefix to correct typo in `connnectionString` to `connectionString` or add the new word to a dictionary as an accepted spelling.

**Actual Behavior**:
No spell check.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33136</IssueID>
    <Title>ObjectReader possibly creates too many tasks</Title>
    <Description>**Version Used**: 
2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)

**Steps to Reproduce**:

1. Type in VSMac
2. Observe a lot of threads being started and finished

**Expected Behavior**:
ObjectReader should not be spinning tasks up recursively here: https://source.roslyn.io/#Microsoft.CodeAnalysis/Serialization/ObjectReader.cs,144

The thread creation is for these threadpool items.

**Actual Behavior**:
There's 2 scenarios which come to mind which can end up creating a lot of threads:
a) recursionDepth 50 -&gt; 49 -&gt; 50 -&gt; 49 -&gt; 50, etc.
b) recursionDepth 50 -&gt; ... -&gt; 100 -&gt; ... -&gt; 150 (creates nested task, this should definitely be eliminated)</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33134</IssueID>
    <Title>.editorconfig - indexer brackets at call-site</Title>
    <Description>Is there a .editorconfig option to control the spacing between indexer brackets? The option I'm after would:

(a) produce a diagnostic and fix for:
```csharp
array[index]
```

(b) produce no diagnostic, and VS would generate code as:
```csharp
array[ index ]
```

though some people would want the exact opposite setting.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33081</IssueID>
    <Title>Fixes #32427</Title>
    <Description>Fixes #32427

Not sure if any tests need updating if so let me know and I will update this PR.</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33068</IssueID>
    <Title>Auto Format: Don't align end-of-line comments</Title>
    <Description>&lt;p&gt;I use auto-formatting to format my C# code in Visual Studio, but I find it extremely annoying how it insists on aligning end-of-line comments (those starting with //) from multiple consecutive lines horizontally with each other.  It drives me crazy when this situation arises which is frequent enough for me to post this suggestion.  Please add an option to allow me to turn off this annoying behavior!&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/432260/auto-format-dont-align-end-of-line-comments.html
VSTS ticketId: 774369_
_These are the original issue comments:_

Jane Wu [MSFT] on 1/22/2019, 02:10 AM (10 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32957</IssueID>
    <Title>ref locals marked as redundant/never used</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59

Related to #32856

**Steps to Reproduce**:
```C#
static void Main(string[] args)
{
    int[] a = new int[4];

    ref int ra = ref a[0];
    ra = 4;

    Console.WriteLine(a[0]);
}
```

**Actual Behavior**: `IDE0059 Value assigned to 'ra' never` used on both lines containing `ra`.

The fixes are very wrong. The first line suggests

```C#
_ = ref a[0];
int ra = 4;
```
which not only changes the behavior but also does not compile, and the second line suggests removing self altogether as a redundant assignment, which also changes the behavior.

**Expected Behavior**:

I would argue assignments to ref locals should mark them as used and should never be marked as redundant (unless perhaps clearly overwritten by another value).
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32839</IssueID>
    <Title>Language service shows non-accessible protected setters inside object initializers</Title>
    <Description>**Version Used**:

Visual Studio Enterprise 2017 version 15.9.4 / VisualStudio.15.Release/15.9.4+28307.222
C# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a

**Steps to Reproduce**:

1. Write an abstract class A with a public property that has a public getter and a protected setter.
2. Write a non-abstract class B that inherits from A.
3. In a class C that doesn't inherit from A or B, instantiate a class B and hit [Ctrl]+[Space] inside the object initializer.

**Expected Behavior**:
Do not show properties with protected setters.

**Actual Behavior**:
Showing properties with protected setters.

![image](https://user-images.githubusercontent.com/13019179/51789038-f492f600-216b-11e9-84cd-fa46689d7722.png)

```cs
namespace X
{
    class Y
    {
        Animal[] animals = new Animal[]
        {
            new Dog
            {
                Name = "Leo", // error
            },
            new Dog
            {
                /* [Ctrl]+[Space] here */
            }
        }
    }

    abstract class Animal
    {
        public string Type { get; }
        public string Name { get; protected set; }
    }

    class Dog : Animal
    {

    }
}
```
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32757</IssueID>
    <Title>Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException'</Title>
    <Description>**Version Used**: Visual Studio 2019 preview 2

**Steps to Reproduce**:

Open the solution of the repo https://github.com/meziantou/Meziantou.Framework

````
Analyzer Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	Meziantou.Framework.CodeDom (net461)		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Meziantou.Framework.CodeDom
ISymbol: Write (Method)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.OnWriteReferenceFound(ISymbol symbol, IOperation operation, Boolean maybeWritten)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(ISymbol symbol, IOperation operation)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(IDeclarationPatternOperation operation)
   at Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitPatternCaseClause(IPatternCaseClauseOperation operation)
   at Microsoft.CodeAnalysis.Operations.BasePatternCaseClauseOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchCase(ISwitchCaseOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseSwitchCaseOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitch(ISwitchOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseSwitchOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitBlock(IBlockOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseBlockOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.Visit(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeOperationsAndUpdateData(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Run(IOperation rootOperation, ISymbol owningSymbol, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean&amp; hasBlockWithAllUsedSymbolWrites)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
````</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32539</IssueID>
    <Title>Nullability constraint warnings are not reported for method signatures</Title>
    <Description>No warnings reported for `C&lt;object?&gt;` in method signatures:
```C#
class C&lt;T&gt; where T : class
{
}

class Program
{
    static C&lt;object?&gt; F1() =&gt; throw null;

    static void F2(C&lt;object?&gt; c) { }
}
```</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32537</IssueID>
    <Title>IntroduceVariableCodeRefactoringProvider ArgumentOutOfRangeException</Title>
    <Description>Type a space after the plus symbol then double click the mouse to cause ```IntroduceVariableCodeRefactoringProvider ArgumentOutOfRangeException : 'end' must not be less than 'start'.```

```csharp
namespace IntroduceVariableCodeRefactoringProvider_ArgumentOutOfRangeException
{
    public class Class
    {
        public string Test =&gt; "123" +
    }
}
```

I'm using Visual Studio 15.9.5.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32493</IssueID>
    <Title>False possible dereference of a null reference - equality to an expression known to be not null</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  void M(string? s)
  {
    if (s == "")
    {
      s.ToString();
    }
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgCwUAsgAomARgAMAfgpQAlLwo8GfPgEsAZhVFQKAXgMUARCaVr1q9eqgA6ACoB7AMowEG3AHNRCgNzKfAC+yiEMQUA=

**Expected Behavior**:
No warnings. `s` should be known to be not null since it is equal to an expression which is known to be not null.

**Actual Behavior**:
`warning CS8602: Possible dereference of a null reference.`</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32483</IssueID>
    <Title>Exception when add #nulable enable</Title>
    <Description>Visual studio throws an exception when adding &amp;quot;#nullable enable&amp;quot; directive. Here is exception and stack trace.

Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected false'.	ConsoleApp7		1	Active	Analyzer 'Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: ConsoleApp7
SyntaxTree: C:\Users\Libor\source\repos\ConsoleApp7\ConsoleApp7\Program.cs

System.InvalidOperationException: Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Analyze(SyntaxTriviaList list, AnalysisResult&amp;amp; result)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Leading(SyntaxToken token)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.CreateLeadingTrivia(SyntaxToken token)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetOriginalTriviaData(TokenData token1, TokenData token2)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetColumn(TokenData tokenData, Func`3 triviaDataGetter)
   at Microsoft.CodeAnalysis.Formatting.FormattingContext.AddAnchorIndentationOperation(AnchorIndentationOperation operation)
   at Roslyn.Utilities.EnumerableExtensions.Do[T](IEnumerable`1 source, Action`1 action)
   at Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.&amp;lt;&amp;gt;c__DisplayClass14_0.&amp;lt;FormatAsync&amp;gt;b__0(Task`1 task)
   at Microsoft.CodeAnalysis.Formatting.TaskExecutor.SynchronousExecutor.ContinueWith[T1,T2](Task`1 previousTask, Func`2 nextAction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.&amp;lt;FormatAsync&amp;gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.&amp;lt;FormatIndividuallyAsync&amp;gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Formatting.Formatter.&amp;lt;GetFormattedTextChangesAsync&amp;gt;d__22.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(SyntaxNode node, Workspace workspace, OptionSet options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeStyle.FormattingAnalyzerHelper.AnalyzeSyntaxTree(SyntaxTreeAnalysisContext context, DiagnosticDescriptor descriptor, Workspace workspace, OptionSet options)
   at Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticAnalyzer.AnalyzeSyntaxTree(SyntaxTreeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&amp;lt;&amp;gt;c.&amp;lt;ExecuteSyntaxTreeActionsCore&amp;gt;b__49_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/411190/exception-when-add-nulable-enable.html
VSTS ticketId: 753485_
_These are the original issue comments:_

David Lowndes on 12/18/2018, 05:21 AM (28 days ago): I've got this with every project where I've tried building as C# 8 with nullable reference types enabled.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32466</IssueID>
    <Title>Vs stop working</Title>
    <Description>1.应用程序: devenv.exe
Framework 版本: v4.0.30319
说明: 应用程序通过 System.Environment.FailFast(string message) 请求终止进程。
消息: StreamJsonRpc.RemoteInvocationException: Request locate failed with message: Cannot find service module info file '*/roslynCodeAnalysis.servicehub.service.json' in 'd:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\ServiceHub\Services', using discovery services failed: VsixServiceDiscovery: connect ENOENT \\?\pipe\90f6de52698644129c6632a232ffe862
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   在 StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__67`1.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.VisualStudio.Threading.ThreadingTools.&lt;WithCancellationSlow&gt;d__11`1.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.ServiceHub.Client.HubClient.&lt;LocateServiceAsync&gt;d__40.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 Microsoft.ServiceHub.Client.HubClient.&lt;LocateServiceAsync&gt;d__40.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.ServiceHub.Client.HubClient.&lt;RequestServiceChannelNameAsync&gt;d__26.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.ServiceHub.Client.HubClient.&lt;RequestServiceAsync&gt;d__29.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RetryRemoteCallAsync&gt;d__0`2.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RequestServiceAsync&gt;d__1.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
堆栈:
   在 System.Environment.FailFast(System.String, System.Exception)
   在 Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   在 Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   在 Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient+Connections+&lt;RequestServiceAsync&gt;d__1.MoveNext()
   在 System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   在 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   在 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   在 System.Threading.Tasks.Task.FinishContinuations()
   在 System.Threading.Tasks.Task.FinishStageThree()
   在 System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   在 System.Threading.Tasks.Task+DelayPromise.Complete()
   在 System.Threading.Tasks.Task+&lt;&gt;c.&lt;Delay&gt;b__274_1(System.Object)
   在 System.Threading.TimerQueueTimer.CallCallbackInContext(System.Object)
   在 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Threading.TimerQueueTimer.CallCallback()
   在 System.Threading.TimerQueueTimer.Fire()
   在 System.Threading.TimerQueue.FireQueuedTimerCompletion(System.Object)
   在 System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   在 System.Threading.ThreadPoolWorkQueue.Dispatch()
   在 System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32458</IssueID>
    <Title>non-nullability is not preserved</Title>
    <Description>```c#
public static Foo()
{
	Func&lt;T, A0&gt; Func&lt;T, A0&gt;(Func&lt;T, A0&gt; func) =&gt; func;
	var func = Func((int i) =&gt; default(string?));
	var val = func();
}
```

hover over the last `var` keyword. it shows `string`

i would expect `string?`

</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32356</IssueID>
    <Title>c# 8 null checking in lambdas</Title>
    <Description>It seems null-elimination of class members is not working in lambdas

In the attached code you will see that when the member &amp;quot;Parameters&amp;quot; is used outside the lambda, the compiler understands it cannot be null. When it's captured in the lambda it doesn't. 

Either there's something about ref values in closures I'm not getting, or there's no good reason this happens.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/414633/c-8-null-checking-in-lambdas.html
VSTS ticketId: 756306_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32327</IssueID>
    <Title>CS8019 occurs in the &lt;auto-generated/&gt; files in .net core projects.</Title>
    <Description>**Version Used**: 
VS 2017 15.9.4-15.9.5

**Steps to Reproduce**:
Please check this [repo ](https://github.com/meteogish/CodeAnalysisTest) I've created.

or:

1. 

Use VS 2017
Enable [full solution analysis](https://docs.microsoft.com/en-us/visualstudio/code-quality/how-to-enable-and-disable-full-solution-analysis-for-managed-code?view=vs-2017).
Create an empty ASP Net Core 2.1 project from a template.
Create NUnit-Tests .net core project from a template.

2.
Add ruleset file to solution folder with CS8019 rule turned on to Warning or an Error.

3. 
In each csproj in PropertyGroup add those lines:
`
    &lt;CodeAnalysisRuleSet&gt;$(SolutionDir)Test.ruleset&lt;/CodeAnalysisRuleSet&gt;
    &lt;GenerateAssemblyInfo&gt;false&lt;/GenerateAssemblyInfo&gt;
    &lt;TargetFrameworkMonikerAssemblyAttributesFileClean&gt;False&lt;/TargetFrameworkMonikerAssemblyAttributesFileClean&gt;
    &lt;TargetFrameworkMonikerAssemblyAttributesPath&gt;$(SolutionDir)SharedAssemblyAttributes.cs&lt;/TargetFrameworkMonikerAssemblyAttributesPath&gt;
`

Here we are using this [workaround ](http://stackoverflow.com/a/35553079/1108891) for eliminating CS8019 analysis on AssemblyAttributes generated files.

But in the Error list you should notice CS8019 errors/warnings and some of them refer to auto-generated files placed in the /obj folder.

![image](https://user-images.githubusercontent.com/11160217/50966452-387fcd00-14d5-11e9-91fa-b6c2102c6757.png)

![image](https://user-images.githubusercontent.com/11160217/50966518-741a9700-14d5-11e9-9f6d-569092d4973e.png)

![image](https://user-images.githubusercontent.com/11160217/50966551-8563a380-14d5-11e9-8541-1a82dca785df.png)

According to [this comment](https://github.com/dotnet/roslyn/issues/24976#issuecomment-406873296)  CS8019 does not exclude those generated files. I even can not suppress the errors to GlobalSuppressions.cs file because it is CS (c# compiler level errors)

Is there a workaround for it like we have for AssemblyInfo files?
Is there a solution to suppress those errors only for those files or maybe there is something I am doing wrong here?</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32281</IssueID>
    <Title>Bad "unused field" warning for interface-implementing event</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 1.1

**Steps to Reproduce**:
```csharp
interface I
{
    event Action E;
}

class C : I
{
    public event Action E;
}

class D : I
{
    event Action I.E
    {
        add { }
        remove { }
    }
}
```

**Expected Behavior**:
No warning

**Actual Behavior**:
`C.E`: warning CS0067: The event 'C.E' is never used, after compiling
`D.E`: warning IDE0051: Private member 'D.I.E' is unused, after typing</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32227</IssueID>
    <Title>"Remove unused parameter" doesn't recognize serialization constructors</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 [28507.140.d16.0stg]

**Steps to Reproduce**:

``` VB
        Private NotInheritable Class PropertyPageSerializationStore
            Implements ISerializable

            Private Sub New(Info As SerializationInfo, Context As StreamingContext)
                _serializedState = DirectCast(Info.GetValue(KEY_STATE, GetType(ArrayList)), ArrayList)
            End Sub
        End Class
```

**Expected Behavior**:
No warning

**Actual Behavior**:
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0060	Remove unused parameter 'Context'	Microsoft.VisualStudio.AppDesigner	E:\project-system2\src\Microsoft.VisualStudio.AppDesigner\PropPageDesigner\PropertyPageSerializationService_Store.vb	127	Style	Active

</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32138</IssueID>
    <Title>Add accessibility modifier quick fix removes extern</Title>
    <Description>**Version Used**: VS 2019 Preview 1

**Steps to Reproduce**:

1. Use .editorconfig that requires accessibility modifiers
2. Put this in a class:

```csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
static extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);
```

3. Run the quick fix "Add accessibility modifiers"


**Expected Behavior**:
```csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
private static extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);
```

**Actual Behavior**:

```csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
private static int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);
```
The `extern` was removed.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32132</IssueID>
    <Title>Navigate to has an error when open two solutions one by one</Title>
    <Description>**Affected Branch:** d16.0stg 
**Affected Build:** 28419.233
**Steps to reproduce:**
1. Open a new and then open a solution1
2. Close solution1 and open a solution2
3. Search "Main" in navigate to box

**Expect:** Only one result

**Actual:** There are two results, including solution1 result

![image](https://user-images.githubusercontent.com/1408396/50656931-7cfdec80-0f5a-11e9-848b-980dc7461aad.png)

Note: This issue worked well on early d16.0stg[28417.116]</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32042</IssueID>
    <Title>Custom roslyn analyzer to override nullability analysis?</Title>
    <Description>I understand that a bunch of annotations to inform nullability analysis is already in the works #26761, but I'd like to suggest that it would be useful to allow writing custom roslyn analyzers that can override the compiler's nullability warnings.

Mads mentioned in this [video](https://youtu.be/gGUYUJmssYM?t=1428) that a mini language of attributes is being developed to inform nullability analysis to cover 98% of cases. I think that custom analyzers might be able to cover the remaining 2% of cases.

The use cases that I'm currently thinking of are initializing fields of an object via reflection during construction.</Description>
    <CreatedDate>28/12/2018</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32027</IssueID>
    <Title>Set WarnAsError to false by default for build.cmd script</Title>
    <Description>As requested in https://github.com/dotnet/roslyn/pull/31993#issuecomment-450002539</Description>
    <CreatedDate>26/12/2018</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32011</IssueID>
    <Title>Nullable state of nested fields/properties is not tracked on assignments</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable

class C
{
  void M()
  {
    C c1 = new C();
    C c2 = new C();
    if (c1.Prop != null &amp;&amp; c2.Prop != null)
    {
      c1.Prop.ToString(); // no warning, c1.Prop is known to be not null
      c2.Prop.ToString(); // no warning, c2.Prop is known to be not null
      c1 = c2;
      
      c2.Prop.ToString(); // no warning, c2.Prop is known to be not null
      c1.Prop.ToString(); // invalid warning, c1.Prop should be known to be not null as it is not null in c2
    }
  }

  public string? Prop { get; set; }
}
```

**Expected Behavior**:

no warnings

**Actual Behavior**:

```
warning CS8602: Possible dereference of a null reference.
```
</Description>
    <CreatedDate>24/12/2018</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32001</IssueID>
    <Title>'Add using' in presence of nested 'using static'</Title>
    <Description>**Version Used**: 15.9 Preview 1.0

**Steps to Reproduce**:
```cs
using System.Collections.Generic;

namespace Test
{
  using static System.Console;

  class A : IDisposable {} // Add using for System
}
```

**Expected Behavior**:

'Add using' should insert System to the top-level scope.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/3105979/50376532-2a036b80-0623-11e9-90c1-42c68277c3cb.png)

</Description>
    <CreatedDate>22/12/2018</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31975</IssueID>
    <Title>Patterns: Formatting should not insert space between Type and positional sub-pattern</Title>
    <Description>Proper formatting from design discussion is: `e is Point(1, 2)`.

While doing that it would be good to confirm the formatting on empty property sub-pattern (`e is { }`) as well.

FYI @gafter</Description>
    <CreatedDate>21/12/2018</CreatedDate>
    <ClosedDate>21/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31968</IssueID>
    <Title>Target framework drop down has duplicate entries</Title>
    <Description>Repro Steps

- Install Dev16P2 28419.233
- Restore.cmd
- Open Compilers.sln
- Open PrivateProtected.cs
- Expand the target framework drop down

Expected to have two entries: net472, netcoreapp2.1

Actual:

![image](https://user-images.githubusercontent.com/146967/50312886-9e40e200-045e-11e9-8241-d5f96d147312.png)
</Description>
    <CreatedDate>20/12/2018</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31961</IssueID>
    <Title>Suggestion: Warn that Delegate is not being invoked.</Title>
    <Description>For example, in the following code.
```c#
public class Program
{
  public static void Main()
  {
    Act();
    Console.WriteLine("Hello World");
  }

  static Action Act()
  {
    return () =&gt; Console.Write("Act");
  }
}
```
Is should output
```
Act
Hello World
```
but is not because the action that is return by `Act` is never invoked.

We should have diagnostic that reports that the delegate is not being called. 
```csharp
public class Program
{
  public static void Main()
  {
    Act(); // ~~Act()~~ (Delegate not invoked).
    Console.WriteLine("Hello World");
  }

  static Action Act()
  {
    return () =&gt; Console.Write("Act");
  }
}
```</Description>
    <CreatedDate>20/12/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31942</IssueID>
    <Title>Formatting deconstruction patterns: no space before open paren.</Title>
    <Description>The current formatting for a deconstruction pattern adds a space between the type and the open paren. However, there should be no space there.

This derives from a design principle of the syntax for pattern-matching constructs: there is a correspondence between the syntax for creating and matching data.

You create data using the expression syntax `new A(1)`, not `new A (1)`.

Similarly, you should match that data using the pattern syntax `A(1)`, not `A (1)`.
</Description>
    <CreatedDate>19/12/2018</CreatedDate>
    <ClosedDate>19/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31935</IssueID>
    <Title>No nullability warning for a Linq expression</Title>
    <Description>Visual Studio 2019 Preview 1.1

The following code produces no warning and results in null reference exception. 

```C#
#nullable enable
using System;
class Program
{ 
    static void Main(string[] args)
    {
        string? s = null;
        System.Linq.Expressions.Expression&lt;Func&lt;bool&gt;&gt; ex = () =&gt; 0 == s.Length;
        ex.Compile()();
    }
}
```

Expecting to get a warning on the dereferencing of s.Length</Description>
    <CreatedDate>19/12/2018</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31904</IssueID>
    <Title>Unexpected warnings for nullable value types</Title>
    <Description>**Version Used**: Microsoft.Net.Compilers 3.0.0-beta2-18616-01

**Steps to Reproduce**:

```csharp
private static int? _seed = null;

public static int? Seed
{
    get
    {
        if (_seed.HasValue)
        {
            return _seed.Value; // CS8629??
        }
        else
        {
            return null;
        }
    }

    set
    {
        if (!_seed.HasValue)
        {
            _seed = value;
            if (_seed.HasValue)
            {
                Debug.WriteLine("Seeding Random with: " + _seed.Value.ToString()); // CS8629??
                _rand = new Random(_seed.Value); // CS8629??
            }
        }
        else
        {
            Debug.WriteLine("Attempt to seed Random to " + value.ToString() + " rejected it was already seeded to: " + _seed.Value.ToString()); // CS8629??
        }
    }
}
```

**Expected Behavior**:

CS8629 is not reported.

**Actual Behavior**:

CS8629 is reported at the commented lines.

📝 The warnings are still reported if the `HasValue` expressions are replaced with the equivalent null-check syntax.</Description>
    <CreatedDate>18/12/2018</CreatedDate>
    <ClosedDate>19/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31840</IssueID>
    <Title>Code cleanup crashes VS</Title>
    <Description>When trying out the new code cleanup command in VS 2019, running it in a specific file consistently crashed VS, and after doing this cleanup myself, it didn't crash. My thinking was that it's possible this was caused by one of the code fix providers crashing.

Do crashes in code fixes during code clenaup crash VS as opposed to showing an info bar? If so, that should be fixed.</Description>
    <CreatedDate>16/12/2018</CreatedDate>
    <ClosedDate>18/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31815</IssueID>
    <Title>Deploy nuget package targeting .Net Framework in addition to netstandard</Title>
    <Description>When developing VSIX project referencing roslyn packages, a lot of dependent assemblies are generated (System.*.dll) in the output folder, which are required to pack into the final vsix. These are forwarding assemblies which can be avoided if the roslyn nuget packages provide a lib assembly targeting .Net Framework. Please deploy nuget packages targeting .Net Framework in addition to netstardard, to reduce the size of the final vsix package.
</Description>
    <CreatedDate>15/12/2018</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31743</IssueID>
    <Title>"Remove unused parameter" is firing 10s of times for the same issue</Title>
    <Description>``` C#
        private static bool ShouldRouteCommandBackToVS(Guid cmdGuid, uint cmdId, bool translated, bool startsMultiKeyChord)
        {
            //Any command that wasn't translated by TranslateAcceleratorEx or has no VS handler in global scope should be routed to WPF
            if (!translated || cmdGuid == Guid.Empty)
            {
                return false;
            }

            //Allow VS to take over for anything that would be a common shell command
            //  (CTRL+Tab, CTRL+Shift+TAB, Shift+ALT+Enter, etc.)
            if (cmdGuid == VSConstants.GUID_VSStandardCommandSet97)
            {
                //If there's a GUID_VSStandardCommandSet97 command that should be handled by WPF instead, check for them and return false

                //Otherwise indicate that the command should be handled by VS
                return true;
            }

            //If there are additional commands that VS should be handling instead of WPF, check for them and return true here

            //Otherwise indicate that the command should be handled by WPF
            return false;
        }
```

Expected:
```
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active

```

Actual:

```
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active
Message	IDE0060	Remove unused parameter 'cmdId'	Microsoft.VisualStudio.ProjectSystem.Managed.VS	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\PropertyPages\PropertyPageElementHost.cs	43	Style	Active

```
</Description>
    <CreatedDate>13/12/2018</CreatedDate>
    <ClosedDate>14/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31706</IssueID>
    <Title>ValidTagsDuringSimpleRename failed in CI</Title>
    <Description>https://dnceng.visualstudio.com/public/_build/results?buildId=56656&amp;view=ms.vss-test-web.test-result-details

```

Assert.Equal() Failure\r\nExpected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[40..43), [208..211), [220..223)]\r\nActual: List&lt;Span&gt; [[40..43), [208..211), [208..211), [220..223), [220..223)]
Stack trace
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_10_ValidTagsDuringSimpleRename.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 129
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>12/12/2018</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31678</IssueID>
    <Title>VB SematicModel doesn’t return Symbol information for a compound assignment</Title>
    <Description>From @JoeRobich:
For my classification work, I am looking to classify compound assignment that use overloaded operators separately than those that use the built in. This was not an issue in C# because I was able to use the SemanticModel to get SymbolInfo for AssignmentExpressions. In VB.NET I am having a harder time because SematicModel doesn’t return information for AssignmentStatements. Is there an API where I can get the Symbol information for an AssignmentStatement in VB?</Description>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31671</IssueID>
    <Title>nullable reference and linq syntax strips nullability</Title>
    <Description>&lt;p&gt;Given:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;var x = new List&amp;lt;string?&amp;gt;();&lt;/pre&gt;This should produce a null dereference warning:&lt;br&gt;&lt;pre&gt;var y = from a in x
        where a.Length != 0
        select a;&lt;/pre&gt;But it doesn't. The nullability of `a` is stripped away immediately by `from ... in`.&lt;/p&gt;
&lt;/pre&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/402964/nullable-reference-and-linq-syntax-strips-nullabil.html
VSTS ticketId: 744186_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31650</IssueID>
    <Title>Unable to select TFM in editor</Title>
    <Description>I'm using dev16 preview1 on Roslyn (`Compilers.sln`).

I expect that I can change the TFM and the source would become active/colorized. But instead the TFM reverts itself back to its original selection.

![select-tfm](https://user-images.githubusercontent.com/12466233/49702793-6b226700-fbb1-11e8-9e37-1c16c227ad46.gif)

@jinujoseph for triage/routing</Description>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31642</IssueID>
    <Title>[Nullable ref Types] Infer throw statements from extension methods</Title>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Simplified definition:

``` csharp
struct TwoEnumeratorListStack
{
    private readonly ArrayBuilder&lt;Which&gt;? _discriminatorStack;

    public Which PeekNext()
    {
        // Possible dereference of a null reference
        return _discriminatorStack[_discriminatorStack.Count - 1];
    }
}
```

To prevent the warning you can do:

``` csharp
public Which PeekNext()
{
    if (_discriminatorStack == null)
        throw new InvalidOperationException();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}
```

Which removes the warning. However trying to capture the check in a general-purpose extension method:

``` csharp
internal static void ThrowInvalidIfNull&lt;T&gt;(this T? argument) where T : class
{
    if (argument == null)
        throw new InvalidOperationException();
}

public Which PeekNext()
{
    _discriminatorStack.ThrowInvalidIfNull();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}
```
Doesn't remove the warning anymore and requires additional `!` to both array indexer and `.Count`
</Description>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31639</IssueID>
    <Title>[Nullable ref types] Infer non-nullablity with array `?.Length` check</Title>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools   2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Take following code block:

``` csharp
protected GreenNode(SyntaxKind kind, int fullWidth, DiagnosticInfo[]? diagnostics, SyntaxAnnotation[]? annotations)
    : this(kind, fullWidth)
{
    if (diagnostics?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsDiagnostics;
        diagnosticsTable.Add(this, diagnostics);
    }
    if (annotations?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsAnnotations;
        annotationsTable.Add(this, annotations);
    }
}
```
Currently the parameters to `Add` (both `diagnostics` and `annotations`) are flagged as "Possible null reference argument for parameter" however because of the form of the if check it should be possible to infer that those arguments are non-null at that stage.</Description>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31637</IssueID>
    <Title>Turning on Nullable references crashes VS with analyzers installed</Title>
    <Description>**Version Used**: 16.0.0 Preview 2.0 [28407.111.d16.0stg]

**Steps to Reproduce**:

Install Roslyn.Diagnostics.Analyzers on a project with Nullable references turned on.


**Expected Behavior**:

No Crash

**Actual Behavior**:

Visual Studio Crashes with the following fail fast exception:

  | Name | Value | Type
-- | -- | -- | --
◢ | $exception | {"Sequence contains no elements"} | System.InvalidOperationException



[Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)](https://github.com/dotnet/roslyn-analyzers/blob/3a9597c623019cc68af10a3478188906ce4a2170/src/Roslyn.Diagnostics.Analyzers/Core/SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs#L77)

```ini
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source) in f:\dd\ndp\fx\src\Core\System\Linq\Enumerable.cs:line 1174
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 77
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\CSharp\CSharpSymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 26
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.&lt;Initialize&gt;b__7_0(CompilationStartAnalysisContext compilationContext) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 46
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 351
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 43
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 311
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateSet.cs:line 269
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__88.MoveNext() in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer_IncrementalAnalyzer.cs:line 112
```


Dump available at `\mlangfs1\public\jmarolf\Dumps\crash.dmp`</Description>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31541</IssueID>
    <Title>ArgumentException in MSBuildProjectLoader.Worker.cs line 273 (duplicate refs)</Title>
    <Description>[DuplicateReferences.zip](https://github.com/dotnet/roslyn/files/2646711/DuplicateReferences.zip)

1. Unzip the attached DuplicateReferences.zip
2. Open the .sln in MSBuildWorkspace (an easy way to do that is using https://github.com/KirillOsenkov/SourceBrowser):
  2.1. git clone https://github.com/KirillOsenkov/SourceBrowser
  2.2. In HtmlGenerator project properties, change the first argument to the path to the .sln file you unzipped
  2.3. Enable first-chance exceptions and F5

Exception:
```
 	System.ThrowHelper.ThrowArgumentException Line 72	C#
 	System.Collections.Generic.Dictionary&lt;string, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ProjectInfo&gt;&gt;.Insert Line 338	C#
 	System.Collections.Generic.Dictionary&lt;System.__Canon, System.Collections.Immutable.ImmutableArray&lt;System.__Canon&gt;&gt;.Add Line 193	C#
&gt;	Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.LoadProjectInfosFromPathAsync Line 275	C#
 	Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.TryLoadAndAddReferenceAsync Line 221	C#
 	Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.ResolveReferencesAsync Line 204	C#
 	[Resuming Async Method]	
 	Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.VerifyUnloadableProjectOutputExistsAsync Line 277	C#
 	[Resuming Async Method]	
 	Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager.TryGetOutputFilePathAsync Line 157	C#
 	[Resuming Async Method]	
 	Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager.LoadProjectAsync Line 148	C#
```

It seems that the key is that the referenced project has the .qproj extension. I'm not sure if it has to be multi-targeted and whether the duplicate reference has to be added via a Target that runs at runtime.

See potentially related:
https://github.com/dotnet/roslyn/commit/7e4ba1dfcac89f719efc2265f14822b775555802
https://github.com/dotnet/roslyn/issues/30382
https://github.com/dotnet/roslyn/issues/8408
https://github.com/dotnet/roslyn/issues/31390
https://github.com/dotnet/roslyn/issues/12356
https://github.com/dotnet/roslyn/issues/12101

Actual place where this happens:
https://github.com/dotnet/corefx/blob/bac5bb8a23b5036cb742fef762bcb3a05afb8979/eng/referenceFromRuntime.targets#L19-L25

Note that SourceBrowser already does deduplication of references here:
https://github.com/KirillOsenkov/SourceBrowser/blob/6f61d387b7a1c977815556f493ceedfc5418366a/src/HtmlGenerator/Pass1-Generation/SolutionGenerator.cs#L277

However in this case it doesn't take effect because the .qproj is not part of the .sln (I think).</Description>
    <CreatedDate>05/12/2018</CreatedDate>
    <ClosedDate>05/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31500</IssueID>
    <Title>Nullable state should be tracked across lifted conversions</Title>
    <Description>No warning should be reported for `y.Value`:
```C#
class Program
{
    static void F1(int? x)
    {
        if (x == null) return;
        var y = ~x;
        _ = y.Value; // warning: nullable value type may be null
    }
}
```</Description>
    <CreatedDate>03/12/2018</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31495</IssueID>
    <Title>IntroduceVariableCodeRefactoringProvider throws ArgumentOutOfRangeException</Title>
    <Description>**Version Used**: 
Visual Studio 2017 Community 15.9.3 with ReSharper Ultimate 2018.2.3
**Steps to Reproduce**:
Was able to reproduce with the following code:
```cs
using System;

namespace ConsoleApp11
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }

    public class SomeType
    {
        private static string 

    }
}
```
Note that there is a whitespace after `string`. Try selecting from the point after the whitespace to next line.

**Expected Behavior**:
Unfortunately not sure what's supposed to happen, but definitely shouldn't throw exceptions xD

**Actual Behavior**:
Throws an exception.

![ezgif-1-55b29bbfd1ff](https://user-images.githubusercontent.com/42944058/49342580-992f1500-f6a0-11e8-9928-93891858fb7c.gif)

Stack trace:
```
System.ArgumentOutOfRangeException : 'end' must not be less than 'start'
Parameter name: end
   at Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32 start,Int32 end)
   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GetExpressionUnderSpan(SyntaxTree tree,TextSpan textSpan,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitialize(TextSpan textSpan,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.Generate(TService service,SemanticDocument document,TextSpan textSpan,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
```</Description>
    <CreatedDate>02/12/2018</CreatedDate>
    <ClosedDate>04/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31423</IssueID>
    <Title>Incorrect nullable warnings in local functions' closures</Title>
    <Description>**Version Used**: 

Branch C# 8.0: Nullable reference type (29 Oct 2018)
https://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types.md
Latest commit 2f8fef by AlekseyTs:
Compare Nullable modifiers while comparing type symbols by default. (#30770)

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
public class C {
    void M(C? c)
    {
        c = new C();
        Local();
        void Local() =&gt; c.ToString();
    }
}
```

https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGhhAEssAfAYjO13wQABBDJ4CAWABQAAQDMQmQCYhAYSEBvaUJ2KALEICyAClUB+IRQCU23Vqm7HloQF4hZCAHc1xqwG5bJyEAGQB7CigsXwCHIP0Q8MjfVwA+SwA6alCAZRgENjIAc2jAoQBfaTKgA

**Expected Behavior**:

No warnings

**Actual Behavior**:

`warning CS8602: Possible dereference of a null reference.`</Description>
    <CreatedDate>28/11/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31278</IssueID>
    <Title>IDE1003: Analyzer assembly 'Foo' depends on 'netstandard, version 2.0.0.0' but it was not found</Title>
    <Description>**Version Used**: 
VStudio 15.9.2

**Steps to Reproduce**:

1. Create analyzer targeting Netstandard 2.0 
2. Publish it as Nuget package
3. Reference Nuget package in the other project

**Expected Behavior**:
No error

**Actual Behavior**:
VStudio IDE reports IDE1003 error telling "Analyzer assembly 'Foo' depends on 'netstandard, Version=2.0.0.0' but it was not found. Analyzers may not run correctly unless the missing assembly is added as analyzer reference as well".

This error is not reported when I run build from the command line (dotnet build)

From what I understand netstandard 2.0 is not supported for analyzers and one has to use v 1.3. Is it so?

We currently have set of analyzers that we need to port form Net 4.7.2 to Net Standard and downgrading to 1.3 is a pain.</Description>
    <CreatedDate>20/11/2018</CreatedDate>
    <ClosedDate>20/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31263</IssueID>
    <Title>AbstractSignatureHelpProvider crashes VS when listing overloads of generic methods</Title>
    <Description>When using Ctrl+Shift+Space within the argument list of a static generic method to list overloads, VS always crashes.

Repro steps:

git clone https://github.com/Microsoft/vs-streamjsonrpc.git
cd vs-streamjsonrpc
src\streamjsonrpc.sln

In VS, open the JsonRpcProxyGenerationTests.cs file.
On line 30:
        this.clientRpc = JsonRpc.Attach&amp;lt;IServer&amp;gt;(this.clientStream);

Place your caret on at the start of clientStream and press Ctrl+Shift+Space to list overloads.

Crash.

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at Microsoft.CodeAnalysis.SignatureHelp.AbstractSignatureHelpProvider.Filter(IList`1 items, IEnumerable`1 parameterNames, Nullable`1 selectedItem)
   at Microsoft.CodeAnalysis.SignatureHelp.AbstractSignatureHelpProvider.CreateSignatureHelpItems(IList`1 items, TextSpan applicableSpan, SignatureHelpState state, Nullable`1 selectedItem)
   at Microsoft.CodeAnalysis.CSharp.SignatureHelp.InvocationExpressionSignatureHelpProvider.&amp;lt;GetItemsWorkerAsync&amp;gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.SignatureHelp.AbstractSignatureHelpProvider.&amp;lt;GetItemsAsync&amp;gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.&amp;lt;ComputeItemsAsync&amp;gt;d__9.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&amp;lt;System.Exception&amp;gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&amp;lt;ComputeItemsAsync&amp;gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&amp;lt;ComputeItemsAsync&amp;gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.ValueTuple`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&amp;lt;ComputeItemsAsync&amp;gt;d__9, Microsoft.CodeAnalysis.EditorFeatures, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;ComputeItemsAsync&amp;gt;d__9 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.ComputeItemsAsync(System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&amp;gt;, Microsoft.VisualStudio.Text.SnapshotPoint, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo, Microsoft.CodeAnalysis.Document, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&amp;lt;ComputeModelInBackgroundAsync&amp;gt;d__4.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&amp;lt;ComputeModelInBackgroundAsync&amp;gt;d__4, Microsoft.CodeAnalysis.EditorFeatures, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;ComputeModelInBackgroundAsync&amp;gt;d__4 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.ComputeModelInBackgroundAsync(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&amp;gt;, Microsoft.VisualStudio.Text.SnapshotPoint, Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.DisconnectedBufferGraph, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&amp;lt;&amp;gt;c__DisplayClass3_0.&amp;lt;ComputeModel&amp;gt;b__0(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1+&amp;lt;&amp;gt;c__DisplayClass17_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&amp;lt;ChainTaskAndNotifyControllerWhenFinished&amp;gt;b__0(System.Threading.Tasks.Task`1&amp;lt;System.__Canon&amp;gt;)
   at Roslyn.Utilities.TaskExtensions+&amp;lt;&amp;gt;c__DisplayClass15_0`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&amp;lt;SafeContinueWithFromAsync&amp;gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/385276/abstractsignaturehelpprovider-crashes-vs-when-list.html
VSTS ticketId: 731684_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>19/11/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31252</IssueID>
    <Title>Assembly reference is added when not needed</Title>
    <Description>**Version Used**: Visual C# Compiler version 2.8.2.62916 (2ad4aabc)

**Steps to Reproduce**:

1. Compile following code

```c#
using ImportantForBug = System.Net.IPAddress;

class X
{
	public static void Main ()
	{
	}
}
```

Disassembly the output

**Expected Behavior**:

No System assembly reference or make it consistent with /refonly option which does not have the unused assembly reference right now.

**Actual Behavior**:

it includes

```
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
```


</Description>
    <CreatedDate>19/11/2018</CreatedDate>
    <ClosedDate>19/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31251</IssueID>
    <Title>Auto Format fails for multi-line collection initializers</Title>
    <Description>Auto format fails for multi-line collection initializers. The only way to auto format a collection initializer is to remove all linebreaks, format it, then place linebreaks back in.

Auto format works for multi-line indexer and property initializers.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/250421/auto-format-fails-for-multi-line-collection-initia.html
VSTS ticketId: 614284_
_These are the original issue comments:_

Jinu Joseph [MSFT] on ‎5‎/‎20‎/‎2018, 02:50 AM (183 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

Joakim Thulin on ‎11‎/‎3‎/‎2018, 09:18 AM (15 days ago): I have this problem too, a little annoying
Jinu Joseph [MSFT] on ‎11‎/‎3‎/‎2018, 09:36 PM (15 days ago): &lt;p&gt;&lt;a rel="user" href="https://developercommunity.visualstudio.com/users/54842/b66ca0b1-a48e-45e3-b936-d959fd9bb594.html" nodeid="54842"&gt;@Joakim Thulin&lt;/a&gt; could you pls provide us with a repro code snippet ? This will really help us with the investigation&lt;/p&gt;

Joakim Thulin on ‎11‎/‎16‎/‎2018, 04:22 AM (3 days ago): &lt;p&gt;Sure, see attached screenshot.&lt;/p&gt;&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/temp/48562-beforeafter.png"&gt;&lt;/p&gt;

Joakim Thulin on ‎11‎/‎4‎/‎2018, 05:10 AM (15 days ago): &lt;p&gt;Sure, see attached screenshot.&lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/temp/46866-beforeafter.png"&gt;beforeafter.png&lt;/a&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>19/11/2018</CreatedDate>
    <ClosedDate>20/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31173</IssueID>
    <Title>Invalid nuget licenses</Title>
    <Description>https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp.Workspaces/
https://www.nuget.org/packages/Microsoft.CodeAnalysis.Workspaces.Common/

Shouldn't it be MIT? Correct me if I'm wrong.</Description>
    <CreatedDate>14/11/2018</CreatedDate>
    <ClosedDate>15/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31108</IssueID>
    <Title>[IDE0040 : Explicit visibility] CodeFix breaks the code</Title>
    <Description>In VS 15.8.9 

Hi,

While looking at the possiblities the new EditorConfig and Code-Styles add to consistency, I think I stumble upon a bug with the rule about explicit visibility.

The rule in question (IDE0040) can be set to warn about leaving implicit visibility in the code and give the possibliity to fix it automaticaly.

But the codefix on external declaration, while adding the visibility, deletes the &amp;quot;extern&amp;quot; declaration, leaving the file unbuildable.

So the codefix actually broke the code :(

![image](https://user-images.githubusercontent.com/12449387/48316232-bf77fe00-e595-11e8-8f3f-6ad14f6275bb.png)
</Description>
    <CreatedDate>11/11/2018</CreatedDate>
    <ClosedDate>11/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31037</IssueID>
    <Title>VisualStudioExperimentationService crashes VS because it asserts that its constructor is initialized on UI thread</Title>
    <Description>Version: Version 16.0.0 Preview 2.0 [28306.125.d16.0stg]

Repro is 100% by CTRL+T and entering search term and pressing ENTER, please ping me offline for repro if you need it.

MEF components to have free-threaded constructors.

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: Microsoft.VisualStudio.Composition.CompositionFailedException: An exception was thrown while initializing part "Microsoft.VisualStudio.LanguageServices.Experimentation.VisualStudioExperimentationService". ---&gt; System.InvalidOperationException: Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
   at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
   at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject..ctor(IThreadingContext threadingContext, Boolean assertIsForeground)
   at Microsoft.VisualStudio.LanguageServices.Experimentation.VisualStudioExperimentationService..ctor(IThreadingContext threadingContext, SVsServiceProvider serviceProvider)
   --- End of inner exception stack trace ---
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.RuntimePartLifecycleTracker.CreateValue()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.Create()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveNext(PartLifecycleState nextState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveToState(PartLifecycleState requiredState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.GetValueReadyToExpose()
   at Microsoft.VisualStudio.Composition.ExportProvider.&lt;&gt;c__DisplayClass53_0.&lt;CreateExport&gt;b__0()
   at System.Lazy`1.CreateValue()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Lazy`1.get_Value()
   at Microsoft.VisualStudio.Composition.NetFxAdapters.MefV1ExportProvider.&lt;&gt;c__DisplayClass10_0.&lt;UnwrapExport&gt;b__1()
   at System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore()
   at System.ComponentModel.Composition.Primitives.Export.get_Value()
   at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[T](Export export)
   at System.ComponentModel.Composition.ExportServices.&lt;&gt;c__DisplayClass11_0`2.&lt;CreateStronglyTypedLazyOfTM&gt;b__1()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at System.Lazy`1.get_Value()
   at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices.GetService[TWorkspaceService]()
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.IsOutOfProcessEnabled(Workspace workspace, Option`1 featureOption)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.TryGetRemoteHostClientAsync(Workspace workspace, Option`1 featureOption, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.&lt;TryCreateCodeAnalysisSessionAsync&gt;d__26.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.&lt;TryRunCodeAnalysisRemoteAsync&gt;d__30`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&lt;GetDocumentHighlightsInRemoteProcessAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&lt;GetDocumentHighlightsAsync&gt;d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&lt;ProduceTagsAsync&gt;d__12.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.&lt;RecomputeTagsAsync&gt;d__70.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)
   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
****
```</Description>
    <CreatedDate>08/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>31020</IssueID>
    <Title>Make Visual Studio suggest explicit type instead of var when ToList is called</Title>
    <Description>Migrated from &lt;a href="http://visualstudio.uservoice.com/forums/121579/suggestions/18612712"&gt;Visual Studio IDE UserVoice forum&lt;/a&gt; &lt;br&gt;&lt;br&gt; Currently when the .editorconfig or the Visual Studio settings say that the code should prefer var when the type is apparent Visual Studio suggest that I change code like this

List test = Enumerable.Range(1, 2).Select(i =&amp;gt; i.ToString()).ToList();

I should use var because the type is apparent. It does this even when I have code like GetItems().ToList(); While calling ToList makes it apparent that the type is a List it is not the List that I care about, it is the T. This is a clearly a case where if the type should be explicit (assuming the user set csharp_style_var_when_type_is_apparent = true). Please provide a fix to this behavior. In addition code like this

MessageProcessorBase messageProcessor = MessageProcessorBase.GetMessageProcessor(eventType);

Now triggers a suggestion to use var. While the type is indeed mentioned on the right I am calling a static method and it may have returned something else.

Please change this behavior or provide additional option for this corner cases so users can configure them as they see fit.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/351488/make-visual-studio-suggest-explicit-type-instead-o.html
VSTS ticketId: 700567_
_These are the original issue comments:_

Fiona Niu[MSFT] on 10/9/2018, 10:45 PM (28 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about two weeks on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>07/11/2018</CreatedDate>
    <ClosedDate>07/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30890</IssueID>
    <Title>After upgrading Roslyn.Diagnostics.Analyzers, randomly get CS8032	</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 1.0 [28231.52.d16.0]

**Steps to Reproduce**:

After upgrading our version of Roslyn.Diagnostics.Analyzers in https://github.com/dotnet/project-system/tree/dev16.0.x, I'm randomly getting the following warnings:

```
Severity	Code	Description	Project	Project Rank	File	Line	Category	Suppression State	Tool
Warning	CS8032	An instance of analyzer Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.1-beta1-62702-01\analyzers\dotnet\cs\Roslyn.Diagnostics.CSharp.Analyzers.dll: Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Roslyn.Diagnostics.CSharp.Analyzers.CSharpSpecializedEnumerableCreationAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.1-beta1-62702-01\analyzers\dotnet\cs\Roslyn.Diagnostics.CSharp.Analyzers.dll: Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Roslyn.Diagnostics.CSharp.Analyzers.CSharpDiagnosticDescriptorAccessAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.1-beta1-62702-01\analyzers\dotnet\cs\Roslyn.Diagnostics.CSharp.Analyzers.dll: Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Roslyn.Diagnostics.CSharp.Analyzers.CSharpCodeActionCreateAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.1-beta1-62702-01\analyzers\dotnet\cs\Roslyn.Diagnostics.CSharp.Analyzers.dll: Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpReportDiagnosticAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\microsoft.codeanalysis.analyzers\2.6.2-beta2\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Could not load file or assembly 'Microsoft.CodeAnalysis.Analyzers, Version=2.6.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpRegisterActionAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\microsoft.codeanalysis.analyzers\2.6.2-beta2\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Could not load file or assembly 'Microsoft.CodeAnalysis.Analyzers, Version=2.6.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticAnalyzerFieldsAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\microsoft.codeanalysis.analyzers\2.6.2-beta2\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Could not load file or assembly 'Microsoft.CodeAnalysis.Analyzers, Version=2.6.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticAnalyzerApiUsageAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\microsoft.codeanalysis.analyzers\2.6.2-beta2\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Could not load file or assembly 'Microsoft.CodeAnalysis.Analyzers, Version=2.6.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
Warning	CS8032	An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpUpgradeMSBuildWorkspaceAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\microsoft.codeanalysis.analyzers\2.6.2-beta2\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Could not load file or assembly 'Microsoft.CodeAnalysis.Analyzers, Version=2.6.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests	5		1	Roslyn.HostError	Active	
```

I've turned on fusion logging, but I see zero failed binds to these assembly &amp; versions inside devenv and ServiceHub. It's all from a single project and from `Microsoft.CodeAnalysis.Analyzers` and `Roslyn.Diagnostics.Analyzers`.
</Description>
    <CreatedDate>31/10/2018</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30837</IssueID>
    <Title>Intellisense telling me to "Add 'this' or 'Me' qualification" to List initializer</Title>
    <Description>Given the following example C# class, visual studio will advise me to &amp;quot;Add 'this' or 'Me' qualification&amp;quot; with a squiggly under `foo` and `bar` in the list initialisation (see attached). 

```
public class Foo
{
    public void Bar()
    {
        string foo = "foo";
        string bar = "bar";

        List&lt;string&gt; list = new List&lt;string&gt;()
        {
            foo,
            bar
        };
    }
}
```

This is clearly wrong as none of the objects references are instance members. I do not want to flat out disable that advice, but this is causing a lot of noise in the error list.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/370799/intellisense-telling-me-to-add-this-or-me-qualific.html
VSTS ticketId: 719977_
_These are the original issue comments:_

BenM on ‎10‎/‎30‎/‎2018, 07:26 AM (23 min ago): &lt;p&gt;Not sure what happened with the example code, lets try again:&lt;/p&gt;&lt;pre&gt;public class Foo
\{
    public void Bar()
    \{
        string foo = "foo";
        string bar = "bar";
        List&amp;lt;string&amp;gt; list = new List&amp;lt;string&amp;gt;() 
        \{
            foo,
            bar
        };
    }
}
&amp;lt;br&amp;gt;&lt;/pre&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>30/10/2018</CreatedDate>
    <ClosedDate>06/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30836</IssueID>
    <Title>The error message you get when an analyzer has a dependency on Roslyn higher than your compiler's version should be more specific</Title>
    <Description>If you install an analyzer that has a dependency on Roslyn that is higher than your compiler, you get the following error:

```
Severity	Code	Description	Project	File	Line	Suppression State
Warning	CS8032	An instance of analyzer Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.9.0-beta1-63118-01\analyzers\dotnet\cs\Roslyn.Diagnostics.CSharp.Analyzers.dll : Could not load file or assembly 'Microsoft.CodeAnalysis, Version=2.9.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed\CSC	1	Active

```

I have 2680 warnings like above in my solution for every single analyzer for every project, it would be much friendly to only show this for a single analyzer assembly and say something like "This analyzer was build for a higher version of compiler than you are using" or words to that effect. Even better if you could tell me what version it was built for, because there's not a clear mapping between 2.9.0.0 and the version of the compiler/Visual Studio I need.
</Description>
    <CreatedDate>30/10/2018</CreatedDate>
    <ClosedDate>06/11/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30814</IssueID>
    <Title>"extern" was removed with CTRL + K + D</Title>
    <Description>1-

```csharp
[System.Runtime.InteropServices.DllImport(&amp;quot;kernel32.dll&amp;quot;)]
static extern IntPtr GetConsoleWindow();
```

2 - &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;, &lt;kbd&gt;D&lt;/kbd&gt;

3-

```csharp
[System.Runtime.InteropServices.DllImport(&amp;quot;kernel32.dll&amp;quot;)]
private static IntPtr GetConsoleWindow();
```

Erro:
&amp;quot;extern&amp;quot; was removed

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/365138/extern-was-removed-with-ctrl-k-d.html
VSTS ticketId: 714100_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>27/10/2018</CreatedDate>
    <ClosedDate>28/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30813</IssueID>
    <Title>Incorrect refarctor behavior when extracting string to local constant</Title>
    <Description>Start with the following C# code:

![constant](https://user-images.githubusercontent.com/12449387/47602006-2f2e9c00-d98d-11e8-8fa8-e3038b99efad.gif)


Notice, that Path.GetExtension line was also changed as a result, which should not happen.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/362313/incorrect-refarctor-behavior-when-extracting-strin.html
VSTS ticketId: 710881_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>27/10/2018</CreatedDate>
    <ClosedDate>28/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30780</IssueID>
    <Title>VisualBasicAddParameterCheckCodeRefactoringProvider throws</Title>
    <Description>```
System.InvalidCastException : Unable to cast object of type 'LazyNoneOperation' to type 'Microsoft.CodeAnalysis.Operations.IBlockOperation'.
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.InitializeParameterHelpers.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.VisualBasicAddParameterCheckCodeRefactoringProvider.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.InitializeParameter.AbstractInitializeParameterCodeRefactoringProvider`3.ComputeRefactoringsAsync[TParameterSyntax,TStatementSyntax,TExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>26/10/2018</CreatedDate>
    <ClosedDate>26/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30779</IssueID>
    <Title>VisualBasicInitializeMemberFromParameterCodeRefactoringProvider throws</Title>
    <Description>```
System.InvalidCastException : Unable to cast object of type 'LazyNoneOperation' to type 'Microsoft.CodeAnalysis.Operations.IBlockOperation'.
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.InitializeParameterHelpers.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.VisualBasicInitializeMemberFromParameterCodeRefactoringProvider.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.InitializeParameter.AbstractInitializeParameterCodeRefactoringProvider`3.ComputeRefactoringsAsync[TParameterSyntax,TStatementSyntax,TExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>26/10/2018</CreatedDate>
    <ClosedDate>26/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30736</IssueID>
    <Title>Intellisense unavailable when inserting a new line before a line that begins with `await`</Title>
    <Description>**Version Used**: 
15.9 Preview 4

**Steps to Reproduce**:

1. Have an async method
2. Have a line that starts with `await `
3. Insert a line above it, type in a variable name followed by the `.` to trigger member completions

**Expected Behavior**:
It terminates the intellisense context at the new line, and presents a list of member variables to complete from.

**Actual Behavior**:
The `await` on the next line breaks the intellisense, as show below. If that new line were inserted _after_ the `await ...` line, it would be fine. 

![image](https://user-images.githubusercontent.com/606923/47465634-5cbfed80-d7b3-11e8-9508-f1568ec8c183.png)

If a semicolon is first inserted, intellisense is fine:

![image](https://user-images.githubusercontent.com/606923/47465675-80833380-d7b3-11e8-870c-c1a33794d5e8.png)
</Description>
    <CreatedDate>24/10/2018</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30646</IssueID>
    <Title>Allow setting breakpoints on ternary branches</Title>
    <Description>The penalty for using ternaries instead of `if` statements is that breakpoints can't be set for each branch. When you're in the middle of debugging, it's too late to refactor. Sometimes you can set a breakpoint on the whole statement and duplicate the effective condition, but this expression may be nested inside another ternary or in a long initializer expression; even when you can duplicate the condition without side effects, it's frustrating to put together.

Similar to https://github.com/dotnet/roslyn/issues/30645, possibly covered by https://github.com/dotnet/roslyn/issues/22016.</Description>
    <CreatedDate>22/10/2018</CreatedDate>
    <ClosedDate>22/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30645</IssueID>
    <Title>Allow setting breakpoints on the right side of ??</Title>
    <Description>Deep in an object initializer, there's a `Prop = expr1 ?? expr2`. It would be convenient to be able to set a breakpoint on the right expression operand.

Possibly covered by https://github.com/dotnet/roslyn/issues/22016, similar to https://github.com/dotnet/roslyn/issues/22015 but more general.</Description>
    <CreatedDate>22/10/2018</CreatedDate>
    <ClosedDate>22/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30520</IssueID>
    <Title>[Feature Request] Quick Fix gets confused by property setting  {} blocks.</Title>
    <Description>(From VSTS  705108)

Steps to reproduce:

1. New Xamarin.iOS Project
2. Open ViewController.cs
3. Paste these lines after base.ViewDidLoad 


            UIButton button = new UIButton (new CoreGraphics.CGRect (0, 0, 0, 0))
            {
                Frame = new CoreGraphics.CGRect (1, 1, 1, 1)
            }
            View.AddSubview (button);

4. Note the missing ; after the property setting block.
5. Right click the red error on the last } and note both quick fixes are assuming {} are a block and not property setting (iterate using foreach or put inside using.

In this case, and in this case:


            button.Frame = new CoreGraphics.CGRect ()

We should offer "insert ;" option.

---- the user requests an insert ; code fix provider.</Description>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>26/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30483</IssueID>
    <Title>Analyzer creates error in code for fixed array</Title>
    <Description>**V2017 v 15.8.7**: 

When formatting a document, one of the analyzers (and/or `.editorconfig`) changes the code so as to make it invalid.

I am using a nested class for memory marshalling. It has a `fixed` array declared in it. 

**Steps to Reproduce**:

1. Paste the following code anywhere, even as a nested class
2. Format the document (Ctrl-E, Ctrl-D)
```csharp
private unsafe struct Byte20
    {  // Example bad formatting
    private fixed byte _bytes[20]; // Note fixed modifier
}
```

**Expected Behavior**:
The document is formatted.
```csharp
private unsafe struct Byte20
{  // Fixed bad formatting
    private fixed byte _bytes[20];
}
```

**Actual Behavior**:
The `fixed` modifier is removed and the `readonly` modifier is added, making it invalid.
```csharp
private unsafe struct Byte20
{  // Fixed bad formatting
    private readonly byte _bytes[20]; // Note readonly
}
```
`Compiler Error CS0650: Bad array declarator`
`Compiler Error CS0270: Array size cannot be specified in a variable declaration`

**Workaround**
Though it's not practical - formatting a document is supposed to be innocuous.
```csharp
private unsafe struct Byte20
{
#pragma warning disable IDE0044 // Add readonly modifier
    private fixed byte _bytes[20];
#pragma warning restore IDE0044 // Add readonly modifier
}
```

**Proposed Fix**
Analyzer should detect if a field is a fixed array, and not action it in such a manner.

**Other info**
```xml
&lt;PackageReference Include="Microsoft.Net.Compilers" Version="2.9.0" PrivateAssets="All" /&gt;
&lt;PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.6.2" PrivateAssets="All" /&gt;
```</Description>
    <CreatedDate>12/10/2018</CreatedDate>
    <ClosedDate>12/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30459</IssueID>
    <Title>AnalyzerEngine reporting OperationCanceledExceptions.</Title>
    <Description>Not sure if this has already been reported/fixed.  But i'm getting these all over the place:

```
Severity	Code	Description	Project	File
Error	AD0001	Analyzer 'Microsoft.VisualStudio.Threading.Analyzers.VSTHRD001UseSwitchToMainThreadAsyncAnalyzer' threw an exception of type 'System.Exception' with message 'Analyzer failure while processing syntax at C:\GitHub\roslyn\src\EditorFeatures\CSharp\Wrapping\CSharpParameterWrappingCodeRefactoringProvider.cs(55,31): System.OperationCanceledException The operation was canceled.. Syntax: token.Parent.GetAncestors()
                                          .FirstOrDefault(n =&gt; generator.GetParameterListNode(n) != null)'.	Microsoft.CodeAnalysis.CSharp.EditorFeatures	
```

Are we just catching all exeptions, and not ignoring System.OperationCanceledException?</Description>
    <CreatedDate>11/10/2018</CreatedDate>
    <ClosedDate>11/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30450</IssueID>
    <Title>IDE0007 conversion method detection heuristic does not take generics into account</Title>
    <Description>**Version Used**: 
Version 15.8.6

**Steps to Reproduce**:

1. Choose the following settings in an `.editorconfig`:
```
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = false:warning
```
2. Write a statement that declares and initializes a variable with a LINQ expression ending in `ToList()` e.g.:
```csharp
public static bool Test(Dictionary&lt;string, int&gt; items)
{
    List&lt;KeyValuePair&lt;string, int&gt;&gt; results = items.Where(x =&gt; x.Key != "foo").ToList();
```
3. Give the analyzers time to kick in, and it will recommend that you use `var` with an IDE0007 

**Expected Behavior**:
This should not suggest `var`, because our `.editorconfig` settings say only to use `var` when the type is already apparent from the expression. It is not.

**Actual Behavior**:
It recommend `var`.


The problem here is that `TypeStyleHelper.IsPossibleConversionMethod` contains this code:

```csharp
return methodSymbol.Name.Equals("To" + returnTypeName, StringComparison.Ordinal);
```

and by the time this runs, `returnTypeName` seems to be the simplified type name, even if the actual type is generic. So in this case, the type is `List&lt;KeyValuePair&lt;string, int&gt;&gt;`, but `returnTypeName` has simplified this to just `List`. So this rule sees the `ToList` method call and decides that the type name is apparent. In fact, just part of the type name is apparent.

This is unhelpful because the whole reason we use the editor config settings shown above is to facilitate PR-based code reviews, in which we need to be able to work out what code is doing by looking at it. We don't want to be forced to perform type inference in our heads, which is why we prefer not to use `var` in these scenarios.

While it's true that the use of `ToList` means it's apparent that there's going to be a `List&lt;something&gt;` there, the `something` is *not* apparent, and that's the bit of type inference we don't want to be forced to do in our heads.

Ideally, this whole mechanism would take generics into account properly. E.g., if the expression ended with `ToList&lt;Foo&gt;()`, then I'd be perfectly happy for it to suggest `var` instead of `List&lt;Foo&gt;`. (And by the same token, code such as `IBar bar = serviceProvider.GetRequired&lt;IBar&gt;();` should also get it to recommend `var`.) But in places where the generic type argument is implied, it should be treated as not being apparent.</Description>
    <CreatedDate>11/10/2018</CreatedDate>
    <ClosedDate>11/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30390</IssueID>
    <Title>VB: Multiple refactoring providers crash when invoking rename refactoring on lambda parameter.</Title>
    <Description>**Version Used**: 

Visual Studio Community 2017 v15.8.5

**Steps to Reproduce**:

Type in the following code:

```vb
Public Module Module1
  Public Sub Run(ArgAction As Func(Of String, Integer))
  End Sub

  Public Sub Main()
    Run(Function(foo) foo.Length)
  End Sub
End Module
```

Next we want to rename the parameter `foo` in the lambda function passed in the call to `Run(...)` so it becomes `food`. Put the caret at the end of `foo` add the `d`. The rename tracking rectangle is activated and the lightbulb is shown:

![vs_rename_crash_1](https://user-images.githubusercontent.com/20465797/46643695-e5207a80-cb85-11e8-9740-dc989b8727f8.png)

If you click the lightbulb (or use the keyboard shortcut) to show the code actions menu, the menu is shown after a brief pause and two refactoring code providers crash immediately:

![vs_rename_crash_2](https://user-images.githubusercontent.com/20465797/46643777-37fa3200-cb86-11e8-8200-ba564fd7a8ab.png)

The stack trace for `VisualBasicAddParameterCheckCodeRefactoringProvider` is:

```
System.InvalidCastException : Unable to cast object of type 'LazyNoneOperation' to type 'Microsoft.CodeAnalysis.Operations.IBlockOperation'.
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.InitializeParameterHelpers.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.VisualBasicAddParameterCheckCodeRefactoringProvider.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.InitializeParameter.AbstractInitializeParameterCodeRefactoringProvider`3.ComputeRefactoringsAsync[TParameterSyntax,TStatementSyntax,TExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

...and the stack trace for `VisualBasicInitializeMemberFromParameterCodeRefactoringProvider` is:

```
System.InvalidCastException : Unable to cast object of type 'LazyNoneOperation' to type 'Microsoft.CodeAnalysis.Operations.IBlockOperation'.
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.InitializeParameterHelpers.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.VisualBasicInitializeMemberFromParameterCodeRefactoringProvider.GetBlockOperation(SyntaxNode functionDeclaration,SemanticModel semanticModel,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.InitializeParameter.AbstractInitializeParameterCodeRefactoringProvider`3.ComputeRefactoringsAsync[TParameterSyntax,TStatementSyntax,TExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

**Expected Behavior**:

The rename operation can be completed without a problem and nothing fatal happens, but it would be great if code providers not related to the rename operation did not crash. Looking at the above stack traces, the culprit seems to be the same function:

```
Microsoft.CodeAnalysis.VisualBasic.InitializeParameter.InitializeParameterHelpers.GetBlockOperation()
```</Description>
    <CreatedDate>09/10/2018</CreatedDate>
    <ClosedDate>09/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30288</IssueID>
    <Title>Incorrect "Add 'this.'" diagnostic for collection initializers</Title>
    <Description>**Version Used**: 15.8.6

**Steps to Reproduce**:

Create a new .NET Standard Class Library project.

Add the following `.editorconfig` file:

```
root = true

[*.cs]
dotnet_style_qualification_for_method = true:error
```

Add the following `Class1.cs` file:

```c#
using System.Collections.Generic;

namespace ClassLibrary1
{
    public class Foo
    {
        public string Bar { get; set; }
    }

    public class Baz
    {
        public Baz()
        {
            var foo = new Foo() { Bar = "bar" };

            var foos = new List&lt;Foo&gt;()
            {
                new Foo() { Bar = "bar" }
            };
        }
    }
}
```

**Expected Behavior**: No IDE0009 error.

**Actual Behavior**: An IDE0009 error is listed for the `new Foo() { Bar = "bar" }` line in the collection initializer.

![image](https://user-images.githubusercontent.com/1618054/46420555-9c556580-c730-11e8-939e-7a95ce4fac6e.png)

Note: this is related to #22776, which is about the same problem for class initializers.
</Description>
    <CreatedDate>03/10/2018</CreatedDate>
    <ClosedDate>03/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>30285</IssueID>
    <Title>.NET Compiler Platform SDK not usable on Visual Studio 2017</Title>
    <Description>**Version Used**: 
.NET Compiler Platform SDK, version `2.0.0.6140902` (Marketplace Item Name: [`VisualStudioProductTeam.NETCompilerPlatformSDK`](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.NETCompilerPlatformSDK))

Visual Studio 2017 Community `15.8.6`

**Steps to Reproduce**:

1. Download the .NET Compiler Platform SDK from [Marketplace](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.NETCompilerPlatformSDK)
2. Install the downloaded VSIX
3. Upon first launch after installation Visual Studio immediately fires a Warning Message box (picture below)
4. Visual Studio then restarts with the extension disabled. The extensions is thus completely unusable.

![image](https://user-images.githubusercontent.com/8759693/46409519-32c85d80-c716-11e8-8fdb-d7492dbc9551.png)

&gt; The following extension is disabled because the installed version is not compatible with Visual Studio Community 15.0.28010.2041.

Incredibly the Visual Studio version number in the message box does not match the version number actually reported in the `About Microsoft Visual Studio` dialog (in `Help`-&gt;`About`)
</Description>
    <CreatedDate>03/10/2018</CreatedDate>
    <ClosedDate>03/10/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29920</IssueID>
    <Title>C#: Missing formatting options</Title>
    <Description>In C# there are some formattiong options not available:
- in enum-declarations either a) ignore whitespace like in variable-declarations or b) add an option to auto-align the assigned values. Current workaround to stop auto-formatting to mess up manual enum-formattings is to insert /**/-comments
- option to insert a single space after an enum-value assignment 
- option to remove the whitespace on the fixed-statement and the following opening parenthesis (like for other keywords as if,while,foreach etc)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/331622/c-missing-formatting-options.html
VSTS ticketId: 680203_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/09/2018</CreatedDate>
    <ClosedDate>06/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29892</IssueID>
    <Title>Inferred nullability of captured variables should be tracked across local function invocations, as if the local function was inlined.</Title>
    <Description>See references to this issue in unit-tests</Description>
    <CreatedDate>14/09/2018</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29744</IssueID>
    <Title>IDE0009 when using `new` in list initializers</Title>
    <Description>**Version Used**: VS pro 15.8.3

**Steps to Reproduce**:

This code shows the error:
```
                var test = new List&lt;string&gt;
                {
                    new string('c', 2)
                };
```

**Expected Behavior**:
I'm not using a field, `this` is not relevant here

**Actual Behavior**:

&gt; IDE0009 : Add 'this.' ...

The quick fix does nothing.</Description>
    <CreatedDate>10/09/2018</CreatedDate>
    <ClosedDate>11/09/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29720</IssueID>
    <Title>Support New OS</Title>
    <Description>The OS runs on machine that has compute, has memory, has IO. The OS runs a new kind of assembly code. This kind of assembly code has a format that is minimal and portable.

### Assembly Format
multiple **instruction**

### Instruction Format
[**label**:] **operation** **source1** **source2** **destination**

**label** is location of the instruction.
**operation** is the do of the instruction.
**source1**, **source2**, destination are variable.

**variable**
is one of the type in this list:
Bool
Int
String
Array

**operation** is one of the do in this list:
new
and
or
not
count
add
subtract
multiply
divide
equal
bigger
smaller
append
subscript
call
return
goto
in
out

In this assembly format, .NET do file operation with the in and out operations.</Description>
    <CreatedDate>07/09/2018</CreatedDate>
    <ClosedDate>07/09/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29684</IssueID>
    <Title>Better help information for built-in analysers</Title>
    <Description>Source: https://twitter.com/Nick_Craver/status/1037457763817934851

Having the IDE go to Bing to search for results is a far from ideal situation. Would it be possible to make the analysers jump to a page in the docs, or on GitHub so that more friendly information can be displayed? Is this something that the community could contribute to if the structure to do so is in place?</Description>
    <CreatedDate>05/09/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29670</IssueID>
    <Title>ToolsError build failures in 'prodcon/corefx/release/2.1/' - '20180903.01'</Title>
    <Description>@dotnet-mc-bot commented on [Mon Sep 03 2018](https://github.com/dotnet/core-eng/issues/4146)

There were a set of failures during this build. Here is a summary of these:
* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&amp;buildId=2000094
  - **Agent:** DDVSOLINUXAGE011
  - **Error log:** /root/corefx-2000094/packages/microsoft.netcore.compilers/2.8.0-beta2-62719-08/tools/Microsoft.CSharp.Core.targets(0,0): error MSB3883: Unexpected exception:  [/root/corefx-2000094/src/Microsoft.CSharp/ref/Microsoft.CSharp.csproj]...

@jcagme, @markwilkie


---

@alexperovich commented on [Tue Sep 04 2018](https://github.com/dotnet/core-eng/issues/4146#issuecomment-418528466)

This is an issue in the microsoft.netcore.compilers package version 2.8.0-beta2-62719-08

</Description>
    <CreatedDate>04/09/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29661</IssueID>
    <Title>VS2017 does not show examples based upon the documentation spec.</Title>
    <Description>**Version Used**: The version from the latest version of VS2017 preview.

**Steps to Reproduce**:
There is not really any steps to reproduce other than having a method that has the ``&lt;example&gt;&lt;code&gt;&lt;/code&gt;&lt;/example&gt;`` tags in it's documentation.

**Expected Behavior**:
For something like this to appear in the function tooltip:
![](https://user-images.githubusercontent.com/287848/45044370-32359c00-b070-11e8-9f56-bba3249759d4.png)

**Actual Behavior**:
This instead just shows the function's summary and exceptions without the text for the possible reasons of the exceptions, which I also would like changed to include those reasons in the tooltips as well so one does not have to dive into the developer's documentations online or their assembly's metadata manually to see it.

See https://github.com/dotnet/csharplang/issues/1835 for more details.</Description>
    <CreatedDate>04/09/2018</CreatedDate>
    <ClosedDate>04/09/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29413</IssueID>
    <Title>Wrong suggestion for style qualification</Title>
    <Description>In VS2017 the analyzer for "style qualification" is not ignoring dictionary initializers:

![image](https://user-images.githubusercontent.com/6805984/44385386-7a16d800-a534-11e8-89b8-23bf729b7400.png)

**Version Used**: 
Visual studio 15.8.1
C# Compiler version: 7.3
</Description>
    <CreatedDate>21/08/2018</CreatedDate>
    <ClosedDate>21/08/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>29393</IssueID>
    <Title>Error in IntroduceVariableCodeRefactoringProvider</Title>
    <Description>Unfortunately I don't have repro steps only the log:

```
ERROR [2018-08-16 11:26:17Z]: Roslyn error: Extension_Exception IntroduceVariableCodeRefactoringProvider : 'end' must not be less than 'start'
Parameter name: end
  at Microsoft.CodeAnalysis.Text.TextSpan.FromBounds (System.Int32 start, System.Int32 end) [0x00028] in /_/src/Compilers/Core/Portable/Text/TextSpan.cs:191 
  at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6+State[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax].GetExpressionUnderSpan (Microsoft.CodeAnalysis.SyntaxTree tree, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) [0x000b7] in /_/src/Features/Core/Portable/IntroduceVariable/AbstractIntroduceVariableService.State.cs:201 
  at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6+State[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax].TryInitialize (Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) [0x00045] in /_/src/Features/Core/Portable/IntroduceVariable/AbstractIntroduceVariableService.State.cs:67 
  at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6+State[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax].Generate (TService service, Microsoft.CodeAnalysis.SemanticDocument document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) [0x00008] in /_/src/Features/Core/Portable/IntroduceVariable/AbstractIntroduceVariableService.State.cs:47 
  at Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6+&lt;IntroduceVariableAsync&gt;d__17[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax].MoveNext () [0x000a7] in /_/src/Features/Core/Portable/IntroduceVariable/AbstractIntroduceVariableService.cs:61 
--- End of stack trace from previous location where exception was thrown ---
  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 
  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 
  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 
  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[TResult].GetResult () [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:535 
  at Microsoft.CodeAnalysis.CodeRefactorings.IntroduceVariable.IntroduceVariableCodeRefactoringProvider+&lt;ComputeRefactoringsAsync&gt;d__0.MoveNext () [0x00076] in /_/src/Features/Core/Portable/CodeRefactorings/IntroduceVariable/IntroduceVariableCodeRefactoringProvider.cs:26 
--- End of stack trace from previous location where exception was thrown ---
  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 
  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 
  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 
  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:447 
  at Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService+&lt;GetRefactoringFromProviderAsync&gt;d__8.MoveNext () [0x000a0] in /_/src/Features/Core/Portable/CodeRefactorings/CodeRefactoringService.cs:143 
```

-----
VSTS issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/665111</Description>
    <CreatedDate>20/08/2018</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28939</IssueID>
    <Title>Stale errors after rename in the editor</Title>
    <Description>**Version Used**: 
15.8.0 Preview 5.0

**Steps to Reproduce**:
I don't know specifically. I moved all code from a base class to the derived class, removed the base class, and changed the `protected` `const` and `readonly` fields to `private`. After that, squiggles appeared because those two fields started with a capital letter instead of lower case. I `F2`-renamed both fields to a lower case first letter and the two shown squiggle categories remained.

After the next edit (hitting `space` somewhere), the errors disappeared.

**Expected Behavior**:

No errors / squiggles. There's nothing wrong with the code and the errors refer to a situation that's not valid anymore or has never been valid.

**Actual Behavior**:
Squiggles.

`const` member:
![image](https://user-images.githubusercontent.com/1947968/43398350-1df2963c-9408-11e8-951d-a24df36ce52f.png)
`readonly` member:
![image](https://user-images.githubusercontent.com/1947968/43398393-42d06704-9408-11e8-999b-b66319cf3740.png)

</Description>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>09/08/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28938</IssueID>
    <Title>DebuggerDisplay is ineffective in Dictionary&lt;TKey, TValue&gt;</Title>
    <Description>**Version Used**: VS2017 15.7.5

**Steps to Reproduce**:

1. Type codes:
```C#
class Program
{
    static void Main()
    {
        Data dat = new Data("demo", 3);
        List&lt;Data&gt; list = new List&lt;Data&gt; { dat };
        Dictionary&lt;Data, Data&gt; dic = new Dictionary&lt;Data, Data&gt;() { { dat, dat } };
    }
}
[DebuggerDisplay("{Text}")]
class Data
{
    public Data(string text, int num)
    {
        Text = text;
        Num = num;
    }

    public string Text { get; set; }

    public int Num { get; set; }

    public override string ToString()
    {
        return Num.ToString();
    }
}
```
2. Debug it and break in the end of 'Main'

**Expected Behavior**: Always show 'demo'

**Actual Behavior**: show '3' in 'dic'
</Description>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28931</IssueID>
    <Title>Pressing Apply from Preview Changes for IntelliCode does nothing</Title>
    <Description>I'm debugging and I notice that I have a &amp;quot;IDE0019 Use pattern matching&amp;quot; suggestion in the Visual Studio editor. I click Preview Changes so that I can look at the suggested changes. I like the changes, so I press Apply. Nothing happens. No changes are applied. This is because the file is locked during debugging, but VS didn't tell me that--it just acted as if it was ignoring my pressing the Apply button. Either it shouldn't offer to make changes or it should tell me when I try to apply them that it cannot do so while the file is locked for debugging.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/297852/pressing-apply-from-preview-changes-for-intellicod.html
VSTS ticketId: 652498_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>29/07/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28870</IssueID>
    <Title>Cannot use MSBuildWorkspace in .NET Core Console Application</Title>
    <Description>I'm moving a project from .Net Framework 4.6.1 to .Net Core and I have a problem with MSBuildWorkspace 

**Version Used**: 2.7.0

**Steps to Reproduce**:

1. Create a new .NET Core Console Application project (VS Professional 2017 Version 15.7.5,  .Net Core 2.1.202) 
2. Install nuget-packages for **Microsoft.CodeAnalysis**
3. In the main method write code:
`var workspace = MSBuildWorkspace.Create();`


**Expected Behavior**:

MSBuildWorkspace should compile by using Microsoft.CodeAnalysis.MSBuild.

**Actual Behavior**:

**Compilation error** :  'MSBuildWorkspace' could not be found (are you missing a using directive or an assembly reference?)
`Microsoft.CodeAnalysis.MSBuild` is not present under Microsoft.CodeAnalysis package.</Description>
    <CreatedDate>27/07/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28797</IssueID>
    <Title>[Code Style] Organize members</Title>
    <Description>One of the big code style/formatting rules we are missing is sorting members by accessibility modifiers and name in a file. This includes:

- sort by member category (fields then properties then methods, etc.)
- sort by accessibility modifiers (private then public, etc.)
- sort alphabetically by name</Description>
    <CreatedDate>23/07/2018</CreatedDate>
    <ClosedDate>23/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28654</IssueID>
    <Title>VS 15.8 Format Document introduces compile error due to IDE0009</Title>
    <Description>**Version Used**: 15.8 Preview 5 27917.1.d15.8

**Steps to Reproduce**:

1. Have a class like this:
```cs
[DebuggerDisplay("{" + nameof(DebuggerDisplay) + "}")]
class Channel {
    string DebuggerDisplay =&gt; "Some string";
}
```
1. Like `this.`: 
![image](https://user-images.githubusercontent.com/3548/42904013-731eaa9e-8a88-11e8-976f-02884d1b266f.png)

1. Configure Format Document to "Apply 'this.' qualification preferences"
![image](https://user-images.githubusercontent.com/3548/42903946-35a643ca-8a88-11e8-8b86-8bd01085f4d4.png)

1. Execute Format Document.

**Expected Behavior**:

No compile errors.

**Actual Behavior**:

A compile error is created when `this.` is prefixed to my `DebuggerDisplay` reference:

```cs
[DebuggerDisplay("{" + nameof(this.DebuggerDisplay) + "}")]
class Channel {
    string DebuggerDisplay =&gt; "Some string";
}
```

The compiler does not allow `this.` to be used on a class attribute.</Description>
    <CreatedDate>18/07/2018</CreatedDate>
    <ClosedDate>18/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28621</IssueID>
    <Title>Roslyn serialize and deserialize trees while code cleanup consuming a lot of CPU</Title>
    <Description>more detail here
https://github.com/dotnet/roslyn/issues/28012#issuecomment-402867427

if we can do something to get rid of serializing and deserializing of a tree while code clean up, we should do that.</Description>
    <CreatedDate>17/07/2018</CreatedDate>
    <ClosedDate>25/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28521</IssueID>
    <Title>Link to download PDF on wiki is dead</Title>
    <Description>On the wiki page [Roslyn Overview](https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview) the link to download the page as PDF leads to [codeplex](https://www.codeplex.com/Download?ProjectName=roslyn&amp;DownloadId=822125) and is no longer working.</Description>
    <CreatedDate>13/07/2018</CreatedDate>
    <ClosedDate>17/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28436</IssueID>
    <Title>Uninvestigated and non-trivial test failures ignored for the purposes of codeflow</Title>
    <Description>Integration
https://github.com/dotnet/roslyn/pull/28408 - https://ci.dot.net/job/dotnet_roslyn/job/dev15.9.x-vs-deps/job/windows_debug_vs-integration_prtest/4/ (unclear)
https://github.com/dotnet/roslyn/pull/28433 - https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_release_vs-integration_prtest/2659/ (timeout?)
https://github.com/dotnet/roslyn/pull/28433 - https://ci.dot.net/job/dotnet_roslyn/job/dev15.8-preview4-vs-deps/job/windows_debug_vs-integration_prtest/16/ (hang?)
https://github.com/dotnet/roslyn/pull/28495 - https://ci.dot.net/job/dotnet_roslyn/job/dev15.9.x/job/windows_release_vs-integration_prtest/6/
https://github.com/dotnet/roslyn/pull/28445 - https://ci.dot.net/job/dotnet_roslyn/job/dev15.9.x/job/windows_release_vs-integration_prtest/5/ (4 seemingly actual failures)
https://github.com/dotnet/roslyn/pull/28495 - https://ci.dot.net/job/dotnet_roslyn/job/dev15.9.x/job/windows_debug_vs-integration_prtest/6/ (4 seemingly actual failures, _different_ from the above 4)
https://github.com/dotnet/roslyn/pull/28439 - https://ci.dot.net/job/dotnet_roslyn/job/master-vs-deps/job/windows_debug_vs-integration_prtest/275/ (3 more failures, different from the above 8)

Ubuntu
https://github.com/dotnet/roslyn/pull/28433 - https://ci.dot.net/job/dotnet_roslyn/job/dev15.8-preview4-vs-deps/job/ubuntu_16_mono_debug_prtest/14/</Description>
    <CreatedDate>10/07/2018</CreatedDate>
    <ClosedDate>21/09/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28362</IssueID>
    <Title>NuGet License mismatch?</Title>
    <Description>The Roslyn project uses Apache License 2.0, but in the package of "Microsoft.Net.Compilers" is still the "https://www.microsoft.com/web/webpi/eula/dotnet_library_license_non_redistributable.htm" as a license.

Which of them is valid, which of them should I use?

Regards,
Mateusz Paluszkiewicz</Description>
    <CreatedDate>09/07/2018</CreatedDate>
    <ClosedDate>11/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>28318</IssueID>
    <Title>Proposal: Allow stripping private &amp; internal members from XML documentation file</Title>
    <Description>**Background**

Adding XML comments to `internal` and `private` members of a class library is very useful to have them show in IntelliSense, and to document exceptions, complex behavior etc.

When generating an XML documentation file however, the `internal` and `private` member documentation is _included_ in the file. This means the file can't be used when publishing the library, e.g. as a public NuGet package, since the `internal` and `private` comments often contains information that is secret, such as identifiers before any obfuscation, confidential algorithms and details, internal links, etc.

**Proposal**

Provide settings in msbuild and Visual Studio to exclude or include `internal` and `private` members from the XML documentation file. Personally I would prefer to have them _excluded_ as the default.

**Version Used**: VS 15.7.4

**Steps to Reproduce**:

1. Enable creating the XML documentation file for a C# class library.
2. Add and build the following code:

```C#
namespace XmlDocumentationFile
{
    /// &lt;summary&gt;
    /// MyPublic summary.
    /// &lt;/summary&gt;
    public class MyPublic
    {
        /// &lt;summary&gt;
        /// _myPrivate summary.
        /// &lt;/summary&gt;
        private int _myPrivate;
    }

    /// &lt;summary&gt;
    /// MyInternal summary.
    /// &lt;/summary&gt;
    internal class MyInternal
    {
    }
}
```

**Expected Behavior**:

```XML
&lt;?xml version="1.0"?&gt;
&lt;doc&gt;
    &lt;assembly&gt;
        &lt;name&gt;XmlDocumentationFile&lt;/name&gt;
    &lt;/assembly&gt;
    &lt;members&gt;
        &lt;member name="T:XmlDocumentationFile.MyPublic"&gt;
            &lt;summary&gt;
            MyPublic summary.
            &lt;/summary&gt;
        &lt;/member&gt;
    &lt;/members&gt;
&lt;/doc&gt;
```

**Actual Behavior**:

```XML
&lt;?xml version="1.0"?&gt;
&lt;doc&gt;
    &lt;assembly&gt;
        &lt;name&gt;XmlDocumentationFile&lt;/name&gt;
    &lt;/assembly&gt;
    &lt;members&gt;
        &lt;member name="T:XmlDocumentationFile.MyPublic"&gt;
            &lt;summary&gt;
            MyPublic summary.
            &lt;/summary&gt;
        &lt;/member&gt;
        &lt;member name="F:XmlDocumentationFile.MyPublic._myPrivate"&gt;
            &lt;summary&gt;
            _myPrivate summary.
            &lt;/summary&gt;
        &lt;/member&gt;
        &lt;member name="T:XmlDocumentationFile.MyInternal"&gt;
            &lt;summary&gt;
            MyInternal summary.
            &lt;/summary&gt;
        &lt;/member&gt;
    &lt;/members&gt;
&lt;/doc&gt;
```</Description>
    <CreatedDate>05/07/2018</CreatedDate>
    <ClosedDate>11/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27963</IssueID>
    <Title>Double-click doesn't select the whole word</Title>
    <Description>**Version Used**: 15.8.0 Preview 3.0 [27817.0.d15.8]
AKA Microsoft Visual Studio Enterprise 2017 Int Preview updated as of 2018-06-18

**Steps to Reproduce**:

1. Double-click over the middle of an identifier

**Expected Behavior**:

The identifier is selected

**Actual Behavior**:

The text from the beginning of the identifier to the position of the cursor is selected
</Description>
    <CreatedDate>18/06/2018</CreatedDate>
    <ClosedDate>19/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27836</IssueID>
    <Title>IDE0044 (add readonly modifier) fires incorrectly for tuple assignment</Title>
    <Description>**Version Used**: 
VS 2017 Community v15.7.3

**Steps to Reproduce**:
The next program reports IDE0044 with an empty description:
```csharp
class C
{
    private int field1; // IDE0044
    private int field2; // IDE0044

    void M()
    {
        (field1, field2) = GetTuple();

        Console.WriteLine($"{field1}, {field2}");
    }

    private (int, int) GetTuple() =&gt; throw null;
}
```

**Expected Behavior**:
No report of IDE0044, because an assignment is made outside of a constructor or initializer.

**Actual Behavior**:
IDE0044 reported on `field1` and `field2`. Lightbulk-menu has option "Add readonly modifier", which results in compile error CS0191: A readonly field cannot be assigned to.</Description>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27804</IssueID>
    <Title>CSharpRenameTrackingCodeFixProvider NullReferenceException when renaming a C# interface</Title>
    <Description>**Version Used**: 
`Version 15.7.3`

I was attempting to rename an interface in the solution.  I first tried the rename refactor, but every time I tried to apply the change, it would change the name back to the original.  I then renamed it manually, attempted to apply the rename code fix, and the following error occurred:
```
System.AggregateException : One or more errors occurred. ---&gt; Object reference not set to an instance of an object.
   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCodeAction.ComputePreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
---&gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.
   at async Microsoft.CodeAnalysis.FindSymbols.Finders.NamedTypeSymbolReferenceFinder.DetermineDocumentsToSearchAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.CreateProjectToDocumentMapAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&lt;Unknown Parameters&gt;)
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindRenamableReferencesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Rename.RenameLocations.AddLocationsReferenceSymbolsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Rename.RenameLocations.FindAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolWorkerAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;---
```</Description>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27740</IssueID>
    <Title>IOperation: NoneOperation in nameof expression</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis NuGet v2.8.2

**Steps to Reproduce**:
Consider the next program, which prints `IOperation` info on visited `nameof` expression:
```csharp
using System;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Operations;

namespace RoslynNameOfBug
{
    class Program
    {
        static void Main()
        {
            const string source = @"
namespace N
{
    class C
    {
        string M()
        {
            return nameof(System.Linq.Enumerable);
        }
    }
}";

            SyntaxTree tree = CSharpSyntaxTree.ParseText(source);
            var compilation = CSharpCompilation.Create("test.dll", new[] { tree }, new[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(Enumerable).Assembly.Location),
            }, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
            var model = compilation.GetSemanticModel(tree);

            ImmutableArray&lt;Diagnostic&gt; compilerDiagnostics = compilation.GetDiagnostics(CancellationToken.None);
            Diagnostic[] compilerErrors = compilerDiagnostics.Where(d =&gt; d.Severity == DiagnosticSeverity.Error).ToArray();
            if (compilerErrors.Any())
            {
                throw new Exception();
            }

            var methodSyntax = tree.GetRoot().DescendantNodes().OfType&lt;MethodDeclarationSyntax&gt;().First();

            var block = (IBlockOperation)model.GetOperation(methodSyntax.Body);

            var walker = new NameOfWalker();
            walker.Visit(block);
        }

        private sealed class NameOfWalker : OperationWalker
        {
            public override void VisitNameOf(INameOfOperation operation)
            {
                Console.WriteLine($"INameOfOperation.Argument type: {operation.Argument.GetType().Name}");
                Console.WriteLine($"INameOfOperation.Syntax: {operation.Syntax}");

                base.VisitNameOf(operation);
            }
        }
    }
}
```
**Expected Behavior**:
A type that implements `IMethodReferenceOperation` for `INameOfOperation.Argument`.

**Actual Behavior**:
Output:
```
INameOfOperation.Argument type: NoneOperation
INameOfOperation.Syntax: nameof(System.Linq.Enumerable)
```</Description>
    <CreatedDate>12/06/2018</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27524</IssueID>
    <Title>What is the actual license for the CodeAnalysis assemblies?</Title>
    <Description>The [NuGet package Microsoft.CodeAnalysis.CSharp](https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp/), for example, points to a, uhm ... legacy ... [dotnet library license](https://www.microsoft.com/net/dotnet_library_license.htm), but also points to this project -- where the LICENSE.txt is clearly the Apache license...

There appear to be a few of these artifacts floating around: long-standing packages with the old dotnet library license, which appear to come from clearly open source projects -- I'm just trying to understand, because I'm taking a dependency on a project which took a dependency on this 😉 </Description>
    <CreatedDate>06/06/2018</CreatedDate>
    <ClosedDate>06/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27521</IssueID>
    <Title>Asked to simplify symbol usage in "var" in foreach incorrectly</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 

``` C#
        static void Main(string[] args)
        {
            string code = "89 414 9'20 135 1911818";

            StringBuilder b = new StringBuilder();

            foreach (char c in code)
            {
                if (char.IsWhiteSpace(c) || c == '\'')
                {
                    b.Append(c);
                }
                else
                {

                }
            }

            Console.WriteLine(b.ToString());
        }
```

![image](https://user-images.githubusercontent.com/1103906/41031319-b014c072-69c3-11e8-9e19-0341e8f8c6f2.png)
</Description>
    <CreatedDate>06/06/2018</CreatedDate>
    <ClosedDate>06/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27466</IssueID>
    <Title>[Interactive] Lightbulb menu for adding a using directive crashes VS</Title>
    <Description>**Version Used**: 15.8 Preview 2

**Steps to Reproduce**:

1. Open C# Interactive
2. Paste `DateTime.Parse("", CultureInfo.CurrentCulture);`
3. Press `CTRL + .` to invoke Lightbulb menu

**Expected Behavior**:
Lightbulb menu opens, shows preview and allows me to apply codefix.

**Actual Behavior**:
Lightbulb menu opens but VS crashes before showing the preview with following stacktrace:
```
Exception: System.NullReferenceException
   at Microsoft.VisualStudio.LanguageServices.Telemetry.ProjectTypeLookupService.GetProjectType(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.ProjectId)
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.IWorkspaceExtensions.GetLanguageAndProjectType(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.ProjectId, System.String ByRef, System.String ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors+&lt;GetPreviewAsync&gt;d__11.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession+&lt;GetPreviewAsync&gt;d__41.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbMenuItem+&lt;GetOrCreatePreviewAsync&gt;d__43.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbMenuItem+&lt;InitializeFlavoredAsync&gt;d__19.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbMenuItem+&lt;InitializeAsync&gt;d__17.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulb+&lt;OnMenuItemGotKeyboardFocus&gt;d__59.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+&lt;&gt;c.&lt;ThrowAsync&gt;b__6_0(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```</Description>
    <CreatedDate>05/06/2018</CreatedDate>
    <ClosedDate>06/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27459</IssueID>
    <Title>Don't offer to qualify property from inside an attribute on a class</Title>
    <Description>### Customer scenario

When using `nameof` in an attribute on a class the fixer for qualifying with `this.` appears, which results in broken code.

### Bugs this fixes

FIxes #26893 and #23803

### Workarounds, if any

None

### Risk

Low

### Performance impact

Low, just checking existing property

### Root cause analysis

Added tests to prevent regression in VB and C#

### How was the bug found?

Customer reported

### Test documentation updated?

N/A

&lt;/details&gt;
</Description>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>20/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27374</IssueID>
    <Title>code cleanup fix expression-bodied members does not work</Title>
    <Description>example:

```csharp
        public int DoubleTheValue(int someValue)
        {
            return someValue * 2;
        }
```

After code cleanup, it should be 

```csharp
public int DoubleTheValue(int someValue) =&gt; someValue * 2;
```</Description>
    <CreatedDate>02/06/2018</CreatedDate>
    <ClosedDate>02/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27337</IssueID>
    <Title>Don't offer use property refactoring on interface implementations</Title>
    <Description>Take the following code:
```C#
using System.Collections;
using System.Collections.Generic;

class C1
{
    void M(C1 c1)
    {
        c1 = new C1() { [1] = { 1 } };
    }
    C2 this[int i] { get =&gt; null; }
}
class C2 : IEnumerable&lt;int&gt;
{
    public IEnumerator&lt;int&gt; GetEnumerator() =&gt; throw new System.NotImplementedException();
    IEnumerator IEnumerable.GetEnumerator() =&gt; throw new System.NotImplementedException();
    public void Add(int i) { }
}
```

The "Use Property Refactoring" is offered on both overloads of GetEnumerator, and it has a lightbulb rather than a wrench. I could maybe understand the first one, since it's not an explicit interface implementation, but it definitely shouldn't be given lightbulb severity as that implies it's actually something we recommend, rather than just a tool. It makes absolutely no sense to offer it on the explicit interface implementation.

VS 27729.1</Description>
    <CreatedDate>01/06/2018</CreatedDate>
    <ClosedDate>17/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27217</IssueID>
    <Title>Not working format for array initialization syntax</Title>
    <Description>Affected Branch: [27623.0.d15.7]
Affected Build: 15.7.0 Preview 5.0
Affected Product Language: C#, VB

Steps to reproduce:

1. Create C# or VB application (in my case Console app)
2. Add following code to Main method:

```C#
string[] a = {
                "test",
            "test2",
          "test3",
          "test4",
               "test5"
                                    };
```

```VB
Dim strings As String() = {
                "test",
            "test2",
          "test3",
          "test4",
               "test5"
                                                  }
```

3. Edit -&gt; Advanced -&gt; Format Document

Expected: code formatted 
Actual: code not formatted

[Gif-sharp, gif-vb.]([url](https://microsoft-my.sharepoint.com/:i:/p/v-margko/EcX3u-On8oBCpHt1mot2p98BcZJ7NYHZFYvJ2_zjTC66Gg?e=MI3Pb6))</Description>
    <CreatedDate>29/05/2018</CreatedDate>
    <ClosedDate>17/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27210</IssueID>
    <Title>Incorrect 'name can be simplified' [replaces with var] </Title>
    <Description>1. Create new C# .NET Framework project.
2. Paste the following code:

```csharp
using System.Collections.Generic;

namespace N
{
    class Program
    {
        static void Main(string[] args)
        {
            var doubleList = new List&amp;lt;double&amp;gt;();
            foreach (var q in doubleList)
            {
            }
        }
    }
}
```

3. Notice that `doubleList` in `foreach` is greyed out.
4. Ivoke 'Quick actions' menu on it (Ctrl+.)
5. Notice that it suggests &amp;quot;Simplify name 'doubleList'&amp;quot;.
6. Accept the suggestion, notice that `doubleList` is replaces with `var` and the code now is invalid.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/258678/incorrect-name-can-be-simplified.html
VSTS ticketId: 620703_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>28/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27204</IssueID>
    <Title>Code auto-formating not working</Title>
    <Description>This:

```csharp
for (int i = 0; i &lt; 10; i++)
{                  int[] x = await Task.FromResult(new[] {
1 });
}
```

will be auto-formatted to:

```csharp
for (int i = 0; i &lt; 10; i++)
{
    int[] x = await Task.FromResult(new[] {
1 });
}
```

However I would expect:

```csharp
for (int i = 0; i &lt; 10; i++)
{
    int[] x = await Task.FromResult(new[] { 1 });
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/226140/code-auto-formating-not-working.html
VSTS ticketId: 592849_
_These are the original issue comments:_

Yuanlong Li-MSFT on 4/2/2018, 03:19 AM (55 days ago): &lt;p&gt;Thanks for your feedback, I am sorry for the issue you are experiencing, I try to reproduce your issue . but I still can’t reproduce it. For investigate this issue further, Would it possible to afford us with your repro video and more detailed steps so we can try to narrow down the issue?&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;We are looking forward to hearing you.&lt;/p&gt;

Yuanlong Li-MSFT on 4/3/2018, 11:28 PM (54 days ago): &lt;p&gt;Hello &amp;nbsp;&lt;a target='_blank' href="https://developercommunity.visualstudio.com/users/70131/6b336fb2-def4-4b27-934a-cab66eae3c7b.html" target="_blank"&gt;segruds&lt;/a&gt;,&lt;/p&gt;&lt;p&gt;Thanks for taking the time to report this issue to us. I’ve filed a bug for this issue on the C++ team here. The status on this Developer Community item will be updated as that bug is looked at. Thanks again for reporting this to us.&lt;/p&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>28/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27174</IssueID>
    <Title>Opening a misc file with a compiler error causes NullReferenceException in ProjectTypeLookupService</Title>
    <Description>1. Open Visual Studio (make sure you've never opened a solution)
2. File -&gt; New File -&gt; C#
3. Introduce a syntax error.

Expected: Nothing
Actual:


```
---------------------------
Microsoft Visual Studio
---------------------------
An exception has been encountered. This may be caused by an extension.

You can get more information by examining the file 'C:\Users\davkean\AppData\Roaming\Microsoft\VisualStudio\15.0_85a7cc88\ActivityLog.xml'.
---------------------------
OK   
---------------------------

```

With:
```
System.NullReferenceException: Object reference not set to an instance of an object.   
at Microsoft.VisualStudio.LanguageServices.Telemetry.ProjectTypeLookupService.GetProjectType(Workspace workspace, ProjectId projectId)   
at Microsoft.CodeAnalysis.Editor.Shared.Extensions.IWorkspaceExtensions.GetLanguageAndProjectType(Workspace workspace, ProjectId projectId, String&amp; language, String&amp; projectType)   
at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.BrowserHelper.CreateBingQueryUri(DiagnosticData diagnostic)  
at Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioBaseDiagnosticListTable.GetHelpLink(DiagnosticData item)   
at Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioBaseDiagnosticListTable.LiveTableDataSource.TableEntriesSnapshot.TryGetValue(Int32 index, String columnName, Object&amp; content)   
at Microsoft.VisualStudio.Shell.TableControl.Implementation.SnapshotTableEntryViewModel.TryGetValue(String columnName, Object&amp; content) --- End of stack trace from previous location where exception was thrown ---   
at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
--
```</Description>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>26/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27154</IssueID>
    <Title>XUnit build failures in 'prodcon/roslyn/master/' - '20180525.01'</Title>
    <Description>@dotnet-mc-bot commented on [Fri May 25 2018](https://github.com/dotnet/core-eng/issues/3545)

There were a set of failures during this build. Here is a summary of these:
* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&amp;buildId=1720162
  - **Agent:** DDMBLDW149
  - **Error log:**Command: C:\Users\dlab14\.nuget\packages\xunit.runner.console\2.3.1\tools\net452\xunit.console.x86.exe "E:\A\_work\24\s\Binaries\Release\UnitTests\CSharpVisualStudioTest\Roslyn.VisualStudio.CSharp.UnitTests.dll"  -xml "E:\A\_work\24\s\Binaries\Release\UnitTests\CSharpVisualStudioTest\xUnitResults\Roslyn.VisualStudio.CSharp.UnitTests.dll.xml" -noshadow -verbose
xUnit output log: E:\A\_work\24\s\Binaries\Release\Logs\Roslyn.VisualStudio.CSharp.UnitTests.dll.out.log
xunit produced no error output but had exit code 1
Errors Roslyn.Services.Editor2.UnitTests.dll

@mmitche, @jaredpar 


</Description>
    <CreatedDate>25/05/2018</CreatedDate>
    <ClosedDate>25/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27140</IssueID>
    <Title>Changing function with async Task from expression body to block body generates return</Title>
    <Description>If a function has async Task, and I use the quick fix (ctrl+.) to convert it into a body block, visual studio assume that the function returns something because of the Task and adds a return in the block.

For example, lets say i use this code:

     public async Task Logout() =&gt; await HttpContext.SignOutAsync();

Using ctrl + . if i select the &amp;quot;use body blocks for methods&amp;quot; option, I get this: 

        public async Task Logout()
        {
            return await HttpContext.SignOutAsync();
        }

However, async Task shouldn't return anything.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/190905/changing-function-with-async-task-from-expression.html
VSTS ticketId: 559892_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/05/2018</CreatedDate>
    <ClosedDate>25/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27061</IssueID>
    <Title>Expose TypeSymbol.IsReadOnly property</Title>
    <Description>**Version Used**:  master

I'm working on a set of analyzers called ErrorProne.NET. One of the analyzers there deals with readonly structs and warns if non-readonly struct is used in 'readonly contexts' like passed by 'in' etc.

Unfortunately, there is no way right now to check that a struct is readonly, especially if the struct is not declared in the current code base. When the source code is available it is possible to get the source tree and then to check the list of modifiers. But this option is not available if the type comes from the metadata.

Basically, the problem is that `ITypeSymbol` does not have 'IsReadOnly' property and both `TypeSymbol` type and `IsReadOnly` property are both [internal](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Symbols/TypeSymbol.cs,627).

And I can't even find a reasonable workaround (except to go through reflection) because `PENamedTypeSymbol.GetAttributes` filters out `IsReadOnlyAttribute` [from the result](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Symbols/Metadata/PE/PENamedTypeSymbol.cs,593).

It basically means that there are no official ways today to write an analyzer that will do something different for readonly structs.</Description>
    <CreatedDate>23/05/2018</CreatedDate>
    <ClosedDate>25/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27043</IssueID>
    <Title>Syntax Coloring Lost in Copy and Paste to Word</Title>
    <Description>Create Projet in Visual Studio
Enter &amp;quot;Console.WriteLine();&amp;quot; in some method.
Now, keyword &amp;quot;Console&amp;quot; is cyan.
Ctrl+A to select all
Ctrl+C to copy into clipboard
Open Word
Ctrl+V to paste into Word document
Now, keyword &amp;quot;Console&amp;quot; is black.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/146551/syntax-coloring-lost-in-copy-and-paste-to-word.html
VSTS ticketId: 521685_
_These are the original issue comments:_

Nobuyuki Iwanaga on 11/8/2017, 05:02 AM (194 days ago): I have the same problem.Version used: both VS 15.4.3 and VS 15.5 Preview 3A screen shot:https://twitter.com/ufcpp/status/928245625665155074
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2018</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27014</IssueID>
    <Title>Nullable Reference Types: CS8618 and/or CS8625 should be consistently reported for static fields/properties.</Title>
    <Description>**Version Used**: 05/14/18 Nullable Reference Types Preview (`csc` reports `2.8.0.62830 (e595ee27)`) with Visual Studio 15.7.1

**Demonstration Code**:

(For your convenience, here's all of the examples in this issue in one project: [PathogenPlayground/InconsistentWarningsOnStaticFieldsAndProperties](https://github.com/PathogenPlayground/InconsistentWarningsOnStaticFieldsAndProperties))

```csharp
public class TestClass
{
    public string TestProperty { get; }
    public string testField;

    public static string TestStaticProperty { get; }
    public static string testStaticField;
}
```

**Expected Behavior**:

A CS8618 warning is reported for all four fields/properties.

**Actual Behavior**:

CS8618 is only reported for the instance field/property:

```
warning CS8618: Non-nullable property 'TestProperty' is uninitialized.
warning CS8618: Non-nullable field 'testField' is uninitialized.
```

# Variations

While reporting this issue, I ended up finding out that adding null initializers and a static constructor changed the behavior as observed in the examples below:

----

Adding a static constructor does not change anything:

```csharp
// (No warnings for TestStaticProperty or testStaticField)
public class TestClass
{
    public static string TestStaticProperty { get; }
    public static string testStaticField;

    static TestClass() { }
}
```

----

Adding null initializers does not change anything:

```csharp
// (No warnings for TestStaticProperty or testStaticField)
public class TestClass
{
    public static string TestStaticProperty { get; } = null;
    public static string testStaticField = null;
}
```

----

Adding both null initializers and a static constructor **does** change things:

```csharp
public class TestClass
{
    public static string TestStaticProperty { get; } = null; // warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
    public static string testStaticField = null; // warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.

    static TestClass() { }
}
```</Description>
    <CreatedDate>21/05/2018</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>27000</IssueID>
    <Title>[C# Feature Request] Implicitly typed constructor calls</Title>
    <Description>**Instead of doing** `Dictionary&lt;WeaponType, WeaponInformation&gt; MyDict = new Dictionary&lt;WeaponType, WeaponInformation&gt;` 
**We can do this:** `Dictionary&lt;WeaponType, WeaponInformation&gt; MyDict = new();` **and the compiler will infer the type of the constructor to use.**

One of my favorite features from C# 7 is the new use of the `default` keyword. I love being able to just do something like:

```csharp
public struct Coord { int x, int y }
public Coord Coord = new Coord(5, 3);

public void ResetCoord() =&gt; Coord = default;
```

I'd like to do something like this for references:

```csharp
private Dictionary&lt;WeaponType, WeaponInformation&gt; myDict;
public Dictionary&lt;WeaponType, WeaponInformation&gt; MyDict=&gt; myList ?? myList = default;
```

Except, for reference types, `default` is `null`, so this isn't getting much done, so I would have to do this: 

```csharp
private Dictionary&lt;WeaponType, WeaponInformation&gt; myDict;
public Dictionary&lt;WeaponType, WeaponInformation&gt; MyDict =&gt; myList ?? myList =
   new Dictionary&lt;WeaponType, WeaponInformation&gt;();
```

Which is very redundant, in the same way `default(Dictionary&lt;WeaponType, WeaponInformation&gt;)` used to be. 

So, my proposal, is could we instead do something like this:

```csharp
private Dictionary&lt;WeaponType, WeaponInformation&gt; myDict;
public Dictionary&lt;WeaponType, WeaponInformation&gt; MyDict =&gt; myList ?? myList = new;
```

The syntax could either by `new` or `new()`, but either way, it would just be shorthand for the current way of doing it, and the compiler would swap it out when it compiles, inferring the type from the local context. 

And, if the constructor had parameters, like:

```csharp
public Coord(int x, int y)
{
    X = x;
    Y = y;
} 
```
We could do:

```csharp
public Coord coord = new(4, 2);
```

Obviously something like:
```csharp
var coord = new(4, 2);
```
wouldn't be allowed as this would would have to be an anonymous type, and we already have a syntax for that. 

This would make code cleaner and less redundant, espically because `var` can only be used in so many places. Some of the places where this can be used to make code cleaner and shorter:
```csharp
// Before: 
public List&lt;Dictionary&lt;string, string&gt;&gt; MyBooks =&gt; myBooks ?? myBooks = 
   new List&lt;Dictionary&lt;string, string&gt;&gt;();
// After:
public List&lt;Dictionary&lt;string, string&gt;&gt; MyBooks =&gt; myBooks ?? myBooks = new();

// Before: 
PrintBooks(new List&lt;Dictionary&lt;string, string&gt;&gt;());
// After:
PrintBooks(new);

// Before:
public List&lt;Dictionary&lt;string, string&gt;&gt; MyBooks = new List&lt;Dictionary&lt;string, string&gt;&gt;();
// After:
public List&lt;Dictionary&lt;string, string&gt;&gt; MyBooks = new();
```

And yes, `PrintBooks(new)` doesn't tell the reader what type of variable `new`, but neither does `PrintBooks(default)`, but that's already in the language. </Description>
    <CreatedDate>20/05/2018</CreatedDate>
    <ClosedDate>21/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26893</IssueID>
    <Title>IDE0009 should not nag in static context</Title>
    <Description>Repro code:

```cs
namespace RoslynSandbox
{
    using System;

    [Obsolete(nameof(Value))]
    class Foo
    {
        public int Value { get; set; }
    }
}
```

```
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0009	Add 'this' or 'Me' qualification.	RoslynSandbox(net461)	C:\Git\RoslynSandbox\RoslynSandbox\Foo.cs	5	Active
```
</Description>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>19/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26868</IssueID>
    <Title>Private field assigned in tuple notation should not produce IDE0044 (add readonly modifier)</Title>
    <Description>**Version Used**: 15.7.1

**Steps to Reproduce**:

1. In any class (or struct for that matter), define a private field only assigned by a tuple, as shown in the example

```CS
class SomeClass
{
    // These fields both produce the "add readonly modifier" message
    private object A;
    private object B;

    public void AssignVariables()
    {
        (A, B) = MakeTuple();
    }

    public static (object, object) MakeTuple() =&gt; (new object(), new object()); // Just an example
}
```

**Expected Behavior**: This should not give the specified message

**Actual Behavior**: The message IDE0044 (add readonly modifier) is given, even though following this advice will result in an error
![](http://totally-not.a-sketchy.site/0a4a90.png)
</Description>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>16/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26864</IssueID>
    <Title>Behavior Differences in Extension Methods: this ref vs this in </Title>
    <Description>**Version Used**: 
VS 2017 15.8 Preview 1, C# 7.3

**Steps to Reproduce**:
`static T Method&lt;T&gt;(this ref T it) =&gt; it; //CS8337 The first parameter of a 'ref' extension method 'Method' must be a value type or a generic type constrained to struct.`
`static T Method&lt;T&gt;(this ref T it) where T : struct =&gt; it; //OK`
`static T Method&lt;T&gt;(this in T it) =&gt; it; //CS8338 The first parameter of an 'in' extension method 'Method' must be a value type.`
`static T Method&lt;T&gt;(this in T it) where T : struct =&gt; it; //CS8338 The first parameter of an 'in' extension method 'Method' must be a value type.`

**Expected Behavior**:
`static T Method&lt;T&gt;(this in T it) where T : struct =&gt; it; //OK (struct is a value type)`

**Actual Behavior**:
`static T Method&lt;T&gt;(this in T it) where T : struct =&gt; it; //CS8338 The first parameter of an 'in' extension method 'Method' must be a value type.`</Description>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26792</IssueID>
    <Title>Roslyn Syntax Visualizer is not working in VS 2017 15.7.0 and 15.7.1</Title>
    <Description>**Version Used**: 

15.7.0 and 15.7.1 (I have both)

**Steps to Reproduce**:

1. Install .NET Compiler Plarform SDK either from VS Marketplace of within VS 2017
2. Restart VS

**Expected Behavior**:

Syntax Visualizer works

**Actual Behavior**:

.NET Compiler Platform SDK is disabled because it's not compatible with VS 2017 15.7.0 and 15.7.1.

Screenshot:

![image](https://user-images.githubusercontent.com/8773147/39919297-5633d01a-553d-11e8-9e6b-7b53ede273c1.png)

</Description>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>11/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26733</IssueID>
    <Title>"Add readonly modifier" doesn't fire if you read from field in constructor</Title>
    <Description>``` VB
Class Foo
    Dim foo As List(Of String)

    Sub New()
        foo = New List(Of String)()
        foo.Capacity = 10
    End Sub

End Class

```

**Expected:**
Make readonly to fire

**Actual:**
Make readonly does not </Description>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26669</IssueID>
    <Title>Decompile uses C# syntax for Visual Basic projects resulting in broken navigation</Title>
    <Description>1. 
``` VB
Imports System.Windows.Forms

Module Module1
    Private ReadOnly _CF_UNICODE As String = DataFormats.UnicodeText ' &lt;- Decompile this

End Module

```

Expected: For the file to be decompiled in VB and to navigate to UnicodeText
Actual: The file is in C# syntax and it fails to navigate

_Copied from original issue: dotnet/project-system#3519_</Description>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>19/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26608</IssueID>
    <Title>Inline refactoring isn't offered at usages of temporary variable</Title>
    <Description>**Version Used**: 
15.8 Int Preview 1

**Steps to Reproduce**:

1. Create C# project, as shown below
2. Set caret on 'foo' in 'Console.Write(foo);'
3. Press Ctrl+.

```csharp
        static void Main(string[] args)
        {
            string foo = "sfsf";

            Console.Write(foo);
        }
```

**Expected Behavior**:
LightBulb offers inline temporary variable 'foo' refactoring.

**Actual Behavior**:
Inline variable refactoring is only offered if you set the caret inside of the 'foo' in the variable declaration.

**Justification**
Since the temporary variable has to be declared before it can be used, I think the most likely scenario in which I'd use this fixer is 1) I create the temporary variable 2) I use it 3) I realize the variable is unneeded and want to inline it. It seems more useful to support inlining the variable at its usage than supporting it at its declaration.</Description>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26579</IssueID>
    <Title>No results for some C#/VB options in quick launch</Title>
    <Description>**Version Used**: 2.8.0-beta4 (15.8 P1 Int Preview)

**Steps to Reproduce**:

1. Ctrl+Q (open Quick Launch)
2. Search for 'Decompiler'

Alternatively:
1. Tools &gt; Options
2. Search for 'Decompiler'

**Expected Behavior**:
There should be a search result for the page containing the _Tools &gt; Options &gt; Text Editor &gt; C# &gt; Advanced &gt; Enable Navigation to decompiled sources_ option.

**Actual Behavior**:
No results in quick launch:
![image](https://user-images.githubusercontent.com/5387680/39555642-aa2b140e-4e2f-11e8-9022-5bcfd8969e08.png)

No results in options dialog:
![image](https://user-images.githubusercontent.com/5387680/39555704-2f180c26-4e30-11e8-9c1a-d522a1d16abb.png)

The fix is quite simple and just involves updating [this line](https://github.com/dotnet/roslyn/blob/0923887afc2fb1858ad2e0742752f49d96714149/src/VisualStudio/CSharp/Impl/VSPackage.resx#L144-L146), its VB analog, and all of its localized versions with keywords for every supported C# and VB option.

I've only tested the 'decompiler' feature but given how obscure quick launch knowledge is, odds are there are other C# and VB options that don't have keywords, so I'd take some time to try searching for all C#/VB commands.

To prevent similar bugs in the future, I'd add a comment indicating this requirement to the [C# Options Page](https://github.com/dotnet/roslyn/blob/6847f1e5a909395aae9456e8f366cbf4deb86b69/src/VisualStudio/CSharp/Impl/Options/AdvancedOptionPageControl.xaml) and to its VB analog.

Given the density of Tools Options, if an option isn't searchable, its discoverability is severely limited.</Description>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>20/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26556</IssueID>
    <Title>Naming violation fixers need better heuristics</Title>
    <Description>I find myself never using the default naming violation fixer - it almost always suggests nonsensical fixes for a code base as old as mine with various naming styles over the years.

We ran into exactly the same situation when we did naming rules with FxCop, and we added better heuristics to suggest more sensible name. 

As I fix up this Visual Basic code base, I'm going to add all the individual suggestions that I ignored from it:

Syntax|Suggested|What I actually renamed to|Issue
---|---|---|---
`Private Shared m_DefaultInstance As BuildEventCommandLineDialog`|s_m_DefaultInstance|s_defaultInstance|#26566
`m_CommandLine As String`|_m_CommandLine|_commandLine|#26566
`Private ReadOnly _ID As String`|_iD|_id|#31908
`Private _UIShellService As IVsUIShell`|_uIShellService|_uiShellService|#31908
`Protected m_ScalingCompleted As Boolean`|M_ScalingCompleted|ScalingCompleted|#26566
`Private Const s_anyCPUPlatformName As String = "Any CPU"`|S_anyCPUPlatformName|AnyCPUPlatformName|#26566
`Private _DTE As EnvDTE.DTE`|_dTE|_dte|#31908
`Private s_helpTopic As String`|s_helpTopic|_helpTopic|#26566
`Private Shared s_RFSSwitch`|s_rFSSwitch|s_rfsSwitch|#31908
`Private _DTEEvents As DTEEvents`|_dTEEvents|_dteEvents|#31908
`Private Const s_SERIALIZATION_DESCRIPTION As String = "Description"`|S_SERIALIZATION_DESCRIPTION|SERIALIZATION_DESCRIPTION|#26566, #31908

</Description>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>18/12/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26538</IssueID>
    <Title>Update Roslyn /errorLog JSON output to SARIF v2</Title>
    <Description>Roslyn today emits SARIF v1 when log files are produced by the /errorLog switch. The SARIF v2 format is close to being finalized as a public standard driven by OASIS (Microsoft is on the technical committee and serves as project editor for the standard).

This is a tracking item request to update Roslyn's support when the standard is finalized. The TC will approve a draft for comment on 5/17.</Description>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26492</IssueID>
    <Title>Exception when typing 'Array.ofSeq' in F# program</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Community 2017 
Version 15.6.7
VisualStudio.15.Release/15.6.7+27428.2043
Microsoft .NET Framework
Version 4.7.02556

**Steps to Reproduce**:
1. Load project or create a new equivalent F# project.
2. Type `Array.ofSeq` on a new line at the end of Program.fs
The timing is critical, it has to be typed very fast but not too fast.
`Array.` can be enough, or ` A&lt;TAB&gt;.&lt;TAB&gt;` if the auto complete has been used before so it selects the right items.


**Expected Behavior**:
I expect the text I type to appear without errors.

**Actual Behavior**:
Exception:
```
System.ArgumentOutOfRangeException: 
Specified argument was out of the range of valid values. 
Parameter name: span
 at Microsoft.VisualStudio.Text.SnapshotSpan..ctor(ITextSnapshot snapshot, Span span)
 at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.AddClassifiedSpansForPreviousTree[TClassificationService](IClassificationDelegationService`1 delegationService, TClassificationService classificationService, SnapshotSpan span, ITextSnapshot lastSnapshot, Document lastDocument, List`1 classifiedSpans)
 at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.AddClassifiedSpans[TClassificationService](IClassificationDelegationService`1 delegationService, TClassificationService classificationService, SnapshotSpan span, List`1 classifiedSpans)
 at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags[TClassificationService](NormalizedSnapshotSpanCollection spans, HostLanguageServices languageServices, IClassificationDelegationService`1 delegationService)
 at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags(NormalizedSnapshotSpanCollection spans)
 at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.Tagger.GetTags(NormalizedSnapshotSpanCollection spans) at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.&lt;GetTagsForBuffer&gt;d__39.MoveNext()
 --- End of stack trace from previous location where exception was thrown ---
 at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
````

[project.zip](https://github.com/dotnet/roslyn/files/1959094/project.zip)

</Description>
    <CreatedDate>29/04/2018</CreatedDate>
    <ClosedDate>30/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26478</IssueID>
    <Title>Feature Request for Intellisense</Title>
    <Description>I hope you consider this very seriously, namely:

1- Deprecated members: strike-through and hide/show.

2- Inherited members: hide/show, hierarchy levels.

3- Local members: hide/show/show first.

4- Ability sort by priority or by type: right now everything is mixed and alphabetically sorted.

There needs to be more sorting options, like pushing deprecated members last or fields and properties first, etc.

5- Activate bold case or highlight option for certain types.

6- Option to show return types inside the list next to members.

7- Show quick info on mouse hover over the list.

This would make code editing and exploring in Visual Studio way more productive, fun and easy.</Description>
    <CreatedDate>28/04/2018</CreatedDate>
    <ClosedDate>29/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26472</IssueID>
    <Title>Ref Returns in Expression-Bodied member with Conditional operator and non-value producing expression</Title>
    <Description>**Version Used**: 
VS 15.7.0 Preview 4, C# 7.3

**Steps to Reproduce**:

This works:
`public ref T this[int i] {`
`      get {`
`        if (i &lt; 0 || i &gt;= _values.Length) throw new ArgumentOutOfRangeException();`
`        return ref _values[i];`
`      }`
`    }`

This doesn't:
`public ref T this[int i] =&gt; (i &lt; 0 || i &gt;= _values.Length) ? throw new ArgumentOutOfRangeException() :  ref _values[i];`
Error CS8150	By-value returns may only be used in methods that return by value
Error CS8326	Both conditional operator values must be ref values or neither may be a ref value

If I remove both `ref`s, the above will work.</Description>
    <CreatedDate>28/04/2018</CreatedDate>
    <ClosedDate>29/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26366</IssueID>
    <Title>Feature Request: Go To Definition should use source link or embedded source (pdb) instead of metadata-as-source when available</Title>
    <Description>This was originally filed as https://github.com/OmniSharp/omnisharp-vscode/issues/2207. Moving to Roslyn for discussion.

## Steps to reproduce

Use "Go To Definition" from command-pallete, context menu, keyboard shortcut, or CMD/CTRL+CLICK on a symbol contained within a package reference that contains portable-pdb embedded source or sourcelink metadata (unauthenticated).

## Expected  behavior

Referenced source is rendered 👍 

## Actual behavior

Metadata-as-code is rendered 👎 

I used `dotnet-sourcelink` to verify that the sourcelink urls are available as well as to test a nupkg containing a portable pdb with embedded source.</Description>
    <CreatedDate>24/04/2018</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26324</IssueID>
    <Title>IDE0032  C# Use auto property [volatile and readonly properties]</Title>
    <Description>**Version Used**: 
VS 2017 15.6.6 - Compiler Version 4.7.2556.0

**Steps to Reproduce**:

1. Paste private readonly string _myrandomvar = "blah."; into class header
2. Paste private volatile bool _myboolean= false; into class header.

**Expected Behavior**:
No warning as nether of these properties can be expressed as a C# auto-property.

**Actual Behavior**:
IDE0032  C# Use auto property warning and blur out generated.
</Description>
    <CreatedDate>22/04/2018</CreatedDate>
    <ClosedDate>19/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26318</IssueID>
    <Title>using statement marked as not used when it is used inside comment</Title>
    <Description>While documenting a class, I added a triple-slash comment at its head and included a `&lt;see cref="ModuleDeclarationBlock"/&gt;` within it. This failed to autocomplete while typing and also didn't highlight correctly until the relevant using was added. However, the using statement added is greyed out and is removed if the &amp;quot;Remove and Sort Usings&amp;quot; option is used.

I appreciate that the using statement is only required to satisfy the requirements of a comment and is not used in any code, but I think it should not be flagged as unused since it has an impact on the appearance and usability of the editor.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/232794/using-statement-marked-as-not-used-when-it-is.html
VSTS ticketId: 599160_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/04/2018</CreatedDate>
    <ClosedDate>22/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26258</IssueID>
    <Title>Internal error in compiler C #</Title>
    <Description>**Version Used**: 
VS Community 2017 15.6.6
.Net Framework 4.0

I have ASP.NET project and dll project in solution. When I degugging (show watch) in asp.net project, is all ok. When I degugging in dll project, watch window not show variable value, but  (CZ lang) "Vnitřní chyba v kompilátoru C#"  "Internal error in compiler C#".

When I set option "Použít zastaralé vyhodnocovače výrazů C# a VB"   "Use obsolete C # and VB expressions" in settings, I can show variable value in dll project.

This behavior I have on two notebooks and last and previous VS version.
</Description>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>26205</IssueID>
    <Title>CSharpToBasic test has recurring failure</Title>
    <Description>Skipping because of recurring failure:
master/job/windows_release_vs-integration/53/testReport/junit/Roslyn.VisualStudio.IntegrationTests.CSharp/CSharpGenerateTypeDialog/CSharpToBasic/</Description>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>20/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25973</IssueID>
    <Title>Code autoformatting of #region #endredion directives is broken</Title>
    <Description>Code autoformatting is broken in two cases.
The first is when #endif directive id typed after the #if directive with constant undefined in current configuration. 
The second case is when #region directive is entered inside #if #endif pair with undefined constant.
If the constant is defined autoformat works correctly.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/199095/code-autoformatting-of-region-endredion-directives.html
VSTS ticketId: 568108_
_These are the original issue comments:_

John Smith on ‎2‎/‎15‎/‎2018, 08:50 AM (49 days ago): &lt;p&gt;Screencast of the problem&lt;/p&gt;&lt;p&gt;&lt;a target='_blank' href="https://www.screencast.com/t/n0ow0MTVdw"&gt;https://www.screencast.com/t/n0ow0MTVdw&lt;/a&gt;&lt;/p&gt;

Jinu Joseph [MSFT] on ‎2‎/‎16‎/‎2018, 06:24 PM (47 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

Marco Burato on ‎3‎/‎23‎/‎2018, 05:19 AM (13 days ago): &lt;p&gt;I also see all sorts of weird behaviours with #if and #region auto-indenting. Sometimes they get indented with the code, sometimes they get no indentation, sometimes the indentation changes while adding more code or editing it.&lt;/p&gt;&lt;p&gt;When this gets looked at, I suggest to also test the following scenarios for #if, #endif, #region and #endregion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;copy-pasting the line/block containing the directive&lt;/li&gt;&lt;li&gt;moving the line/block around with ALT + arrows&lt;/li&gt;&lt;li&gt;changing the indentation of the code that includes the #if or #region block&lt;/li&gt;&lt;/ul&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>05/04/2018</CreatedDate>
    <ClosedDate>17/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25961</IssueID>
    <Title>xunit produced no error output but had exit code -2146233082, and there is no dump file</Title>
    <Description>The following error happened in official build. Will update this issue if the same test fails again.

xunit produced no error output but had exit code -2146233082, and there is no dump file

https://ci.dot.net/job/dotnet_roslyn/view/Official%20Builds/job/dev15.7.x/job/windows_release_unit64/236/

https://ci.dot.net/job/dotnet_roslyn/view/Official%20Builds/job/dev15.7.x/job/windows_release_unit32/235/</Description>
    <CreatedDate>05/04/2018</CreatedDate>
    <ClosedDate>13/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25958</IssueID>
    <Title>EditorConfig: "This." qualifier rule for properties and fields works only after close all project files</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 Int Preview Version 15.7.0 Preview 3.0 [27603.0.d15.7]

**Steps to Reproduce**:

1.	Create new C# project (I created .NET Core Class Library)
2.	Add .editorconfig file to project:

```ini
root = true

[*]
dotnet_style_qualification_for_field = true:warning
dotnet_style_qualification_for_property = true:warning
```
3.	Add two classes to project - Class1 can be empty class, Class2 contains:
```csharp
namespace ClassLibrary8
{
   class Class2
    {
        private int eight = 0;

        public int Seven { get; set; }

        public int Sum()
        {
            this.Init();
            return this.Seven + this.eight;
        }

        public void Init()
        {
            Seven = 7;
            eight = Sum() + 1;
        }
    }
}
```
4.	Open both classes in Studio
Warnings for fields and properties work
5.	Change .editorconfig file to:
```ini
root = true

[*]
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
```
6.	Open Class2

**Expected Behavior**: warnings do not appear for field and property without "this" qualifier and appeared for field and property with "this" qualifier
**Actual Behavior**: warnings appear for field and property without "this" qualifier and are not appeared for field and property with "this" qualifier
**Note**: Rebuild of project does not help, close and reopen of Class2 does not help. Rules applied only after close both class files and reopen Class2 file.

[Repro Gif](https://microsoft-my.sharepoint.com/:i:/p/v-margko/EUamrf7HBWhHhNCw3SJ8OnsBFNTeW4y1fl4Fik6bhj4TMw?e=vPLjbk)

</Description>
    <CreatedDate>05/04/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25952</IssueID>
    <Title>IDE0032 "Use Auto Property" breaking VB code with initial value</Title>
    <Description>**Version Used**: 

VS 15.6.5

**Steps to Reproduce**:

1. 

```vb
Public Class Class1

    Private _testProperty As String = "initial value"

    Public Property TestProperty() As String
        Get
            Return _testProperty
        End Get
        Set
            _testProperty = Value
        End Set
    End Property

End Class
```

2. IDE0032 Quick Action

```vb
Public Class Class1

    Public Property TestProperty() As String
= "initial value"

End Class
```

**Expected Behavior**:

```vb
Public Class Class1

    Public Property TestProperty() As String = "initial value"

End Class
```

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/1356444/38356017-8689722a-38f9-11e8-9e5e-35ea4fca52e0.png)
</Description>
    <CreatedDate>05/04/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25798</IssueID>
    <Title>Inaccessible member affects discard</Title>
    <Description>**Version Used**: 

Latest preview of 15.7.

**Steps to Reproduce**:

1. Attempt to compile the following

``` c#
class Base
{
    static int Main() =&gt; 0;
    private static int _ = 1;
}

class Derived: Base
{
    static void M1()
    {
        _ = M2();
    }
    static int M2() =&gt; 2;
}
```

**Expected Behavior**:

Compiles without error

**Actual Behavior**:

error CS0122: 'Base._' is inaccessible due to its protection level

</Description>
    <CreatedDate>28/03/2018</CreatedDate>
    <ClosedDate>29/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25677</IssueID>
    <Title>Wrong default value of a nullable parameter with Microsoft.Net.Compilers 2.4.0</Title>
    <Description>**Version Used**: 
C# 7.1 with NuGet package Microsoft.Net.Compilers 2.4.0

**Steps to Reproduce**:

1. In VS2017, create a new console application and change C# version to 7.1
2. Enter the following:

		using System.Diagnostics;

		namespace Test
		{
			class Program
			{
				static void Foo(int? x = default)
				{
					Debug.Assert(x == null);
				}

				static void Main()
				{
					Foo();
				}
			}
		}

3. Run the program. It works because `default` of `int?` is `null`.
4. Add NuGet package Microsoft.Net.Compilers version 2.4.0 (not the latest). 
5. Run the program again. The assertion fails because `x` is `0` (`default` of `int`).

**Expected Behavior**:

The default value of `int?` parameter should be `null`.

**Actual Behavior**:

The default value of `int?` parameter is `0`.

This appears to be fixed in  Microsoft.Net.Compilers 2.6.0 and later, but I have to use 2.4.0 since it is the last version that does not require MS Build v15.0 which is not installed on our build server. 
</Description>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25642</IssueID>
    <Title>Code fix doesn't see changes in document/project/solution</Title>
    <Description>Trying to invoke the &amp;quot;Require accessibility modifier&amp;quot; code fix shows a preview for a single item but then does not see/fix changes for a document/project/solution.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/217391/code-fix-doesnt-see-changes-in-documentprojectsolu.html
VSTS ticketId: 585383_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>17/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25405</IssueID>
    <Title>Add support for .editorconfig and Visual Studio "Enable full solution analysis"</Title>
    <Description>**Version Used**: 

Visual Studio 2017 v15.6.1

**Steps to Reproduce**:

1. Create .editorconfig file with the [.NET coding conventions](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference) configured within it.
2. Enable `Options\Text Editor\C#\Advanced\Enable full solution analysis`

**Expected Behaviour**:

VS will run all code convention rules, on all files in the solution, whether they are open or not.
This is the behaviour when using the Visual Studio Code Style rules configured directly in the options dialog.

**Actual Behaviour**:

The rules only get applied to the currently open file(s).

Could we add support for and respect this option?

I originally posted this on the [editorconfig](https://github.com/editorconfig/editorconfig/issues/341) board. I hope this is the correct place for this item?
</Description>
    <CreatedDate>11/03/2018</CreatedDate>
    <ClosedDate>11/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25356</IssueID>
    <Title>No completion after dot inside async lambda</Title>
    <Description>Copied from https://github.com/OmniSharp/omnisharp-vscode/issues/2097
C# extension for VS Code just uses CompletionService API, so porting this to Roslyn.

Use dotnet's "Web" template to write code in "Startup.cs" in the following cases: 

```csharp
app.Run(async (context) =&gt;
            {
                context.Items.&lt;There is not anything appear!!&gt;
                await context.Response.WriteAsync("Hello World!");
            });
but when you writer this:
app.Run(async (context) =&gt;
            {
                context.Items.&lt;Add a semicolon at the end of the line beforehand,and it would be ok&gt;;
                await context.Response.WriteAsync("Hello World!");
            });
```</Description>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25310</IssueID>
    <Title>Decompilation is producing invalid C#</Title>
    <Description>1. Create a new Console Application
2. Install **xUnit 2.1.0** NuGet package
3. Turn on decompilation
4. Right-click on `Assert.Single` and choose **Go to Definition**

``` C#
using System;
using Xunit;

namespace ConsoleApp191
{
    class Program
    {
        static void Main(string[] args)
        {
            Assert.Single("foo", "c");
        }
    }
}

```

5. Click member down drop

**Expected:** Every single member of Assert to be listed (&gt; 100)
**Actual:** Only the following are listed:

![image](https://user-images.githubusercontent.com/1103906/37085870-4585b6e6-224a-11e8-9f44-12a763a42711.png)
</Description>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25304</IssueID>
    <Title>Unlike interfaces, "Go To Implemention" on an abstract base class doesn't go direct to implementation</Title>
    <Description>_From @davkean on March 7, 2018 5:26_

1. Right-click on IBase and choose **Go To Implementation**

-- Notice that you go straight to the only implementation; `Derived`

2. Right-click on Base and choose **Go To Implementation**


``` C#

    abstract class Base
    {

    }

    interface IBase
    {

    }

    abstract class Derived : Base, IBase
    {

    }
```

**Expected:** To go straight to the only implementation; `Derived`
**Actual:**

Find Results window opens with two results:

```
Code	File	Line	Column	Project
abstract class Derived : Base	c:\users\davkean\Source\Repos\ConsoleApp192\ConsoleApp192\Program.cs	29	20	ConsoleApp192
abstract class Base	c:\users\davkean\Source\Repos\ConsoleApp192\ConsoleApp192\Program.cs	24	20	ConsoleApp192
```

_Copied from original issue: dotnet/project-system#3355_</Description>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25300</IssueID>
    <Title>Decompiler doesn't handle malformed XML</Title>
    <Description>``` C#
/// Exception while reading XmlDoc: System.Xml.XmlException: The 'p' start tag on line 835 position 2 does not match the end tag of 'th'. Line 835, position 89.
///   at System.Xml.XmlTextReaderImpl.Throw(Exception e)
///   at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)
///   at System.Xml.XmlTextReaderImpl.ThrowTagMismatch(NodeData startTag)
///   at System.Xml.XmlTextReaderImpl.ParseEndElement()
///   at System.Xml.XmlTextReaderImpl.ParseElementContent()
///   at System.Xml.XmlTextReaderImpl.Read()
///   at System.Xml.XmlTextReader.Read()
///   at System.Xml.XmlTextReaderImpl.Skip()
///   at System.Xml.XmlTextReader.Skip()
///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider.ReadMembersSection(XmlTextReader reader, LinePositionMapper linePosMapper, List`1 indexList)
///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider.ReadXmlDoc(XmlTextReader reader)
///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider..ctor(String fileName)
///   at ICSharpCode.Decompiler.Documentation.XmlDocLoader.LoadDocumentation(ModuleDefinition module)
///   at ICSharpCode.Decompiler.CSharp.Transforms.AddXmlDocumentationTransform.Run(AstNode rootNode, TransformContext context)
namespace System.Collections.Generic
{
	public interface IEnumerable&lt;out T&gt; : IEnumerable
	{
		new IEnumerator&lt;T&gt; GetEnumerator();
	}
}
```</Description>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25295</IssueID>
    <Title>Tuple equality: relax requirement for ValueTuple type</Title>
    <Description>I don't think that will be very easy to do, but it'd be nice if we could.

```C#
        [Fact]
        public void TestWithoutValueTuple()
        {
            var source = @"
class C
{
    static bool M()
    {
        return (1, 2) == (3, 4);
    }
}";
            var comp = CreateCompilationWithMscorlib40(source);

            comp.VerifyDiagnostics(
                // (6,16): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(1, 2)").WithArguments("System.ValueTuple`2").WithLocation(6, 16),
                // (6,26): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(3, 4)").WithArguments("System.ValueTuple`2").WithLocation(6, 26),
                // (6,16): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(1, 2)").WithArguments("System.ValueTuple`2").WithLocation(6, 16),
                // (6,26): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(3, 4)").WithArguments("System.ValueTuple`2").WithLocation(6, 26)
                );
        }
```</Description>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25248</IssueID>
    <Title>Decompilation only decompiles "public" API</Title>
    <Description>1. Create a new Console Application
2. Install **xUnit 2.1.0** NuGet package
3. Turn on decompilation
4. Right-click on `Assert.Contains` and choose **Go to Definition**

``` C#
using System;
using Xunit;

namespace ConsoleApp191
{
    class Program
    {
        static void Main(string[] args)
        {
            Assert.Contains("foo", "c");
        }
    }
}

```

Get:
``` C#
                public static void Contains&lt;T&gt;(T expected, IEnumerable&lt;T&gt; collection, IEqualityComparer comparer)
		{
			//IL_0005: Unknown result type (might be due to invalid IL)
			//IL_0006: Expected O, but got Unknown
			//IL_0026: Unknown result type (might be due to invalid IL)
			//IL_0029: Expected Ref, but got Unknown
			Assert.GuardArgumentNotNull("comparer", (object)(?)comparer);
			Assert.GuardArgumentNotNull("collection", collection);
			IEnumerator&lt;T&gt; enumerator = ((IEnumerable&lt;?&gt;)collection).GetEnumerator();
			try
			{
				while (((IEnumerator)enumerator).MoveNext())
				{
					T current = ((IEnumerator&lt;?&gt;)enumerator).get_Current();
					if (((IEqualityComparer)(?)comparer).Equals((!0)expected, (!0)current))
					{
						return;
					}
				}
			}
			finally
			{
				if (enumerator != null)
				{
					((IDisposable)enumerator).Dispose();
				}
			}
			throw new ContainsException(expected, collection);
		}
```

5. On Assert.GuardArgumentNotNull, choose Go To Definition

**Expected:** To navigate to GuardArgumentNotNull
**Actual:** 
```
---------------------------
Microsoft Visual Studio
---------------------------
Cannot navigate to the symbol under the caret.
---------------------------
OK   
---------------------------
```</Description>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25245</IssueID>
    <Title>Decompilation cannot navigate to xUnit's "Assert.Single"</Title>
    <Description>1. Create a new Console Application
2. Install **xUnit 2.1.0** NuGet package
3. Turn on decompilation
4. Right-click on `Assert.Single` and choose **Go to Definition**

``` C#
using System;
using Xunit;

namespace ConsoleApp191
{
    class Program
    {
        static void Main(string[] args)
        {
            Assert.Single("foo", "c");
        }
    }
}

```

**Expected:** Caret to be placed on Assert.Single 
**Actual:** Assert class is decompiled but caret is at the top of the class

~Other methods work, just not this one.~ Actually looks like it cannot navigate to any of these methods on Assert.</Description>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25243</IssueID>
    <Title>Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer throws null reference</Title>
    <Description>**Error:**
```ini
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	App3		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: App3
SyntaxTree: C:\Users\jmarolf\source\repos\App3\App3\App3\ViewModels\BaseViewModel.cs
SyntaxNode: return; [ReturnStatementSyntax]@[1481..1488) (49,16)-(49,23)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.GetLeftmostCondition(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.SyntaxNodeAction(SyntaxNodeAnalysisContext syntaxContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__43`1.&lt;ExecuteSyntaxNodeAction&gt;b__43_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```

**Code:**
```C#
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

using Xamarin.Forms;

using App3.Models;
using App3.Services;

namespace App3.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public IDataStore&lt;Item&gt; DataStore =&gt; DependencyService.Get&lt;IDataStore&lt;Item&gt;&gt;() ?? new MockDataStore();

        bool isBusy = false;
        public bool IsBusy
        {
            get { return isBusy; }
            set { SetProperty(ref isBusy, value); }
        }

        string title = string.Empty;
        public string Title
        {
            get { return title; }
            set { SetProperty(ref title, value); }
        }

        protected bool SetProperty&lt;T&gt;(ref T backingStore, T value,
            [CallerMemberName]string propertyName = "",
            Action onChanged = null)
        {
            if (EqualityComparer&lt;T&gt;.Default.Equals(backingStore, value))
                return false;

            backingStore = value;
            onChanged?.Invoke();
            OnPropertyChanged(propertyName);
            return true;
        }

        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            var changed = PropertyChanged;
            if (changed == null)
                return;

            changed.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        #endregion
    }
}
```</Description>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>25187</IssueID>
    <Title>Allow 'ref readonly struct' for 'readonly ref struct'</Title>
    <Description>**Version Used**: 
Visual Studio 2017 27428.0.d15.7

**Steps to Reproduce**:

1. Create a C# project for netcoreapp2.1
2. Write a declaration of a ref struct:
```C#
public readonly ref struct S { }
```

**Expected Behavior**:
The order of 'ref' and 'readonly' should not matter; I can either use 'readonly ref struct' or 'ref readonly struct' to declare readonly ref-like types.

**Actual Behavior**:
'ref readonly struct' is not allowed. looks like `ref struct` is a compound keyword like `partial class`.</Description>
    <CreatedDate>02/03/2018</CreatedDate>
    <ClosedDate>17/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24992</IssueID>
    <Title>Wrong suggestion by intellisense, "using directive is unnecessary" but its not!</Title>
    <Description>Quick action thinks that using statement is useless, and will suggest to clean it up (and will do so if I perform full clean up).

If you remove that using statement, documentation becomes invalid.

![wrong suggestion](https://user-images.githubusercontent.com/15255162/36540484-c9b49d7a-17ef-11e8-90b9-7b979784c773.JPG)

---

**Tested Version : 15.5.5**</Description>
    <CreatedDate>22/02/2018</CreatedDate>
    <ClosedDate>22/02/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24976</IssueID>
    <Title>Auto-generated AssemblyInfo files in obj directory should be ignored by analyzers under full solution analysis</Title>
    <Description>**Version Used**: 
Visual Studio 2017 Enterprise (15.5.7)

**Steps to Reproduce**:

1. Create a Visual Studio solution with SDK-style C# project(s) that are configured with rule CS8019 enabled.
2. Build the solution without full solution analysis enabled.
3. Enable [full solution analysis](https://docs.microsoft.com/en-us/visualstudio/code-quality/how-to-enable-and-disable-full-solution-analysis-for-managed-code).
4. Rebuild the solution.

**Expected Behavior**:
CS8019 violations should not be reported for the generated AssemblyInfo files in the project obj directories at either step 2 or step 4 since the files contain `&lt;auto-generated&gt;` headers.

**Actual Behavior**:
CS8019 violations are reported for the generated AssemblyInfo files in the project obj directories under full solution analysis (step 4).</Description>
    <CreatedDate>21/02/2018</CreatedDate>
    <ClosedDate>22/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24733</IssueID>
    <Title>Xml Documentation on Methods shows difference in SyntaxTree structure with VS2017 IDE code analysis in background Vs explicitly triggered msbuild</Title>
    <Description>**Version Used**: 
Roslyn v2.6.0
VS2017 15.5.6

**Steps to Reproduce**:

1. I have an analyzer for reading the XML Documentation and analyzing it. We have this analyzer added as an analyzer reference to a project where we have methods documented with XML Documentation.
E.g.

    ```csharp
        /// &lt;summary&gt;
        /// API:Yes
        /// &lt;/summary&gt;
        public void Method()
        {
        }
    ```

2. I use below code snippet to read XML Documentation.

```csharp
var leadingTrivia = methodDeclarationSyntaxNode.GetLeadingTrivia();
var singleLineDocumentation = leadingTrivia.FirstOrDefault(trivia =&gt; trivia.Kind() == SyntaxKind.SingleLineDocumentationCommentTrivia);
```

3.  This works fine when we do code analysis from VS2017 IDE which is triggered in the background.
The leading trivia list retrieved from the method declaration syntax shows 3 trivias.
![xmldocumentationleadingtrivialistworkingcase](https://user-images.githubusercontent.com/17777813/36025675-df4efca6-0db9-11e8-93c3-c167ca5809a0.PNG)

Analyzer identifies this as proper XML documentation as it uses SingleLineDocumentationCommentTrivia for identifying XML Documentation.

4. When we are building the solution using msbuild (VS2017 IDE Rebuild All) there is no SingleLineDocumentationTrivia, all are SingleLineCommentTrivia.
![xmldocumentationleadingtrivialistnotworkingcase](https://user-images.githubusercontent.com/17777813/36025761-385b0628-0dba-11e8-939e-2985579de8ab.PNG)

**Expected Behavior**: 
Both VS2017 IDE Code analysis and msbuild compilation which triggers Roslyn analyzers should give same SyntaxTree structure for LeadingTrivia.

Actually, we should get SingleLineDocumentationTrivia as we have XML documentation, not just a comment node.

**Actual Behavior**:
VS2017 IDE Shows proper SingleLineDocumentationTrivia when we have a proper XML documentation. But msbuild triggered analyzer instance shows different syntax tree where only SingleLineCommentTrivia observed.

Please let me know your comment on this difference in behavior which is affecting one of our XML Documentation related analyzer.

Thanks
Basanth</Description>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24698</IssueID>
    <Title>"Fix all in document" doesn't work for "Use expression bodies" refactoring</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/35946578-3108a9fe-0c19-11e8-9a87-b8bafc52f96d.png)

**Steps to Reproduce**:

1. Open TestMessageProvider.cs in Roslyn.sln (commit 000735ee9c887c644e02c7b8bfb5ae44b06b4621)
2. Invoke "Use expression bodies" on one of the methods or properties
3. Select Fix all in document.

**Expected Behavior**:

Refactoring applied to all methods/properties in the document.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/41759/35946647-7885b79a-0c19-11e8-96a1-fadee37716ce.png)
</Description>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>17/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24563</IssueID>
    <Title>IntelliSense: suggest direct enum members where can be inferred</Title>
    <Description>```cs
enum E { A, B, C }
```
Autocomplete should suggest `E.A`, `E.B`, ... in the following cases
```cs
E e = $$ 

if (e == $$

switch (e) {
  case $$
````
etc.</Description>
    <CreatedDate>31/01/2018</CreatedDate>
    <ClosedDate>31/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24425</IssueID>
    <Title>Make enumeration MetadataImportOptions public and the corresponding property settable within CSharpCompilationOptions</Title>
    <Description>people often need ability to investigate non-public members of types from 3rd party library. Currently `INamedTypeSymbol.GetMembers()` methods returns public and protected methods but no internals. Making MetadataImportOptions settable within the Compilation Options will allow the developers to investigate the non-public members (so that Roslyn capabilities will be more in tune with System.Reflection).
I branched this issue off https://github.com/dotnet/roslyn/issues/24412</Description>
    <CreatedDate>24/01/2018</CreatedDate>
    <ClosedDate>24/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24381</IssueID>
    <Title>Quick Action: Convert for to foreach and vice versa</Title>
    <Description>just like resharper, allow converting for to foreach and vice versa. me not a genius. me realize index is needed where I wrote `foreach`, me realize index is no more needed where I wrote `for`. thanks.:)</Description>
    <CreatedDate>22/01/2018</CreatedDate>
    <ClosedDate>23/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24375</IssueID>
    <Title>C# intellisense incorrectly highlights nameof keyword with a red squiggly inside of an interpolated string</Title>
    <Description>The C# editor intellisense is highlighting the nameof keyword inside of an interpolated string with a red squiggly even though the project builds just fine. Two examples of strings that fail are:

A screenshot of the problem has been attached, here is the code from the offending function:

```csharp
bool EmitValueAssignmentForObject(Type objType, ObjectValue value, Dictionary&lt;Type, LocalBuilder&gt; localVars, Action&lt;ILGenerator&gt; pushObjDelegate, out Action&lt;ILGenerator&gt; generateObjValuesDelegate)
{
    if(!objType.IsClass || objType.IsArray)
    {
        throw new ArgumentException("Invalid object type: " + objType.FullName);
    }

    if((value.Properties == null || value.Properties.Length == 0)
        &amp;&amp; (value.ChildProperties == null || value.ChildProperties.Length == 0))
    {
        generateObjValuesDelegate = null;
        return false;
    }

    if(!_gtypes.TryGetValue(value.Type, out GTypeEntry typeEntry) || !(typeEntry is GTypeEntryComplex complexTypeEntry))
    {
        generateObjValuesDelegate = null;

        System.Diagnostics.Debug.WriteLine($"[{nameof(GTypeAssemblyBuilder)}] Failed to create default values for an object because its type ({value.Type}) could not be located.");

        return false;
    }

    generateObjValuesDelegate = (ilGen) =&gt;
    {
        if(value.Properties != null &amp;&amp; value.Properties.Length &gt; 0)
        {
            foreach(var prop in value.Properties)
            {
                if(prop.Value != null &amp;&amp; prop.Value.Item != null)
                {
                    if(complexTypeEntry.Fields.TryGetValue(FieldNameFromProperty(prop.Name), out FieldBuilder fieldBldr))
                    {
                        if(EmitStoreValueInField(complexTypeEntry.PendingType.FullName, fieldBldr, prop.Value, localVars, pushObjDelegate, out Action&lt;ILGenerator&gt; storeFieldDelegate))
                        {
                            storeFieldDelegate(ilGen);
                        }
                        else
                        {
                            System.Diagnostics.Debug.WriteLine($"[{nameof(GTypeAssemblyBuilder)}] Failed to create default value for property {prop.Name} in type {complexTypeEntry.PendingType.FullName} because its value type ({fieldBldr.FieldType.FullName}) was not compatible with default value type ({prop.Value.ItemElementName}).");
                        }
                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine($"[{nameof(GTypeAssemblyBuilder)}] Failed to create default value for property {prop.Name} in type {complexTypeEntry.PendingType.FullName} because its field could not be located.");
                    }
                }
            }
        }

        if(value.ChildProperties != null &amp;&amp; value.ChildProperties.Length &gt; 0)
        {
#warning TODO: Add support for child properties
        }
    };

    return true;
}
```

![image](https://user-images.githubusercontent.com/1408396/35234690-9b7f76fa-ff67-11e7-84c5-7dd11a962766.png)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/181935/c-intellisense-incorrectly-highlights-nameof-keywo.html
VSTS ticketId: 551470_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/01/2018</CreatedDate>
    <ClosedDate>22/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24315</IssueID>
    <Title>VB Wrong IDE0037 (Member name can be simplified) when member have same name of some variable</Title>
    <Description>**Version Used**:  15.5.4

**Steps to Reproduce**:
1. In any VB project, consider the following code:
```vb
Class Customer
    Public Property Age As Integer
End Class

Sub Main()
    Dim Age = 21
    Dim c = New Customer With {.Age = Age}
End Sub
```

**Expected Behavior**:
Don't suggest IDE0037 fix for the `.Age = Age` object initialization.

**Actual Behavior**:
Suggesting IDE0037 fix for the `.Age = Age` object initialization (grayed out) and if you apply the fix the code became invalid and don't compile.

It's important to mention that this behavior only appears if the initialization member have the same name of some other member (local, parameter, instance, shared, etc.)

**Note**: This problem doesn't manifest in C# code.</Description>
    <CreatedDate>18/01/2018</CreatedDate>
    <ClosedDate>30/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24307</IssueID>
    <Title>"use var instead of explicit type" shouldn't be proposed for out parameters for overloaded functions</Title>
    <Description>**Version Used**: 
15.5.4

**Steps to Reproduce**:

```cs 
    public class Test
    {
        public void TestIt()
        {
            // here
            Method(out int value1);
        }

        public void Method(out int value)
        {
            value = default;
        }

        public void Method(out string value)
        {
            value = default;
        }
    }
```

**Expected Behavior**:
no fix proposed

**Actual Behavior**:
```cs
    public class Test
    {
        public void TestIt()
        {
            // CS0121 The call is ambiguous between the following methods or properties: 'Test.Method(out int)' and 'Test.Method(out string)'
            Method(out var value1);
        }

        public void Method(out int value)
        {
            value = default;
        }

        public void Method(out string value)
        {
            value = default;
        }
    }
```</Description>
    <CreatedDate>18/01/2018</CreatedDate>
    <ClosedDate>18/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24285</IssueID>
    <Title>Invalid "Collection initialization could be simplified" fix for collections with explicit ICollection.Add implementation</Title>
    <Description>**Version Used**: 15.5.3, 15.5.4

**Steps to Reproduce**:
```cs
    public class Test
    {
        public ICollection&lt;Test&gt; Collection;

        public void TestIt()
        {
            // fix proposed here
            Collection = new LinkedList&lt;Test&gt;();
            Collection.Add(this);
        }
    }
```

**Expected Behavior**:
no fix proposed

**Actual Behavior**:
incorrect code generated
```cs
public class Test
    {
        public ICollection&lt;Test&gt; Collection;

        public void TestIt()
        {
               // Error CS1061 'LinkedList&lt;Test&gt;' does not contain a definition for 'Add' and no extension method 'Add' accepting a first argument of type 'LinkedList&lt;Test&gt;' could be found (are you missing a using directive or an assembly reference?)
            Collection = new LinkedList&lt;Test&gt;
            {
                this
            };
        }
    }
```</Description>
    <CreatedDate>17/01/2018</CreatedDate>
    <ClosedDate>17/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24179</IssueID>
    <Title>Navigate to decompiled sources: silently fails to navigate</Title>
    <Description>**Version Used**: 15.6 Preview 2

**Steps to Reproduce**:

1. Add a package reference to **ICSharpCode.Decompiler** version 3.0.0.3447.
2. Declare a local variable with type `ICSharpCode.Decompiler.DecompilerSettings`
3. Navigate to `DecompilerSettings`

**Expected Behavior**:

The disassembled source is shown.

**Actual Behavior**:

The metadata as source view is shown.</Description>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>11/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24151</IssueID>
    <Title>Format Code doesn't work for objects inside a list initialization</Title>
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 Int Preview
Version 15.6.0 Preview 1.0
.NET Framework Version 4.7.02556

**Steps to Reproduce**:
Create following code in a function:

```
            List&lt;Document&gt; documents = new List&lt;Document&gt;()
            {
                new Document { Id="Id1", FileName="Document1"},
                    new Document { Id = "Id2", FileName = "Document2" },
                new Document { Id = "Id3", FileName = "Document3" },
                new Document { Id = "Id4", FileName = "Document4" },
            };
```

Press "Format Document" shortcut - on windows is Ctrl +K ,Ctrl +D

**Expected Behavior**:
All `new Document (...)` objects should have the same alignment and spaces should be fixed.

The code should looks as follow:

```
            List&lt;Document&gt; documents = new List&lt;Document&gt;
            {
                new Document { Id = "Id1", FileName = "Document1" },
                new Document { Id = "Id2", FileName = "Document2" },
                new Document { Id = "Id3", FileName = "Document3" },
                new Document { Id = "Id4", FileName = "Document4" },
            };
```

**Actual Behavior**:
No action. Objects initialized inside documents list stay in the same position.
Also spaces in first abject `new Document { Id="Id1", FileName="Document1"},` does not change.

Alignment works for the top level of object initialization. When I move `List&lt;Document&gt; documents = new List&lt;Document&gt;` by one tabulator in the example above, code formatting works properly.
</Description>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24133</IssueID>
    <Title>Expose ITypeSymbol.IsSerializable as a public API</Title>
    <Description>**Version Used**: 2.6.0

**Steps to Reproduce**:

Implementation of FxCop rule [CA2235](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2235-mark-all-non-serializable-fields): "Mark all non-serializable fields" requires us to detect if a type is serializable or not. Due to the fact that there are large number of types in metadata (primitive types, DateTime, nullable types, etc.) that are **TypeAttributes.Serializable** (see http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Symbols/Metadata/PE/PENamedTypeSymbol.cs,2045) but do not have a `SerializableAttribute`, we cannot detect all such serializable types from metadata. See https://github.com/dotnet/roslyn-analyzers/issues/1510. It would be helpful to expose this property on `ITypeSymbol`.
</Description>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24122</IssueID>
    <Title>.NET Compiler Platform SDK DISABLED. 2.0.0.6140902 is not compatible with VS 2017 15.5.2</Title>
    <Description>Downloaded Roslyn.SDK from Marketplace is disabled in Visual Studio 2017 15.5.2

**Steps to Reproduce**:

1. Uninstall Roslyn.SDK
2. Download Roslyn.SDK from Marketplace (Version 2.0.0.6140902)
3. Start Visual Studio (Version 2017 15.5.2)

**Expected Behavior**:
.NET Compiler Platform enables and Roslyn Visualized Window enabled.

**Actual Behavior**:

Yellow icon:  This extension is disabled. Incompatible with Visual Studio.
![2018-01-09 12_40_06-extensiones y actualizaciones](https://user-images.githubusercontent.com/891592/34719244-4bf967b2-f53a-11e7-9707-05e64657d610.png)
</Description>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24093</IssueID>
    <Title>GetHashCode generator doesn't take into account checked environment</Title>
    <Description>If the compiler needs to &amp;quot;check for arithmetic overflow/underflow&amp;quot;, the GetHashCode code generator should generate code within an &amp;quot;unchecked&amp;quot; scope.

It could even do this independently on the compiler setting, such that the code just keeps working when changing the compiler setting later.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/176727/gethashcode-generator-doesnt-take-into-account-che.html
VSTS ticketId: 546722_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24088</IssueID>
    <Title>unknown hard error visual studio</Title>
    <Description>when I have been editing my code , sometimes I have got this message &amp;quot;unknown hard error&amp;quot;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/173286/unknown-hard-error-visual-studio.html
VSTS ticketId: 544141_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>07/01/2018</CreatedDate>
    <ClosedDate>07/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24017</IssueID>
    <Title>incorrect fix for IDE0007 when calling method with implicit generic parameters</Title>
    <Description>**Version Used**:  15.5.2

**Steps to Reproduce**:

1. Run quick fix for "use 'var' instead of explicit type" on `out DateTimeKind` this code:

```csharp
void Test()
{
    Assert.IsTrue(Enum.TryParse("Local", out DateTimeKind result) &amp;&amp; result == DateTimeKind.Local);
}
```

**Expected Behavior**:

either suggestion does not apply in this case or:

```csharp
void Test()
{
    Assert.IsTrue(Enum.TryParse&lt;DateTimeKind&gt;("Local", out var result) &amp;&amp; result == DateTimeKind.Local);
}
```

**Actual Behavior**:

```csharp
void Test()
{
    Assert.IsTrue(Enum.TryParse("Local", out var result) &amp;&amp; result == DateTimeKind.Local);
}
```

Error: CS0411</Description>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>04/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>24003</IssueID>
    <Title>IntroduceVariableCodeRefactoringProvider error</Title>
    <Description>```
System.AggregateException : One or more errors occurred. ---&gt; Unexpected Null
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass18_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.InvalidOperationException : Unexpected Null
   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value,String message)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InitializeOpenBuffers(SnapshotSpan triggerSpan)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession..ctor(InlineRenameService renameService,Workspace workspace,SnapshotSpan triggerSpan,IInlineRenameInfo renameInfo,IWaitIndicator waitIndicator,ITextBufferAssociatedViewService textBufferAssociatedViewService,ITextBufferFactoryService textBufferFactoryService,IEnumerable`1 refactorNotifyServices,IAsynchronousOperationListener asyncListener)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService.StartInlineSession(Document document,TextSpan textSpan,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.TryNavigateToLocationOrStartRenameSession(Workspace workspace,Solution oldSolution,Solution newSolution,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)&lt;---
```

**Version Used**: Visual Studio 15.5.2

**Steps to Reproduce**:

1. In this piece of code
``` C#
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "8"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "useAggregate"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "aggregationLevel"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1809:Avoid Excessive Locals")]
        [System.Web.Mvc.HttpPost]
        public virtual async Task&lt;JsonResult&gt; GetPerimetersList([FromUri]AggregationLevel aggregationLevel, [FromUri]int? universeId, [FromUri]string fromPage, [FromUri]int? status, [FromUri]bool? useAggregate, [FromBody]string textFilter, [FromUri]IList&lt;int&gt; scopeId, [FromUri]bool? autoLoaded, [FromUri]ThirdPartyDataModel thirdPartyDataModel, [FromBody]FilterForAxis filterForAxis, [FromUri] int? refresh, [FromUri] int? timeLevel, [FromUri] bool? stacked, [FromUri] bool? navigation)
        {
            string message = null;
            string messagethir = null;
            string email = User.Identity.Name;
            User user = await UserService.FindUserByEmailAsync(email);
            var universe = new Universe();

            switch (fromPage)
            {
                case "Reliability":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeReliability, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "History":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeHistory, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "Enrichments":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeEnrichments, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "Consensus":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeConsensus, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "Stability":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeStability, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                default:
                    break;
            }

            // TODO: Use StringBuilder
            if (status == null)
            {
                message += $"{fromPage}/All";
                messagethir += $"{fromPage}/All";
            }
            if (status == 2)
            {
                message += $"{fromPage}/ToValidate";
                messagethir += $"{fromPage}/ToValidate";
            }
            if (status == 3)
            {
                message += $"{fromPage}/NotTreated";
                messagethir += $"{fromPage}/NotTreated";
            }
            if (status == 4)
            {
                message += $"{fromPage}/Validated";
                messagethir += $"{fromPage}/Validated";
            }
            //For Simulation
            if (status == 1)
            {
                message += $"{fromPage}/All";
                messagethir += $"{fromPage}/All";
            }
            if (status == 5)
            {
                message += $"{fromPage}/Configured";
                messagethir += $"{fromPage}/Configured";
            }
            if (status == 6)
            {
                message += $"{fromPage}/ToConfigure";
                messagethir += $"{fromPage}/ToConfigure";
            }
            //For Universe
            if (useAggregate == true)
            {
                message += " NoUniverse"; //you have to add the new Perimeter
                messagethir += " NoUniverse";
            }
            if (universeId != null)
            {
                message += " UniverseId:" + universeId;
                messagethir += " WithUniverse";
            }
            if (!string.IsNullOrEmpty(textFilter))
            {
                message += " Filter:" + textFilter;
            }

            //refresh universeScope
            if (universeId &gt; 0)
            {
                universe = await UserService.GetUniverseAsync((int)universeId);
                if (refresh &gt; 0)
                {
                    await UserService.RefreshUniverseAsync(universe);
                }
                //refresh current unit &amp;&amp; currency
                user.CurrentUnit = universe.DefaultUnit;
                user.CurrentCurrency = universe.Currency;
                await UserService.EditUserAsync(user);
            }

            ColibriPage page = GetCurrentColibriPage(fromPage);
            IList&lt;AsideMenuPerimeter&gt; asideMenuPerimeter = new List&lt;AsideMenuPerimeter&gt;();
            //IDictionary&lt;PerimeterFilter, int&gt; counted = new Dictionary&lt;PerimeterFilter, int&gt;();
            IList&lt;ColibriScope&gt; scopes = new List&lt;ColibriScope&gt;();
            //IList&lt;object&gt; perimetersCounted = new List&lt;object&gt;();
            string description = string.Empty;
            var userUniverses = await UserService.GetAvailableUniversesAsync(user, page, false); // UserService.GetUniverses(user);
            var isOwner = false;
            var selectedUniverse = 0;
            bool isSku = false;
            bool isThirdPartyData = false;
            string format = "MMM yy";
            int dateLevel = (timeLevel == null) ? 3 : (int)timeLevel; // Default value is 3 (for Month)
            double? highChartTicks = null; // Default value is 3 (for Month)
            bool fromNavigation = navigation ?? false;
            if ((userUniverses.Any()
             &amp;&amp; ((universeId != null &amp;&amp; !(useAggregate ?? false))
             || (!(useAggregate ?? false) &amp;&amp; scopeId == null)))
             || (fromNavigation &amp;&amp; !(useAggregate ?? false)))
            {
                selectedUniverse = universeId ?? userUniverses.First().UniverseId;

                isOwner = userUniverses.Any(u =&gt; u.UniverseId == selectedUniverse);

                universe = await UserService.GetUniverseAsync(selectedUniverse);
                //refresh current unit &amp;&amp; currency
                if (selectedUniverse != universeId)
                {
                    user.CurrentUnit = universe.DefaultUnit;
                    user.CurrentCurrency = universe.Currency;
                    await UserService.EditUserAsync(user);
                }

                if ((universe.Axis1Level &lt;= 1 || universe.Axis1Level == null) &amp;&amp;
                    (universe.Axis2Level &lt;= 1 || universe.Axis2Level == null) &amp;&amp;
                    (universe.Axis3Level == 1 || universe.Axis3Level == null) &amp;&amp;
                    (universe.Axis4Level == 1 || universe.Axis4Level == null))
                {
                    isSku = true;
                }
                if (universe.Axis1Level != null)
                {
                    message += " AxisLevels:" + universe.Axis1Level;
                }
                if (universe.Axis2Level != null)
                {
                    message += "/" + universe.Axis2Level;
                }
                if (universe.Axis3Level != null)
                {
                    message += "/" + universe.Axis3Level;
                }
                if (universe.Axis4Level != null)
                {
                    message += "/" + universe.Axis4Level;
                }

                isThirdPartyData = universe.ThirdPartyDataDescription.Any();

                if (universe.TimeLevel != null)
                {
                    if (timeLevel == null)
                    {
                        dateLevel = universe.TimeLevel.Value;
                    }
                    format = await TimeLevelService.GetTimeFormatByLevelAsync(dateLevel);
                    highChartTicks = await TimeLevelService.GetHighChartsTicksByLevelAsync(dateLevel);
                }
                description = universe.Description ?? string.Empty;
                description = description.Replace("\n", "&lt;br/&gt;");
                if (isOwner || scopeId != null)
                {
                    int firstScope = 0;
                    if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
                    {
                        firstScope = scopeId[0];
                    }
                    if (isOwner)
                    {
                        var scopeOfUniverse = await PerimeterService.GetScopeOfUniverseAsync(user,
                            selectedUniverse, textFilter, status ?? 1, fromPage,
                            TenancyMapping.ConnectionString);
                        if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
                        {
                            scopes = scopeOfUniverse.Where(s =&gt; !scopeId.Contains(s.ScopeId))
                                                    .ToList();
                        }
                        else
                        {
                            scopes = scopeOfUniverse.ToList();
                        }
                    }

                    if (await UserService.CheckAuthorizationAsync(user, firstScope, fromPage != "Enrichments"))
                    {
                        if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
                        {
                            for (int i = 0; i &lt; scopeId.Count(); i++)
                            {
                                var scope = scopeId[i];
                                ColibriScope oneScope = await PerimeterService.GetOneScopeAsync(scope, TenancyMapping.ConnectionString);
                                if (oneScope != null)
                                {
                                    scopes.Insert(0, oneScope);
                                    //scopes.Add(oneScope);

                                }
                            }
                            //scopes = scopes.Reverse().ToList();
                        }
                    }
                }
            }
            else if (scopeId != null)
            // &amp;&amp; !fromNavigation)
            {
                description = "Notification view";
                foreach (int scId in scopeId)
                {
                    if (await UserService.CheckAuthorizationAsync(user, scId, fromPage != "Enrichments"))
                    {
                        ColibriScope oneScope = await PerimeterService.GetOneScopeAsync(scId, TenancyMapping.ConnectionString);
                        if (oneScope != null)
                        {
                            scopes.Add(oneScope);
                        }
                    }
                }
            }
            else if ((useAggregate ?? false) &amp;&amp; aggregationLevel != null)
            {
                description = "Aggregation view";
                /*if (!UserService.IsUserInProfile(user.Email, ColibriProfile.SenorForecaster))
                {
                    IList&lt;int&gt; minLevels = UserService.GetAccreditationsMinLevels(user, fromPage);
                    if (aggregationLevel.Axis1Level != 0) { aggregationLevel.Axis1Level += minLevels[0] - 1; }
                    if (aggregationLevel.Axis2Level != 0) { aggregationLevel.Axis2Level += minLevels[1] - 1; }
                    if (aggregationLevel.Axis3Level != 0) { aggregationLevel.Axis3Level += minLevels[2] - 1; }
                    if (aggregationLevel.Axis4Level != 0) { aggregationLevel.Axis4Level += minLevels[3] - 1; }
                }*/
                if (aggregationLevel.Axis1Level &lt;= 1 &amp;&amp; aggregationLevel.Axis2Level &lt;= 1 &amp;&amp;
                    aggregationLevel.Axis3Level &lt;= 1 &amp;&amp; aggregationLevel.Axis1Level &lt;= 1)
                {
                    isSku = true;
                }

                // TODO: Use StringBuilder
                if (aggregationLevel.Axis1Level != 0)
                {
                    message += " AggregationLevels:" + aggregationLevel.Axis1Level;
                }
                if (aggregationLevel.Axis2Level != 0)
                {
                    message += "/" + aggregationLevel.Axis2Level;
                }
                if (aggregationLevel.Axis3Level != 0)
                {
                    message += "/" + aggregationLevel.Axis3Level;
                }
                if (aggregationLevel.Axis4Level != 0)
                {
                    message += "/" + aggregationLevel.Axis4Level;
                }

                //counted = PerimeterService.CountAggregatePerimetersForEachStatus(user, aggregationLevel, string.Empty, (PerimeterFilter)(status ?? 1), fromPage, TenancyMapping.ConnectionString);
                scopes = await PerimeterService.GetAggregateScopeOfUniverseAsync(user, aggregationLevel, textFilter, (PerimeterFilter)(status ?? 1), fromPage, TenancyMapping.ConnectionString, filterForAxis);
            }
            string messagesec = null;
            messagesec += fromPage;

            if (autoLoaded == null || autoLoaded == false)
            {
                LoggerHelper.AddLogNoAggregation(TenancyMapping.CustomerName, messagethir, HttpContext.User.Identity.Name);
            }
            LoggerHelper.BusinessLogger.Info($"[{TenancyMapping.CustomerName}]: {User.Identity.Name}, {DateTime.Now}, Context: {message}");
            //foreach (var count in counted)
            //{
            //    perimetersCounted.Add(new
            //    {
            //        key = count.Key.ToString(),
            //        value = count.Value
            //    });
            //}

            var targetHash = string.Empty;
            var itemId = 0;

            foreach (var scope in scopes)
            {
                var codes = ScopeHelper.GetAxisCodes(scope);
                var url = string.Empty;
                for (int i = 0; i &lt; codes.Count - 1; i++)
                {
                    url += codes[i] + "_";
                }
                url += codes[codes.Count - 1];

                asideMenuPerimeter.Add(new AsideMenuPerimeter
                {
                    Disabled = false,
                    UniverseId = selectedUniverse,
                    ScopeId = scope.ScopeId,
                    HasConfiguration = fromPage == "Simulation" &amp;&amp; await ForecastService.FindForecastConfigurationAsync(scope.ScopeId, universeId ?? 0, false) != null,
                    Label = ScopeHelper.GetScopeRepresentation(scope, ", "),
                    SeparetedLabels = ScopeHelper.GetScopeRepresentation(scope, "&lt;%&gt; "),
                    PerimeterIds = ScopeHelper.GetAxisIds(scope),
                    PerimeterCodes = codes,
                    UrlEncode = HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture),
                    Status = scope.Status,
                    ItemId = itemId,
                });
                itemId++;

                /*if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0 &amp;&amp; scope.ScopeId == scopeId[0])
                {
                    targetHash = HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture);

                }*/
                if (fromNavigation &amp;&amp; (scopeId != null &amp;&amp; scopeId.Count() &gt; 0 &amp;&amp; scopeId.Contains(scope.ScopeId)))
                {
                    targetHash += HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture);
                    targetHash += '&amp;';
                }
                else if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0 &amp;&amp; scope.ScopeId == scopeId[scopeId.Count() - 1])
                {
                    targetHash = HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture);
                }

            }
            ScopeIdList scopeList = new ScopeIdList();
            if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
            {
                var selectedScopesName = asideMenuPerimeter.Where(amp =&gt; scopeId.Contains(amp.ScopeId)).Select(amp =&gt; amp.Label).ToList();
                var selectedScopesCode = asideMenuPerimeter.Where(amp =&gt; scopeId.Contains(amp.ScopeId)).Select(amp =&gt; '#' + amp.UrlEncode).ToList();
                scopeList.ScopeIds = scopeId;
                scopeList.ScopeNames = selectedScopesName;
                scopeList.ScopeCodes = selectedScopesCode;

            }
            for (int i = 0; i &lt; asideMenuPerimeter.Count; i++)
            {
                for (int j = 0; j &lt; asideMenuPerimeter[i].PerimeterCodes.Count; j++)
                {
                    asideMenuPerimeter[i].PerimeterCodes[j] = asideMenuPerimeter[i].PerimeterCodes[j].Replace("\"", "'");
                }
            }

            ViewBag.FromPage = fromPage;
            List&lt;double&gt; timeIds = new List&lt;double&gt;();
            if (fromPage == "ThirdPartyData")
            {
                var startDate = new DateTime(thirdPartyDataModel.StartTime.Ticks);
                if (startDate == new DateTime(1, 1, 1))
                {
                    startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                }
                for (var i = 0; i &lt; thirdPartyDataModel.ThirdPartyDataDuration; i++)
                {
                    timeIds.Add(DateHelper.CreateTimestamp(startDate.AddMonths(i)));
                }
            }

            //var axisInformation = PerimeterService.GetAxisHierarchy(user, TenancyMapping.ConnectionString, aggregationLevel, PerimeterCacheService.FindPerimeters(TenancyMapping.CustomerName));
            // TODO: Fix when default unit is null
            UnitConfiguration unitConfiguration = (await SettingsService.GetUnitByIdAsync((int)universe.DefaultUnit));
            // TODO: Fix when currency is null
            ExchangeRate exchangeRate = (await SettingsService.GetExchangeRateByIdAsync((int)universe.Currency));
            return new JsonResult()
            {
                Data = new AsideMenuPerimeterModel
                {
                    Perimeters = asideMenuPerimeter,
                    SelectedUniverse = selectedUniverse,
                    UniverseOwner = isOwner,
                    IsSku = isSku,
                    //AxisInformation = axisInformation,
                    IsThirdPartyData = isThirdPartyData,
                    DateFormat = format,
                    DateLevel = dateLevel,
                    HighChartTicks = highChartTicks,
                    Description = "&lt;strong&gt;Description : &lt;/strong&gt;&lt;br/&gt;" + description,
                    TargetHash = targetHash,
                    TimeIds = timeIds,
                    SelectedScope = scopeList,
                    Stacked = stacked,
                    // SelectedScopeIds = scopeId,
                    //Scopes = scopes,
                    DefaultUnit = selectedUniverse == 0 ? 0 : (await UserService.GetUniverseAsync(selectedUniverse)).DefaultUnit ?? 0,
                    DefaultUnitCurrencyUniverse = universe.DefaultUnit != null
                        ? unitConfiguration.Name
                        : universe.Currency != null
                            ? exchangeRate.Label
                            : universe.UniverseId == 0
                                ? UnitHelper.GetDefaultUnitName(user,
                                    await SettingsService.GetAllUnitsConfigurationAsync(),
                                    await SettingsService.GetAllExchangeRateAsync())
                                : Resources.Resource.Quantity,
                    UnitCurrencyUniverseId = universe.DefaultUnit != null
                        ? "Unit-" + unitConfiguration.UnitRow.ToString(CultureInfo.CurrentCulture)
                        : universe.Currency != null
                            ? "Currency-" + exchangeRate.CurrencyId
                            : universe.UniverseId == 0
                                ? UnitHelper.GetDefaultUnitValue(user)
                                : "Unit-0",

                },
                MaxJsonLength = int.MaxValue,
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
            };
        }
```

2. When I select `(useAggregate ?? false)` and try to introduce local for all occurrences
3. It fails and disables this refactoring

**Expected Behavior**:
Local variable introduced successfully

**Actual Behavior**:
Local variable is created but I cannot rename it
</Description>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23982</IssueID>
    <Title>Refactoring VB Member Name can be simplified (IDE0037) refactoring causes error BC30985</Title>
    <Description>**Version Used**: 
VS 2017 15.5.2
**Steps to Reproduce**:
With the code below the IDE shows an information message and offers a refactoring (Use Inferred Member Name)
```
Dim body As BlockSyntax = SyntaxFactory.Block(node.Statements.SelectMany(Function(s As VBSyntax.StatementSyntax) s.Accept(New MethodBodyVisitor(mSemanticModel, Me, withBlockTempVariableNames) With {.isIterator = isIterator})))
```
2. Accept the refactoring, new code below gets error BC30985	Name of field or property being initialized in an object initializer must start with '.'.
```
 Dim body As BlockSyntax = SyntaxFactory.Block(node.Statements.SelectMany(Function(s As VBSyntax.StatementSyntax) s.Accept(New MethodBodyVisitor(mSemanticModel, Me, withBlockTempVariableNames) With {isIterator})))

```

**Expected Behavior**:
Don't offer refactoring or don't give the error after accepting it
**Actual Behavior**:
Refactoring offered and when accepted you get an error.</Description>
    <CreatedDate>31/12/2017</CreatedDate>
    <ClosedDate>31/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23915</IssueID>
    <Title>Document tag &lt;param name=&gt; fails for named tuples</Title>
    <Description>In the snippet below, param name give &amp;quot;Cannot resolve symbol&amp;quot; for the named tuples names (current and previous).

```csharp
/// &lt;summary&gt;
/// &lt;/summary&gt;
/// &lt;param name="dataPoints"&gt;&lt;/param&gt;
/// &lt;param name="current"&gt;&lt;/param&gt;
/// &lt;param name="previous"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public (List&lt;float&gt; current, List&lt;float&gt; previous) DivideByPhaseAsync(List&lt;float&gt; dataPoints)
{
	var current = new List&lt;float&gt;();
	var previous = new List&lt;float&gt;();
	return (current, previous);
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/171531/document-tag-fails-for-named-tuples.html
VSTS ticketId: 542449_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/12/2017</CreatedDate>
    <ClosedDate>23/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23895</IssueID>
    <Title>Wrong order of 'in' and 'this' in extension method tooltip</Title>
    <Description>Version: VS2017 15.5.2

Hover over `M`, the tooltip shows `M(this in int a)` which is invalid C# (`error CS8339: The parameter modifier 'in' cannot be used after the modifier 'this'`)

```C#
	static class Extensions {
		public static int M(in this int a) =&gt; a;
	}
```
</Description>
    <CreatedDate>21/12/2017</CreatedDate>
    <ClosedDate>22/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23864</IssueID>
    <Title>Erroneous 'Using directive is unnecessary' when XML comment requires it</Title>
    <Description>VS 15.5.2

**Steps to Reproduce**:

```cs
using System;

/// &lt;summary&gt;
/// &lt;see cref="InvalidOperationException"/&gt;
/// &lt;/summary&gt;
class Foo
{
}
```

**Expected Behavior**:

The using directive should appear in use and removal should not be offered.

**Actual Behavior**:

The using directive appears dim with a diagnostic saying it is unused and a code fix to remove it.
</Description>
    <CreatedDate>19/12/2017</CreatedDate>
    <ClosedDate>30/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23822</IssueID>
    <Title>Refactoring suggestion: replace if-else with ternary operator</Title>
    <Description>like resharper, it would be nice to have suggestion to replace simple if-else assignments with ternary operators. 

    if(cond) x = i;
    else x = j;

would be replaced by 

    x = cond ? i : j;

its a cheap improvement for cheap but quite nice income.</Description>
    <CreatedDate>16/12/2017</CreatedDate>
    <ClosedDate>20/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23798</IssueID>
    <Title>Get no completion for property members if they appear before an await statement</Title>
    <Description>``` C#
using System;
using System.IO;
using System.Threading.Tasks;

class Program
{
    private Stream _stream;

    private async Task Method()
    {
        _stream.CanTimeout.$

        await _stream.WriteAsync(null, 10, 10);

    }
}

```

1. CTRL+Space at $

Expected: Completion window
Actual: Nothing
</Description>
    <CreatedDate>15/12/2017</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23791</IssueID>
    <Title>[Proposal] Tuple pattern matching</Title>
    <Description>I'd like to request a language feature to be able to do pattern matching on tuples.

Example:
```c#
void MyFunction(object t)
{
  switch (t)
  {
    case (string a, _) t when t.a != null:
      HandleStr(t.a);
      break;
    case (int type, _) t when t.type == 10:
      HandleTup(t);
      break;
  }
}
```
</Description>
    <CreatedDate>14/12/2017</CreatedDate>
    <ClosedDate>14/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23790</IssueID>
    <Title>[Proposal] try/catch expressions</Title>
    <Description>I have a feature request to convert try/catch statements to expressions similarly how it's done in C# 7.x.  Additionally, when used with code blocks, the last value is returned as the result of the expression:

Example:

- Current:
```c#
string a;
try
{
  a = SomeFunctionThatMightThrow();
}
catch (Exception a)
{
  Print(e);
  a = DefValue;
}
```

- Proposed:
```c#
var a = try { SomeFunctionThatMightThrow(); } catch (Exception e) { Print(e); DefValue; };
var b = try { SomeFunctionThatMightThrow(); } catch { DefValue };
var c = try   SomeFunctionThatMightThrow()   catch DefValue;
```

</Description>
    <CreatedDate>14/12/2017</CreatedDate>
    <ClosedDate>14/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23763</IssueID>
    <Title>VB: Disable suggestion to simplify field names in object initializer expressions.</Title>
    <Description>**Version Used**: 

Visual Studio Community 2017 v15.5.1

**Steps to Reproduce**:

Type in the following code in Windows console project:

```vb
Public Module MainModule
  Public Class C1
    Public Text As String
    Public Number As Integer
  End Class

  Public Sub Main()
    Dim cc1 = New C1() With {.Text = "test", .Number = 12}
    Dim cc2 = New C1() With {.Text = cc1.Text, .Number = cc1.Number}
  End Sub
End Module
```

The editor seems to think that the dotted field names in the `Dim cc2...` line can be simplified. It colours them gray and when you hover over them it shows a tooltip saying so:

![vs_incorrent_can_simplify_name1](https://user-images.githubusercontent.com/20465797/33956787-b9279e52-e050-11e7-9e43-a5dc846ac06d.png)

...and:

![vs_incorrent_can_simplify_name2](https://user-images.githubusercontent.com/20465797/33956856-e4726eb6-e050-11e7-85c2-6496752832c2.png)

**Expected Behavior**:

This suggestion should not be made for VB object initialisers since they do not support inferred field names. If you actually go ahead and try this:

```vb
Dim cc2 = New C1() With {cc1.Text,  cc1.Number}
```

...the compiler complains with the error `Name of field or property being initialized in an object initializer must start with '.'` Field names _can_ be inferred for tuples so perhaps this name simplification suggestion should be implemented for VB tuples (it doesn't appear to have been implemented so far).</Description>
    <CreatedDate>13/12/2017</CreatedDate>
    <ClosedDate>13/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23730</IssueID>
    <Title>Deduplicate Find All References results in multi-targeting projects</Title>
    <Description>**Version Used**: 
the version shipped in 15.4.3

**Steps to Reproduce**:

1. Have an SDK-style project that multitargets, e.g. `&lt;TargetFrameworks&gt;net461;netstandard1.5&lt;/TargetFrameworks&gt;`
2. FAR on any symbol from that project

**Expected Behavior**:
Fully identical occurrences should be unified (deduplicated).

**Actual Behavior**:
I'm seeing every definition and reference twice and they're exactly the same location and everything.

![image](https://user-images.githubusercontent.com/679326/33859101-4ea3d17e-de87-11e7-854b-ea9ad9ad8606.png)

This is a problem with cognitive load. You have double the information. FAR is a very commonly used tool and it needs to get out of the way as much as possible. Having every reference showing twice or more is just not helpful. When looking through the list I often build a mental map of all usages, classifying them and bucketizing by some criteria (aha, it can't be here, can't be here, this one is suspicious, this one we can ignore, etc. etc.)

The current structure makes that really complicated (I have to do twice the work).

Same problem in Navigate To:
![image](https://user-images.githubusercontent.com/679326/33859134-6c9ec684-de87-11e7-85bb-6f9a697cb511.png)
</Description>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>12/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23729</IssueID>
    <Title>IDE0037 codefix introduces extra space, breaks indentation alignment</Title>
    <Description>**Version Used**: 2.6.0.62329 (5429b35d) (Visual Studio 15.5.1 Community)

**Steps to Reproduce**:

1. Write an expression which triggers IDE0037. For example:
   ```csharp
   public class Class1
   {
       public void M()
       {
           var x = 23;
           Equals(null, new
           {
               x = x,
               y = 23,
           });
       }
   }
   ```
2. Execute the code fix

**Expected Behavior**:

The string of whitespace characters between the opening `{` and the first non-whitespace character (i.e., the identifier itself) remains the same as before. This would preserve the “normal” indent that existed prior to executing the code fix and avoids changing the alignment of the variable wrt neighbors.

```csharp
public class Class1
{
    public void M()
    {
        var x = 23;
        Equals(null, new
        {
            x,
            y = 23,
        });
    }
}
```

**Actual Behavior**:

There is an additional ` ` (space, I haven’t verified, it looks like space) character between the opening `{` and the first non-whitespace character after the `{`. The identifier is now out of alignment with neighbors.

```csharp
public class Class1
{
    public void M()
    {
        var x = 23;
        Equals(null, new
        {
             x,
            y = 23,
        });
    }
}
```</Description>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>12/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23720</IssueID>
    <Title>Visual Studio hangs when writing ref directly to getter. dotnet cli hangs too if try to build.</Title>
    <Description>**Version Used**: 
Visual Studio Community 15.5.1
NET Core 2.0.3, NET Core SDK 2.1.2
**Steps to Reproduce**:

1. Create project 
2. Create class or struct
3. Write something like `int Property { ref get; set; }`
4. (if using dotnet cli) Try to dotnet build or run

**Expected Behavior**:
Visual Studio and dotnet cli reporting compile error
**Actual Behavior**:
Visual Studio and dotnet cli just freezes.

Also, can it be feature request to allow ref getter with value setter?
This would allow to easy change values in nested structs without using plain fields.</Description>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>02/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23710</IssueID>
    <Title>Add a way to enforce naming of type parameters</Title>
    <Description>It appears that [`applicable_kinds` doesn't have a concept of "type parameters"](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions). Please add this symbol so that we can enforce that type parameters begin with 'T'.</Description>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23708</IssueID>
    <Title>IDE0039 false-positive in expression tree</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio 2017 Enterprise v15.5

**Steps to Reproduce**:

1.  Load the following code into the editor:

```cs
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace RoslynSandbox
{
	public class Class1
	{
		public static void Foo()
		{
			Predicate&lt;object&gt; predicate = _ =&gt; true;
			GetFiltered&lt;object&gt;(o =&gt; predicate(o));
		}

		static IEnumerable&lt;T&gt; GetFiltered&lt;T&gt;(Expression&lt;Predicate&lt;T&gt;&gt; expression) =&gt; default;
	}
}
```

**Expected Behavior**:

The above code compiles with no error, warnings, or suggestions.

**Actual Behavior**:

Suggestion IDE0039 "Use local function" on line 11.

If I apply the suggested code fix, the code becomes:

```cs
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace RoslynSandbox
{
	public class Class1
	{
		public static void Foo()
		{
			bool predicate(object _) =&gt; true;
			GetFiltered&lt;object&gt;(o =&gt; predicate(o));
		}

		static IEnumerable&lt;T&gt; GetFiltered&lt;T&gt;(Expression&lt;Predicate&lt;T&gt;&gt; expression) =&gt; default;
	}
}
```

This code does **not** compile, due to the following error:

```
error CS8110: An expression tree may not contain a reference to a local function
```</Description>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23705</IssueID>
    <Title>IDE0007 false positive</Title>
    <Description>**Version Used**: VS 15.5 Community

**Steps to Reproduce**:

```csharp
class ClassName
{
    void Bar&lt;T&gt;(out T value)
    {
        Bar(out T value2); // IDE0007

        value = default(T);
    }
}
```
</Description>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23702</IssueID>
    <Title>Warning reported returning `null` from async `Task&lt;object?&gt;`</Title>
    <Description>`return null;` results in `warning: cannot convert null to non-nullable reference`:
```
using System.Threading.Tasks;
class C
{
    static async Task&lt;object?&gt; F()
    {
        return null;
    }
}
```</Description>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23698</IssueID>
    <Title>Null warning not reported for constant member</Title>
    <Description>`const string A = null;` should generate `warning: cannot convert null to non-nullable reference`:
```
class C
{
    const string A = null;
}
```</Description>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23652</IssueID>
    <Title>Cannot obtain symbol for tuple sequence in foreach</Title>
    <Description>**Version Used**: VS 15.5 Community

**Steps to Reproduce**:

```csharp
void EnumerateTuples(IEnumerable&lt;(int, string)&gt; sequence)
{
    foreach (var (i, s) in sequence)
    {
    }
}
```
I am not able to obtain symbol for 'sequence' in foreach.
</Description>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>08/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23487</IssueID>
    <Title>Bug changing signature of deconstruct</Title>
    <Description>**Version Used**:  15.4.5

**Steps to Reproduce**:

1. have a deconstruct like `Foo(out int x, out string y)`
2. have an assignment `var (value, str) = foo;`
3. follow the assignment with `string x = str;`
4. change signature of deconstruct. click on deconstruct method, from lightbulb select `change signature`. re-order parameters, for example move string parameter up and press ok.

you will see that deconstruct assignment remains unchanged. 

**Expected Behavior**:

after changing deconstruct signature it is expected to update usage all over the place.

**Actual Behavior**:

deconstruct assignments remains unchanged and has to be fixed manually.

</Description>
    <CreatedDate>30/11/2017</CreatedDate>
    <ClosedDate>14/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23389</IssueID>
    <Title>folded comment with cref removes spacing after the reference term.</Title>
    <Description>If i have a comment like this ...

```csharp
/// &lt;summary&gt;
/// The &lt;see cref="BodyPart"/&gt; that the Transforms operate on.
/// &lt;/summary&gt;
```

When i fold the comment, the space between 'BodyPart' and 'that is removed. So the folded comment looks like this ..

```csharp
/// &lt;summary&gt; The BodyPartthat the Transforms ..
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/155566/folded-comment-with-cref-removes-spacing-after-the.html
VSTS ticketId: 529532_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>27/11/2017</CreatedDate>
    <ClosedDate>27/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23329</IssueID>
    <Title>Inserting new preprocessor directives or pasting changes the indentation of other preproccessor directives at the same level in a file</Title>
    <Description>When you start to insert a new preprocessor directive, the editor moves other preprocessor directives in your code around. This affects other directives at the same level in the file (before and after), and not just previous related directives (such as #region/#endregion and #if/#endif).

The style formatting rules aren't precise enough to allow for the indentation rules I want on my directives (essentially, follow the indentation level of the code block the directive is in. #if/#endif always tries to hug the left margin). So, I try to format it myself. However, whenever I add a new one in, the editor undoes all this work. If you notice it, you can immediately undo it with Ctrl+Z, but if you don't it can add a lot of extra work to maintain that formatting.

To reproduce it:
1. add a few directives to a file. Do a few to show that it's not just formatting the end of a preprocessor block.
2. Select the entire section of code and hit TAB a few times to change the indentation.
3. Hit enter to start a new line.
4a. Enter a # symbol and watch it all rearrange itself.
 - OR -
4b. Paste something in that level of code. Even a comment. The directives still move.

Expected behavior:
The editor should not edit any lines beyond the one currently being edited with the exception of block formatting. In that case, only the block itself (and its contents) should be edited. In the case of pre-processor directives, the &amp;quot;block&amp;quot; should only be the area between related directives. Other directives at the same level should not be affected, as they're different blocks. In the event that someone wants to format multiple blocks, they can select all of it, or edit the containing block.

Caveats:
methods can sometimes interrupt the behavior in that directives on the other side of that method (block?) may not be affected. The provided example code shows this. All of this is on 15.4.1.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/140858/inserting-new-preprocessor-directives-or-pasting-c.html
VSTS ticketId: 517298_
_These are the original issue comments:_

Matt Newell on ‎10‎/‎30‎/‎2017, 01:37 PM (21 days ago): &lt;p&gt;Also, not sure why it's tagged "crash" as it doesn't crash.&lt;/p&gt;

Jinu Joseph [MSFT] on ‎11‎/‎1‎/‎2017, 03:30 PM (19 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

Matt Newell on ‎11‎/‎1‎/‎2017, 04:39 PM (19 days ago): &lt;p&gt;Understood. I imagine you've got higher priority stuff to deal with than formatting issues. I've also got another minor issue to report on preprocessor directives in that typing the full directive as opposed to using tab completion demonstrates different formatting behavior. But that's even more minor, so I'm saving it until I've got time to type it up. Good luck, and let me know when you've had time to look into it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/11/2017</CreatedDate>
    <ClosedDate>06/09/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23155</IssueID>
    <Title>inline temporary variable creates invalid output</Title>
    <Description>Relevant code: https://github.com/mrexodia/AStyleHelper/blob/e44405801ed92e945672a10b9e1b49f1ad472f26/AStyleHelper/AStyleHelper.cs#L29

If you use the &amp;quot;inline temporary variable&amp;quot; feature it will propose invalid output:

https://i.imgur.com/D2w3XV1.png

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/144318/inline-temporary-variable-creates-invalid-output.html
VSTS ticketId: 519940_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>14/11/2017</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23073</IssueID>
    <Title>.vs/{solution}/v15/sqlite3/storage.ide prevents git cleaning</Title>
    <Description>Because of this file, I cannot peform this command while Visual Studio is open:

&amp;gt; git clean -fxd

I receive this error:

&amp;gt; Unlink of file '.vs/SimpleExec/v15/sqlite3/storage.ide' failed. Should I try again? (y/n)

This is because Visual Studio is locking this file. To perform a git clean, I have to close Visual Studio, perform the clean, and then re-open Visual Studio. This is very annoying and time consuming.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/144530/vssolutionv15sqlite3storageide-prevents-git-cleani.html
VSTS ticketId: 520036_
_These are the original issue comments:_

Sam Harwell [MSFT] on ‎11‎/‎8‎/‎2017, 09:35 AM (31 min ago): &lt;p&gt;Thank you for your feedback! We have determined that this issue is not a bug. There are many ways in which the IDE can cause a git clean operation to &amp;quot;fail&amp;quot;, either by preventing one or more files from getting deleted or by immediately recreating the files after the operation completes. For a complete clean operation, the recommended sequence of operations is closing the IDE followed by cleaning the directory.&lt;/p&gt;

Adam Ralph on ‎11‎/‎8‎/‎2017, 09:57 AM (10 min ago): &lt;p&gt;I'm sorry but that is a poor response. This was not a problem before VS2017. It is a problem that was introduced by VS2017. Whether or not it is a bug isn't relevant. The UX has deteriorated as a result of this change and I find it difficult to believe that it is not possible take some action to alleviate this problem. This is a constant pain for me. Closing the IDE in order to do a git clean isn't a workable solution. VS start up time is significant.&lt;/p&gt;

Adam Ralph on ‎11‎/‎8‎/‎2017, 10:04 AM (2 min ago): &lt;p&gt;BTW&lt;/p&gt;&lt;p&gt;&amp;gt; There are many ways in which the IDE can cause a git clean operation to "fail", either by preventing one or more files from getting deleted or by immediately recreating the files after the operation completes.&lt;/p&gt;&lt;p&gt;That's fine, I don't care about that, since it doesn't stop me doing a git clean. The problem I mention does.&lt;/p&gt;&lt;p&gt;A git clean is not only useful for clearing IDE generated files. It's also useful for cleaning stuff which I added myself. Those are the artifacts I see in my working tree. The IDE generated files are already ignored via my .gitignore file so they do not pollute my working tree. I don't care if the IDE re-generates them immediately after my git clean. In those cases where I do care about that, sure, I'll close the IDE before the git clean.&lt;/p&gt;

Sam Harwell [MSFT] on ‎11‎/‎8‎/‎2017, 10:06 AM (65 sec ago): &lt;p&gt;Hi Adam,&lt;/p&gt;&lt;p&gt;I'll go ahead and move this issue to GitHub under the repository responsible for locking this file. Even though it still likely be an unsupported scenario in general (some VS scenarios which it sounds like you aren't using lock other files), maybe someone there will be able to improve this specific case.&lt;/p&gt;&lt;p&gt;As an immediate workaround, you should be able to use the -e flag of git to skip the specific file that's causing problems. I would expect this to be -e &amp;lt;pattern&amp;gt;, where &amp;lt;pattern&amp;gt; is one of the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;storage.ide&lt;/li&gt;&lt;li&gt;*.ide&lt;/li&gt;&lt;li&gt;sqlite3/&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you,&lt;/p&gt;&lt;p&gt;Sam Harwell&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>08/11/2017</CreatedDate>
    <ClosedDate>08/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23039</IssueID>
    <Title>Ctrl+. Fix all "Use expression body for methods" problems in document doesn't do anything</Title>
    <Description>108-WinForms app with ASP.NET Web API backend

1. Clone https://github.com/cartermp/15.x-E2E

2. Add .editorconfig from https://gist.githubusercontent.com/kuhlenh/50fdabc40918255747c156cc1412f491/raw/5222b2fd781ada4f59d4132e085836a118764eff/.editorconfig

3. In ValuesController, put the cursor on Get(string word) definition's &amp;quot;return&amp;quot;

4. Ctrl+. &amp;gt; Use expression body for methods &amp;gt; Fix all Problems in Document

Expected: 3 fixes show up
Actual: No changes show up

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/143226/ctrl-fix-all-use-expression-body-for-methods-probl.html
VSTS ticketId: 518925_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>07/11/2017</CreatedDate>
    <ClosedDate>07/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>23007</IssueID>
    <Title>Expose invalid nodes under bad foreach</Title>
    <Description>In `foreach` statements, we don't expose some error scenarios, so IOperation doesn't have nodes in the tree. An example is GetEnclosingBinderInternalRecovery_11,
```C#
    static void Main(string[] args)
    {
        foreach 
        other(some().F(a =&gt; TestOutVar(out var x) ? x : 1));
    }
```
This is why we are special casing foreach expressions in AssertTypeFromOperation https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Test/Semantic/Semantics/OutVarTests.cs#L1078</Description>
    <CreatedDate>03/11/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22962</IssueID>
    <Title>IDE0034 C#7 v.latest: message "'default' can be simplified" is incorrect for struct</Title>
    <Description>In C#7 &amp;quot;latest minor version,&amp;quot; the suggested message &amp;quot;'default' expression can be simplified&amp;quot; is incorrectly given when a struct (value-type) is passed as an Object-typed function argument.

In other words, if you have...

    static void foo(Object z) { }

Then you cannot &amp;quot;simplify&amp;quot; the use of 'default(TimeSpan)' in the following because 'null' will be passed to the function instead of the boxed value-type.

    foo(default(TimeSpan));

This simplification is incorrectly suggested as a &amp;quot;Message&amp;quot; in the vs2017 Error List.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/141010/c7-vlatest-message-default-can-be-simplified-is-in.html
VSTS ticketId: 517409_
_These are the original issue comments:_

Glenn Slayden on 10/30/2017, 03:48 PM (45 hours ago): &lt;p&gt;In fact, the problem is quite a bit more pervasive. The incorrect suggestion &lt;strong&gt;IDE0034 &lt;/strong&gt;is also given for the simple line of &lt;strong&gt;C#7&lt;/strong&gt; code:&lt;/p&gt;&lt;pre&gt;Object x = default(TimeSpan);&lt;/pre&gt;&lt;p&gt;
Obviously, this is not at all the same as the simplification suggested by the vs2017 IDE...&lt;/p&gt;&lt;pre&gt;Object x = default;   // incorrect result of accepting suggestion IDE0034&lt;/pre&gt;&lt;p&gt;
In the latter case, `x` ends up as a true &lt;em&gt;null reference&lt;/em&gt; (i.e. the actual binary bits in `x` are all zero), whereas in the original line (viz., prior to the incorrect application of &lt;strong&gt;IDE0034&lt;/strong&gt;), `x` would end up referring to a &lt;em&gt;boxed value-type&lt;/em&gt; in the GC heap.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>01/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22956</IssueID>
    <Title>IDE0034  default expression can be simplified</Title>
    <Description>The statement

int? x = default(int)

Generates a warning IDE0034 'default' expression can be simplified and the suggestion is to replace 'default(int)' with just 'default'. This is wrong because defalt(int) is 0 while default for int? is null.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/140204/default-expression-can-be-simplified.html
VSTS ticketId: 516774_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>01/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22886</IssueID>
    <Title>VS 2017 15.4 Crashes while editing .cs file</Title>
    <Description>Apologies for the cross-post, but I am unable to tie this to the existing problem: https://developercommunity.visualstudio.com/content/problem/133454/vs-2017-154-crashes-while-editing-cs-file.html and I am unable to upload the crash dump file to a comment on the original post as requested by Jinu Joseph [MSFT].

I have installed version 15.4.1 as requested and still see the issue reported earlier.

Some more background. On smaller solutions (ones with a handful of projects) I am unable to replicate the issue.

The solution where I continue to experience this pain has ~ 20 projects in it.

The issue happens like clockwork if I declare a method parameter based on a custom enum or type in our project. 

VS will allow me to specify the type of the parameter, but as soon as I press the space key and begin to type a name for the new method parameter VS crashes. 

Is there a way to turn off the feature that attempts to suggest names of methods in Visual Studio. This might be anectdotal evidence, but I didn't have this issue before that feature dropped (which maybe was in 15.3?)

Attached is the dmp file from the latest crash.​

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/137578/vs-2017-154-crashes-while-editing-cs-file-1.html
VSTS ticketId: 514286_
_These are the original issue comments:_

Jinu Joseph [MSFT] on ‎10‎/‎26‎/‎2017, 06:11 PM (14 hours ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>27/10/2017</CreatedDate>
    <ClosedDate>04/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22786</IssueID>
    <Title>Ctrl+click GTD is too aggressive on string literals</Title>
    <Description>From: Daofa Li 
Basically C# identifies all literals as clickable symbols. The worst case is where the string literal is a url. Ctrl+click on the url may open the string metadata in editor as well as open the url in external browser. 

Can this be improved not to return literals as navigable symbols? The current behavior doesn’t make much sense to me as a user.
![image](https://user-images.githubusercontent.com/12449387/31809648-8172baee-b52d-11e7-96c8-11f9b6a9f594.png)
</Description>
    <CreatedDate>20/10/2017</CreatedDate>
    <ClosedDate>22/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22748</IssueID>
    <Title>UseDefaultLiteral IDE Diagnostics (IDE0034) suggest wrong fix</Title>
    <Description>**Version Used**: The version in VS15.4.0

**Steps to Reproduce**:
``` c#
namespace DefaultBug
{
    public class Program
    {
        public enum MyEnum
        {
            One,
            Two,
            Three
        }

        public static void Main()
        {
            Method(default(MyEnum)); // Warning/suggestion IDE0034. default returns 'One'
            Method(default); // No warning/suggestion. 'default' returns  null.
        }

        public static void  Method(object obj)
        {
        }
    }
}
```

**Expected Behavior**:
No warning

**Actual Behavior**:
Warning IDE0034.</Description>
    <CreatedDate>18/10/2017</CreatedDate>
    <ClosedDate>18/10/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22648</IssueID>
    <Title>Should `LoweredDynamicOperationFactory.GetArgumentInfo` handle `in`?</Title>
    <Description>This was spawned by reviewing code that makes use of `RefKind.Out` and asking whether it should handle `RefKind.In` as well.

```C#
public partial class C 
{
    void M()
    {
        int x = 1;
     	dynamic d = this;
        d.M(ref x); // works
        d.M(x); // runtime error
        d.M(in x); // runtime error
    }
    void M2(in int x) { }
}
```

Tagging @OmarTawfik to confirm this accurately describes what we tested.
FYI @VSadov </Description>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>24/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22628</IssueID>
    <Title>Suboptimal code for o is 42</Title>
    <Description>The following code causes two boxing allocations:

```csharp
public void BoxTwice(int n)
{
    if (n is 42) Console.WriteLine("n is 42");
}
```

Because the compiler generates the call to `object.Equals(42, o)`.

Similarly, if the `n` is `object`, the `is`-expression causes one boxing allocation when the similar switch statement causes no allocations:

```csharp
public void BoxOnce(object o)
{
    if (o is 42) Console.WriteLine("o is 42");
}

public void NoBoxing(object o)
{
    switch (o)
    {
        case 42:
            Console.WriteLine("o is 42");
            break;
    }
}
```
The code gen is:

```csharp
public void BoxOnce(object o)
{
    if (object.Equals(42, o))
    {
        Console.WriteLine("o is 42");
    }
}

public void NoBoxing(object o)
{
    object obj = o;
    if (obj != null)
    {
        object obj2 = obj;
        bool expr_10 = obj2 is int;
        int num = expr_10 ? ((int)obj2) : 0;
        if (expr_10 &amp;&amp; num == 42)
        {
            Console.WriteLine("o is 42");
        }
    }
}
```

Is there any unobvious reason for this behavior or just code gen simply not optimal and can be improved in the future?

Related issue: #13247</Description>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>10/10/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22580</IssueID>
    <Title>CSharpRemoveUnreachableCodeDiagnosticAnalyzer contributing to Perf regression during test discovery</Title>
    <Description>
    </Description>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>29/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22579</IssueID>
    <Title>CS8019 doesn't work during compilation</Title>
    <Description>**Version Used**: VS 2017 15.3.5

**Steps to Reproduce**:

1. Create new Class Library (.NET Framework) project.
2. Edit Active Rule Set and make CS8019 (Unnecessary using directive) an 'Error'.
3. Compile project.

**Expected Behavior**:
Given that the project starts with a Class1.cs file containing unused using directives, compilation should fail.

**Actual Behavior**:
Compilation succeeds. The VS UI does show the IntelliSense error, however.

Attached repro project.
[AnalyzerTest.zip](https://github.com/dotnet/roslyn/files/1363377/AnalyzerTest.zip)
</Description>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>22/07/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22573</IssueID>
    <Title>Object initializer inside array initializer not formatted</Title>
    <Description>**Version Used**: 

Visual Studio 15.3.5

**Steps to Reproduce**:

Sample code:

```csharp
class Program
{
    static void Main(string[] args)
    {
        var x = new[]
        {
            new{a=1}
        };
    }
}
```

**Expected Behavior**:

```csharp
class Program
{
    static void Main(string[] args)
    {
        var x = new[]
        {
            new { a = 1 }
        };
    }
}
```

**Actual Behavior**:
The object initializer inside array initializer not formatted.
</Description>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>01/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22541</IssueID>
    <Title>Investigate allocation optimization for SourceAssemblySymbol.MightContainNoPiaLocalTypes</Title>
    <Description>**Version Used**: 15.4

Several profiling reports suggest large (but not overwhelming) allocations occurring within calls to `SourceAssemblySymbol.MightContainNoPiaLocalTypes`. This occurs specifically because the implementation of this property indirectly calls `SourceNamedTypeSymbol.GetAttributes()`, which loads and binds all attributes for all types.

⚠️ Even if the `MightContainNoPiaLocalTypes` property is optimized, keep in might that `GetAttributes()` caches its result. The change suggested by this issue may simply defer the evaluation to another operation which always runs, eliminating any measurable benefits one would hope to achieve.</Description>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>24/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22433</IssueID>
    <Title>"Upgrade C# Language Version" code fix adds conditional property groups to csproj</Title>
    <Description>**Version Used**: Visual Studio 15.4 Preview 3.0

**Steps to Reproduce**:

1. In a C# project with no `&lt;LangVersion&gt;` property attempt to use a language feature not available in the latest major version. For example, a `default` expression.
2. Use the code fix to "Upgrade this project to C# language version 'latest'" (or '7.1', either should do the same thing)

**Expected Behavior**: A single `&lt;LangVersion&gt;` node was added to my unconditional `&lt;PropertyGroup&gt;` at the top:

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;latest&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
```

**Actual Behavior**: Two new conditional `&lt;PropertyGroup&gt;` nodes (one for Release, one for Debug) were added, each setting `&lt;LangVersion&gt;` to the same value:

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'"&gt;
    &lt;LangVersion&gt;latest&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'"&gt;
    &lt;LangVersion&gt;latest&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
```

This seems odd to me as a user. As someone vaguely familiar with the internals of the project system, I do mostly understand what happened, but it's not what I'd expect as a user.</Description>
    <CreatedDate>29/09/2017</CreatedDate>
    <ClosedDate>30/09/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22430</IssueID>
    <Title>Add IOperation API for attributes</Title>
    <Description>This will complete our API surface for all initializer code blocks.</Description>
    <CreatedDate>29/09/2017</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22082</IssueID>
    <Title>Don't offer method-to-property on overrides</Title>
    <Description>...especially, `GetHashCode`.</Description>
    <CreatedDate>12/09/2017</CreatedDate>
    <ClosedDate>12/09/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>22032</IssueID>
    <Title>No ILocalReferenceExpression node for a tuple declaration in foreach statement</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/21791#discussion_r137683723.</Description>
    <CreatedDate>11/09/2017</CreatedDate>
    <ClosedDate>05/10/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21813</IssueID>
    <Title>Generic Enums (Not sure if this is the right place for this)</Title>
    <Description>Recently I was trying to implement something like a Generic Enum Property. I looked at Enum and TEnum but they did not seem to provide what I needed. Is there any work to make Enums more flexible to work with (a la Java)? Thanks!</Description>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>31/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21558</IssueID>
    <Title>Intermittent test failure: Microsoft.CodeAnalysis.Editor.UnitTests.Structure.BlockStructureServiceTests.TestSimpleLambda</Title>
    <Description>https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_release_unit64_prtest/8963/

```
  Microsoft.CodeAnalysis.Editor.UnitTests.Structure.BlockStructureServiceTests.TestSimpleLambda
      System.AggregateException : 3 exception(s) were thrown during test.
      Note: exceptions may have been thrown by another test running concurrently with
      this test.  This can happen with any tests that share the same ExportProvider.
      Examining individual exception stacks may help reveal the original test and source 
      of the problem.
      
      Exception 0:
      System.NullReferenceException: Object reference not set to an instance of an object.
         at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
         at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
      
      Exception 1:
      System.NullReferenceException: Object reference not set to an instance of an object.
         at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint)
         at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
         at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
      
      Exception 2:
      System.NullReferenceException: Object reference not set to an instance of an object.
         at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
         at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
      
      
      ---- System.NullReferenceException : Object reference not set to an instance of an object.
      ---- System.NullReferenceException : Object reference not set to an instance of an object.
      ---- System.NullReferenceException : Object reference not set to an instance of an object.
      Stack Trace:
           at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
        q:\roslyn\src\EditorFeatures\Test\Structure\BlockStructureServiceTests.cs(39,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Structure.BlockStructureServiceTests.&lt;TestSimpleLambda&gt;d__0.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        ----- Inner Stack Trace #1 (System.NullReferenceException) -----
           at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
           at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
        ----- Inner Stack Trace #2 (System.NullReferenceException) -----
           at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint)
           at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
           at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
        ----- Inner Stack Trace #3 (System.NullReferenceException) -----
           at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
           at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
```</Description>
    <CreatedDate>16/08/2017</CreatedDate>
    <ClosedDate>17/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21480</IssueID>
    <Title>Intermittent test failure: BlockCommentEditingTests.EofCase0</Title>
    <Description>https://ci.dot.net/job/dotnet_roslyn/job/dev15.5.x/job/windows_release_unit32_prtest/21/testReport/junit/Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.BlockCommentEditing/BlockCommentEditingTests/EofCase0/

```
MESSAGE:
System.IndexOutOfRangeException : Index was outside the bounds of the array.
+++++++++++++++++++
STACK TRACE:
at System.Collections.Generic.List`1.get_Item(Int32 index) at System.AggregateException..ctor(String message, IList`1 innerExceptions)
 at System.AggregateException..ctor(String message, IEnumerable`1 innerExceptions) at System.AggregateException..ctor(IEnumerable`1 innerExceptions)
 at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Flatten(ICollection`1 exceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize) 
at Microsoft.CodeAnalysis.Workspace.Dispose() 
at Microsoft.CodeAnalysis.Editor.UnitTests.BlockCommentEditing.AbstractBlockCommentEditingTests.Verify(String initialMarkup, String expectedMarkup) 
at Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.BlockCommentEditing.BlockCommentEditingTests.EofCase0() in q:\roslyn\src\EditorFeatures\CSharpTest\BlockCommentEditing\BlockCommentEditingTests.cs:line 81
```

Likely the same issue in Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets.CSharpSnippetExpansionClientTests.TestAddImport_EmptyDocument_SystemAtTop:

https://ci.dot.net/job/dotnet_roslyn/job/dev15.5.x/job/windows_release_unit64_prtest/21/testReport/junit/Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets/CSharpSnippetExpansionClientTests/TestAddImport_EmptyDocument_SystemAtTop/

```
MESSAGE:
System.IndexOutOfRangeException : Index was outside the bounds of the array.
+++++++++++++++++++
STACK TRACE:
at System.Collections.Generic.List`1.get_Item(Int32 index)
 at System.AggregateException..ctor(String message, IList`1 innerExceptions)
 at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Flatten(ICollection`1 exceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
 at Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets.CSharpSnippetExpansionClientTests.VB$StateMachine_21_TestSnippetAddImportsAsync.MoveNext() in q:\roslyn\src\VisualStudio\Core\Test\Snippets\CSharpSnippetExpansionClientTests.vb:line 388 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
 at Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets.CSharpSnippetExpansionClientTests.VB$StateMachine_2_TestAddImport_EmptyDocument_SystemAtTop.MoveNext() in q:\roslyn\src\VisualStudio\Core\Test\Snippets\CSharpSnippetExpansionClientTests.vb:line 33
 --- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
 --- End of stack trace from previous location where exception was thrown ---
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```
</Description>
    <CreatedDate>13/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21447</IssueID>
    <Title>[Bug] Default value for parameter of generic type in local functions</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2017 
Version 15.2 (26430.16) Release
VisualStudio.15.Release/15.2.0+26430.16

**Steps to Reproduce**:

1. Create a default ConsoleApp and write code:
```cs
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        TValue GetValueOrDefaultLocal&lt;TKey, TValue&gt;(IReadOnlyDictionary&lt;TKey, TValue&gt; dictionary, TKey key, int y = 10, TValue defaultValue = default(TValue))
        //                                                                                                        Highlighted: ^~~~~~~~~~~^           ^~~~~^
            =&gt; dictionary != null &amp;&amp; dictionary.TryGetValue(key, out var value) ? value : defaultValue;
    }

    TValue GetValueOrDefault&lt;TKey, TValue&gt;(IReadOnlyDictionary&lt;TKey, TValue&gt; dictionary, TKey key, TValue defaultValue = default(TValue))
        =&gt; dictionary != null &amp;&amp; dictionary.TryGetValue(key, out var value) ? value : defaultValue;
}
```
2. Compile it.
3. Type-level method compiled successfully, but local method compiled with two errors.

**Expected Behavior**: Code compiled sucessfully.
**Actual Behavior**: I have errors in output:
&gt; 1&gt;C:\…\ConsoleApp2\Program.cs(7,151,7,157): error CS0246: The type or namespace name 'TValue' could not be found (are you missing a using directive or an assembly reference?)
&gt; 1&gt;C:\…\ConsoleApp2\Program.cs(7,128,7,140): error CS1750: A value of type 'TValue' cannot be used as a default parameter because there are no standard conversions to type 'TValue'</Description>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>11/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21436</IssueID>
    <Title>Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests+CSharp.RemoveAttributeWithMultipleAttributes Intermittent</Title>
    <Description>[The failure was](https://github.com/dotnet/roslyn/pull/20831#issuecomment-321701206)

## Regression

**Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests+CSharp.RemoveAttributeWithMultipleAttributes** (from Roslyn.Services.Editor.UnitTests)

Failing for the past 1 build (Since Failed#26 )
Took 0.84 sec.
### Stacktrace

MESSAGE:
System.AggregateException : 3 exception(s) were thrown during test.\r\nNote: exceptions may have been thrown by another test running concurrently with\r\nthis test. This can happen with any tests that share the same ExportProvider.\r\nExamining individual exception stacks may help reveal the original test and source \r\nof the problem.\r\n\r\nException 0:\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)\r\n at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\nException 1:\r\nSystem.ArgumentException: The specified NormalizedSnapshotSpanCollection extends beyond the end of the TextSnapshot.\r\n at Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection..ctor(ITextSnapshot snapshot, IList`1 spans)\r\n at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToFirstMatch(SnapshotSpan span, SpanTrackingMode trackingMode, Predicate`1 match)\r\n at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToBuffer(SnapshotSpan span, SpanTrackingMode trackingMode, ITextBuffer targetBuffer)\r\n at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextBuffer targetBuffer)\r\n at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextSnapshot targetSnapshot)\r\n at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)\r\n at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\nException 2:\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint)\r\n at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)\r\n at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\n\r\n---- System.NullReferenceException : Object reference not set to an instance of an object.\r\n---- System.ArgumentException : The specified NormalizedSnapshotSpanCollection extends beyond the end of the TextSnapshot.\r\n---- System.NullReferenceException : Object reference not set to an instance of an object.
+++++++++++++++++++
STACK TRACE:
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize) at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.TestContext.Dispose() in q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs:line 946 at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.&lt;TestRemoveAttributeAsync&gt;d__14`1.MoveNext() in q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs:line 519 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.CSharp.&lt;RemoveAttributeWithMultipleAttributes&gt;d__83.MoveNext() in q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.CSharp.cs:line 924 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) ----- Inner Stack Trace #1 (System.NullReferenceException) ----- at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args) ----- Inner Stack Trace #2 (System.ArgumentException) ----- at Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection..ctor(ITextSnapshot snapshot, IList`1 spans) at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToFirstMatch(SnapshotSpan span, SpanTrackingMode trackingMode, Predicate`1 match) at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToBuffer(SnapshotSpan span, SpanTrackingMode trackingMode, ITextBuffer targetBuffer) at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextBuffer targetBuffer) at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextSnapshot targetSnapshot) at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args) ----- Inner Stack Trace #3 (System.NullReferenceException) ----- at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint) at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
</Description>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21428</IssueID>
    <Title>Why is CS4014 not shown for all functions that return a task?</Title>
    <Description>I have the following (inconsistent) behavior when using Visual Studio 2017 with C# 7 features enabled. Suppose the following code:
```
private async Task Test1Async() =&gt; await Task.Delay(1000).ConfigureAwait(false);
private Task Test2Async() =&gt; Test1Async();
```
Functionally, these functions are exactly the same but the compiler treats calling these methods different. The following code compiles, but issues a CS4014 warning:
```
private void Test() =&gt; Test1Async();   // CS4014 is shown
```
It generates the warning "_because this call is not awaited, the current method continues to run before the call is completed_". This is a proper warning, because it often indicates a flaw in your code. In case you actually want this behavior, then you can solve it by using the following code:
```
private void Test() =&gt; _ = Test1Async();   // CS4014 is not shown anymore
```
Assigning the value to `_` is a relative new feature to indicate that the value is ignored intentionally and I think it's the best way to indicate that the result should be ignored. The following code doesn't raise CS4014:
```
private void Test() =&gt; Test2Async();   // CS4014 is not shown!
```
I think this behavior is inconsistent. Both calls should raise the CS4014 if the returned `Task` is ignored silently.</Description>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>10/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21423</IssueID>
    <Title>Intermittent test failure: Microsoft.CodeAnalysis.Editor.UnitTests.Structure.BlockStructureServiceTests.TestSimpleLambda</Title>
    <Description>```
MESSAGE:
System.IndexOutOfRangeException : Index was outside the bounds of the array.
+++++++++++++++++++
STACK TRACE:
at System.Collections.Generic.List`1.get_Item(Int32 index) 
at System.AggregateException..ctor(String message, IList`1 innerExceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Flatten(ICollection`1 exceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
at Microsoft.CodeAnalysis.Editor.UnitTests.Structure.BlockStructureServiceTests.&lt;TestSimpleLambda&gt;d__0.MoveNext() in q:\roslyn\src\EditorFeatures\Test\Structure\BlockStructureServiceTests.cs:line 39
 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```

https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_release_unit64_prtest/8828/testReport/junit/Microsoft.CodeAnalysis.Editor.UnitTests.Structure/BlockStructureServiceTests/TestSimpleLambda/</Description>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21361</IssueID>
    <Title>Roslyn Services Editor test failed with "Attempt to access unloaded App Domain"</Title>
    <Description>See https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/8746/</Description>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>08/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21328</IssueID>
    <Title>Numerous InteractivePaste tests failing in signed build</Title>
    <Description>See https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=906157

Here are the stack traces for the logs:

```
Microsoft.CodeAnalysis.Editor.UnitTests.InteractivePaste.InteractivePasteCommandhandlerTests.PasteCommandWithOutInteractiveFormat
      System.AggregateException : 4 exception(s) were thrown during test.
      Note: exceptions may have been thrown by another test running concurrently with
      this test.  This can happen with any tests that share the same ExportProvider.
      Examining individual exception stacks may help reveal the original test and source 
      of the problem.
      
      Exception 0:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.Tagger..ctor(StateMachine stateMachine, ITextUndoHistoryRegistry undoHistoryRegistry, IWaitIndicator waitIndicator, IEnumerable`1 refactorNotifyServices)
         at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.CreateTagger[T](ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      Exception 1:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      Exception 2:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      Exception 3:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      
      ---- System.InvalidOperationException : Unexpected false
      ---- System.InvalidOperationException : Unexpected false
      ---- System.InvalidOperationException : Unexpected false
      ---- System.InvalidOperationException : Unexpected false
      Stack Trace:
           at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
           at Microsoft.CodeAnalysis.Workspace.Dispose()
        src\EditorFeatures\Test2\InteractivePaste\InteractivePasteCommandHandlerTests.vb(89,0): at Microsoft.CodeAnalysis.Editor.UnitTests.InteractivePaste.InteractivePasteCommandhandlerTests.PasteCommandWithOutInteractiveFormat()
        ----- Inner Stack Trace #1 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.Tagger..ctor(StateMachine stateMachine, ITextUndoHistoryRegistry undoHistoryRegistry, IWaitIndicator waitIndicator, IEnumerable`1 refactorNotifyServices)
           at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.CreateTagger[T](ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
        ----- Inner Stack Trace #2 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
        ----- Inner Stack Trace #3 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
        ----- Inner Stack Trace #4 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
    Microsoft.CodeAnalysis.Editor.UnitTests.InteractivePaste.InteractivePasteCommandhandlerTests.PasteCommandWithInteractiveFormatAsBoxCopy
      System.AggregateException : 4 exception(s) were thrown during test.
      Note: exceptions may have been thrown by another test running concurrently with
      this test.  This can happen with any tests that share the same ExportProvider.
      Examining individual exception stacks may help reveal the original test and source 
      of the problem.
      
      Exception 0:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.Tagger..ctor(StateMachine stateMachine, ITextUndoHistoryRegistry undoHistoryRegistry, IWaitIndicator waitIndicator, IEnumerable`1 refactorNotifyServices)
         at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.CreateTagger[T](ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      Exception 1:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      Exception 2:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      Exception 3:
      System.InvalidOperationException: Unexpected false
         at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
         at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
         at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
         at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
      
      
      ---- System.InvalidOperationException : Unexpected false
      ---- System.InvalidOperationException : Unexpected false
      ---- System.InvalidOperationException : Unexpected false
      ---- System.InvalidOperationException : Unexpected false
      Stack Trace:
           at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
           at Microsoft.CodeAnalysis.Workspace.Dispose()
        src\EditorFeatures\Test2\InteractivePaste\InteractivePasteCommandHandlerTests.vb(170,0): at Microsoft.CodeAnalysis.Editor.UnitTests.InteractivePaste.InteractivePasteCommandhandlerTests.PasteCommandWithInteractiveFormatAsBoxCopy()
        ----- Inner Stack Trace #1 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.Tagger..ctor(StateMachine stateMachine, ITextUndoHistoryRegistry undoHistoryRegistry, IWaitIndicator waitIndicator, IEnumerable`1 refactorNotifyServices)
           at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.CreateTagger[T](ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
        ----- Inner Stack Trace #2 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
        ----- Inner Stack Trace #3 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
        ----- Inner Stack Trace #4 (System.InvalidOperationException) -----
           at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
           at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource..ctor(ITextView textViewOpt, ITextBuffer subjectBuffer, AbstractAsynchronousTaggerProvider`1 dataSource, IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetOrCreateTagSource(ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateTaggerWorker[T](ITextView textViewOpt, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.CreateTagger[T](ITextView textView, ITextBuffer subjectBuffer)
           at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1.Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger[T](ITextView textView, ITextBuffer buffer)
           at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
    Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpIntelliSenseCommandHandlerTests.TestOpenParenDismissesCompletionAndBringsUpSignatureHelp1
System.InvalidOperationException: Should have been disposed! Try running in Debug to get the allocation callstack
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.Finalize()
```

Looks like something that should have been disposed is not being disposed.</Description>
    <CreatedDate>04/08/2017</CreatedDate>
    <ClosedDate>08/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21308</IssueID>
    <Title>Intermittent test failure: Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.DiagnosticsSquiggleTaggerProviderTests.TestWithMockDiagnosticService_TaggerProviderCreatedBeforeInitialDiagnosticsReported</Title>
    <Description>https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/8701/

```
  Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.DiagnosticsSquiggleTaggerProviderTests.TestWithMockDiagnosticService_TaggerProviderCreatedBeforeInitialDiagnosticsReported
      System.Exception : 1 exception(s) were thrown during test.
      Note: exceptions may have been thrown by another test running concurrently with
      this test.  This can happen with any tests that share the same ExportProvider.
      Examining individual exception stacks may help reveal the original test and source 
      of the problem.
      
      Exception 0:
      System.NullReferenceException: Object reference not set to an instance of an object.
         at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
         at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
      
      
      ---- System.NullReferenceException : Object reference not set to an instance of an object.
      Stack Trace:
           at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
           at Microsoft.CodeAnalysis.Workspace.Dispose()
        q:\roslyn\src\EditorFeatures\Test\Diagnostics\DiagnosticsSquiggleTaggerProviderTests.cs(156,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.DiagnosticsSquiggleTaggerProviderTests.&lt;TestWithMockDiagnosticService_TaggerProviderCreatedBeforeInitialDiagnosticsReported&gt;d__3.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        ----- Inner Stack Trace -----
           at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
           at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
```</Description>
    <CreatedDate>03/08/2017</CreatedDate>
    <ClosedDate>08/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21259</IssueID>
    <Title>Ternary expression inside interpolated string error is unclear</Title>
    <Description>Given the following code:
```C#
namespace ConsoleApp1
{
    class C1
    {
        static void M1()
        {
            var test = $"{true ? "hello" : "world"}";
        }
    }
}
```
We currently display the following error messages:
```
Error	CS8076	Missing close delimiter '}' for interpolated expression started with '{'.	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
Error	CS1003	Syntax error, ':' expected	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
Error	CS1733	Expected expression	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
Error	CS1002	; expected	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
Error	CS1002	; expected	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
Error	CS8088	A format specifier may not contain trailing whitespace.	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
Error	CS0103	The name 'world' does not exist in the current context	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
Error	CS0201	Only assignment, call, increment, decrement, and new object expressions can be used as a statement	ConsoleApp1	C:\Users\frsilb\Source\Repos\ConsoleApp1\ConsoleApp1\Program.cs	7	Active
```

This is very unhelpful, especially since there is an error for `':' expected` right on the ':'. It'd be good to have a better error experience here that says something along the lines of "If you meant to have a ternary here, wrap in parens".</Description>
    <CreatedDate>02/08/2017</CreatedDate>
    <ClosedDate>11/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21233</IssueID>
    <Title>Recommend types that are not imported yet in the autocomplete list</Title>
    <Description>```cs
class C {
  void M() {
    Int32|
  }
}
```
Int32 should show up in the list and once it's committed (e.g. by hitting space) `using System;` should be inserted.</Description>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>08/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21159</IssueID>
    <Title>Quick Action to replace auto property with fully implemented one</Title>
    <Description>**Version Used**: 2.3.2.61921

**Steps to Reproduce**:
Invoke quick actions on
```C#
public string Foo { get; private set; }
```

**Actual Behavior**: Replace 'Foo' with methods. I don't remember ever needing that one.

**Expected Behavior**: A quick action to change the code into
```C#
private string _foo;
public string Foo
{
    get { return _foo; } 
    private set { _foo = value; } 
}
```
subject to formatting settings.

(I'm somehow convinced this has been discussed here before but cannot find the issue.)</Description>
    <CreatedDate>27/07/2017</CreatedDate>
    <ClosedDate>27/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21139</IssueID>
    <Title>Unnecessary copy generated in async code</Title>
    <Description>Compile the following method using Visual Studio 2017 15.3.0 Preview 5.0 and inspect the generated IL code:
```C#
static async Task Test() =&gt; await Task.CompletedTask;
```
```
.locals init(
    [0] valuetype Program/'&lt;Test&gt;d__6',
    [1] valuetype[System.Private.CoreLib] System.Runtime.CompilerServices.AsyncTaskMethodBuilder
)
IL_0000: ldloca.s 0
IL_0002: call valuetype[System.Private.CoreLib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder[System.Private.CoreLib] System.Runtime.CompilerServices.AsyncTaskMethodBuilder::Create()
IL_0007: stfld valuetype[System.Private.CoreLib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder Program/'&lt;Test&gt;d__6'::'&lt;&gt;t__builder'
IL_000c: ldloca.s 0
IL_000e: ldc.i4.m1
IL_000f: stfld int32 Program/'&lt;Test&gt;d__6'::'&lt;&gt;1__state'
IL_0014: ldloc.0
IL_0015: ldfld valuetype[System.Private.CoreLib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder Program/'&lt;Test&gt;d__6'::'&lt;&gt;t__builder'
IL_001a: stloc.1
IL_001b: ldloca.s 1
IL_001d: ldloca.s 0
IL_001f: call instance void[System.Private.CoreLib] System.Runtime.CompilerServices.AsyncTaskMethodBuilder::Start&lt;valuetype Program/'&lt;Test&gt;d__6'&gt;(!!0&amp;)
IL_0024: ldloca.s 0
IL_0026: ldflda valuetype[System.Private.CoreLib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder Program/'&lt;Test&gt;d__6'::'&lt;&gt;t__builder'
IL_002b: call instance class [System.Private.CoreLib]System.Threading.Tasks.Task[System.Private.CoreLib] System.Runtime.CompilerServices.AsyncTaskMethodBuilder::get_Task()
```
Note that a copy of the builder is created and `Start` is invoked on that and not on the builder in  `t__builder`.

`Start` doesn't use any members of the builder so this doesn't impact correctness but the generated code is larger, slower and uses more stack space than it should.</Description>
    <CreatedDate>26/07/2017</CreatedDate>
    <ClosedDate>28/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21114</IssueID>
    <Title>"Add Null Checks for Parameter" should let me do multiple parameters at once</Title>
    <Description>Today you have to do one at a time (though it's nice you don't have to do them in order 👍)</Description>
    <CreatedDate>25/07/2017</CreatedDate>
    <ClosedDate>25/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21105</IssueID>
    <Title>Convert if to switch could unify duplicate cases</Title>
    <Description>(same in C#)
Consider an if block with multiple identical cases. Since it inspects the condition and the block already, convert if to switch could avoid generating identical conditions/blocks

ex:
```VB
        If x = 4 Then
            x = 1
        ElseIf x = 5 Then
        ElseIf x = 4 Then
            x = 1

        End If
```
becomes 
```VB

        Select Case x
            Case 4             x = 1
            Case 5
            Case 4             x = 1
        End Select
```
but could also be shortened to
```VB
        Select Case x
            Case 4             x = 1
            Case 5
        End Select
```</Description>
    <CreatedDate>25/07/2017</CreatedDate>
    <ClosedDate>25/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21093</IssueID>
    <Title>Find all references on throw Exception expression does not list catch usages </Title>
    <Description>**Version Used**: 
VS 2017.2

**Steps to Reproduce**:

1. Find a throw expression (throw new MyException()) in yourcode
2.  Context-Menu, Right Click, Find all references (SHIFT+F12)

**Expected Behavior**:
References dock window lists all usages of this exception, also all catch statement.

**Actual Behavior**:
Catch statement not listed in window:

![image](https://user-images.githubusercontent.com/338856/28564492-71c3101e-7129-11e7-8fc7-c8e649142ebe.png)

If you call SHIFT+F12 on the class declaration, the catch statement is listed in the references window:

![image](https://user-images.githubusercontent.com/338856/28564531-92e1a5c6-7129-11e7-9ce2-558f4c58ebf5.png)

</Description>
    <CreatedDate>25/07/2017</CreatedDate>
    <ClosedDate>25/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21061</IssueID>
    <Title>Visual Studio crashes when C# project depends on F# which depends on C# project with FxCop analyzers </Title>
    <Description>Ported from https://github.com/dotnet/roslyn-analyzers/issues/1271

----------------------------------------------------------------------------

#### Analyzer package

Microsoft.CodeAnalysis.FxCopAnalyzers  2.3.0-beta1

#### Repro steps

Open solution in Visual Studio 2017 Update 3 Preview 4 : [CrashProblemSimpleSolution.zip](https://github.com/dotnet/roslyn-analyzers/files/1170383/CrashProblemSimpleSolution.zip)

Or:
In Visual Studio 2017 Update 3 Preview 4
 1) Create .NET Core C# project, add FxCop nuget and Feature IOperation
 2) Create .NET Core F# project, add it to solution make it dependent on previous C# project
 3) Create .NET Core C# project, add FxCop nuget and Feature IOperation and make it dependent on previous C# project

#### Expected behavior
no problem

#### Actual behavior
Visual Studio will crash, this is what debugging shows:
Exception thrown at 0x74BCDBE8 in devenv.exe: Microsoft C++ exception: EEException at memory location 0x23EFE56C.
Exception thrown at 0x74BCDBE8 (KernelBase.dll) in devenv.exe: 0xE0434352 (parameters: 0x80004003, 0x00000000, 0x00000000, 0x00000000, 0x72E70000).
'devenv.exe' (Win32): Loaded 'C:\Windows\Microsoft.NET\Framework\v4.0.30319\diasymreader.dll'. Cannot find or open the PDB file.
CLR: Managed code called FailFast, saying "System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CreateEmptyCompilation()
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;BuildDeclarationCompilationFromScratchAsync&gt;d__29.MoveNext()"</Description>
    <CreatedDate>24/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21053</IssueID>
    <Title>Please update build instructions for roslyn</Title>
    <Description>I have dotnet core 2.0 installed
```
&gt; dotnet --info
.NET Command Line Tools (2.0.0-preview2-006502)

Product Information:
 Version:            2.0.0-preview2-006502
 Commit SHA-1 hash:  07dfded669

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.16246
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\2.0.0-preview2-006502\

Microsoft .NET Core Shared Framework Host

  Version  : 2.0.0
  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d
```
but the build still fails.  
```
Build FAILED.

C:\Program Files (x86)\Microsoft Visual Studio\Preview\Enterprise\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets(57,5): error : The version of Microsoft.NET.Sdk used by this project is insufficient to support .NET Standard 2.0 which is required by this project's
references.  Please install version 2.0 or higher of the .NET Core SDK. [C:\source\roslyn\Open\src\Tools\RoslynPublish\RoslynPublish.csproj]
    0 Warning(s)
    1 Error(s)
```

Please list the version of dotnet core that needs to be installed for roslyn to build
</Description>
    <CreatedDate>22/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>21032</IssueID>
    <Title>Incorrect indentation between a regular comment and member of a class</Title>
    <Description>**Version Used**: 26717.1.d15rel

**Steps to Reproduce**:

1. Paste C# code

```C#
class Program
{
    // Must be a comment here, not code. Press Enter twice starting here $$

    public int x; // Must be code after
}
```

2. At the `$$`, press Enter twice

**Expected Behavior**: After each Enter, the caret should be in indented 4 positions

**Actual Behavior**: After the second Enter, the caret is indented 8 positions
</Description>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20976</IssueID>
    <Title>Usings used only for required for doc comments are considered unnecessary</Title>
    <Description>**Version Used**: 
VS d15rel 26617.01

**Steps to Reproduce**:
Create a C# file where the only reference to a namespace comes through a doc comment.

```csharp
using System;
using System.Collections.Generic;   // Not considered necessary

namespace ConsoleApp1
{
    class Program
    {
        /// &lt;summary&gt;
        /// Turns args into a &lt;see cref="List{T}"/&gt;
        /// &lt;/summary&gt;
        static void Main(string[] args)
        {
            Console.WriteLine(args.Length);
        }
    }
}
```

**Expected Behavior**:
All usings are considered required

**Actual Behavior**:
Usings used only by doc comments are considered unnecessary and will be removed by the remove/sort usings command.

Lightbulbs suggesting adding the using if you don't have it.
</Description>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20886</IssueID>
    <Title>Editorconfig rule to keep both braces on dedicated lines or both braces in original line</Title>
    <Description>What I really want is to enforce that either each brace is the only thing on its line, or both braces are in line with the preceding characters.

```c#
// Yes
public void Foo()
{
}

// No
public void Foo() {
}

// Yes
public void Foo() { }
```

Could we have a way to specify this?</Description>
    <CreatedDate>14/07/2017</CreatedDate>
    <ClosedDate>17/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20865</IssueID>
    <Title>Collapsed xml doc comment is missing a space</Title>
    <Description>**Version Used**: d15rel 26711.1

**Steps to Reproduce**:

```csharp
        /// &lt;summary&gt;
        /// A flag indicating whether the &lt;see cref="OnCompleted"/&gt; has been invoked.
        /// &lt;/summary&gt;
        private bool onCompletedInvoked;
```

**Expected Behavior**:

Collapsed appears like this:

```csharp
        /// &lt;summary&gt; A flag indicating whether the OnCompleted has been invoked.
        private bool onCompletedInvoked;
```

**Actual Behavior**:

Collapsed appears like this:

```csharp
        /// &lt;summary&gt; A flag indicating whether the OnCompletedhas been invoked.
        private bool onCompletedInvoked;
```

![image](https://user-images.githubusercontent.com/3548/28183170-51665f16-67c3-11e7-9ed4-fc6128372637.png)
</Description>
    <CreatedDate>13/07/2017</CreatedDate>
    <ClosedDate>14/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20845</IssueID>
    <Title>Allowing fixes to run during project load can lead to breaking projects</Title>
    <Description>![image](https://user-images.githubusercontent.com/4564579/28146337-f4ee860e-672d-11e7-837b-fb861bbf61be.png)

This seems to be due to CPS asynchronously actually loading projects in the background.  SO whne a fix tries to apply it will undo any of the changes that CPS has made in the intervening period.

We need a way to know if CPS is actually done so we can suppress fixes before then.  (Note: we also need some way to let the user know why things are suppressed since it will just seem like the product is broken).</Description>
    <CreatedDate>13/07/2017</CreatedDate>
    <ClosedDate>13/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20818</IssueID>
    <Title>CSharpEncapsulateField.EncapsulateThroughCommand is flakey</Title>
    <Description>Failed here: https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/lastCompletedBuild/testReport/Roslyn.VisualStudio.IntegrationTests.CSharp/CSharpEncapsulateField/EncapsulateThroughCommand/

```
Stacktrace

MESSAGE:
Assert.Contains() Failure\r\nNot found: public static int? Param { get =&gt; param; set =&gt; param = value; }\r\nIn value: \r\nnamespace myNamespace\r\n{\r\n class Program\r\n {\r\n private static int? param = 0;\r\n static void Main(string[] args)\r\n {\r\n param = 80;\r\n }\r\n }\r\n}
+++++++++++++++++++
STACK TRACE:
at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.Editor_OutOfProc.Verifier.TextContains(String expectedText, Boolean assertCaretPosition) at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpEncapsulateField.EncapsulateThroughCommand() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpEncapsulateField.cs:line 47
```</Description>
    <CreatedDate>12/07/2017</CreatedDate>
    <ClosedDate>12/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20800</IssueID>
    <Title>Code style to recommend to name arguments that are literals</Title>
    <Description>Relates to [non-trailing named arguments](https://github.com/dotnet/roslyn/issues/19890) feature.

It is common for code reviewers to ask to name arguments that use literals. For example, in `M(true, x);`.
With non-trailing named arguments, this can be done without polluting the remaining arguments that were not ambiguous.

@CyrusNajmabadi @Pilchie I'm separating this work item we had discussed into an issue, since this is the only one left, and it is not blocking 15.5.</Description>
    <CreatedDate>11/07/2017</CreatedDate>
    <ClosedDate>11/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20783</IssueID>
    <Title>ExtractMethodCodeRefactoringProvider unexpected false</Title>
    <Description>**Version Used**
Visual Studio Enterprise 2017 Version 15.2 (26430.15) Release
and Resharper 2017.1.3

**Steps to Reproduce**:
unknown
Writing XUnit tests within .Net Framework 4.6.1
with local function

**Expected Behavior**:
no exception

**Actual Behavior**:
Exception thrown:

```
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

(Edited by @sharwell: stack trace formatting)</Description>
    <CreatedDate>11/07/2017</CreatedDate>
    <ClosedDate>11/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20779</IssueID>
    <Title>Cannot navigate to the symbol under the caret</Title>
    <Description>**Version Used**: VS 2017 Professional Version 15.2 (26430.14) Release

**Steps to Reproduce**:

1. Go to Definition of Class "AbpWebApplication" 


![image](https://user-images.githubusercontent.com/6952917/28052521-3af49404-663e-11e7-9039-6cab8c581b27.png)

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/6952917/28052798-9b799134-663f-11e7-951b-8e9a931b3169.png)


**Actual Behavior**:
I can work on VS 2015 Professional Version 14.0.25431.01 Update 3.
![image](https://user-images.githubusercontent.com/6952917/28052768-7fa42550-663f-11e7-902f-50774de60246.png)
</Description>
    <CreatedDate>11/07/2017</CreatedDate>
    <ClosedDate>11/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20672</IssueID>
    <Title>The is pattern matching on constraint type</Title>
    <Description>**Version Used**: 
Visual Studio 2017 
Version 15.2 (26430.14) Release

**Steps to Reproduce**:
The following code works:
````csharp
public class Person { }
public class Parent : Person { }
public class Program
{
    public static void Test&lt;TPerson&gt;(TPerson person) where TPerson : Person
    {
        if(person is Parent)
        {
             var parent = person as Parent;
        }
    }
}
````
The following code raises an error `An expression of type TPerson cannot be handled by a pattern of type Parent`:
````csharp
public class Person { }
public class Parent : Person { }
public class Program
{
    public static void Test&lt;TPerson&gt;(TPerson person) where TPerson : Person
    {
        if(person is Parent parent)
        {
        }
    }
}
````</Description>
    <CreatedDate>06/07/2017</CreatedDate>
    <ClosedDate>06/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20629</IssueID>
    <Title>TemporaryStorageServiceFactory IOException crashes VS</Title>
    <Description>**Version Used**: 2.2.0.61624

**Steps to Reproduce**: Deterministic steps not available at this time, I will try to gather more information. Unfortunately I do not have a memory dump that I can share.

1. Navigating in VS while a C# project is open.

**Expected Behavior**: No crash.

**Actual Behavior**: Crash with the stack trace in the finalizer thread:

```
Exception object: 8e363830
Exception type:   System.IO.IOException
Message:          Attempt to access invalid address.
```

```
0:005&gt; !clrstack
OS Thread Id: 0xa12c (5)
Child SP       IP Call Site
05c9f7ac 7416b802 [HelperMethodFrame: 05c9f7ac] 
05c9f85c 61cce92b System.IO.__Error.WinIOError(Int32, System.String)
05c9f8bc 618788b1 System.IO.MemoryMappedFiles.MemoryMappedView.Flush(IntPtr)
05c9f8f8 6187878e System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush()
05c9f908 618786d6 System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(Boolean)
05c9f934 21c04d7a Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory+MemoryMappedInfo.StreamDisposed()
05c9f960 21c04d13 Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory+MemoryMappedInfo+SharedReadableStream.Dispose(Boolean)
05c9f96c 21c05392 Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory+MemoryMappedInfo+SharedReadableStream.Finalize()
05c9fb90 72fa0a53 [DebuggerU2MCatchHandlerFrame: 05c9fb90] 
```

Line that throws: https://github.com/dotnet/roslyn/blob/6969b516a24b460e269b1ae2be09d8c4cd220c27/src/Workspaces/Core/Desktop/Workspace/Host/TemporaryStorage/TemporaryStorageServiceFactory.MemoryMappedFiles.cs#L125
</Description>
    <CreatedDate>04/07/2017</CreatedDate>
    <ClosedDate>04/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20503</IssueID>
    <Title>Roslyn crashes on 'out _' when constructing expression tree</Title>
    <Description>**Version Used**: 
dotnet sdk 1.0.4

```
c:\Program Files\dotnet\sdk\1.0.4\Roslyn&gt;runcsc /version
2.0.0.61427
```

**Steps to Reproduce**:
Compile following code:

```
using System;
using System.Linq.Expressions;

public class Test
{
    public void Method(out int parameter)
    {
        parameter = 1;
    }
    
    public void Crash()
    {
        Expression&lt;Action&lt;Test&gt;&gt; crashes = t =&gt; t.Method(out _); // when this line is commented, compilation succeeds
        
        int tmp;
        Expression&lt;Action&lt;Test&gt;&gt; works = t =&gt; t.Method(out tmp);
    }
}
```

**Expected Behavior**:
CS8198 -  An expression tree may not contain an out argument variable declaration.

or

CS8205 - An expression tree may not contain a discard.

**Actual Behavior**:
crashes csc.exe - 
```
C:\Program Files\dotnet\sdk\1.0.4\Roslyn\Microsoft.CSharp.Core.targets(71,5): error MSB6006: C:\Program Files\dotnet\sdk\1.0.4\Roslyn\RunCsc.cmd" exited with code 255. [E:\tmp\vscrash\vscrash.csproj]
```

</Description>
    <CreatedDate>28/06/2017</CreatedDate>
    <ClosedDate>06/07/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20442</IssueID>
    <Title>[FeatureRequest] Markdown support for completion items</Title>
    <Description>In VS4Mac we display completion items sometimes differently:

* Obsolete members are strikethrough
* Members show their return type at the right side with a smaller font
* More advanced use cases like the formatting completion show a small description

We're using pango markup for these features - would be really nice if we could get either markdown support or some properties.

ATM we have only these 3 use cases: strikethrough, right side description and small description beside the element. That could be covered with properties alone.
</Description>
    <CreatedDate>26/06/2017</CreatedDate>
    <ClosedDate>29/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20426</IssueID>
    <Title>EditorConfig: How to eliminate multiple consecutive blank lines?</Title>
    <Description>If I have the following:

```
int Foo(int a, int b)
{
  

    return a + b;
}
```

Is there any rule that will either warn me or automatically format it to:

```
int Foo(int a, int b)
{
    return a + b;
}
```
?

Thanks!</Description>
    <CreatedDate>23/06/2017</CreatedDate>
    <ClosedDate>23/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20423</IssueID>
    <Title>How do I customize the entries in the "fix all" preview window?</Title>
    <Description>When my code analyzer suggests a fix I can do a "fix all in this document" action, which will then show the preview window.

Is it possible to change the strings that are displayed in this list?
My code fix wraps string literals and string interpolations in a function call and I would like to display only the string that gets wrapped in the list, not the "full" line and how it will look like after the change.

If its unclear what I'm talking about, I mean the entries in this window:
![](http://i.imgur.com/QgEpTbG.png)</Description>
    <CreatedDate>23/06/2017</CreatedDate>
    <ClosedDate>23/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20389</IssueID>
    <Title>Incorrect "use throw expression" refactoring</Title>
    <Description>**Version Used**: 
2.2.0.61624

**Steps to Reproduce**:

```cs
using System;
using System.Collections;

namespace Test
{
    public class Program
    {
        public static void Main()
        {
        }
    }

    public class DirectoryAttribute : CollectionBase
    {
        public object this[int index]
        {
            get =&gt; List[index];
            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("value");
                }
                else if (!(value is string) &amp;&amp; !(value is byte[]) &amp;&amp; !(value is Uri))
                {
                    throw new ArgumentException("!!", nameof(value));
                }

                List[index] = value;
            }
        }
    }
}
```

**Expected Behavior**:
No refactoring provided

**Actual Behavior**:
![untitled](https://user-images.githubusercontent.com/1275900/27429742-5d854e46-5770-11e7-859f-6e72f203133d.png)


</Description>
    <CreatedDate>22/06/2017</CreatedDate>
    <ClosedDate>22/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20385</IssueID>
    <Title>[Suggestion] Auto insert brackets in completion</Title>
    <Description>In XS we had a feature bracket auto insertion in comletion list.

Assume that you've a method Foo and complete it with tab or return you end up with:

Foo|

Now in XS with the feature you end up with Foo(|) or Foo()| depending of Foo takes parameters or not. I had some logic to guess where delegates could be so that evnt += Foo| didn't insert the brackets as well as some other places where delegates could be expected.

But usually that was very nice for typing.</Description>
    <CreatedDate>22/06/2017</CreatedDate>
    <ClosedDate>22/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20303</IssueID>
    <Title>Find All References separately for property getter/setters</Title>
    <Description>
I'd like to put cursor on `set` keyword and Find All References  only for the  setter. The same for getter.

Currently I have to scan through all the refs.
</Description>
    <CreatedDate>18/06/2017</CreatedDate>
    <ClosedDate>19/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20238</IssueID>
    <Title>Analyzer-generated warnings disappear from Error List after a few seconds</Title>
    <Description>**Version Used**: d15rel 26612.0

**Steps to Reproduce**:

```
git clone https://github.com/Microsoft/vs-mef
cd vs-mef\src
git checkout 98494bf5abd722bcb6759090badb87be747ed777
msbuild /t:restore
Microsoft.VisualStudio.Composition.sln
```

Once in VS, build the solution (or at least the Microsoft.VisualStudio.Composition project). 

**Expected Behavior**:

The Error List initially populates with several warnings (consistent with warnings in the output window).
![image](https://user-images.githubusercontent.com/3548/27188468-1794806e-51a3-11e7-8322-ef8b07bd90fa.png)


**Actual Behavior**:

After the Error List populates, perhaps about 30 seconds later, it clears all warnings and they don't come back.
![image](https://user-images.githubusercontent.com/3548/27188474-1ba66eec-51a3-11e7-9b47-706f9e3b1255.png)
</Description>
    <CreatedDate>15/06/2017</CreatedDate>
    <ClosedDate>16/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20202</IssueID>
    <Title>Exception on Rename</Title>
    <Description>See:

https://bugzilla.xamarin.com/show_bug.cgi?id=57435

```
class C
{
	static void Main ()
	{
	}

	static void Foooo ((int a, string ta) arg) // Navigate to "ta" and do Refactor-&gt;Rename. The tuple element is renamed but no references are renamed
	{
		arg.ta.Trim ();
		return;
	}
}
```
-------------------------
System.NullReferenceException: Object reference not set to an instance of an object
  at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+&lt;AddDeclarationConflictsAsync&gt;d__9.MoveNext () [0x001cd] in &lt;e121da014f7f4d7d87221a90525b7651&gt;:0 
--- End of stack trace from previous location where exception was thrown ---
  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:151 
  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 
  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 
  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 
  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:447 
  at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;IdentifyConflictsAsync&gt;d__19.MoveNext () [0x00c73] in &lt;e121da014f7f4d7d87221a90525b7651&gt;:0 
--- End of stack trace from previous location where exception was thrown ---
  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:151 
  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 
  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 
  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 
  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[TResult].GetResult () [0x00000] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:535 
  at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;ResolveConflictsAsync&gt;d__18.MoveNext () [0x0034a] in &lt;e121da014f7f4d7d87221a90525b7651&gt;:0 
--- End of stack trace from previous location where exception was thrown ---
  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:151 
  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 
  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 
  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 
  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[TResult].GetResult () [0x00000] in &lt;59839ec1356848119f9f70e7b54fa03c&gt;:0 
  at Microsoft.CodeAnalysis.Rename.Renamer+&lt;RenameAsync&gt;d__3.MoveNext () [0x0013a] in &lt;e121da014f7f4d7d87221a90525b7651&gt;:0 
--- End of stack trace from previous location where exception was thrown ---
  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:151 
  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 
  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 
  at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /home/mkrueger/work/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 
  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[TResult].GetResult () [0x00000] in &lt;59839ec1356848119f9f70e7b54fa03c&gt;:0 
  at Microsoft.CodeAnalysis.Rename.Renamer+&lt;RenameSymbolAsync&gt;d__4.MoveNext () [0x00162] in &lt;e121da014f7f4d7d87221a90525b7651&gt;:0 
</Description>
    <CreatedDate>14/06/2017</CreatedDate>
    <ClosedDate>14/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20170</IssueID>
    <Title>Dogfooding crash in memory mapped files</Title>
    <Description>**Version Used**: 
VS 2017 Preview 15.3 P 2, + latest Roslyn signed VSIX: 2.3.06181101

**Steps to Reproduce**:

1. Had Roslyn.sln open, rebased my branch to get the latest changes from master (but there weren't any).

**Actual Behavior**:
VS Crash.  

**Dump:**
`"\\mlangfs1\public\kevinpi\TemporaryStorageAccessDenied.dmp"`

**Callstack:**
```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.AccessViolationException
   at Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory+MemoryMappedInfo+SharedReadableStream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.&lt;ReadValue&gt;b__25_0()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.ThreadPoolTaskScheduler.LongRunningThreadWork(System.Object)
   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Threading.ThreadHelper.ThreadStart(System.Object)
```</Description>
    <CreatedDate>12/06/2017</CreatedDate>
    <ClosedDate>12/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20164</IssueID>
    <Title>Exception compiling iterator of tuples with Enum</Title>
    <Description>**Version Used**:  [Example](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYAWAbgFgAoauAOwFcx8BRRsI6gb2oEgIk+YIIDG1AL7Vq2AEz4Awtz7YAzISIqAPAAo2TIvgEBLOjCEBKAHytTCI3CjbzfHlV69iB7AHZ823exE5kSCMuaUbpJUUUA) 19 May 2017

Probably related to: https://github.com/dotnet/roslyn/issues/14888

**Steps to Reproduce**:

```
using System.Collections.Generic;

enum Enum1
{
	a, b, c
}

class C
{
	public IEnumerable&lt;(Enum1 a,int b)&gt; Entries()
	{
		yield return ((Enum1)1, 2);
	}
}
```

**Expected Behavior**:
Compiles fine.

**Actual Behavior**:
warning AD0001: 
Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' 

threw an exception of type 'System.InvalidCastException' 

with message 'Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundTupleLiteral' 

to type 'Microsoft.CodeAnalysis.CSharp.BoundConvertedTupleLiteral'.'.</Description>
    <CreatedDate>11/06/2017</CreatedDate>
    <ClosedDate>11/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20160</IssueID>
    <Title>New Refactoring Request: auto-property to property with backing field</Title>
    <Description>It would be really nice if I could right-click on an auto-property and select:
Quick Actions &amp; Refactorings &gt; Convert to Standard Property

This would convert a line of code FROM:
public long TemplateId {get; set;} = 0;

TO:

private long __TemplateId = 0;
public long TemplateId {
get {
return __TemplateId;
}
set {
__TemplateId = value;
}
}

</Description>
    <CreatedDate>11/06/2017</CreatedDate>
    <ClosedDate>12/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20136</IssueID>
    <Title>Feature request: allow anonymous types to be used as return types and generic arguments</Title>
    <Description>With C# 7, we can now use named tuples as method return types and generic arguments, which is great. However, these limitations are still imposed for anonymous types. 

I propose that we should allow for "naming" anonymous types in these contexts. For example:

```
// anonymous types are still internal; so they wouldn't
// be able to appear in public signatures of public classes
internal { int A, string B } Foo()
{
    var list = new List&lt;{ int A, string B }&gt;();
     // do stuff
    return list.First();
}
```

Why should this be added when we can already do this via tuples? I see two main reasons:

* Reflection-based APIs: because tuple property names aren't accessible via reflection, we can't do:
```
JsonConvert.DeserializeObject&lt;(int A, string B)&gt;("{ A: 2, B: 'a' }");
```
This is frustrating because this kind of syntax would be ideal for many cases (deserialization, mapping SQL queries back to ad-hoc objects). We have a workaround today of using type inference:
```
JsonConvert.DeserializeAnonymousType("{A: 2, B: 'a' }", new { A = default(int), B = default(string) })
```
My experience, however, has been that many developers find this confusing.

* Consistency: anonymous types are very similar to tuples: being able to use them in similar ways seems like it rounds out a jagged edge in the language rather than bloating it with yet another thing to learn.</Description>
    <CreatedDate>09/06/2017</CreatedDate>
    <ClosedDate>15/12/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20094</IssueID>
    <Title>IDE stop responding completely while a big C# file was edited.</Title>
    <Description>I edited a big C# file. IDE got slower and slower to respond. Eventually it stopped responding at all, I had to kill the process. I captured a dump before killing the process, it is available upon request.

CC @Pilchie </Description>
    <CreatedDate>07/06/2017</CreatedDate>
    <ClosedDate>14/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>20066</IssueID>
    <Title>Roslyn doesn't select all matching identifiers when in a tuple deconstruction</Title>
    <Description>**Version Used**: d15rel 26602.0

When the caret is on the local variable within a ValueTuple deconstruction, only that identifier instance is highlighted:
![image](https://user-images.githubusercontent.com/3548/26860668-022da1c0-4af4-11e7-8b77-e7ef5a135207.png)

But when I select the same local variable in another context, all references to that identifier (including the one in the tuple deconstruction) are highlighted:
![image](https://user-images.githubusercontent.com/3548/26860673-0b81b9a0-4af4-11e7-9371-7059574299d3.png)
</Description>
    <CreatedDate>07/06/2017</CreatedDate>
    <ClosedDate>08/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19971</IssueID>
    <Title>Add a code fix/format to fix modifier ordering</Title>
    <Description>Unlike VB, C# doesn't fix up the ordering of a modifier:

``` C#
    internal partial static class ProjectLoggerExtensions
    {
        public static ILifetime&lt;IProjectLogger&gt; BeginLoggingContext(this IProjectLogger logger)
        {
            Requires.NotNull(logger, nameof(logger));

            return new ProjectLoggingContext(logger);
        }
    }

```

Above partial needs to go before class. I never remember the ordering, so we can we auto-fix this or give me a code fix so that I can just CTRL+. then ENTER to fix it immediately.</Description>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>02/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19880</IssueID>
    <Title>VS crashes randomly due to Environment.FailFast in Roslyn</Title>
    <Description>**Version Used**: `VS 15.3.0 Preview 1.0 [26526.1.d15rel]`

VS crashed due to Roslyn calling `Environment.FailFast`. I'm not really sure what I was doing to cause it, VS just suddenly disappeared. I wish I had a clearer repro, but I can't repro it again and I don't remember precisely what I was doing. Still, it seems odd that Roslyn would be calling `Environment.FailFast` in VS... the user experience is really jarring, since VS just vanishes with no indication of what went wrong.

Event Log shows:

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.DocumentHighlighting.CSharpDocumentHighlightsService.&lt;GetAdditionalReferencesAsync&gt;d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&lt;FilterAndCreateSpansAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&lt;GetTagsForReferencedSymbolAsync&gt;d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&lt;GetDocumentHighlightsInCurrentProcessAsync&gt;d__2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&lt;GetDocumentHighlightsAsync&gt;d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&lt;&lt;TryNewServiceAsync&gt;b__14_0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&lt;TryServiceAsync&gt;d__15`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&lt;ProduceTagsAsync&gt;d__12.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.&lt;RecomputeTagsAsync&gt;d__83.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)
   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;RecomputeTagsAsync&gt;d__83[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider+&lt;ProduceTagsAsync&gt;d__12.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider+&lt;TryServiceAsync&gt;d__15`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.Editor.DocumentHighlights, Microsoft.CodeAnalysis.EditorFeatures, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.Editor.DocumentHighlights, Microsoft.CodeAnalysis.EditorFeatures, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider+&lt;&lt;TryNewServiceAsync&gt;b__14_0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.DocumentHighlighting.DocumentHighlights, Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.DocumentHighlighting.DocumentHighlights, Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService+&lt;GetDocumentHighlightsAsync&gt;d__0.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.DocumentHighlighting.DocumentHighlights, Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.DocumentHighlighting.DocumentHighlights, Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService+&lt;GetDocumentHighlightsInCurrentProcessAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.DocumentHighlighting.DocumentHighlights, Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.DocumentHighlighting.DocumentHighlights, Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].SetException(System.Exception)
   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService+&lt;GetTagsForReferencedSymbolAsync&gt;d__4.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder+&lt;FindReferencesAsync&gt;d__13.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine+&lt;FindReferencesAsync&gt;d__10.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine+&lt;ProcessAsync&gt;d__11.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine+&lt;ProcessProjectsAsync&gt;d__24.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine+&lt;ProcessProjectAsync&gt;d__25.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine+&lt;ProcessProjectAsync&gt;d__26.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine+&lt;ProcessProjectAsync&gt;d__27.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Threading.Tasks.Task+WhenAllPromise.Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>30/05/2017</CreatedDate>
    <ClosedDate>31/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19858</IssueID>
    <Title>CSharpWinForms.ChangeControlProperty is flakey</Title>
    <Description>See https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/4779/</Description>
    <CreatedDate>30/05/2017</CreatedDate>
    <ClosedDate>30/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19856</IssueID>
    <Title>"Enable solution analysis" doesn't show up in Options search results</Title>
    <Description>![image](https://cloud.githubusercontent.com/assets/1103906/26565748/677807be-4531-11e7-9747-c8bd0327592c.png)
</Description>
    <CreatedDate>30/05/2017</CreatedDate>
    <ClosedDate>30/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19824</IssueID>
    <Title>Integration tests failed with error System.AppDomainUnloadedException: Attempted to access an unloaded AppDomain.</Title>
    <Description>https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_release_vs-integration_prtest/4689/

Jenkins reports
"xunit produced no error output but had exit code 1"

Exception in log:
```
System.AppDomainUnloadedException: Attempted to access an unloaded AppDomain.
```

Full log:
```
xUnit.net Console Runner (32-bit .NET 4.0.30319.42000)
  Discovering: Roslyn.VisualStudio.IntegrationTests
  Discovered:  Roslyn.VisualStudio.IntegrationTests
  Starting:    Roslyn.VisualStudio.IntegrationTests
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListNetCore.ErrorList
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListNetCore.ErrorList [SKIP]
      https://github.com/dotnet/roslyn-project-system/issues/1825
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListNetCore.ErrorsDuringMethodBodyEditing
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListNetCore.ErrorsDuringMethodBodyEditing [SKIP]
      https://github.com/dotnet/roslyn-project-system/issues/1825
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesDesktop.ProjectProperties
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesDesktop.ProjectReference
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesDesktop.MetadataReference
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesDesktop.OpenCSharpThenVBSolution
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.ProjectProperties
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.ProjectProperties [SKIP]
      https://github.com/dotnet/roslyn-project-system/issues/1825
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.OpenCSharpThenVBSolution
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.OpenCSharpThenVBSolution [SKIP]
      https://github.com/dotnet/roslyn-project-system/issues/1825
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.ProjectReference
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.ProjectReference [SKIP]
      https://github.com/dotnet/roslyn/issues/19223
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.MetadataReference
    Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.MetadataReference [SKIP]
      https://github.com/dotnet/roslyn-project-system/issues/1826
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting [SKIP]
      https://github.com/dotnet/roslyn/issues/19059
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicKeywordHighlighting.NavigationBetweenKeywords
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicEncapsulateField.EncapsulateThroughCommand
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicEncapsulateField.EncapsulateThroughLightbulbDefinitionsOnly
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicEncapsulateField.EncapsulateThroughLightbulbIncludingReferences
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.VerifyOption
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.VerifyNavBar
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.CodeSpit
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicF1Help.F1Help
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicOrganizing.RemoveAndSort
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicOutlining.Outlining
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicExtractMethod.ExtractViaCodeAction
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicExtractMethod.SimpleExtractMethod
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicExtractMethod.ExtractViaCodeActionWithMoveLocal
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.MultiProjectDebuggingWhereNotAllModulesAreLoaded
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.MultiProjectDebuggingWhereNotAllModulesAreLoaded [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.EditLambdaExpression
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.EditLambdaExpression [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.DocumentStateTrackingReadonlyInRunMode
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.DocumentStateTrackingReadonlyInRunMode [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.WatchWindowUpdatesCorrectlyDuringEnC
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.WatchWindowUpdatesCorrectlyDuringEnC [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.UpdateActiveStatementLeafNode
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.UpdateActiveStatementLeafNode [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.AddTryCatchAroundActiveStatement
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.AddTryCatchAroundActiveStatement [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.EnCWhileDebuggingFromImmediateWindow
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.EnCWhileDebuggingFromImmediateWindow [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.LocalsWindowUpdatesCorrectlyDuringEnC
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.LocalsWindowUpdatesCorrectlyDuringEnC [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEndConstruct.InterfaceToClassFixup
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEndConstruct.CaseInsensitveSubToFunction
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEndConstruct.EndConstruct
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEndConstruct.IntelliSenseCompletedWhile
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.EvaluateInvalidExpressions
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.ValidateLocalsWindow
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.StateMachineTypeParameters
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.EvaluatePrimitiveValues
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.EvaluateLambdaExpressions
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.EvaluateLambdaExpressions [SKIP]
      https://github.com/dotnet/roslyn/issues/19526
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.CommitOnFocusLost
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.CommitOnFocusLostDoesNotFormatWithPrettyListingOff
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.UndoWithoutEndConstruct
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.CommitOnSave
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.CaseCorrection
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.UndoWithEndConstruct
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicSquigglesDesktop.VerifySemanticErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicSquigglesDesktop.VerifySyntaxErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicSquigglesNetCore.VerifySemanticErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicSquigglesNetCore.VerifySemanticErrorSquiggles [SKIP]
      1825
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicSquigglesNetCore.VerifySyntaxErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicSquigglesNetCore.VerifySyntaxErrorSquiggles [SKIP]
      1825
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListDesktop.ErrorList
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListDesktop.ErrorsDuringMethodBodyEditing
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAddMissingReference.InvokeSomeFixesInVisualBasicThenVerifyReferences
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAddMissingReference.VerifyAvailableCodeActions
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.ParenthesesTypeoverAfterStringLiterals
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Paren_Overtyping
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.CompletionWithIntelliSenseWindowUp
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.LineCommittingIssue
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Nested_AllKinds_1
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.VirtualWhitespaceIssue
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Negative_NoCompletionInComments
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Bracket_Insertion
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Bracket_Overtyping
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Negative_NoCompletionInXmlDocComment
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Braces_Overtyping
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Negative_NoCompletionInXmlDocCommentAtEndOfTag
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.CompletionAtTheEndOfFile
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Negative_NoCompletionInStringLiterals
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.DoubleQuote_InsertionAndTabCompletion
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Paren_InsertionAndTabCompleting
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Nested_AllKinds_2
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Braces_OnReturnNoFormattingOnlyIndentationBeforeCloseBrace
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicAutomaticBraceCompletion.Braces_InsertionAndTabCompleting
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicBuild.BuildProject
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicClassification.Verify_Color_Of_Some_Tokens
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicClassification.Semantic_Classification
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFormatting.VerifyFormattingIndent
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFormatting.VerifyCaseCorrection
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFormatting.ShiftEnterWithIntelliSenseAndBraceMatching
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFormatting.ShiftEnterWithIntelliSenseAndBraceMatching [SKIP]
      https://github.com/dotnet/roslyn/issues/18065
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicCodeActions.GenerateMethodInClosedFile
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExtractInterfaceDialog.CheckFileName
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExtractInterfaceDialog.CoreScenario
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateEqualsAndGetHashCodeDialog.VerifyCodeRefactoringOfferedAndCanceled
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateEqualsAndGetHashCodeDialog.VerifyCodeRefactoringOfferedAndAccepted
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateConstructorDialog.VerifyReordering
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateConstructorDialog.VerifyCodeRefactoringOfferedAndCanceled
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateConstructorDialog.VerifyDeselect
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateConstructorDialog.VerifyCodeRefactoringOfferedAndAccepted
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicChangeSignatureDialog.VerifyRefactoringCancelled
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicChangeSignatureDialog.VerifyCodeRefactoringOffered
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicChangeSignatureDialog.VerifyCodeRefactoringOffered [SKIP]
      https://github.com/dotnet/roslyn/issues/17393
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicChangeSignatureDialog.VerifyReorderParameters
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicChangeSignatureDialog.VerifyReorderAndRemoveParametersAcrossLanguages
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFindReferences.FindReferencesToSharedField
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFindReferences.FindReferencesToSharedField [SKIP]
      https://github.com/dotnet/roslyn/issues/17631
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFindReferences.FindReferencesToLocals
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicFindReferences.FindReferencesToLocals [SKIP]
      https://github.com/dotnet/roslyn/issues/17631
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateTypeDialog.CheckFoldersPopulateComboBox
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateTypeDialog.CheckFoldersPopulateComboBox [SKIP]
      https://github.com/dotnet/roslyn/issues/17680
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateTypeDialog.SameProject
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateTypeDialog.BasicToCSharp
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGoToImplementation.SimpleGoToImplementation
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.TypeAVariableDeclaration
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.TypeLeftAngleAfterImports
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.EnterTriggerCompletionListAndImplementInterface
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.IntelliSenseTriggersOnParenWithBraceCompletionAndCorrectUndoMerging
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.DismissAndRetriggerIntelliSenseOnEquals
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.DismissIntelliSenseOnApostrophe
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.CtrlAltSpaceOption
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.RemoveEventHandler
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.TestMyIntelliSense
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.RenameControl
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlProperty
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.AddControl
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.DeleteControl
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.AddClickHandler
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlPropertyInCode
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeAccessibility
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicQuickInfo.QuickInfo1
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicQuickInfo.International
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicNavigateTo.NavigateTo
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGoToDefinition.ObjectBrowserNavigation
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGoToDefinition.GoToClassDeclaration
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateFromUsage.GenerateTypeInNewFile
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGenerateFromUsage.GenerateLocal
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicRename.VerifyLocalVariableRename
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicRename.VerifyLocalVariableRenameWithStringsUpdated
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicRename.VerifyLocalVariableRenameWithCommentsUpdated
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicRename.VerifyOverloadsUpdated
    Roslyn.VisualStudio.IntegrationTests.Other.CSharpAddMissingReference.VerifyAvailableCodeActions
    Roslyn.VisualStudio.IntegrationTests.Other.CSharpAddMissingReference.InvokeSomeFixesInCSharpThenVerifyReferences
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReferenceHighlighting.Highlighting
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReferenceHighlighting.Navigation
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReferenceHighlighting.WrittenReference
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReferenceHighlighting.WrittenReference [SKIP]
      https://github.com/dotnet/roslyn/issues/19059
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpEncapsulateField.EncapsulateThroughCommand
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpEncapsulateField.EncapsulateThroughLightbulbIncludingReferences
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpEncapsulateField.EncapsulateThroughLightbulbDefinitionsOnly
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpF1Help.F1Help
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.BackspaceBehavesLikeDelete
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.TopRightBottomLeftSymbolToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.BottomLeftTopRightSelection
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.LeftToRightReversedTypeCharacter
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.Backspace
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.BottomLeftTopRightSymbolToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.TopLeftBottomRightSymbolToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.BottomRightTopLeftSymbolToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.LeftToRightReversedDelete
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.BottomRightTopLeftPromptToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.LeftToRightReversedBackspace
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.PrimaryPromptLongerThanSecondaryZeroWidthNextToPromptSelection
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.TopRightBottomLeftPromptToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.BottomLeftTopRightPromptToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.TopLeftBottomRightSelection1
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.TopLeftBottomRightSelection2
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.TopRightBottomLeftSelection
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.SelectionTouchingSubmissionBuffer
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveBoxSelection.TopLeftBottomRightPromptToSymbol
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.FormatOnSemicolon
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.FormatSelection
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.PasteCodeWithLambdaBody
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.AlignOpenBraceWithMethodDeclaration
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.ShiftEnterWithIntelliSenseAndBraceMatching
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.ShiftEnterWithIntelliSenseAndBraceMatching [SKIP]
      https://github.com/dotnet/roslyn/issues/18065
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.PasteCodeWithLambdaBody3
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.PasteCodeWithLambdaBody2
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyReorderParameters
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyReorderParameters [SKIP]
      https://github.com/dotnet/roslyn/issues/17640
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyRemoveParameter
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyRemoveParameter [SKIP]
      https://github.com/dotnet/roslyn/issues/17680
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyCrossLanguageGlobalUndo
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyCrossLanguageGlobalUndo [SKIP]
      https://github.com/dotnet/roslyn/issues/17680
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyRefactoringCancelled
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyCodeRefactoringOffered
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpChangeSignatureDialog.VerifyCodeRefactoringOffered [SKIP]
      https://github.com/dotnet/roslyn/issues/17393
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGenerateFromUsage.GenerateLocal
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpClassification.VerifyProjectConfigChange
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpClassification.SemanticClassification
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpClassification.VerifyColorOfSomeTokens
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListDesktop.ErrorsDuringMethodBodyEditing
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListDesktop.ErrorLevelWarning
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListDesktop.ErrorLevelWarning [SKIP]
      https://github.com/dotnet/roslyn/issues/18996
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListDesktop.ErrorList
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListDesktop.ErrorList [SKIP]
      https://github.com/dotnet/roslyn/issues/18996
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorList
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorList [SKIP]
      https://github.com/dotnet/roslyn/issues/18996
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorsDuringMethodBodyEditing
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorsDuringMethodBodyEditing [SKIP]
      https://github.com/dotnet/roslyn/issues/19090
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorLevelWarning
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorLevelWarning [SKIP]
      https://github.com/dotnet/roslyn/issues/18996
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractInterfaceDialog.VerifySelectAndDeselectAllButtons
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractInterfaceDialog.VerifyCancellation
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractInterfaceDialog.CheckFileName
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractInterfaceDialog.OnlySelectedItemsAreGenerated
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFindReferences.FindReferencesToCtor
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFindReferences.FindReferencesToCtor [SKIP]
      https://github.com/dotnet/roslyn/issues/17634
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFindReferences.FindReferencesToString
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFindReferences.FindReferencesToLocals
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGoToImplementation.GoToImplementationFromMetadataAsSource
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGoToImplementation.SimpleGoToImplementation
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGoToImplementation.GoToImplementationOpensProvisionalTabIfDocumentNotOpen
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGenerateTypeDialog.CSharpToBasic
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGenerateTypeDialog.OpenAndCloseDialog
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGoToDefinition.GoToClassDeclaration
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGoToDefinition.GoToDefinitionWithMultipleResults
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpGoToDefinition.GoToDefinitionOpensProvisionalTabIfDocumentNotAlreadyOpen
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveAsyncOutput.VerifyPreviousAndNextHistory
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Paren_Overtyping
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.InteractionWithOverrideStubGeneration
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionAfterPragmaPreprocesser
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionAfterEndregionPreprocesser
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.SquareBracket_Overtyping
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.DoubleQuote_InsertionAndTabCompletion
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.AutoBraceCompleteDoesNotFormatBracePairInInitializers
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionInDisabledPreprocesser
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Paren_InsertionAndTabCompleting
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.AngleBracket_PossibleGenerics_InsertionAndCompletion
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.AutoBraceCompleteDoesNotFormatBracePairInObjectCreationExpression
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionInXmlDocComments
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.SquareBracket_Insertion
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionInMultiLineComments
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Braces_OnReturnNoFormattingOnlyIndentationBeforeCloseBrace
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionStringVerbatimStringOrCharLiterals
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.DoubleQuote_InsertionAndOvertyping
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Braces_InsertionAndTabCompleting
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Braces_OnReturnWithNonWhitespaceSpanInside
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.InteractionWithCompletionList
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Braces_Overtyping
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Nested_AllKinds
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionAfterRegionPreprocesser
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.SingleQuote_InsertionAndCompletion
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionAfterIfPreprocesser
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Braces_OnReturnOvertypingTheClosingBrace
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.AutoBraceCompleteFormatsBracePairInClassDeclarationAndAutoProperty
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAutomaticBraceCompletion.Negative_NoCompletionInSingleLineComments
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpBuild.BuildWithCommandLine
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpBuild.BuildWithCommandLine [SKIP]
      https://github.com/dotnet/roslyn/issues/18299
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpBuild.BuildProject
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.OrderFixesByCursorProximityRight
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.GFUFuzzyMatchAfterRenameTracking
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.InvokeDelegateWithConditionalAccessMultipleTimes
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.FastDoubleInvoke
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.ClassificationInPreviewPane
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.AddUsingExactMatchBeforeRenameTracking
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.SuppressionAfterRefactorings
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.OrderFixesByCursorProximityLeft
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.GenerateMethodInClosedFile
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.GenerateMethodInClosedFile [SKIP]
      https://github.com/dotnet/roslyn/issues/18295
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.CtrlSpace
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.VerifyCompletionListMembersOnStaticTypesAndCompleteThem
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.EnsureTheCaretIsVisibleAfterALongEdit
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.CompletionUsesTrackingPointsInTheFaceOfAutomaticBraceCompletion
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.XmlTagCompletion
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.AtNamespaceLevel
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.CommitOnLeftCurly
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.CtrlAltSpace
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.DismissOnSelect
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.XmlDocCommentIntelliSense
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.NavigatingWithDownKey
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.CommitOnShiftEnter
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.SpeculativeTInList
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.SignatureHelpShowsUp
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpIntelliSense.CtrlAltSpaceOption
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.TopLevelMethod
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.ForEachStatement
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.BclMathCall
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.BclConsoleCall
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.ForStatement
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.TypingHelpDirectiveWorks
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.TypingHelpDirectiveWorks [SKIP]
      https://github.com/dotnet/roslyn/issues/19232
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.WpfInteractionAsync
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.CutDeletePasteSelectAll
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyUndoAndRedo
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyExecuteInput
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyNewLineAndIndent
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyForceNewLineAndIndent
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyReturnIndentCurrentLine
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyCancelInput
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyMaybeExecuteInput
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyPreviousAndNextHistory
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpOrganizing.RemoveAndSort
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigationBar.TestSplitWindow
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigationBar.VerifyNavBar3
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigationBar.VerifyNavBar
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigationBar.VerifyOption
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigationBar.VerifyNavBar2
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpKeywordHighlighting.Foreach
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpKeywordHighlighting.PreprocessorConditionals
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpKeywordHighlighting.PreprocessorRegions
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpOutlining.OutliningConfigChange
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpOutlining.Outlining
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractMethod.SimpleExtractMethod
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractMethod.ExtractViaCodeActionWithMoveLocal
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractMethod.ExtractViaCodeAction
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplClassification.VerifyColorOfSomeTokens
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.DisabledCommandsPart1
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.VerifyCodeActionsNotAvailableInPreviousSubmission
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.International
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsSingleSubmissionVerifyRenameTagsShowUpWhenInvokedOnUnsubmittedText
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsMultipleSubmisionsVerifyRenameTagsGoAwayWhenInvokedOnUnsubmittedText
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.AddUsing
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.AddUsing [SKIP]
      https://github.com/dotnet/roslyn/issues/6587, No support of quick actions in ETA scenario
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsMultipleSubmisionsVerifyRenameTagsShowUpOnTypesWhenInvokedOnSubmittedText
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsMultipleSubmisionsVerifyRenameTagsOnRedefinedVariable
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsMultipleSubmisionsVerifyRenameTagsShowUpOnTypesWhenInvokedOnUnsubmittedText
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsMultipleSubmisionsVerifyRenameTagsShowUpOnUnsubmittedText
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.QualifyName
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.QualifyName [SKIP]
      https://github.com/dotnet/roslyn/issues/6587, No support of quick actions in ETA scenario
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsSingleSubmissionVerifyRenameTagsGoAway
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.HighlightRefsMultipleSubmisionsVerifyRenameTagsShowUpWhenInvokedOnSubmittedText
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.VerifyQuickInfoOnStringDocCommentsFromMetadata
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIdeFeatures.VerifyDefaultUsingStatements
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifyNoCrashOnEnter
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifyCompletionListForLoadMembers
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifyCorrectIntellisenseSelectionOnEnter
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifySharpLoadCompletionList
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifyCompletionListForAmbiguousParsingCases
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifyCommitCompletionOnTopLevel
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifySharpRCompletionList
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpReplIntellisense.VerifyCompletionListOnEmptyTextAtTopLevel
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyLocalDeclarationInCsxFileWithTheSameNameHidesImportedMembersFromHashR
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyLocalDeclarationWithTheSameNameHidesImportedMembersFromHashR
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyHashHelpDirectiveOutputNoSquigglesUnderHashHelp
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyHostCommandsCompletionList
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyAssembliesReferencedByDefault
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyHashReset
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifySquiggleAndErrorMessageUnderIncorrectDirective
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyHashLoadDirective
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.WorkspaceClearedAfterReset
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyDisplayCommandUsageOutputNoSquigglesUnderSlashHelp
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyHashRDirective
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyNoSquigglesErrorMessagesAndIntellisenseFeaturesContinueWorkingAfterReset
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyNoSquigglesErrorMessagesAndIntellisenseFeaturesContinueWorkingAfterReset [SKIP]
      https://github.com/dotnet/roslyn/issues/8281
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.InitializationAfterReset
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveDirectives.VerifyHashCls
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveFormsAndWpf.InteractiveWithDisplayFormAndWpfWindow
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpQuickInfo.QuickInfo_Documentation
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpQuickInfo.International
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpQuickInfo.QuickInfo_MetadataDocumentation
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpQuickInfo.SectionOrdering
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ExecuteMultipleLineSubmissionInInteractiveWhilePreservingReplSubmissionBuffer
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.SendMultipleLineBlockSelectedSubmissionToInteractive
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ResetInteractiveFromProjectAndVerify
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ResetInteractiveFromProjectAndVerify [SKIP]
      https://github.com/dotnet/roslyn/issues/19441
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ExecuteInInteractiveWithKeyboardShortcut
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.SendToInteractiveWithKeyboardShortcut
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ExecuteSingleLineSubmissionInInteractiveWhilePreservingReplSubmissionBuffer
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ExecuteMultipleLineBlockSelectedSubmissionInInteractiveWhilePreservingReplSubmissionBuffer
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.SendMultipleLineSubmissionToInteractive
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.AddAssemblyReferenceAndTypesToInteractive
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.SendSingleLineSubmissionToInteractive
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigateTo.NavigateTo
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigateTo.NavigateTo [SKIP]
      https://github.com/dotnet/roslyn/issues/19530
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyMultiFileRename
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyLocalVariableRenameWithCommentsUpdated
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyRenameInStandaloneFiles
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyLocalVariableRename
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyRenameCancellation
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyLocalVariableRenameWithStringsUpdated
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyRenameUndo
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyCrossProjectRename
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpRename.VerifyOverloadsUpdated
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSignatureHelp.GenericMethodSignatureHelp2
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSignatureHelp.GenericMethodSignatureHelp1
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSignatureHelp.MethodSignatureHelp
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesDesktop.VerifySyntaxErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesDesktop.VerifySyntaxErrorSquiggles [SKIP]
      https://github.com/dotnet/roslyn/issues/19091
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesDesktop.VerifySemanticErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesDesktop.VerifySemanticErrorSquiggles [SKIP]
      https://github.com/dotnet/roslyn/issues/19091
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesNetCore.VerifySemanticErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesNetCore.VerifySemanticErrorSquiggles [SKIP]
      https://github.com/dotnet/roslyn/issues/19091
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesNetCore.VerifySyntaxErrorSquiggles
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesNetCore.VerifySyntaxErrorSquiggles [SKIP]
      https://github.com/dotnet/roslyn/issues/19091
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.RenameControl
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.AddClickHandler
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.DeleteControl
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeAccessibility
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlProperty
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.RemoveEventHandler
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlPropertyInCode
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.AddControl
    Roslyn.VisualStudio.IntegrationTests.CSharp.BasicSignatureHelp.GenericMethodSignatureHelp1
    Roslyn.VisualStudio.IntegrationTests.CSharp.BasicSignatureHelp.JaggedMultidimensionalArray
    Roslyn.VisualStudio.IntegrationTests.CSharp.BasicSignatureHelp.VerifyActiveParameterChanges
    Roslyn.VisualStudio.IntegrationTests.CSharp.BasicSignatureHelp.MethodSignatureHelp
    Roslyn.VisualStudio.IntegrationTests.CSharp.BasicSignatureHelp.BufferTextReplacedWithSigHelpActiveWithLengthOfUpdatedTextLessThanPositionOfInvocationExpression
    Roslyn.VisualStudio.IntegrationTests.CSharp.BasicSignatureHelp.GenericMethodSignatureHelp_InvokeSighelp
    Roslyn.VisualStudio.IntegrationTests.CSharp.BasicSignatureHelp.GenericMethodSignatureHelp2
  Finished:    Roslyn.VisualStudio.IntegrationTests
System.AppDomainUnloadedException: Attempted to access an unloaded AppDomain.
```</Description>
    <CreatedDate>27/05/2017</CreatedDate>
    <ClosedDate>30/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19803</IssueID>
    <Title>"is null" expression efficiency</Title>
    <Description>#With the new ability to write `x is null` in C# 7, I anticipate questions on whether this is preferable/equivalent to `x == null` as we role out C# 7 at my workplace.

Looking at the generated IL code, it seems that `x == null` generally does a better job since `x is null` always calls `Object.Equals(a, b)`. This seems especially costly for `Nullable&lt;T&gt;`, since in that case we get a boxing operation. Interestingly, the null pattern in switch statements does not seem to have this issue.

For the sake of simplicity, it would be nice if `x is null` had the exact same performance as `x == null` and 
`case null:`, avoiding a (very minor) performance gotcha.

**Version Used**: C# 7 (via LinqPad)

**Steps to Reproduce**:

1.  I wrote the following C# code and compiled in LinqPad with optimization on:

```
public class Program
{
	public static void Main(string[] args) { }

	public bool IsNullA(int? a)
	{
		switch (a)
		{
			case null: return true;
			default: return false;
		}
	}

	public bool IsNullB(int? a)
	{
		return a is null;
	}

	public bool IsNullC(object s)
	{
		switch (s)
		{
			case null: return true;
			default: return false;
		}
	}

	public bool IsNullD(object s)
	{
		return s is null;
	}
}
```

2.  This produces the following IL:

```
Program.IsNullA:
IL_0000:  ldarg.1     
IL_0001:  stloc.0     
IL_0002:  ldloca.s    00 
IL_0004:  call        System.Nullable&lt;System.Int32&gt;.get_HasValue
IL_0009:  brfalse.s   IL_0015
IL_000B:  ldloca.s    00 
IL_000D:  call        System.Nullable&lt;System.Int32&gt;.GetValueOrDefault
IL_0012:  stloc.1     
IL_0013:  br.s        IL_0017
IL_0015:  ldc.i4.1    
IL_0016:  ret         
IL_0017:  ldc.i4.0    
IL_0018:  ret         

Program.IsNullB:
IL_0000:  ldloca.s    00 
IL_0002:  initobj     System.Nullable&lt;System.Int32&gt;
IL_0008:  ldloc.0     
IL_0009:  box         System.Nullable&lt;System.Int32&gt;
IL_000E:  ldarg.1     
IL_000F:  box         System.Nullable&lt;System.Int32&gt;
IL_0014:  call        System.Object.Equals
IL_0019:  ret         

Program.IsNullC:
IL_0000:  ldarg.1     
IL_0001:  stloc.0     
IL_0002:  ldloc.0     
IL_0003:  brtrue.s    IL_0007
IL_0005:  ldc.i4.1    
IL_0006:  ret         
IL_0007:  ldc.i4.0    
IL_0008:  ret         

Program.IsNullD:
IL_0000:  ldnull      
IL_0001:  ldarg.1     
IL_0002:  call        System.Object.Equals
IL_0007:  ret        
```

**Expected Behavior**:
`IsNullA` should use a `HasValue` call for the null check and `IsNullD` should use a branch instruction.

**Actual Behavior**:
`IsNullA` and `IsNullD` both use `Object.Equals(a, b)`.
</Description>
    <CreatedDate>26/05/2017</CreatedDate>
    <ClosedDate>26/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19750</IssueID>
    <Title>IDE0009 never reported for methods in VB</Title>
    <Description>**Version Used**: 15.2, 15.3 Preview 1

**Steps to Reproduce**:

1. Set the VB option for **Qualify method access with 'Me'** to **Prefer 'Me.'**

    ![image](https://cloud.githubusercontent.com/assets/1408396/26413707/702f0e2a-4072-11e7-8c3b-abaa199f135a.png)

2. Add the following code

    ```vb
    Class SomeType
        Overridable Function Test1() As Integer
            Return 0
        End Function

        Overridable Function Test2() As Integer
            Return 0
        End Function

        Overridable Sub Caller()
            Test1()
            Test2()
        End Sub
    End Class
    ```

**Expected Behavior**:

IDE0009 reported on the call sites for `Test1` and `Test2`

**Actual Behavior**:

IDE0009 not reported at all</Description>
    <CreatedDate>24/05/2017</CreatedDate>
    <ClosedDate>25/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19727</IssueID>
    <Title>Naming style rules for 'type_parameter' are not functioning as I would expect</Title>
    <Description>I have defined the following naming style rules:
```
dotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_with_t.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_with_t.style = pascal_case_prefixed_with_t
dotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_with_t.symbols = type_parameters

dotnet_naming_style.pascal_case_prefixed_with_t.capitalization = pascal_case
dotnet_naming_style.pascal_case_prefixed_with_t.required_prefix = T

dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter
```

With this rule, I am getting a suggestion that `public bool Equals(MyClass other)` be replaced with `public bool Equals(MyClass TOther)`.

However, I would not expect that a suggestion is provided for the above code. Instead, I would expect it to provide a suggestion in the case of `public class MyClass&lt;MyParameter&gt;` (where it would suggest `public class MyClass&lt;TMyParameter&gt;`).</Description>
    <CreatedDate>23/05/2017</CreatedDate>
    <ClosedDate>24/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19712</IssueID>
    <Title>CSharpUpgradeProjectCodeFixProvider crashed when upgrading a .Net Core project</Title>
    <Description>**Version Used**: 
vs preview 26510.0
roslyn 2.3.0.6170310

**Steps to Reproduce**:

1. Create a .Net Core project
2. Add code that uses C# 7.1 features, e.g.
```
        public ImmutableArray&lt;int&gt; Numbers =&gt; default;
```
3. Use quick action to upgrade this project to c# langeuage version latest (or 7.1)

**Expected Behavior**:
Upgrade succeed

**Actual Behavior**:
Crash with following stack trace
```
System.AggregateException : One or more errors occurred. ---&gt; Unable to cast object of type 'Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectConfigProperties' to type 'VSLangProj80.CSharpProjectConfigurationProperties3'.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass18_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
---&gt; (Inner Exception #0) System.InvalidCastException : Unable to cast object of type 'Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectConfigProperties' to type 'VSLangProj80.CSharpProjectConfigurationProperties3'.
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyParseOptionsChanged(ProjectId projectId,ParseOptions options)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)&lt;---

```
</Description>
    <CreatedDate>22/05/2017</CreatedDate>
    <ClosedDate>23/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19696</IssueID>
    <Title>"Name suggestion" in completoin should work in "out var ..." cases.</Title>
    <Description>Tagging @rchande </Description>
    <CreatedDate>22/05/2017</CreatedDate>
    <ClosedDate>23/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19673</IssueID>
    <Title>Need a proper representation for __arglist argument for IOperation</Title>
    <Description>Take the following example,
```cs
        Console.Write("{0} {1} {2} {3} {4}", 1, 2, 3, 4, __arglist(5));
```
The __arglist is currently returned as:
```
    IArgument (ArgumentKind.Explicit, Matching Parameter: null) (OperationKind.Argument, IsInvalid) (Syntax: '__arglist(5)')
      IOperation:  (OperationKind.None) (Syntax: '__arglist(5)')
        Children(1): ILiteralExpression (Text: 5) (OperationKind.LiteralExpression, Type: System.Int32, Constant: 5) (Syntax: '5')
```

I believe this can be solved by simply adding `ArgumentKind.ArgList`, and create such an `IArgument` based on underlying `BoundArgListOperator`.
</Description>
    <CreatedDate>20/05/2017</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19616</IssueID>
    <Title>Compiler error message CS1983 should describe that the type isn't TaskLike instead of saying it's not Task or Task&lt;T&gt;</Title>
    <Description>**Version Used**: 

C# 7

**Steps to Reproduce**:

```C#
using System;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }

        public async MyTaskLike Foo()
        {
            await Task.Delay(1000);

            return 0;
        }
    }
}
```

**Expected Behavior**:

An error describing why `MyTaskLike` isn't being detected as returnable from an async method. E.g.

Couldn't find `MyTaskLike.CreateAsyncMethodBuilder`.

**Actual Behavior**:

The return type of an async method must be void, Task or Task&lt;T&gt;

PS: `ValueTask&lt;T&gt;` also works.</Description>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>20/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19584</IssueID>
    <Title>ExtractMethodCodeRefactoringProvider crashes with System.InvalidOperationException : Unexpected false</Title>
    <Description>1. Highlight "evaluationRuleNames" below:

``` C#
  private static ImmutableArray&lt;(string evaluationRuleNames, Func&lt;UnconfiguredProject, IWorkspaceProjectContext, object&gt; creator)&gt;  CreateHandlerFactories()
        {
            var builder = ImmutableArray.Create&lt;(string evaluationRuleNames, Func&lt;UnconfiguredProject, IWorkspaceProjectContext, object&gt; creator)(

            // Evaluation and Command-line
            (Compile.SchemaName,               (project, context) =&gt; new SourceItemHandler(project, context),                // &lt;Compile /&gt; item

            // Evaluation only
            (ConfigurationGeneral.SchemaName,  (project, context) =&gt; new ProjectPropertiesItemHandler(context)),             // &lt;ProjectGuid&gt;, &lt;TargetPath&gt; properties

            // Command-line only
            (null,                             (project, context) =&gt; new MetadataReferenceItemHandler(project, context)),     // &lt;ProjectReference /&gt;, &lt;Reference /&gt; items
            (null,                             (project, context) =&gt; new AnalyzerItemHandler(context)),                       // &lt;Analyzer /&gt; item
            (null,                             (project, context) =&gt; new AdditionalFilesItemHandler(context))                 // &lt;AdditionalFiles /&gt; item
            );
            return builder.MoveToImmutable();
        }
```

```
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

</Description>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19574</IssueID>
    <Title>Naming suggestions should pluralize for collection types</Title>
    <Description>For example in the following, I'd want "GetEvaluationHandlers":

![image](https://cloud.githubusercontent.com/assets/1103906/26134225/6d6faa50-3af0-11e7-958a-e910ea31b929.png)
</Description>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19568</IssueID>
    <Title>InvalidProgramException caused by when (false) exception filter</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

[Try to run the following code](https://tryroslyn.azurewebsites.net/#b:master/f:%3Easmr/K4Zwlgdg5gBAygTxAFwKYFsDcBYAUHgYwBsBDEEGAYTwG88YGYAHYAIyLAJhROU5gBuAezAATGAFkSkABQBKeozq5GqmMgBOCRWpjLdu5AAsNQgO4wIqCwFEAHgVRM+QiPJwqDAXx1qCvAiMYMyNUCBgZADMSIhBUBU9dfW9fH1wvIA=):

```c#
using System;

class C
{
    public static void Main()
    {
        try
        {
            throw new Exception();
        }
        catch when (false)
        {
        }
    }
}
```

**Expected Behavior**: Program crashes due to unhandled `Exception`.

**Actual Behavior**: Program crashes due to `InvalidProgramException`:

&gt; InvalidProgramException: Common Language Runtime detected an invalid program.

Comparing the IL for the above program and one with `when (true)`, which doesn't throw `InvalidProgramException`, shows:

`when (false)`:

```cil
.try
{
  IL_0000: newobj       instance void [mscorlib]System.Exception::.ctor()
  IL_0005: throw        
}
filter
{
  IL_0006: pop          
  IL_0007: ldc.i4.0     
  IL_0008: ldc.i4.0     
  IL_0009: cgt.un       
  IL_000b: endfilter    
}
{
  IL_000d: pop          
  IL_000e: leave.s      IL_0010
}
```

`when (true)`:

```cil
.try
{
  IL_0000: newobj       instance void [mscorlib]System.Exception::.ctor()
  IL_0005: throw        
}
filter
{
  IL_0006: pop          
  IL_0007: ldc.i4.1     
  IL_0008: ldc.i4.0     
  IL_0009: cgt.un       
  IL_000b: endfilter    
}
{
  IL_000d: pop          
  IL_000e: leave.s      IL_0010
}
IL_0010: ret    
```

Notice the added `ret` at the end. I think the missing `ret` could be the cause of this issue.

This is probably not something one would write in production code, so this issue might not be that important. But such code might be useful to easily "comment out" a `catch`.
</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19555</IssueID>
    <Title>VS 2017 crashed on rename suggestion</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 
Version 15.2 (26430.6) Release
VisualStudio.15.Release/15.2.0+26430.6

**Steps to Reproduce**:

1. Source code:
```
public class Class111
{
  public bool Foo12(out string x) =&gt; Foo11(out x, out var y, y) &amp;&amp; Foo11(out _, out var y1);
  
}
```
2. set cursor before "y" in "out var y", remove one symbol "y" and type symbol "_" (single underscore)
3. wait until rename marker appears and press "Ctrl + ."
4. Rename popup menu appears suggestion to rename "y" to "_" and VS crashes in several seconds

**Expected Behavior**:
No crash

**Actual Behavior**:
VS 2017 crashes

</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19507</IssueID>
    <Title>Use 'Throw' expression causes erroneous code</Title>
    <Description>**Version Used**: 15.2 (26430.4)

**Steps to Reproduce**:

```csharp
public Foo(T bar)
{
	if (bar == null)  // Use 'Throw' expression here...
	{
		throw new ArgumentNullException(nameof(bar));
	}
}
```
	
**Error CS0019 Operator '??' cannot be applied to operands of type 'T' and '\&lt;throw expression&gt;'**


**However, if I add a constraint on T in my class it works:**

```csharp
public sealed class Foo&lt;TClass&gt; where TClass : class
{}
```

**Expected Behavior**:
The "Use Throw expression" command should not be available or it should complain about the type. Maybe suggest adding the "where"-constraint above?

**Actual Behavior**:
Compilation error CS0019.
</Description>
    <CreatedDate>15/05/2017</CreatedDate>
    <ClosedDate>15/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19504</IssueID>
    <Title>DataFlowAnalysis fails on local functions</Title>
    <Description>**Version Used**: 
2.1.0.0
**Steps to Reproduce**:

Using the following code:

```cs
	class Program
	{
		static void Main(string[] args)
		{
			var tree = CSharpSyntaxTree.ParseText(@"
public class Program
{
	public static void Main()
	{
		int y = 3;
		int val(int z) =&gt; y += z;
	}
}");

			var mscorlib = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);

			var compilation = CSharpCompilation.Create("MyCompilation",new[] { tree }, references: new[] { mscorlib });
			var model = compilation.GetSemanticModel(tree);
			var local = tree.GetRoot().DescendantNodes().OfType&lt;LocalFunctionStatementSyntax&gt;().Single();
		
			DataFlowAnalysis localResult = model.AnalyzeDataFlow(local);
		}
	}
```
localResult.Succeeded will be false.
Replacing the local function with a lambda expression yields correct analysis.
Compilation finished without errors
Calling the val() or consuming its result makes no difference.</Description>
    <CreatedDate>15/05/2017</CreatedDate>
    <ClosedDate>15/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19503</IssueID>
    <Title>Project.AdditionalDocuments is empty after acepting a refactor that Adds an Additional Document.</Title>
    <Description>**Version Used**: 
1.3.2
**Steps to Reproduce**:

1. In Visual Studio 2017, write a code refactor that generates na AdditionalDocument and add it to the a Project through Project.AddAdditionalDocument(string, SourceText,, Folders)
2. Though the Visual Studio Instance now has the AdditionalDocument visible in the solution explorer, if you get the instance of the modified Project, property AdditionalDocuments count is 0. 

**Expected Behavior**:
After adding na AdditionalDocument to a Project, when running getting the new instance the Document should be available in the Project AdditionalDocuments property
**Actual Behavior**:
![2017-05-15 1](https://cloud.githubusercontent.com/assets/5736384/26048305/7dc27ed0-394e-11e7-8192-517c292a4005.png)
There are no Additional Documents in the Project AdditionalDocuments collection
</Description>
    <CreatedDate>15/05/2017</CreatedDate>
    <ClosedDate>15/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19496</IssueID>
    <Title>Crash when generating event</Title>
    <Description>**Version Used**: 15.1

**Steps to Reproduce**:

1. Add the following code to a VB source file:

    ```vb
    Public Class ExampleClass
     Public Event ExampleEvent()
     Public Event ExampleEvent()
    End Class
    ```

2. From the Type dropdown, select **(ExampleClass Events)**
3. From the Member dropdown, select **ExampleEvent**

**Expected Behavior**:

Do not crash.

**Actual Behavior**:

Visual Studio crashes (will provide more details upon request, but this was a trivially easy reproducer when I tried previously).</Description>
    <CreatedDate>14/05/2017</CreatedDate>
    <ClosedDate>23/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19482</IssueID>
    <Title>No completion when typing break after case with pattern matching</Title>
    <Description>**Version Used**: 
VS 2017 Update 2

**Steps to Reproduce**:

In a C# file, paste this code:

```
class C
{
    void M()
    {
        switch (foo)
        {
            case Bar bar:
                $$
            default: break;
        }
    }
}
```

Type break where the $$ is.

**Expected Behavior**:
Completion offering "break".

**Actual Behavior**:
No completion.</Description>
    <CreatedDate>13/05/2017</CreatedDate>
    <ClosedDate>14/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19451</IssueID>
    <Title>"Prefer block" option should have a  third option "prefer no-braces when inner statement is single line"</Title>
    <Description>i.e. some people want:

```c#
if (x)
    return;
```

But would never want

```c#
    if (x)
       foreach (var ...)
          try
          {
          }
          finally
          {
          }
```</Description>
    <CreatedDate>11/05/2017</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19437</IssueID>
    <Title>Make method async code fix on inner method applies async on wrong method</Title>
    <Description>**Version Used**: 
VS 2017.2

**Steps to Reproduce**:

1. Use the following code
2. Invoke code fixer on line with `await Task.CompletedTask`

```csharp
        public void OuterMethod()
        {
            Task InnerMethod()
            {
                await Task.CompletedTask;
            }
        }
```

**Expected Behavior**:

```csharp
        public void OuterMethod()
        {
            async Task InnerMethod()
            {
                await Task.CompletedTask;
            }
        }
```

**Actual Behavior**:

```csharp
        public async Task OuterMethod()
        {
            Task InnerMethod()
            {
                await Task.CompletedTask;
            }
        }
```
</Description>
    <CreatedDate>11/05/2017</CreatedDate>
    <ClosedDate>12/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19376</IssueID>
    <Title>Go to All and Find All References deduplication improvements</Title>
    <Description>&lt;sup&gt;Moving the conversation @NickCraver started [from Twitter](https://twitter.com/Nick_Craver/status/861718011409039361) at @davkean's request.&lt;/sup&gt;

VS2017's Go to All and Find All References duplicates items for each platform or framework you're building against. If you build for six platforms, every member shows up six times but takes you to exactly the same point in the same document. It's pure noise which limits what else you can see in the list.

For example, using @NickCraver's screenshots:

&lt;img src="https://cloud.githubusercontent.com/assets/8040367/25875091/be3ab424-34e3-11e7-9a37-5e40438c01b7.jpg" width="50%"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/8040367/25875092/c09b7a46-34e3-11e7-97af-de8577bb14c7.jpg" width="50%"&gt;

The items should be grouped by destination. The information that is unique to each entry (the framework) should be shown in small print underneath. Only one thing should be clickable for all platforms, unless there are signatures in different physical files or positions due to csproj conditional file includes or `#if` preprocessor. One navigation destination, one entry.

This would be amazing (pardon my MS Paint):

&lt;img src="https://cloud.githubusercontent.com/assets/8040367/25875241/58da2bfe-34e4-11e7-9ef8-1af942cab604.jpg" width="50%"&gt;</Description>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>10/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19351</IssueID>
    <Title>Creating C# WPF apps crash VS with ArgumentNullException</Title>
    <Description>**Version Used**: 
VSUML 26507.1
**Steps to Reproduce**:
1. Install VS with .NET Desktop Development
2. Create a new C# WPF App

**Expected Behavior**:
Project creates successfully and you are able to work on it.
**Actual Behavior**:
Project creates followed by crashing VS.

Exception:
```
CLR: Managed code called FailFast, saying "System.ArgumentNullException: Value cannot be null.
Parameter name: key
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(TKey key, TValue&amp; value)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(TKey key, CreateValueCallback createValueCallback)
   at Microsoft.CodeAnalysis.Serialization.ChecksumCache.GetOrCreate(Object value, CreateValueCallback checksumCreator)
   at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.&lt;GetChecksumAsync&gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.&lt;PrecalculateAsync&gt;d__51.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;&gt;c__DisplayClass31_1`1.&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;GetOrDefaultAsync&gt;d__33`2.MoveNext()"
```
</Description>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>12/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19301</IssueID>
    <Title>Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlProperty failed</Title>
    <Description>https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/3726/

```
  Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlProperty
      Assert.Contains() Failure
      Not found: this.SomeButton.Text = "NewButtonText"
      In value:  namespace TestProj
      {
          partial class Form1
          {
              /// &lt;summary&gt;
              /// Required designer variable.
              /// &lt;/summary&gt;
              private System.ComponentModel.IContainer components = null;
      
              /// &lt;summary&gt;
              /// Clean up any resources being used.
              /// &lt;/summary&gt;
              /// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
              protected override void Dispose(bool disposing)
              {
                  if (disposing &amp;&amp; (components != null))
                  {
                      components.Dispose();
                  }
                  base.Dispose(disposing);
              }
      
              #region Windows Form Designer generated code
      
              /// &lt;summary&gt;
              /// Required method for Designer support - do not modify
              /// the contents of this method with the code editor.
              /// &lt;/summary&gt;
              private void InitializeComponent()
              {
                  this.components = new System.ComponentModel.Container();
                  this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
                  this.Text = "Form1";
              }
      
              #endregion
          }
      }
      
      
      Stack Trace:
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpWinForms.cs(44,0): at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlProperty()
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.RemoveEventHandler
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlPropertyInCode
      Assert.Contains() Failure
      Not found: this.SomeButton.Text = "ButtonTextGoesHere";
      In value:  namespace TestProj
      {
          partial class Form1
          {
              /// &lt;summary&gt;
              /// Required designer variable.
              /// &lt;/summary&gt;
              private System.ComponentModel.IContainer components = null;
      
              /// &lt;summary&gt;
              /// Clean up any resources being used.
              /// &lt;/summary&gt;
              /// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
              protected override void Dispose(bool disposing)
              {
                  if (disposing &amp;&amp; (components != null))
                  {
                      components.Dispose();
                  }
                  base.Dispose(disposing);
              }
      
              #region Windows Form Designer generated code
      
              /// &lt;summary&gt;
              /// Required method for Designer support - do not modify
              /// the contents of this method with the code editor.
              /// &lt;/summary&gt;
              private void InitializeComponent()
              {
                  this.components = new System.ComponentModel.Container();
                  this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
                  this.Text = "Form1";
              }
      
              #endregion
          }
      }
      
      
      Stack Trace:
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpWinForms.cs(62,0): at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlPropertyInCode()
```</Description>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>06/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19254</IssueID>
    <Title>InvalidCastException in ExtractMethodCodeRefactoringProvider</Title>
    <Description>**Version Used**: 15.1

**Steps to Reproduce**:

1. Add the following code

    ```csharp
    public event EventHandler&lt;OptionChangedEventArgs&gt; OptionChanged
    {
        add
        {
            while (true)
            {

            }
            lock (_gate)
            {
                _eventHandlers = _eventHandlers.Add(value);
            }
        }

        remove
        {
            lock (_gate)
            {
                _eventHandlers = _eventHandlers.Remove(value);
            }
        }
    }
    ```

2. Select the `while (true)` and its opening brace

**Expected Behavior**:

The refactoring provider should not crash.

**Actual Behavior**:

```
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Symbols.SourceCustomEventSymbol' to type 'Microsoft.CodeAnalysis.IPropertySymbol'.
   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpSelectionResult.StatementResult.GetContainingScopeType()
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.AddReturnIfUnreachable(IEnumerable`1 statements,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.CreateStatementsOrInitializerToInsertAtCallSiteAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.GenerateBodyForCallSiteContainerAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)```</Description>
    <CreatedDate>04/05/2017</CreatedDate>
    <ClosedDate>01/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19248</IssueID>
    <Title>InvalidOperationException in Microsoft.CodeAnalysis.Workspaces</Title>
    <Description>VS2015 Update 3, v14.0.25420.1

1. Solution with 180 projects. Includes CodeAnalysis on many projects. The project is targeted at .NET 4.0 and previously worked without issue on VS2013 i.e. breaking change in Roslyn DLLs somehow. We are using Visual Studio Installer projects (i.e. compiling a .vdproj file). Probably ~ 120 projects are compiled when compiling this setup project.

&gt; Problem signature:
  Problem Event Name:	CLR20r3
  Problem Signature 01:	devenv.exe
  Problem Signature 02:	14.0.25420.1
  Problem Signature 03:	57685d85
  Problem Signature 04:	Microsoft.CodeAnalysis.Workspaces
  Problem Signature 05:	1.3.4.60902
  Problem Signature 06:	e4ebe076
  Problem Signature 07:	278
  Problem Signature 08:	f
  Problem Signature 09:	System.InvalidOperationException
  OS Version:	6.1.7601.2.1.0.274.10
  Locale ID:	3081
  Additional Information 1:	7ab1
  Additional Information 2:	7ab131621a761fc79cfaad315b44af76
  Additional Information 3:	8e52
  Additional Information 4:	8e52f085ac7444f7bef020015eb0b172

I am not able to bundle source code samples due to a) size of solution, b) 3rd party control license dependencies, c) commercial confidence however can run tests/diagnostics as required.
</Description>
    <CreatedDate>04/05/2017</CreatedDate>
    <ClosedDate>05/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19192</IssueID>
    <Title>Cannot navigate to System.ValueTuple</Title>
    <Description>**Version Used**: 

15.2

**Steps to Reproduce**:

1. Type the local declaration `System.ValueTuple&lt;int, int&gt; x;`
2. Click on `ValueTuple` and hit F12 (navigate to definition)

**Expected Behavior**:

Navigate to the definition of ``System.ValueTuple&lt;T1, T2&gt;`

**Actual Behavior**:

![image](https://cloud.githubusercontent.com/assets/3804346/25642043/2e1004f4-2f4c-11e7-80e9-21a3942dc188.png)
</Description>
    <CreatedDate>02/05/2017</CreatedDate>
    <ClosedDate>03/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19182</IssueID>
    <Title>C# 7 compiler crash / error -2146232797</Title>
    <Description>**Version Used**: 
Original VS2017 compiler, as well as the 2.1 NuGet compiler package. 

**Steps to Reproduce**:
This is where it gets tricky, it only happens in one (corporation-owned) project that has a very large class, and that heavily uses the new C# 7 features (value tuples and nested functions). And multiple-level nested lambda functions. I've also tried splitting the larger functions into smaller ones to limit the amount of compiler generated items per function but it didn't help any.

**Issue Description**:
When I change a specific old-style inner function (`Func&lt;..&gt;`) to the new style, I get this compiler output:

&gt; Build started ...
&gt; C:\trugit\ICD Manager\packages\Microsoft.Net.Compilers.2.1.0\tools\Microsoft.CSharp.Core.targets(71,5): error MSB6006: "csc.exe" exited with code -2146232797. 
&gt; ========== Build: 0 succeeded, 1 failed, 1 up-to-date, 0 skipped ==========
&gt; 

You can notice the compiler used is 2.1 from the proper NuGet package. The line in question is this:

    bool messageconnected (string msgname, char dir) =&gt;
         !((connectionstatus.CanBusConnection.TryGetValue((msgname, portname), out ConnectionOrigin connection)
             &amp;&amp; (!connection.Connected || (connection.OriginApplication != null &amp;&amp; (dir == 'O' || dir == 'B') &amp;&amp; connection.OriginApplication != appname)))
             || connection == null);

However that's obviously not a self contained example. And other similar pieces of code work (there's one for each bus type). This one however either makes the compiler return that error code or just plain crash. 

Also noticed is that sometimes the compiler will give that exit code and something about FilesWritten being empty: https://i.imgur.com/REHzOHX.png. Compiling again works fine. That's just weird.

Anyway I understand that there are logs I can provide that don't include the source code in question. If so let me know, I'll be happy to help.</Description>
    <CreatedDate>02/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19180</IssueID>
    <Title>TryParse in C#7 emitting a warning with NullReferenceException</Title>
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 Version 15.1 (26403.7) Release

**Steps to Reproduce**:

1. Create a **C# console application** in VS 2017 (version as above)
2. In **Main** method, insert the following C#7 statement:
    `if (int.TryParse("123", out _)) Console.WriteLine("Syntax OK");`     
3. **Compile** the solution

**Expected Behavior**: 
No warnings

**Actual Behavior**: 
Warning AD0001: Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.

Additional Infos: See Stackoverflow: 
http://stackoverflow.com/q/43736660/1016343
</Description>
    <CreatedDate>02/05/2017</CreatedDate>
    <ClosedDate>03/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19050</IssueID>
    <Title>Initialize Interactive with Project Context doesn't appear for .NET Core projects</Title>
    <Description>Right-clicked on a project in .NET Core solution and this capability didn't show up at all...</Description>
    <CreatedDate>27/04/2017</CreatedDate>
    <ClosedDate>28/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>19046</IssueID>
    <Title>Smart Variable Naming doesn't suggest names for List&lt;T&gt;</Title>
    <Description>![image](https://cloud.githubusercontent.com/assets/1402694/25495142/07515e18-2b31-11e7-9b19-407f004021a1.png)

I would expect it to suggest something like `stops1` (because I already have a local `stops`) or `listOfStops` here. Instead, nothing is suggested.</Description>
    <CreatedDate>27/04/2017</CreatedDate>
    <ClosedDate>22/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18981</IssueID>
    <Title>Pattern mathing on generic types does not work</Title>
    <Description>**Version Used**: 
Visual Studio 2017

**Steps to Reproduce**:

 Create a function like this:
```cs
     void TestGenericPatternMatching&lt;T&gt;(T anT)
        {
            switch (anT)
            {
                case int v: 
                    break;
               case string s:
                    break;
            }
        }
```cs

**Expected Behavior**:
Pattern matching works

**Actual Behavior**:
The code above does not compiles with a strange error "an expression of type T can not be handled by an int", the match with object is OK but well not really useful (anything matches with object).</Description>
    <CreatedDate>25/04/2017</CreatedDate>
    <ClosedDate>25/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18967</IssueID>
    <Title>Getting NxFault in csproj.dll</Title>
    <Description>Watson is here: http://watson/BucketDetails?BucketIdentifier=87fb5e9c-e570-080c-e72b-730a083d6e51

Failure is:
software_nx_fault_c0000005_csproj.dll!clangfilenode::clearmsbuilditem

I've hit this locally, and it looks like there are around 5-10 hits a day.</Description>
    <CreatedDate>24/04/2017</CreatedDate>
    <ClosedDate>28/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18936</IssueID>
    <Title>Analyzer improperly suggests inlining declaration to "out var" </Title>
    <Description>**Version Used**: VS2017 15.1 (26403.7).

**Steps to Reproduce**:

Given a method with a signature like this:

```csharp
public IDisposable Foo(out string baz) {
    baz = "hello";
    return default(IDisposable);
}
```

If this `Foo` is placed in a Dispose using statement, and the `baz` is used later after the dispose block, an analyzer will improperly suggestion making `Foo`'s out variable as an "out var". For example:

```csharp
string baz;
using (Foo(out baz))
{
    //...
}
baz.ToLower();
```

**Expected Behavior**:

No suggestion to move `baz` to an inline declaration.

**Actual Behavior**:

The analyzer suggests inlining, thus resulting in broken code.

![screen shot 2017-04-23 at 1 43 59 pm](https://cloud.githubusercontent.com/assets/361677/25315904/0cabbdbc-282b-11e7-99f6-7b05a954a71e.png)

</Description>
    <CreatedDate>23/04/2017</CreatedDate>
    <ClosedDate>23/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18921</IssueID>
    <Title>Address issue that was causing a double-free in the pattern matcher code</Title>
    <Description>**Customer scenario**

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

**Bugs this fixes:**

(either VSO or GitHub links)

**Workarounds, if any**

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

**Risk**

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

**Performance impact**

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

**Is this a regression from a previous update?**

**Root cause analysis:**

How did we miss it?  What tests are we adding to guard against it in the future?

**How was the bug found?**

(E.g. customer reported it vs. ad hoc testing)
</Description>
    <CreatedDate>22/04/2017</CreatedDate>
    <ClosedDate>24/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18878</IssueID>
    <Title>Bit-shift and comparison operator is parsed as generic type argument syntax in VS2017</Title>
    <Description>**Version Used**: 15.1 (26403.7)

In VS2017 the expression `i &lt; j &gt;&gt; 1` is being parsed as  `(i&lt;j&gt;) &gt; 1` whereas in VS2015 it was parsed as `(i&lt;j) &gt;&gt; 1`.

**Steps to Reproduce**:

```cs
int i = 0, j = 0;
bool b = i &lt; j &gt;&gt; 1;
```

**Expected Behaviour**:

No errors (as in VS2015):

![image](https://cloud.githubusercontent.com/assets/5658207/25282675/20e79c84-26a9-11e7-84ce-a208a2c18d01.png)


**Actual Behaviour**:

![image](https://cloud.githubusercontent.com/assets/5658207/25282665/17cdd42e-26a9-11e7-978c-e5222e481a8b.png)
</Description>
    <CreatedDate>21/04/2017</CreatedDate>
    <ClosedDate>21/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18780</IssueID>
    <Title>Optimization: Passing static method as Action parameter should no allocate</Title>
    <Description>In the code below, compare the two methods of passing `StaticMethod` to `F`.
Calling with a lambda generates a lazy singleton `Action`, but calling with the method creates a new `Action` on every call. 
It seems the former would be more efficient, but to get that behavior, users have to type extra glue code. 
That is even more pronounced for the scenario where the static method takes parameters (passing into a method that accepts `Func&lt;...&gt;`).

```C#
class C
{
    static void StaticMethod() { }
    void F(System.Action a) { }
    void M()
    {
        // compare the following two methods of passing StaticMethod to F
        // F(() =&gt; StaticMethod());
        // F(StaticMethod);
    }
}
```

```C#
// decompiled code for F(() =&gt; StaticMethod());
internal class C
{
    [CompilerGenerated]
    [Serializable]
    private sealed class &lt;&gt;c
    {
        public static readonly C.&lt;&gt;c &lt;&gt;9;
        public static Action &lt;&gt;9__2_0;
        static &lt;&gt;c()
        {
            // Note: this type is marked as 'beforefieldinit'.
            C.&lt;&gt;c.&lt;&gt;9 = new C.&lt;&gt;c();
        }
        internal void &lt;M&gt;b__2_0()
        {
            C.StaticMethod();
        }
    }
    private static void StaticMethod()
    {
    }
    private void F(Action a)
    {
    }
    private void M()
    {
        Action arg_21_1;
        if (arg_21_1 = C.&lt;&gt;c.&lt;&gt;9__2_0 == null)
        {
            arg_21_1 = C.&lt;&gt;c.&lt;&gt;9__2_0 = new Action(C.&lt;&gt;c.&lt;&gt;9.&lt;M&gt;b__2_0);
        }
        this.F(arg_21_1);
    }
}
```

```C#
// decompiled code for F(StaticMethod);
internal class C
{
    private static void StaticMethod()
    {
    }
    private void F(Action a)
    {
    }
    private void M()
    {
        this.F(new Action(C.StaticMethod));
    }
}
```

FYI @CyrusNajmabadi @cston </Description>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18777</IssueID>
    <Title>IDE0031 (Null check can be simplified) - wrong fix for nullable structs</Title>
    <Description>**Version Used**: 15.1 (26403.7)

Having following code:
```C#
public static object M(MyStruct? x)
{
    return x == null ? null : x.Value.Value;
}

public struct MyStruct
{
    public object Value;
}
```
IDE0031 is detected and after fix it will become following:
```C#
public static object M1(MyStruct? x)
{
    return x?.Value.Value;
}
```
which does not compile (should be only "return x?.Value;").</Description>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18776</IssueID>
    <Title>IDE0018 false positive *causes crash*</Title>
    <Description>[Note: I see there are several bugs relating to IDE0018, some resolved as already-fixed, some marked as feature-requests. None of them report an actual crash, so I think this is a new issue.]

[More generally, if feels like I've encountered lots of MS-authored analyzers crashing because of incorrect casts. These crashes are very user-visible, and probably the most common crashes that a user of Visual Studio will see. Why are there so many casts? And why so many crashes because of them? Maybe every single cast has to be treated with substantially more skepticism during code review? Or accompanied with a proof that it's valid? Or accompanied with fuzz-testing from an automatic syntax tree generator?]

**Version Used**: 15.1 (26403.03 Release)

**Steps to Reproduce**:

Following console app:

```
class Program {
  static void Main() {
    int count = 0;
    foreach (var x in Gen(out count)) System.Console.WriteLine(x);
    System.Console.WriteLine(count);
  }

  static int[] Gen(out int count) {
    count = 2;
    return new[] { 0, 1 };
  }
}
```

**Expected Behavior**:

It should not offer IDE0018 "variable declaration of count can be inlined". (That's because inlining it would limit its scope too much).

**Actual Behavior**:

It offers IDE0018. Applying the fix results in a crash inside CSharpInlineDeclarationCodeFixProvider:

```
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundBlock' to type 'Microsoft.CodeAnalysis.CSharp.BoundForEachStatement'.
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetForEachStatementInfo(SemanticModel semanticModel,CommonForEachStatementSyntax forEachStatement)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.GetForEachSymbols(SemanticModel model,CommonForEachStatementSyntax forEach,IMethodSymbol&amp; getEnumeratorMethod,ITypeSymbol&amp; elementType)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode previousOriginalNode,TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDeclarationExpression(DeclarationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(ForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_0.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.CleanupDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18714</IssueID>
    <Title>Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting test failed</Title>
    <Description>```
Stacktrace

MESSAGE:
\r\nExpected:\r\n[77..80)\r\nActual:\r\n[77..80)\r\n[91..94)\r\nDifferences:\r\n [77..80)\r\n++&gt; [91..94)\r\n\r\nExpected: True\r\nActual: False
+++++++++++++++++++
STACK TRACE:
at Roslyn.Test.Utilities.AssertEx.SetEqual[T](IEnumerable`1 expected, IEnumerable`1 actual, IEqualityComparer`1 comparer, String message, String itemSeparator) at Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Verify(String marker, IDictionary`2 spans) in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicReferenceHighlighting.cs:line 54 at Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicReferenceHighlighting.cs:line 39
```

https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/2672/testReport/junit/Roslyn.VisualStudio.IntegrationTests.Basic/BasicReferenceHighlighting/Highlighting/</Description>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>15/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18706</IssueID>
    <Title>ServiceHub.RoslynCodeAnalysisService32.exe high CPU when overriding methods from Object</Title>
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 Version 15.1 (26403.3) Release

**Steps to Reproduce**:
1. Open a large solution
2. Open a file that has a class that overrides ToString, Equals, and or GetHashCode

**Expected Behavior**:
It would be nice if we could disable CodeLense from getting the count of references for methods that are overridden from Object to prevent massive CPU spikes.

**Actual Behavior**:
ServiceHub.RoslynCodeAnalysisService32.exe spins up to almost 100% CPU while it goes out and calculates all the references to ToString, Equals, and GetHashCode</Description>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>23/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18672</IssueID>
    <Title>Crash in Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetCallSiteContainerFromExpression</Title>
    <Description>**Version Used**: 
Microsoft (R) Visual C# Compiler version 2.0.0.61501, Visual Studio 2017 latest version

**Steps to Reproduce**:

Double click on `_rections` before `?? ...`

```cs
class Post
{
    public string Message
    {
        get =&gt; _reactions ?? (_reactions = new int());
    }

    private int _reactions;
}

```

**Expected Behavior**:

No crash

**Actual Behavior**:

```
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetCallSiteContainerFromExpression()
   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetOutermostCallSiteContainerToProcess(CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>13/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18671</IssueID>
    <Title>Pattern matching within a lambda within a field initializer (and IDE0019)</Title>
    <Description>**Version Used**: VS 15.1 (26403.3)

Following code does not compile with error "CS8200	Out variable and pattern variable declarations are not allowed within constructor initializers, field initializers, or property initializers." but i believe it should:
```C#
class Class1
{
    private static readonly Func&lt;object, string&gt; castToString =
        obj =&gt;
        {
            if (obj is string s) return s;
            else return string.Empty;
        };
}
```

There is inconsistency between this behavior and IDE0019 (Use pattern matching). IDE0019 is detected in following code:
```C#
class Class1
{
    private static readonly Func&lt;object, string&gt; castToString =
        obj =&gt;
        {
            var s = obj as string;
            if (s != null) return s;
            else return string.Empty;
        };
}
```
and fix of it looks like a code at the beginning.

Maybe it is a same problem as with #16935 but I'm not sure.</Description>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>13/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18655</IssueID>
    <Title>Inline Temporary Variable Refactoring produces invalid code</Title>
    <Description>**Version Used**: VS2017 RTM

**Steps to Reproduce**:

1. Type the following code in a method
2. Trigger `inline-temporary-value` from the declaration of `t`

``` c#
            object o = null;
            var t = o as ValueTuple&lt;int, int&gt;?;
            if (t != null)
            {
            }
```

**Expected Behavior**:

``` c#
            object o = null;
            if (o is ValueTuple&lt;int, int&gt; t)
            {
            }
```

(with appropriate adjustment of uses of `t`)

**Actual Behavior**:

``` c#
            object o = null;
            if (o is ValueTuple&lt;int, int&gt;? t)
            {
            }
```

Along with a compilation error that you cannot use a nullable type with pattern-matching.

An alternative approach would be to refuse to apply the refactoring here, or not offer it in the first place.
</Description>
    <CreatedDate>12/04/2017</CreatedDate>
    <ClosedDate>13/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18600</IssueID>
    <Title>ExtractMethodCodeRefactoringProvider crash on method highlight in expression body</Title>
    <Description>**Version Used**: VS2017 (15.1 (26403.3)).

**Steps to Reproduce**:

1. Create empty ASP.NET Web Application project (I have only testet with this project type).
2. Create empty class in any namespace.
3. Insert the following code:
```C#
private static string Testing() =&gt; "";
public static string TestError { get =&gt; Testing(); }
```
Highlight `Testing` in the `TestError` property.

If refactored to `... TestError =&gt; Testing() ?? "";` Everything is fine.
The error also happens with a setter.

**Expected Behavior**: No thrown exceptions.

**Actual Behavior**: Thrown exceptions and ExtractMethodCodeRefactoringProvider crashes.

-----
Stack trace from the error:

    System.InvalidOperationException : Unexpected false
      at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
      at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetCallSiteContainerFromExpression()
      at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetOutermostCallSiteContainerToProcess(CancellationToken cancellationToken)
      at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement, TExpression, TNodeUnderContainer] (&lt;Unknown Parameters&gt;)
      at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
      at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator, TExtractor, TResult] (&lt;Unknown Parameters&gt;)
      at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
      at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
      at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
      at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
</Description>
    <CreatedDate>11/04/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18568</IssueID>
    <Title>Multiline method chaining doesn't increase indentation level inside array initializers</Title>
    <Description>**Version Used**: VS 2017

**Repro:**

```cs
public class Foo { }

public void Works()
{
    // Indentation level increases when Enter is hit
    new Foo()[|]
}

public void DoesNotWork()
{
    // Indentation level does not increase when Enter is hit
    new Foo[]
    {
        new Foo()[|]
    }
}
```</Description>
    <CreatedDate>09/04/2017</CreatedDate>
    <ClosedDate>10/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18559</IssueID>
    <Title>IDE0007 triggers on cast in foreach</Title>
    <Description>**Version Used**: Visual Studio Community 2017, build 26403.0

**Steps to Reproduce**:

1. Create a foreach loop with an explicit cast such as `foreach (Match match in myMatchCollection)`
2. Enable IDE0007

**Expected Behavior**: IDE0007 should not trigger, since the explicit type does not match the type that would be generated from using a `var`.

**Actual Behavior**: IDE0007 triggers, and will incorrectly replace the explicit cast if the suggestion lightbulb is used, causing errors.
</Description>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>10/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18481</IssueID>
    <Title>ExtractMethodCodeRefactoringProvider crashes after a local function is pasted into a method</Title>
    <Description>**Version Used**: VS 2017

```
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

Here is the code I was writing at the time:

```cs
        [Theory]
        public void Multiply(Term term, int coefficient)
        {
            void Verify(Term product)
            {
                Assert.Equal(coefficient * term.Coefficient, product.Coefficient);
                Assert.Equal(term.Exponent, product.Exponent);[|]
            }

            var product = coefficient * term;

            // Multiplication should be commutative.
            product = term * coefficient;
            Assert.Equal()
        }
```

I had just deleted the two `Assert.Equal` statements from below `var product = ...` and pasted them into the body of the local function when the crash happened.

If it's relevant, here is the code for the `Term` class in my project. Luckily it's largely self-contained:

```cs
    public struct Term
    {
        private Term(int coefficient, int exponent)
        {
            Coefficient = coefficient;
            Exponent = exponent;
        }

        public static implicit operator Term(int value)
            =&gt; new Term(coefficient: value, exponent: 0);

        public static Term operator *(Term left, Term right)
            =&gt; new Term(
                coefficient: checked(left.Coefficient * right.Coefficient),
                exponent: checked(left.Exponent + right.Exponent));

        public static Term X(int exponent) =&gt; new Term(1, exponent);

        public int Coefficient { get; }

        public int Exponent { get; }

        public bool IsConstant =&gt; Exponent == 0;

        public Term Pow(int exponent)
            =&gt; new Term(
                coefficient: Coefficient.Pow(exponent),
                exponent: checked(Exponent * exponent));
    }
```</Description>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18462</IssueID>
    <Title>'CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' </Title>
    <Description>```cs
class C
{
    static void Main(string[] args)
    {
        var z = ((byte, byte))((_, _) = (-1, -1));
    }
}
```

```
Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: ConsoleApp19
SyntaxTree: ...\Program.cs
SyntaxNode: ((byte, byte))((_, _) = (-1, -1 ... [CastExpressionSyntax]@[72..105) (4,16)-(4,49)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckFeatureAvailability(Location location, MessageID feature, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.FallBackOnDiscard(IdentifierNameSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIdentifier(SimpleNameSyntax node, Boolean invoked, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariables(ExpressionSyntax node, DiagnosticBag diagnostics, DeclarationExpressionSyntax&amp; declaration, ExpressionSyntax&amp; expression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariables(ExpressionSyntax node, DiagnosticBag diagnostics, DeclarationExpressionSyntax&amp; declaration, ExpressionSyntax&amp; expression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstruction(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindParenthesizedExpression(ExpressionSyntax innerExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInferredVariableInitializer(DiagnosticBag diagnostics, ExpressionSyntax initializer, BindValueKind valueKind, CSharpSyntaxNode errorSyntax)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeSymbol declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.TypesAreCompatible(TExpressionSyntax originalExpression, TExpressionSyntax newExpression)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ReplacementChangesSemanticsForNodeLanguageSpecific(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode previousOriginalNode, TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.CastExpressionSyntaxExtensions.IsUnnecessaryCast(CastExpressionSyntax cast, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer.IsUnnecessaryCast(SemanticModel model, SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.RemoveUnnecessaryCast.RemoveUnnecessaryCastDiagnosticAnalyzerBase`1.TryRemoveCastExpression(SemanticModel model, SyntaxNode node, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.RemoveUnnecessaryCast.RemoveUnnecessaryCastDiagnosticAnalyzerBase`1.&lt;Initialize&gt;b__6_0(SyntaxNodeAnalysisContext nodeContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__DisplayClass42_1`1.&lt;ExecuteSyntaxNodeAction&gt;b__1()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(DiagnosticAnalyzer analyzer, Action analyze, Nullable`1 info)
-----
'.

```</Description>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18418</IssueID>
    <Title>Tuples and ternary operators don't mix well</Title>
    <Description>**Version Used**: 2.0.0.61501

**Steps to Reproduce**:

1. Try to compile this (verified to not work in .NETStandard 1.6 project:
```
public class MyClass
{
	public (float X, float Y, float Z) Location
	{
		get
		{
			bool hasX = true;
			bool hasY = false;
			bool hasZ = true;
			float x = 1; float y = 2; float z = 3;
			return (hasX ? x : float.NaN, hasY ? y : float.NaN, hasZ ? z : float.NaN);
		}
	}
}
```

**Expected Behavior**: That it compiles without error.

**Actual Behavior**: It doesn't compile with errors about ')' and ';' being expected.

I noticed that it works if I put the expressions in brackets:
`return ((hasX ? x : float.NaN), (hasY ? y : float.NaN), (hasZ ? z : float.NaN));`</Description>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>04/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18390</IssueID>
    <Title>Strange indentation two new lines after comment</Title>
    <Description>Code:
```cs
using System;

namespace ConsoleApp1
{
    // Anything

    class Program
    {
        static void Main()
        {
            Console.ReadLine();
        }
    }
}
```

Place caret at the end of the line `// Anything`. Press enter twice.

Expected:
```cs
using System;

namespace ConsoleApp1
{
    // Anything

   [|]

    class Program
    {
        static void Main()
        {
            Console.ReadLine();
        }
    }
}
```

Actual:
```cs
using System;

namespace ConsoleApp1
{
    // Anything

       [|]

    class Program
    {
        static void Main()
        {
            Console.ReadLine();
        }
    }
}
```</Description>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18371</IssueID>
    <Title>Intellisense displays tuple elements as fields when they are actually constructor arguments</Title>
    <Description>**Version Used**: 
Visual C# 2017 00369-60000-00001-AA863
**Steps to Reproduce**:

1. Create a C# project in Visual Studio 2017
2. Add the following class
  ```C#
  sealed class NullTolerantComparer&lt;T&gt; : System.Collections.Generic.EqualityComparer&lt;T&gt;
  {
      public NullTolerantComparer(Func&lt;T, T, bool&gt; equals, Func&lt;T, int&gt; getHashCode) =&gt;
          (equals, getHashCode) = (equals, getHashCode);
  
      public override bool Equals(T x, T y) =&gt; ReferenceEquals(x, null)
          ? ReferenceEquals(y, null)
          : equals(x, y);
  
      public override int GetHashCode(T obj) =&gt; ReferenceEquals(null, obj) ? 0 : getHashCode(obj);
  
      private readonly Func&lt;T, T, bool&gt; equals;
      private readonly Func&lt;T, int&gt; getHashCode;
  }
  ```
3. Observe the hover tips shown in the screenshots below
![image](https://cloud.githubusercontent.com/assets/5034656/24582434/dc889b70-16fd-11e7-9100-2f3465db8228.png) _Note: mouse is hovering at text cursor location_
![image](https://cloud.githubusercontent.com/assets/5034656/24582443/f823affa-16fd-11e7-8986-614b80d91aa4.png) _Note: mouse is hovering at text cursor location_

**Expected Behavior**:
Intellisense indicates that the tuple elements actually refer to the constructor arguments, not the class fields.
CS1717 is raised.
**Actual Behavior**:
Intellisense incorrectly displays the tuple elements as fields when they are in fact parameters.
No warning is raised.</Description>
    <CreatedDate>01/04/2017</CreatedDate>
    <ClosedDate>08/06/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18347</IssueID>
    <Title>ExtractMethodCodeRefactoringProvider crashes on selecting a line that references an argument captured by a local method</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Community 2017
Version 15.0.26228.9

**Steps to Reproduce**:

```csharp
namespace ExtractMethodCrashRepro
{
	public static class SomeClass
	{
		private static void Repro( int arg )
		{
			int localValue = arg;

			int LocalCapture() =&gt; arg;
		}
	}
}
```

Select the line `int localValue = arg;`

**Expected Behavior**:
A lightbulb with available refactorings should appear.

**Actual Behavior**:
`ExtractMethodCodeRefactoringProvider` crashes with the following stack trace:

```
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>31/03/2017</CreatedDate>
    <ClosedDate>31/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18336</IssueID>
    <Title>Incorrect suggestion to convert type to var in foreach</Title>
    <Description>**Version Used**:  VS 2017

**Steps to Reproduce**:

1. Copy/Paste C# code:
```C#
using System.Text.RegularExpressions;

class C
{
    void M()
    {
        var matches = Regex.Matches("", "");
        foreach (Match match in matches)
        {
            var groups = match.Groups;
        }
    }
}
```
2. In Tools Options, set Var Preference Elsewhere to 'Prefer var' and Severity to Warning

**Expected Behavior**:
No suggestion to convert `Match` to `var` in the foreach

**Actual Behavior**:
Suggestion to convert `Match` to `var` results in `match` being of type `object` , so the `Groups` property is not available.
</Description>
    <CreatedDate>31/03/2017</CreatedDate>
    <ClosedDate>31/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18321</IssueID>
    <Title>Use expression body has encountered an error</Title>
    <Description>I was attempting to add this method
```C#
       public void EncapsulateField()
            =&gt; _editorInProc.EncapsulateField()
```
to the end of `Editor_OutOfProc.cs` and then invoking GFU on the call to `EncapsulateField()`. I consistently get the following error bar. Unfortunately this doesn't repro in a standalone case.

```C#
&gt;	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;System.__Canon&gt;.GetFirstStatementSemicolon(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;.Update(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax declaration, bool preferExpressionBody, Microsoft.CodeAnalysis.Options.OptionSet options)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;.AddEdits(Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.Diagnostic diagnostic, Microsoft.CodeAnalysis.Options.OptionSet options, bool preferExpressionBody, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;.FixAllAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics, Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllAsync.AnonymousMethod__0(Microsoft.CodeAnalysis.Editing.SyntaxEditor editor)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(Microsoft.CodeAnalysis.Document document, System.Func&lt;Microsoft.CodeAnalysis.Editing.SyntaxEditor, System.Threading.Tasks.Task&gt; editAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.&lt;FixAllWithEditorAsync&gt;d__3&gt;(ref Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.&lt;FixAllWithEditorAsync&gt;d__3 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(Microsoft.CodeAnalysis.Document document, System.Func&lt;Microsoft.CodeAnalysis.Editing.SyntaxEditor, System.Threading.Tasks.Task&gt; editAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;System.__Canon&gt;.RegisterCodeFixesAsync.AnonymousMethod__0(System.Threading.CancellationToken c)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.DocumentChangeAction.GetChangedDocumentAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetChangedSolutionAsync&gt;d__21&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetChangedSolutionAsync&gt;d__21 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputeOperationsAsync&gt;d__18&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputeOperationsAsync&gt;d__18 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputePreviewOperationsAsync&gt;d__20&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputePreviewOperationsAsync&gt;d__20 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Collections.Immutable.ImmutableArray&lt;System.__Canon&gt;&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetPreviewOperationsAsync&gt;d__17&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetPreviewOperationsAsync&gt;d__17 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewOperationsAsync.AnonymousMethod__0()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeActions.CodeActionOperation&gt;&gt;&gt;.InnerInvoke()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
 	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
 	mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown
```

Dump at `\\mlangfs1\public\rchande\usexpressionbody.dmp`.</Description>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18276</IssueID>
    <Title>IDE syntax coloring: missing keyword-like classification for binding-fallback-discards</Title>
    <Description>Perfectionist hell:

&lt;img width="182" alt="screen shot 2017-03-29 at 14 39 25" src="https://cloud.githubusercontent.com/assets/194765/24452772/8becc0aa-148d-11e7-833a-a279e56b480b.png"&gt;

&lt;img width="282" alt="screen shot 2017-03-29 at 14 36 37" src="https://cloud.githubusercontent.com/assets/194765/24452738/4eda1744-148d-11e7-9bec-76978cdd9e57.png"&gt;

Since this kind of "binding fallback" discards can change meaning if symbol named `_` suddenly appears in scope, syntax coloring can be especially important.</Description>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>29/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18167</IssueID>
    <Title>Using Formatter.Fomat from CoreCLR</Title>
    <Description>**Version Used**: 

VS 2017

**Steps to Reproduce**:

1.  I want to format some code on CoreCLR
2. Trying to add NuGet reference to Microsoft.CodeAnalysis.CSharp.Workspaces fails

**Expected Behavior**:

Should be able to do add the reference and then use `Formatter.Format`

**Actual Behavior**:

Gets an error.

```
  GET https://api.nuget.org/v3/registration1-gz/microsoft.codeanalysis.csharp.workspaces/index.json
  OK https://api.nuget.org/v3/registration1-gz/microsoft.codeanalysis.csharp.workspaces/index.json 167ms
Restoring packages for C:\Work\ravendb-4.0\src\Raven.Server\Raven.Server.csproj...
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1). Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1.
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / ubuntu.14.04-x64. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (ubuntu.14.04-x64).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / ubuntu.16.04-x64. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (ubuntu.16.04-x64).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win10-x64. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win10-x64).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win10-x86. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win10-x86).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win7-x64. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win7-x64).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win7-x86. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win7-x86).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win8-x64. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win8-x64).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win8-x86. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win8-x86).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win81-x64. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win81-x64).
Package Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1) / win81-x86. Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
One or more packages are incompatible with .NETCoreApp,Version=v1.1 (win81-x86).
Package restore failed. Rolling back package changes for 'Raven.Server'.
Time Elapsed: 00:00:04.5577429
========== Finished ==========
```</Description>
    <CreatedDate>25/03/2017</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18161</IssueID>
    <Title>C# Interactive Crash - ValueTuple Pattern Match</Title>
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 15.0.0+26228.9
.NET 4.6.01590
Default `System.ValueTuple` for C# Interactive

**Steps to Reproduce**:

1. Create new ValueTuple&lt;List&lt;int&gt;, int&gt;
`var val = (new List&lt;int&gt; {1, 2, 3, 4}, 5);`
2. Pattern match exact
`val is ValueTuple&lt;List&lt;int&gt;, int&gt;`
3. Should return true. Now pattern match against IEnumerable
`val is ValueTuple&lt;IEnumerable&lt;int&gt;, int&gt;`
4. Visual Studio crashes. It's occurred when closing the second &gt;, or if replacing List to `IEnumerable`, crashing before I finish typing `IEnumerable`.

This appears to occur only when the actual `val` is using an `IEnumerable` because when testing with `(1, 2)` it seems to handle it ok, even when matching against `ValueTuple&lt;IEnumerable&lt;int&gt;, int&gt;`

**Expected Behavior**:
Expression evaluate to true.

**Actual Behavior**:
Visual Studio crashes.


**Gif of Behavior**
Apologies about the quality
![visual studio c interactive valuetuple pattern match crash](https://cloud.githubusercontent.com/assets/10331270/24315338/73d16502-10b4-11e7-99ab-4d488cf96451.gif)
</Description>
    <CreatedDate>24/03/2017</CreatedDate>
    <ClosedDate>20/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18147</IssueID>
    <Title>Refactoring: Sync namespace and folder structure</Title>
    <Description>Many customers have stated they like "sync type and file name" but another refactoring they need is "sync namespace and folder" (aka "adjust namespaces"). 

This should work to rename all namespaces throughout the entire folder structure for the solution. </Description>
    <CreatedDate>24/03/2017</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18127</IssueID>
    <Title>"Place 'System' directives first when sorting usings" setting does not roam across VS installs</Title>
    <Description>**Version Used**: Visual Studio 26228.0 
**Steps to Reproduce**:

1. Install VS
2. Sign in with a user account set for roaming (Environment-&gt;Synchronized Settings-&gt;Synchronize settings across devices when signed into Visual Studio)
3. Enable "Place 'System' directives first when sorting usings" in Tools-&gt;Options-&gt;Text Editor-&gt;C#-&gt;Advanced
4. Close VS
5. Install VS on another machine (or another channel of VS)
6. Log in with the same user account from step 2

**Expected Behavior**:
Place 'System' directives first when sorting usings should be enabled

**Actual Behavior**:
The setting is not enabled.
</Description>
    <CreatedDate>23/03/2017</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>18117</IssueID>
    <Title>NullReferenceException in CSharpSimplifyTypeNamesDiagnosticAnalyzer with discard</Title>
    <Description>**Version Used**: 26228.9 / 2.0.0.61501

**Steps to Reproduce:**

```C#
class Program
{
    static void Main(string[] args)
    {
        Test.Method(out _);
    }

}

class Test
{
    public static void Method(out string s) { s = "5"; }
}
```

**Actual results:**
```
Compilation: ConsoleApp1
SyntaxTree: C:\Users\me\AppData\Local\Temporary Projects\ConsoleApp1\Program.cs
SyntaxNode: Test.Method [MemberAccessExpressionSyntax]@[239..250) (12,12)-(12,23)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckFeatureAvailability(Location location, MessageID feature, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.FallBackOnDiscard(IdentifierNameSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIdentifier(SimpleNameSyntax node, Boolean invoked, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentExpression(DiagnosticBag diagnostics, ExpressionSyntax argumentExpression, RefKind refKind, Boolean allowArglist)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentValue(DiagnosticBag diagnostics, ArgumentSyntax argumentSyntax, Boolean allowArglist, RefKind refKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(AnalyzedArguments result, DiagnosticBag diagnostics, Boolean hadError, ArgumentSyntax argumentSyntax, Boolean allowArglist, Boolean isDelegateCreation)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.SymbolsAreCompatible(TSyntaxNode originalNode, TSyntaxNode newNode, Boolean requireNonNullSymbols)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.SymbolsForOriginalAndReplacedNodesAreCompatible()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(MemberAccessExpressionSyntax memberAccess, ExpressionSyntax reducedName, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(MemberAccessExpressionSyntax memberAccess, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpressionCore(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.SimplifyTypeNames.SimplifyTypeNamesDiagnosticAnalyzerBase`1.TrySimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, AnalyzerOptions analyzerOptions, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.&lt;&gt;c__DisplayClass2_0.&lt;AnalyzeNode&gt;b__1(SyntaxNode n)
   at Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack..ctor(SyntaxNode startingNode, Func`2 descendIntoChildren)
   at Microsoft.CodeAnalysis.SyntaxNode.&lt;DescendantNodesOnly&gt;d__168.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.AnalyzeNode(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__DisplayClass42_1`1.&lt;ExecuteSyntaxNodeAction&gt;b__1()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(DiagnosticAnalyzer analyzer, Action analyze, Nullable`1 info)

```

in Error List.

_By the way, are you sure the syntax node numbers are correct? (12,12)-(12,23) should be (13,13)-(13,24) according to VS status bar..._</Description>
    <CreatedDate>23/03/2017</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17999</IssueID>
    <Title>[IOperation] No top-level block access in VB</Title>
    <Description>In C#, we can access all `IOperation`s in a method by getting the operation on the top-level syntax `Block` for a method. There is no equivalent way to go from a syntax node to all `IOperation`s in VB (that I can find).

Related: perhaps we should also be able to move from a `MethodDeclaration` (C#) or `SubBlock` (VB) to this top-level block in both languages. When I first tried out `IOperation`, that's certainly one of the first things that threw me for a loop.

@dotnet/analyzer-ioperation </Description>
    <CreatedDate>20/03/2017</CreatedDate>
    <ClosedDate>20/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17996</IssueID>
    <Title>Crash when debugging tuples and dynamic code</Title>
    <Description>
```C#
class Program
{
    static void Main()
    {
        (object, object) x = (null, null);
        dynamic y = x;
        y.Item1 = (object) y;
        x = y; // Set a breakpoint here and run to this line
    }
}
```

https://gist.github.com/VladimirReshetnikov/5b66903ca5d2445ade0a043f5c42bf36
Thanks @VladimirReshetnikov
FYI @VSadov </Description>
    <CreatedDate>20/03/2017</CreatedDate>
    <ClosedDate>22/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17972</IssueID>
    <Title>Extract method refactoring exception after copy-paste local method into for-loop body</Title>
    <Description>**Version Used**: 
VS2017 RTM

My repro steps are rather simple. I just copied local method into a for() loop. Nothing special was about this method (it just borrows some local vars and input arguments from it's parent (int, ref struct, string[]).

```
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>19/03/2017</CreatedDate>
    <ClosedDate>21/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17946</IssueID>
    <Title>Need analyzer/fixer that checks modifiers and enforces code style settings.</Title>
    <Description>For example:
Always include modifiers
Omit default modifiers.

etc.  </Description>
    <CreatedDate>17/03/2017</CreatedDate>
    <ClosedDate>18/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17943</IssueID>
    <Title>IDE0009: Fix all occurrences in Document not working</Title>
    <Description>**Version Used:** 
Visual Studio 15.0.0.0+26228.9

**Steps to Reproduce**:
1. Goto `Options -&gt; Text Editor -&gt; C# -&gt; Code Style -&gt; General` and make sure all of the `'this.' preferences` are set to `Prefer 'this.'`
2. Create a new C# project.
3. Add multiple private fields to a class and try to reference them without the `this.` qualifier.
4. `Ctrl+.` on one of the fields (which should show you the `IDE0009` code fix)
5. Select `Fix all occurrences in Document`

**Expected Behavior**:
All of the fields should be qualified with `this.`

**Actual Behavior**:
Nothing happens. It doesn't add `this.` to any of the variable references.


Something to note, applying a single code fix (not Fix all occurrences in X) works. Also, other CodeFixes work. I seem to only be having this issue in IDE0009.</Description>
    <CreatedDate>17/03/2017</CreatedDate>
    <ClosedDate>25/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17910</IssueID>
    <Title>"Unexpected null" trying to invoke inline rename</Title>
    <Description>```C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.Contract.ThrowIfNull&lt;System.__Canon&gt;(System.__Canon value, string message) Line 73	C#
&gt;	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InitializeOpenBuffers(Microsoft.VisualStudio.Text.SnapshotSpan triggerSpan) Line 175	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InlineRenameSession(Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService renameService, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.VisualStudio.Text.SnapshotSpan triggerSpan, Microsoft.CodeAnalysis.Editor.IInlineRenameInfo renameInfo, Microsoft.CodeAnalysis.Editor.Host.IWaitIndicator waitIndicator, Microsoft.CodeAnalysis.Editor.ITextBufferAssociatedViewService textBufferAssociatedViewService, Microsoft.VisualStudio.Text.ITextBufferFactoryService textBufferFactoryService, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Editor.IRefactorNotifyService&gt; refactorNotifyServices, Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener asyncListener) Line 141	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService.StartInlineSession(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) Line 62	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteRenameWorker(Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs args, System.Threading.CancellationToken cancellationToken) Line 111	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext) Line 57	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, bool showProgress, System.Action&lt;Microsoft.CodeAnalysis.Editor.Host.IWaitContext&gt; action) Line 45	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs args, System.Action nextHandler) Line 58	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers&lt;Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs&gt;(System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs&gt;&gt; commandHandlers, Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs args, System.Action lastHandler) Line 102	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Execute&lt;Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs&gt;(Microsoft.VisualStudio.Utilities.IContentType contentType, Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs args, System.Action lastHandler) Line 69	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteRename(Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType, System.Action executeNextCommandTarget) Line 647	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType) Line 469	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 40	C#
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 85	C#
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 85	C#
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 166	C#
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 1454	C#
 	Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 746	C#
 	Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 9272	C#
```

dump at `\\mlangfs1\public\rchande\rename_unexpectednull.dmp`
</Description>
    <CreatedDate>16/03/2017</CreatedDate>
    <ClosedDate>08/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17871</IssueID>
    <Title>Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	</Title>
    <Description>RTM build.

``` C#

        private async Task&lt;bool&gt; ShowAsyncCore(IProjectTree node, string templateFolderName, string templateName, string addNewItemDirectory)
        {
            await _projectVsServices.ThreadingService.SwitchToUIThread();

            IVsAddProjectItemDlg addItemDialog = _serviceProvider.GetService&lt;IVsAddProjectItemDlg, SVsAddProjectItemDlg&gt;();
            Assumes.Present(addItemDialog);

            __VSADDITEMFLAGS flags = __VSADDITEMFLAGS.VSADDITEM_AddNewItems | __VSADDITEMFLAGS.VSADDITEM_SuggestTemplateName | __VSADDITEMFLAGS.VSADDITEM_AllowHiddenTreeView;
            Guid addItemTemplateGuid = Guid.Empty;  // Only used if the hierarchy doesn't provide a AddItemTemplatesGuid
            string _ = string.Empty;

            HResult result = addItemDialog.AddProjectItemDlg(node.GetHierarchyId(), ref addItemTemplateGuid, _projectVsServices.VsProject, (uint)flags, templateFolderName, templateName, ref addNewItemDirectory, ref _, out _); &lt;--- This caused it
            if (result.IsOK)
                return true;

            if (result == VSConstants.OLE_E_PROMPTSAVECANCELLED)
                return false;

            throw result.Exception;
        }

```



```
Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Error	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	Microsoft.VisualStudio.ProjectSystem.Managed.VS		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.VisualStudio.ProjectSystem.Managed.VS
SyntaxTree: E:\project-system\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ProjectSystem\VS\Templating\ProjectAddItemDialog.cs
SyntaxNode: (uint)flags [CastExpressionSyntax]@[2852..2863) (58,139)-(58,150)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckFeatureAvailability(Location location, MessageID feature, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.FallBackOnDiscard(IdentifierNameSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIdentifier(SimpleNameSyntax node, Boolean invoked, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentExpression(DiagnosticBag diagnostics, ExpressionSyntax argumentExpression, RefKind refKind, Boolean allowArglist)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentValue(DiagnosticBag diagnostics, ArgumentSyntax argumentSyntax, Boolean allowArglist, RefKind refKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(AnalyzedArguments result, DiagnosticBag diagnostics, Boolean hadError, ArgumentSyntax argumentSyntax, Boolean allowArglist, Boolean isDelegateCreation)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleArrayInitializer(ExpressionSyntax node, TypeSymbol destinationType, BindValueKind valueKind, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeSymbol declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementBreaksInvocableExpression(TExpressionSyntax expression, TExpressionSyntax newExpression)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode previousOriginalNode, TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.CastExpressionSyntaxExtensions.IsUnnecessaryCast(CastExpressionSyntax cast, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer.IsUnnecessaryCast(SemanticModel model, SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.RemoveUnnecessaryCast.RemoveUnnecessaryCastDiagnosticAnalyzerBase`1.TryRemoveCastExpression(SemanticModel model, SyntaxNode node, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.RemoveUnnecessaryCast.RemoveUnnecessaryCastDiagnosticAnalyzerBase`1.&lt;Initialize&gt;b__6_0(SyntaxNodeAnalysisContext nodeContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__DisplayClass42_1`1.&lt;ExecuteSyntaxNodeAction&gt;b__1()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(DiagnosticAnalyzer analyzer, Action analyze, Nullable`1 info)
-----
'.

```</Description>
    <CreatedDate>15/03/2017</CreatedDate>
    <ClosedDate>27/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17862</IssueID>
    <Title>csc.exe crashes with InvalidOperationException if destructuring assignment is used in an async method</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2017
Version 15.0.26228.4 D15RTWSVC
Microsoft .NET Framework
Version 4.6.01586

**Steps to Reproduce**:

Try to compile the following code:
```
using System.Threading.Tasks;

class C
{
    static async Task Bar(Task&lt;(int, int)&gt; task)
    {
        (_, Foo()) = await task;
    }

    private static int x;
    static ref int Foo()
    {
        return ref x;
    }
}
```

**Expected Behavior**: The compilation is successful.

**Actual Behavior**: csc.exe crashes with an unhandled exception

```
System.InvalidOperationException: Unexpected value 'Call' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind'
	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.HoistExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression expr, Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax awaitSyntaxOpt, int syntaxOffset, bool isRef, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt; sideEffects, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.StateMachineFieldSymbol&gt; hoistedFields, ref bool needsSacrificialEvaluation)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.HoistRefInitialization(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedLocal local = {Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedLocal}, Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression node = {Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator})	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(ref int recursionDepth = 1, Microsoft.CodeAnalysis.CSharp.BoundExpression node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement node = {Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement})	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt; list)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock node = {Microsoft.CodeAnalysis.CSharp.BoundBlock})	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitBlock.AnonymousMethod__0()	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; locals, System.Func&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt; wrapped)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(Microsoft.CodeAnalysis.CSharp.BoundSequencePoint node = {Microsoft.CodeAnalysis.CSharp.BoundSequencePoint})	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt; list)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock node = {Microsoft.CodeAnalysis.CSharp.BoundBlock})	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitBlock.AnonymousMethod__0()	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; locals, System.Func&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt; wrapped)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.BoundStatement body = {Microsoft.CodeAnalysis.CSharp.BoundBlock}, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol moveNextMethod)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedImplementationMethod moveNextMethod)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations()	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite()	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol method, int methodOrdinal, Microsoft.CodeAnalysis.CSharp.BoundStatement body = {Microsoft.CodeAnalysis.CSharp.BoundBlock}, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields previousSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState compilationState, bool instrumentForDynamicAnalysis, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider debugDocumentProvider, ref System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; dynamicAnalysisSpans, Microsoft.CodeAnalysis.DiagnosticBag diagnostics = {Microsoft.CodeAnalysis.DiagnosticBag}, ref Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator lazyVariableSlotAllocator, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt; lambdaDebugInfoBuilder, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt; closureDebugInfoBuilder, out Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol stateMachineTypeOpt = null)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol methodSymbol, int methodOrdinal, ref Microsoft.CodeAnalysis.CSharp.Binder.ProcessedFieldInitializers processedInitializers, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields previousSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState compilationState)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol containingType)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedTypeAsTask.AnonymousMethod__0()	Unknown
 	Microsoft.CodeAnalysis.dll!Roslyn.Utilities.UICultureUtilities.WithCurrentUICulture.AnonymousMethod__0()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 19, Status = Running, Method = "Void &lt;WithCurrentUICulture&gt;b__0()")	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
```</Description>
    <CreatedDate>14/03/2017</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17836</IssueID>
    <Title>VS2017 Roslyn suggets using var on foreach with MatchCollection </Title>
    <Description>I'm not sure if this is the right repository and this issue is might have been opened before, but I could not find it.

**Version Used**: 
Visual Studio 2017

**Steps to Reproduce**:
Iterate through a match collection using a `foreach` like:
```cs
foreach (Match match in MyRegex.Matches("some input"))
{
    // ...
}
```

**Expected Behavior**:
Roslyn does not suggest anything.

**Actual Behavior**:
Roslyn will suggest "use 'var' instead of explicit type". However, `Matches()` returns `MatchCollection` instance which is a non-generic `ICollection`. This results in `match` being an `object` rather than a `Match` instance.

![image](https://cloud.githubusercontent.com/assets/1521207/23902300/f26f7170-08c0-11e7-893e-6a71b1afc182.png)

Please note that I use an EditorConfig file to specify my code rules:
```ini
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion
```</Description>
    <CreatedDate>14/03/2017</CreatedDate>
    <ClosedDate>14/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17821</IssueID>
    <Title>Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.Rename_Control Is flakey</Title>
    <Description>Encountered in [this](https://github.com/dotnet/roslyn/pull/17760) PR

[Jenkins Failure](https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_release_vs-integration_prtest/1159/testReport/junit/Roslyn.VisualStudio.IntegrationTests.VisualBasic/BasicWinForms/Rename_Control/)

```
MESSAGE:
System.InvalidCastException : Unable to cast object of type 'Microsoft.VisualStudio.PlatformUI.UIHierarchyMarshaler' to type 'System.ComponentModel.Design.IDesignerHost'.
+++++++++++++++++++
STACK TRACE:
Server stack trace:
 at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.EditWinFormButtonProperty(String buttonName, String propertyName, String propertyValue, String propertyTypeName)
 at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
 at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg) Exception rethrown
 at [0]:
 at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
 at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
 at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.EditWinFormButtonProperty(String buttonName, String propertyName, String propertyValue, String propertyTypeName)
 at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.Rename_Control() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicWinForms.cs:line 113
```
</Description>
    <CreatedDate>14/03/2017</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17807</IssueID>
    <Title>Non-localized string in CheckFeatureAvailability (VB)</Title>
    <Description>
```VB
        Friend Shared Function CheckFeatureAvailability(Of TNode As VisualBasicSyntaxNode)(feature As Feature, node As TNode, languageVersion As LanguageVersion) As TNode
            If CheckFeatureAvailability(languageVersion, feature) Then
                Return node
            End If

            If feature = Feature.InterpolatedStrings Then
                ' Bug: It is too late in the release cycle to update localized strings.  As a short term measure we will output 
                ' an unlocalized string and fix this to be localized in the next release.
                Dim requiredVersion = New VisualBasicRequiredLanguageVersion(feature.GetLanguageVersion())
                Return ReportSyntaxError(node, ERRID.ERR_LanguageVersion, languageVersion.GetErrorName(), "interpolated strings", requiredVersion)
            Else
                Return ReportFeatureUnavailable(feature, node, languageVersion)
            End If
        End Function

```</Description>
    <CreatedDate>13/03/2017</CreatedDate>
    <ClosedDate>14/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17790</IssueID>
    <Title>Rolsyn crashes with 'InvalidOperationException' on some code using tuples</Title>
    <Description>
**Version Used**: 
Microsoft Visual Studio Community 2017
Version 15.0.26228.4 D15RTWSVC
Microsoft .NET Framework
Version 4.6.01586

**Steps to Reproduce**:

1. Open a C# project in Visual Studio 2017 
2. Paste the following code:
```
class Program
{
    static void Foo()
    {
        var x = (1, (2,3));
        (y)
        (_, var (b, c)) = x;
    }
}
``` 

**Expected Behavior**: No crash

**Actual Behavior**:  Visual Studio crashes with System.InvalidOperationException: 'This program location is thought to be unreachable.'

```
	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariable(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol declType, Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax designation, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationVariables(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol declType, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax node, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationVariables(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol declType, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax node = ParenthesizedVariableDesignationSyntax ParenthesizedVariableDesignation (b, c), Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node = DeclarationExpressionSyntax DeclarationExpression var (b, c), Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindTupleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax node = TupleExpressionSyntax TupleExpression (_, var (b, c)), Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node = TupleExpressionSyntax TupleExpression (_, var (b, c)), Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindCast(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax node = CastExpressionSyntax CastExpression (y)
        (_, var (b, c)), Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node = CastExpressionSyntax CastExpression (y)
        (_, var (b, c)), Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node = AssignmentExpressionSyntax SimpleAssignmentExpression (y)
        (_, var (b, c)) = x, Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node = AssignmentExpressionSyntax SimpleAssignmentExpression (y)
        (_, var (b, c)) = x, Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node = ExpressionStatementSyntax ExpressionStatement (y)
        (_, var (b, c)) = x;, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax syntax = AssignmentExpressionSyntax SimpleAssignmentExpression (y)
        (_, var (b, c)) = x, bool allowsAnyExpression = false, Microsoft.CodeAnalysis.DiagnosticBag diagnostics = Count = 2)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node = AssignmentExpressionSyntax SimpleAssignmentExpression (y)
        (_, var (b, c)) = x)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, out Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode bindableNode = IdentifierNameSyntax IdentifierName x, out Microsoft.CodeAnalysis.CSharp.BoundNode lowestBoundNode = null, out Microsoft.CodeAnalysis.CSharp.BoundNode highestBoundNode = null, out Microsoft.CodeAnalysis.CSharp.BoundNode boundParent = null)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions options = DefaultOptions, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node = IdentifierNameSyntax IdentifierName x, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions options = DefaultOptions, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name = IdentifierNameSyntax IdentifierName x, Microsoft.CodeAnalysis.SemanticModel semanticModel = {Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel}, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode syntax, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode syntax = IdentifierNameSyntax IdentifierName x)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.ProcessNodes()	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.Classify(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt; list, System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getNodeClassifiers, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getTokenClassifiers, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document document = Program.cs, Microsoft.CodeAnalysis.Text.TextSpan textSpan = {Microsoft.CodeAnalysis.Text.TextSpan}, System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getNodeClassifiers = IsCancellationRequested = false, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getTokenClassifiers = {Method = {System.Reflection.RuntimeMethodInfo}}, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt; result = {Method = {System.Reflection.RuntimeMethodInfo}}, System.Threading.CancellationToken cancellationToken = Count = 0)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Classification.AbstractClassificationService.&lt;AddSemanticClassificationsAsync&gt;d__5&gt;(ref Microsoft.CodeAnalysis.Classification.AbstractClassificationService.&lt;AddSemanticClassificationsAsync&gt;d__5 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getNodeClassifiers, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getTokenClassifiers, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt; result, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Classification.AbstractEditorClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt; result, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt; context = {Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan}, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan spanToTag = {Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;}, Microsoft.CodeAnalysis.Editor.IEditorClassificationService classificationService = {Microsoft.CodeAnalysis.Editor.CSharp.Classification.CSharpEditorClassificationService}, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap typeMap = {Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap})	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.&lt;ClassifySpansAsync&gt;d__2&gt;(ref Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.&lt;ClassifySpansAsync&gt;d__2 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt; context, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan spanToTag, Microsoft.CodeAnalysis.Editor.IEditorClassificationService classificationService, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap typeMap)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt; context = {Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan}, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan spanToTag = {Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;}, Microsoft.CodeAnalysis.Editor.IEditorClassificationService classificationService = {Microsoft.CodeAnalysis.Editor.CSharp.Classification.CSharpEditorClassificationService}, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap typeMap = {Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap})	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.&lt;ProduceTagsAsync&gt;d__0&gt;(ref Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.&lt;ProduceTagsAsync&gt;d__0 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt; context, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan spanToTag, Microsoft.CodeAnalysis.Editor.IEditorClassificationService classificationService, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap typeMap)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt; context)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;.TagSource.RecomputeTagsAsync(object oldState = IsCancellationRequested = false, Microsoft.VisualStudio.Text.SnapshotPoint? caretPosition = {Microsoft.CodeAnalysis.VersionStamp}, Microsoft.CodeAnalysis.Text.TextChangeRange? textChangeRange = Count = 1, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan&gt; spansToTag = {Microsoft.VisualStudio.Text.SnapshotPoint}, System.Collections.Immutable.ImmutableDictionary&lt;Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;&gt; oldTagTrees = {Microsoft.CodeAnalysis.Text.TextChangeRange}, System.Threading.CancellationToken cancellationToken = Count = 0)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;.TagSource.&lt;RecomputeTagsAsync&gt;d__83&gt;(ref Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;.TagSource.&lt;RecomputeTagsAsync&gt;d__83 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;.TagSource.RecomputeTagsAsync(object oldState, Microsoft.VisualStudio.Text.SnapshotPoint? caretPosition, Microsoft.CodeAnalysis.Text.TextChangeRange? textChangeRange, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan&gt; spansToTag, System.Collections.Immutable.ImmutableDictionary&lt;Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;&gt; oldTagTrees, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider&lt;System.__Canon&gt;.TagSource.RecomputeTagsForeground.AnonymousMethod__0(System.Threading.CancellationToken ct)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue.EnqueueBackgroundTask.AnonymousMethod__0(System.Threading.Tasks.Task _)	Unknown
 	mscorlib.dll!System.Threading.Tasks.ContinuationResultTaskFromTask&lt;System.Threading.Tasks.Task&gt;.InnerInvoke()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 18613, Status = Running, Method = "System.Threading.Tasks.Task &lt;EnqueueBackgroundTask&gt;b__0(System.Threading.Tasks.Task)", Result = "{Not yet computed}")	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
 	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
 	mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown
```</Description>
    <CreatedDate>13/03/2017</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17775</IssueID>
    <Title>How to install Microsoft.CodeAnalysis.CSharp in .NET Core, Microsoft.Composition is still a problem !!!</Title>
    <Description>Hello

Why do we have problem with "Microsoft.Composition" even after upgrade Roslyn to version 2 ?
I think someone should change "Microsoft.Composition" to "System.Composition" for working on .NET Core !!!!!!!

**Install-Package Microsoft.CodeAnalysis.CSharp.Workspaces** needs **System.Composition 1.0.31** for working on .NET Core.

please fix it.</Description>
    <CreatedDate>13/03/2017</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17723</IssueID>
    <Title>Implement VisualBasicCompilation.GetRequiredLanguageVersion</Title>
    <Description>Also LanguageVersionExtensions.ToDisplayString, MapSpecifiedToEffectiveVersion and TryParse

Relates to https://github.com/dotnet/roslyn/pull/17435</Description>
    <CreatedDate>10/03/2017</CreatedDate>
    <ClosedDate>11/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17710</IssueID>
    <Title>'ExtractMethodCodeRefactoringProvider' encountered an error and has been disabled.</Title>
    <Description>```cs
static class Program
{
    private static void Main()
    {
        D d;
        // select the first occurrence of 'd' on the following line
        (d, d) = (_,_) = (new C(), new C());
    }
    class C
    {
        public static implicit operator D(C c) =&gt; default(D);
    }

    class D { }
}
```

```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckFeatureAvailability(Location location,MessageID feature,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.FallBackOnDiscard(IdentifierNameSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIdentifier(SimpleNameSyntax node,Boolean invoked,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariables(ExpressionSyntax node,DiagnosticBag diagnostics,DeclarationExpressionSyntax&amp; declaration,ExpressionSyntax&amp; expression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariables(ExpressionSyntax node,DiagnosticBag diagnostics,DeclarationExpressionSyntax&amp; declaration,ExpressionSyntax&amp; expression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstruction(AssignmentExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(AssignmentExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionAssignment(CSharpSyntaxNode node,ExpressionSyntax left,ExpressionSyntax right,ArrayBuilder`1 checkedVariables,DiagnosticBag diagnostics,BoundDeconstructValuePlaceholder rhsPlaceholder)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstruction(AssignmentExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(AssignmentExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindConditionalOperator(ConditionalExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInferredVariableInitializer(DiagnosticBag diagnostics,ExpressionSyntax initializer,BindValueKind valueKind,CSharpSyntaxNode errorSyntax)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol,LocalDeclarationKind kind,Boolean isVar,VariableDeclaratorSyntax declarator,TypeSyntax typeSyntax,TypeSymbol declTypeOpt,AliasSymbol aliasOpt,DiagnosticBag diagnostics,CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node,CSharpSyntaxNode&amp; bindableNode,BoundNode&amp; lowestBoundNode,BoundNode&amp; highestBoundNode,BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(SemanticModel semanticModel,ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.CastExpressionSyntaxExtensions.IsUnnecessaryCast(CastExpressionSyntax cast,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CastIfPossible(ExpressionSyntax expression,ITypeSymbol targetType,Int32 position,SemanticModel semanticModel)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.TryCastTo(ITypeSymbol targetType,ExpressionSyntax expression,ExpressionSyntax newExpression,ExpressionSyntax&amp; newExpressionWithCast)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTupleExpression(TupleExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConditionalExpression(ConditionalExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expand(SyntaxNode node,SemanticModel semanticModel,SyntaxAnnotation annotationForReplacedAliasIdentifier,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Simplification.Simplifier.Expand[TNode](TNode node,SemanticModel semanticModel,Workspace workspace,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ExpandAsync[TNode](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.ExpandAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>10/03/2017</CreatedDate>
    <ClosedDate>22/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17661</IssueID>
    <Title>NetCore Console App - "Fix All Occurrences in Document/Project/Solution" does nothing</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Community 2017
Version 15.0.26228.4 D15RTWSVC
Microsoft .NET Framework
Version 4.6.01055

Windows 7 SP1 - 64 bit.

Installed Version: Community

**Steps to Reproduce**:

Launch VS2017 Community RTW
Select `File/New`
Select `Visual C#/.NET Core/Console App (.NET Core)`
Add a class (e.g. `Another.cs`)

VS2017 creates the file with the content (see below).

Note that none of the `using` statements is required (grayed by editor)

Place the cursor within the `using` statements (Lines 1-3)
Select the "Lightbulb"
Note the availability of `Remove unnecessary usings` option
Select `Fix all occurrences in` `Document`

**Contents of `Another.cs`**
```cs
using System;
using System.Collections.Generic;
using System.Text;

namespace CoreConsoleApp1
{
    class Another
    {
    }
} 
```

**Expected Behavior**:
All `using` statements are removed.

**Actual Behavior**:
No `using` statement is removed.</Description>
    <CreatedDate>09/03/2017</CreatedDate>
    <ClosedDate>25/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17640</IssueID>
    <Title>CSharpChangeSignatureDialog.VerifyReorderParameters is failing</Title>
    <Description>https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/968/testReport/junit/Roslyn.VisualStudio.IntegrationTests.VisualBasic/CSharpChangeSignatureDialog/VerifyReorderParameters/
https://ci.dot.net/job/dotnet_roslyn/job/dev16/job/windows_release_vs-integration_prtest/24/
</Description>
    <CreatedDate>08/03/2017</CreatedDate>
    <ClosedDate>07/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17625</IssueID>
    <Title>Intellisense doesn't show local variables when &lt; smaller than is used with List Count property</Title>
    <Description>**Version Used**: 
Visual Studio 2017 

**Steps to Reproduce**:

1. Open Visual Studio 2017
2. Create C# console project
3. Try to do following
var bar = 1;
var foo = new List&lt;int&gt;();
if (foo.Count &lt; bar)

**Expected Behavior**:
When you do press &lt; then b from keyboard you would expect bar to show up in intellisense.

**Actual Behavior**:
Local variables are not shown by intellisense.
If you change foo to array and use .Length instead, intellisense works.</Description>
    <CreatedDate>08/03/2017</CreatedDate>
    <ClosedDate>08/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17585</IssueID>
    <Title>Extra tab inserted below comment</Title>
    <Description>I realize the following might be a VS editor issue. However, I vaguely remember seeing this reported in the Roslyn repo a while ago, and I also vaguely remember it was supposed to have been fixed for VS2017. If I'm imagining all of that, and/or this is not the correct place for this bug, feel free to close the issue.

**Version Used**: 

Enterprise 2017 (15.0.0-RTW+26228.4)

**Steps to Reproduce**:

Type the following:

```csharp
public void Method()
{

}

// comment$$

public void AnotherMethod()
{

}
```

Place the cursor after the comment and press Enter twice.

**Actual Behavior**:

An extra tab is inserted upon entering the second newline.

![image](https://cloud.githubusercontent.com/assets/10489260/23667544/373c5ef2-032c-11e7-9329-d7ff21723101.png)

Note that the comment must be in between two methods, two namespaces, etc. This doesn't happen (for example) within a method body, or when the comment comes before any  methods in a class declaration.</Description>
    <CreatedDate>07/03/2017</CreatedDate>
    <ClosedDate>07/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17542</IssueID>
    <Title>Compiler crash: something is wrong with the decision tree for switch statement patterns</Title>
    <Description>**Version Used**: 

`master` branch @ March 4

**Steps to Reproduce**:

Compile the following code:

```c#
class S {
  void M(string s, bool b) {
    switch (s) {
      case var _ when b: break;
      case "abc": break;
      case null: break;
    }
  }
}
```

**Expected Behavior**:

Successful compilation

**Actual Behavior**:

```
This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.CSharp.DecisionTreeBuilder.AddByNull(DecisionTree decision, DecisionMaker makeDecision) in \Src\Compilers\CSharp\Portable\BoundTree\DecisionTreeBuilder.cs:line 362
   at Microsoft.CodeAnalysis.CSharp.DecisionTreeBuilder.AddByNull(Guarded guarded, DecisionMaker makeDecision) in \Src\Compilers\CSharp\Portable\BoundTree\DecisionTreeBuilder.cs:line 434
   at Microsoft.CodeAnalysis.CSharp.DecisionTreeBuilder.AddByNull(DecisionTree decision, DecisionMaker makeDecision) in \Src\Compilers\CSharp\Portable\BoundTree\DecisionTreeBuilder.cs:line 365
   at Microsoft.CodeAnalysis.CSharp.DecisionTreeBuilder.AddByNull(ByType byType, DecisionMaker makeDecision) in \Src\Compilers\CSharp\Portable\BoundTree\DecisionTreeBuilder.cs:line 382
   at Microsoft.CodeAnalysis.CSharp.DecisionTreeBuilder.AddByNull(DecisionTree decision, DecisionMaker makeDecision) in \Src\Compilers\CSharp\Portable\BoundTree\DecisionTreeBuilder.cs:line 353
   at Microsoft.CodeAnalysis.CSharp.DecisionTreeBuilder.AddToDecisionTree(DecisionTree decisionTree, SyntaxNode sectionSyntax, BoundPatternSwitchLabel label) in \Src\Compilers\CSharp\Portable\BoundTree\DecisionTreeBuilder.cs:line 52
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.PatternSwitchLocalRewriter.LowerToDecisionTree(BoundExpression loweredExpression, BoundPatternSwitchStatement node) in \Src\Compilers\CSharp\Portable\Lowering\LocalRewriter\LocalRewriter_PatternSwitchStatement.cs:line 172
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.PatternSwitchLocalRewriter.LowerPatternSwitch(BoundExpression loweredExpression, BoundPatternSwitchStatement node, ArrayBuilder`1 loweredDecisionTree) in \Src\Compilers\CSharp\Portable\Lowering\LocalRewriter\LocalRewriter_PatternSwitchStatement.cs:line 140
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.PatternSwitchLocalRewriter.MakeLoweredForm(BoundPatternSwitchStatement node) in \Src\Compilers\CSharp\Portable\Lowering\LocalRewriter\LocalRewriter_PatternSwitchStatement.cs:line 76
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.PatternSwitchLocalRewriter.MakeLoweredForm(LocalRewriter localRewriter, BoundPatternSwitchStatement node) in \Src\Compilers\CSharp\Portable\Lowering\LocalRewriter\LocalRewriter_PatternSwitchStatement.cs:line 51
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitPatternSwitchStatement(BoundPatternSwitchStatement node) in \Src\Compilers\CSharp\Portable\Lowering\LocalRewriter\LocalRewriter_PatternSwitchStatement.cs:line 16
```</Description>
    <CreatedDate>03/03/2017</CreatedDate>
    <ClosedDate>03/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17503</IssueID>
    <Title>NullReferenceException in VB ReplaceMethodWithPropertyCodeRefactoringProvider</Title>
    <Description>**Version Used**: D15Rel 26223.01

**Steps to Reproduce**:

1. Create a new VB class library
2. Inside `Class1` add the following:
  ```
  Sub Method()

  End Sub
  ```
3. In the body of `Method` type `sub&lt;space&gt;`
4. Wait a moment

**Expected Behavior**:

No errors occur

**Actual Behavior**:

A yellow info bar pops up stating "'ReplaceMethodWithPropertyCodeRefactoringProvider' has encountered an error and has been disabled." and offering to re-enable the refactoring.

If the refactoring is re-enabled, this is easily reproduced again by making edits after `sub`.

Exception:
```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.VisualBasic.CodeRefactorings.ReplaceMethodWithProperty.VisualBasicReplaceMethodWithPropertyService.GetMethodDeclaration(SyntaxToken token)
   at async Microsoft.CodeAnalysis.ReplaceMethodWithProperty.ReplaceMethodWithPropertyCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>01/03/2017</CreatedDate>
    <ClosedDate>08/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17402</IssueID>
    <Title>Nested lambda functions with the same parameter names generates an incorrect error</Title>
    <Description>```cs
using System;
using System.Threading;

public class C {
    public void M()
    {
        ThreadPool.QueueUserWorkItem(foo =&gt;
        {
            ThreadPool.QueueUserWorkItem(foo =&gt;
            {
            });
        });
    }
}
```

This generates the following error at the second call to `QueueUserWorkItem`, saying that it conflicts with another *type* parameter:

```
(13,41,13,44): error CS0412: 'foo': a parameter, local variable, or local function cannot have the same name as a method type parameter
```

[TryRoslyn repro](http://tryroslyn.azurewebsites.net/#b:master/f:&gt;ilr/K4Zwlgdg5gBAygTxAFwKYFsDcAoUlaIoYB0AKgBYBOqAhgCb47YAOwARgDZgDGM3HNECBgBhGAG9sMaTFaceMFDWQKAbgHswdGABkAPKTjrglbqgB8ACgCUUmZJmOYqmpRiHjp1DAC8MZAjMqOoAZpYeJmbWOI4AvnbSCbLsXLwaWjAAsjZJDk7SFNT0AArq6hzEAIrAqDUAqiColADq6pQA1gCSaOiWIWW+5kmOefmOhbR0peVVNfWNLW1dPX0DPkMAkFujY9Kx0cMy+zFH2LFAA===)</Description>
    <CreatedDate>26/02/2017</CreatedDate>
    <ClosedDate>26/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17398</IssueID>
    <Title>Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicChangeSignatureDialog.VerifyCodeRefactoringOffered Is Flakey</Title>
    <Description>Failed in [this](https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_release_vs-integration_prtest/434) run

```
Stacktrace

MESSAGE:
System.Runtime.InteropServices.COMException : Command "View.ShowSmartTag" is not available.
+++++++++++++++++++
STACK TRACE:
Server stack trace:
    at EnvDTE._DTE.ExecuteCommand(String CommandName, String CommandArgs)
    at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.&lt;&gt;c.&lt;ShowLightBulb&gt;b__25_0()
    at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
    at System.Windows.Threading.DispatcherOperation.InvokeImpl()
    --- End of stack trace from previous location where exception was thrown ---
    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
    at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
    at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
    at System.Windows.Threading.Dispatcher.Invoke(Action callback) 
    at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.ShowLightBulb()
    at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
    at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg) 

    Exception rethrown at [0]: 
    at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) 
    at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type) 
    at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.ShowLightBulb() 
    at Roslyn.VisualStudio.IntegrationTests.AbstractEditorTest.InvokeCodeActionList() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\AbstractEditorTest.cs:line 164 
    at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicChangeSignatureDialog.VerifyCodeRefactoringOffered() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicChangeSignatureDialog.cs:line 31
```
</Description>
    <CreatedDate>26/02/2017</CreatedDate>
    <ClosedDate>27/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17307</IssueID>
    <Title>Tuple style isn't recognized in interpolated strings</Title>
    <Description>If I have a string.Format with tuples and their implicit names, I correctly get the Suggestion dots (as configured in my EditorConfig) letting me know to use the explicit tuple name:

![image](https://cloud.githubusercontent.com/assets/1402694/23232252/6798d350-f8ff-11e6-88f9-801e106bd307.png)
![image](https://cloud.githubusercontent.com/assets/1402694/23232417/09d11894-f900-11e6-97ce-1c45d8753004.png)

However, if I convert my string.Format to an interpolated string, I don't get the Suggestion anymore...

![image](https://cloud.githubusercontent.com/assets/1402694/23232282/7d62effe-f8ff-11e6-8332-fda5050de222.png)

Repro code:
```csharp
public (int a, int b) Stuff() =&gt; (5, 3);
public string DoStuff()
{
     var stuff = Stuff();
     return $"{stuff.Item1}, {stuff.Item2}";
}
```</Description>
    <CreatedDate>22/02/2017</CreatedDate>
    <ClosedDate>19/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17296</IssueID>
    <Title>C#7 change in behavior: can no longer mix comparison operator with bitwise operator</Title>
    <Description>**Version Used**: 
This issue occurs in VS Enterprise 2017 RC 15.0.0-RC.4+26206.0 (with presumably C# 7). It does not occur in 14.0.25341.01 Update 3 (C# 6).

**Steps to Reproduce**:

1. Use the following code:

```csharp
public static byte[] StringToByteArray(string hex)
{
    for (int i = 0; i &lt; hex.Length &gt;&gt; 1; ++i)
    {
    }

    return new byte[] { };
}
```

2. Paste it into a Visual Studio 2015 C# project.
3. Also paste it into a Visual Studio 2017 RC project.

**Expected Behavior**:

Both should behave identically, or at least explain the difference.

**Actual Behavior**:

Visual Studio 2015 formats and compiles the code.

Visual Studio 2017 RC, however, formats it incorrectly:

```csharp
public static byte[] StringToByteArray(string hex)
{
    for (int i = 0; i&lt;hex.Length&gt; &gt; 1; ++i)
    {
    }

    return new byte[] { };
}
```

(Note the space between `&gt; &gt;`, thus breaking the operator.)

And also fails to compile it. It apparently assumes the above syntax to be generics, thus failing with the following error messages:

CS0118	'hex' is a variable but is used like a type
CS0307	The variable 'i' cannot be used with type arguments

I actually appreciate that this needlessly ambiguous and hard-to-read code is no longer supported, but the error messages lead me to suspect this wasn't an intended change, but is rather a side-effect of a change in parsing.</Description>
    <CreatedDate>22/02/2017</CreatedDate>
    <ClosedDate>22/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17236</IssueID>
    <Title>The setting for Enter key behavior does not show a default selection</Title>
    <Description>This is the case both in C# and VB.
Once the user makes a selection, it behaves as intended, from what I can tell.

![image](https://cloud.githubusercontent.com/assets/12466233/23090040/fd241a20-f548-11e6-9a34-6a5ee5f7337c.png)

FYI @CyrusNajmabadi </Description>
    <CreatedDate>18/02/2017</CreatedDate>
    <ClosedDate>21/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17229</IssueID>
    <Title>VS Crash: NRE in Microsoft.CodeAnalysis.CSharp.Binder.CheckFeatureAvailability</Title>
    <Description>VS build 26209.1 D15rel

Stack trace:

```
Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.CheckFeatureAvailability(Microsoft.CodeAnalysis.Location location, Microsoft.CodeAnalysis.CSharp.MessageID feature, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 2072	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.FallBackOnDiscard(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 1223	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindIdentifier(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax node, bool invoked, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 1183	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed) Line 465	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentExpression(Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax argumentExpression, Microsoft.CodeAnalysis.RefKind refKind, bool allowArglist) Line 2395	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentValue(Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax argumentSyntax, bool allowArglist, Microsoft.CodeAnalysis.RefKind refKind) Line 2160	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(Microsoft.CodeAnalysis.CSharp.AnalyzedArguments result, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool hadError, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax argumentSyntax, bool allowArglist, bool isDelegateCreation) Line 2130	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 171	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed) Line 452	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed) Line 396	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindUnaryOperator(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 2174	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed) Line 510	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed) Line 396	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindBooleanExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 2847	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 2803	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 53	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 1871	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 2125	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 36	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 1621	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 458	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, out Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode bindableNode, out Microsoft.CodeAnalysis.CSharp.BoundNode lowestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode highestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode boundParent) Line 1097	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 986	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken) Line 844	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken) Line 632	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Extensions.CastExpressionSyntaxExtensions.IsUnnecessaryCast(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax cast, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Threading.CancellationToken cancellationToken) Line 305	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CastIfPossible(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.ITypeSymbol targetType, int position, Microsoft.CodeAnalysis.SemanticModel semanticModel) Line 117	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.TryCastTo(Microsoft.CodeAnalysis.ITypeSymbol targetType, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax newExpression, out Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax newExpressionWithCast) Line 108	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node) Line 264	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 3672	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 77	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node) Line 163	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;(Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; list) Line 177	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax node) Line 2772	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 3469	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 77	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node) Line 2756	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax originalNode) Line 1015	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 3277	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 77	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax node) Line 2591	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 1416	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 77	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax node) Line 3344	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 10199	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 77	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expand(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxAnnotation annotationForReplacedAliasIdentifier, System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode, bool&gt; expandInsideNode, bool expandParameter, System.Threading.CancellationToken cancellationToken) Line 55	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Complexify(Microsoft.CodeAnalysis.SyntaxNode originalNode, Microsoft.CodeAnalysis.SyntaxNode newNode) Line 249	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 162	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node) Line 163	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt;(Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; list) Line 140	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax node) Line 3096	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 7284	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 166	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax node) Line 3711	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 14919	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 166	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax node) Line 163	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;(Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; list) Line 140	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax node) Line 3559	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 12820	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 166	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax node) Line 163	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;(Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; list) Line 140	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax node) Line 3450	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Line 11442	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 166	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.AnnotateAndRename(Microsoft.CodeAnalysis.Rename.RenameRewriterParameters parameters) Line 40	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.AnnotateAndRename_WorkerAsync(Microsoft.CodeAnalysis.Solution originalSolution, Microsoft.CodeAnalysis.Solution partiallyRenamedSolution, System.Collections.Generic.HashSet&lt;Microsoft.CodeAnalysis.DocumentId&gt; documentIdsToRename, System.Collections.Generic.ISet&lt;Microsoft.CodeAnalysis.Rename.RenameLocation&gt; renameLocations, Microsoft.CodeAnalysis.Rename.ConflictEngine.RenamedSpansTracker renameSpansTracker, bool replacementTextValid) Line 751	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.ResolveConflictsAsync() Line 139	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.ResolveConflictsAsync(Microsoft.CodeAnalysis.Rename.RenameLocations renameLocationSet, string originalText, string replacementText, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Func&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ISymbol&gt;, bool?&gt; hasConflict, System.Threading.CancellationToken cancellationToken) Line 66	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.InlineRenameLocationSet.GetReplacementsAsync(string replacementText, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken) Line 45	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.UpdateConflictResolutionTask.AnonymousMethod__0(System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Editor.IInlineRenameLocationSet&gt; t) Line 463	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.TaskExtensions.SafeContinueWithFromAsync.AnonymousMethod__0(System.Threading.Tasks.Task antecedent) Line 268	C#

```

Crash dump:

%internal_share%\public\tomat\bugs\17229</Description>
    <CreatedDate>18/02/2017</CreatedDate>
    <ClosedDate>24/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17181</IssueID>
    <Title>Ellipsis is showing even if a diagnostic is suppressed with #pragma</Title>
    <Description>**Version Used**: Visual Studio 2017 RC 15.0.0-RC4+26206.0

**Code to Reproduce**:

![ellipsis](https://cloud.githubusercontent.com/assets/11931318/23032740/c6976738-f475-11e6-82f9-740f1bf1d19f.png)
</Description>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17178</IssueID>
    <Title>VS crashes itself shortly after opening solution with .NET Core and UWP project</Title>
    <Description>d15rel 26214.0

After opening a solution from my MRU and switching to another app, several seconds later VS crashed itself. Here is the info from the Event Viewer:

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.ArgumentException: An item with the same key has already been added.
   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)
   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.AddAdditionalDocument(IVisualStudioHostDocument document, Boolean isCurrentContext)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.AddAdditionalFile(String additionalFilePath, Func`2 getIsInCurrentContext)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.&lt;&gt;c__DisplayClass38_0.&lt;AddAdditionalFile&gt;b__0()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.&lt;&gt;c__DisplayClass13_0.&lt;ExecuteForegroundAction&gt;b__0(Task _)
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass3_0.&lt;SafeContinueWith&gt;b__0(Task antecedent)
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass7_0`1.&lt;SafeContinueWith&gt;b__0(Task t)
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass7_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at System.ThrowHelper.ThrowArgumentException(System.ExceptionResource)
   at System.Collections.Generic.Dictionary`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Insert(System.__Canon, System.__Canon, Boolean)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.AddAdditionalDocument(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument, Boolean)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.AddAdditionalFile(System.String, System.Func`2&lt;Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument,Boolean&gt;)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject+&lt;&gt;c__DisplayClass38_0.&lt;AddAdditionalFile&gt;b__0()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject+&lt;&gt;c__DisplayClass13_0.&lt;ExecuteForegroundAction&gt;b__0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass3_0.&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass7_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.Editor.Shared.Utilities.SynchronizationContextTaskScheduler.PostCallback(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```

```
Faulting application name: devenv.exe, version: 15.0.26214.0, time stamp: 0x58a35a53
Faulting module name: Microsoft.CodeAnalysis.Workspaces.ni.dll, version: 2.0.0.61413, time stamp: 0x9e3296eb
Exception code: 0x80131623
Fault offset: 0x0068a3c7
Faulting process id: 0x2af4
Faulting application start time: 0x01d28871f3e2c44d
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2017\d15rel\Common7\IDE\devenv.exe
Faulting module path: C:\WINDOWS\assembly\NativeImages_v4.0.30319_32\Microsoft.C8fd77a78#\c29dc0e2cc995f45125b7a9ba10c43b0\Microsoft.CodeAnalysis.Workspaces.ni.dll
Report Id: a8be1064-d69a-4cf2-b8e4-448b8cfd9174
Faulting package full name: 
Faulting package-relative application ID: 
```</Description>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17154</IssueID>
    <Title>No warning (CS0219) on local variables that initialized with interpolated strings, but whose values are never used</Title>
    <Description>**Version Used**: 

Visual Studio Community 2015
Version 14.0.23107.0 D14REL

**Steps to Reproduce**:

Declare and initialize a local variable with an interpolated string, but don't subsequently use the variable. 

E.g.

    static void Main(string[] args)
    {
         var name = "Whatever";
         var foo = "Hello, world {name}";   //warning CS2019 since 'foo' is not used.
         var bar = $"Hello, word {name}";  //no warning even though 'bar' is not used.

        return;
    }

**Expected Behavior**:

Warning: **CS0219** the variable 'bar' is assigned but its value is never used.

**Actual Behavior**:

No warning.</Description>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17148</IssueID>
    <Title>VS Crashes on solution reload</Title>
    <Description>**Version Used**: 
![image](https://cloud.githubusercontent.com/assets/9797472/22952369/97afd7d0-f2c1-11e6-932c-4e61d7fa401f.png)


**Steps to Reproduce**:

1. Open Roslyn.sln
2. switch branch in github
3. select "Reload Solution" when Visual Studio detects the change

**Visual Studio Crashes With the Following Callstack:**
```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidOperationException: Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
   at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.AbstractProjectCodeModel.GetCodeModelCache()
   at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.AbstractProjectCodeModel.TryGetCachedFileCodeModel(String fileName, ComHandle`2&amp; fileCodeModelHandle)
   at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.CodeModelIncrementalAnalyzerProvider.Analyzer.FireEvents(DocumentId documentId, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.CodeModelIncrementalAnalyzerProvider.Analyzer.AnalyzeSyntaxAsync(Document document, InvocationReasons reasons, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;&gt;c__DisplayClass30_0.&lt;ProcessDocumentAnalyzersAsync&gt;b__0(IIncrementalAnalyzer a, Document d, CancellationToken c)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;&gt;c__DisplayClass31_1`1.&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;GetOrDefaultAsync&gt;d__33`2.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetOrDefaultAsync&gt;d__33`2&lt;System.__Canon,System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.GetOrDefaultAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.Func`3&lt;System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task`1&lt;System.__Canon&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__31`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__31`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;RunAnalyzersAsync&gt;d__31`1&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.RunAnalyzersAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, System.__Canon, System.Func`4&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;ProcessDocumentAnalyzersAsync&gt;d__30.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;ProcessDocumentAnalyzersAsync&gt;d__30, Microsoft.CodeAnalysis.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ProcessDocumentAnalyzersAsync&gt;d__30 ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.ProcessDocumentAnalyzersAsync(Microsoft.CodeAnalysis.Document, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, WorkItem, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ProcessDocumentAsync&gt;d__31.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ProcessDocumentAsync&gt;d__31, Microsoft.CodeAnalysis.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ProcessDocumentAsync&gt;d__31 ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ProcessDocumentAsync(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, WorkItem, System.Threading.CancellationTokenSource)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__18.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__18, Microsoft.CodeAnalysis.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ExecuteAsync&gt;d__18 ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ExecuteAsync()
   at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+&lt;ProcessAsync&gt;d__12.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__18.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+AbstractPriorityProcessor+&lt;WaitForHigherPriorityOperationsAsync&gt;d__12.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Threading.Tasks.Task+WhenAllPromise.Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.TaskCompletionSource`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.TaskCompletionSource`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.SolutionCrawler.GlobalOperationAwareIdleProcessor.OnGlobalOperationStopped(System.Object, Microsoft.CodeAnalysis.Notification.GlobalOperationEventArgs)
   at Microsoft.CodeAnalysis.Notification.GlobalOperationNotificationService+&lt;&gt;c__DisplayClass10_1.&lt;RaiseGlobalOperationStopped&gt;b__1(System.EventHandler`1&lt;Microsoft.CodeAnalysis.Notification.GlobalOperationEventArgs&gt;)
   at Roslyn.Utilities.EventMap+Registry`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Action`1&lt;System.__Canon&gt;)
   at Roslyn.Utilities.EventMap+EventHandlerSet`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].RaiseEvent(System.Action`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Notification.GlobalOperationNotificationService+&lt;&gt;c__DisplayClass10_1.&lt;RaiseGlobalOperationStopped&gt;b__0()
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass15_0.&lt;ContinueWithAfterDelay&gt;b__1(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass3_0.&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass7_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17131</IssueID>
    <Title>IntelliSense still outputs "errors" in the Output window when it cannot file files due to races</Title>
    <Description>1. Create a new Console App (.NET Framework)
2. Delete Program.cs

Expected: No error
Actual in the Output window I get this "error":

```
[Failure] Could not find file 'c:\users\davkean\documents\visual studio 2017\Projects\ConsoleApplication1\ConsoleApplication1\Program.cs'.
```</Description>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17117</IssueID>
    <Title>InvalidCastException in CSharpInlineDeclarationCodeFixProvider</Title>
    <Description>**Version Used**: 26206

**Steps to Reproduce**:
```C#
int value;
foreach (var c in int.TryParse("0", out value).ToString()) { }
```
Invoke quick action on the first line.

**Actual Behavior**:
```
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundBlock' to type 'Microsoft.CodeAnalysis.CSharp.BoundForEachStatement'.
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetForEachStatementInfo(SemanticModel semanticModel,CommonForEachStatementSyntax forEachStatement)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.GetForEachSymbols(SemanticModel model,CommonForEachStatementSyntax forEach,IMethodSymbol&amp; getEnumeratorMethod,ITypeSymbol&amp; elementType)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode previousOriginalNode,TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDeclarationExpression(DeclarationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(ForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_0.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.CleanupDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>14/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17108</IssueID>
    <Title>String Interpolation highlight issue</Title>
    <Description>**Version Used:**
VS 2017, VS 2015
C# 6.0 

String interpolation does not highlight argument(s) if a string contains colon character ":". Please refer the screenshot for more info.

**Actual Behavior**

![image](https://cloud.githubusercontent.com/assets/554039/22885405/4a8eef22-f1c7-11e6-8689-cb4584217a4f.png)

**Expected Behavior**

![image](https://cloud.githubusercontent.com/assets/554039/22885433/770ced9c-f1c7-11e6-976a-7534098e4508.png)
 


</Description>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17104</IssueID>
    <Title>Local functions not in the navigation bar</Title>
    <Description>Currently we have 3 dropdowns in the navigation bar, projects, types in current file and members in current type.

Local functions are not in there, neither in GoToAll.

Should we have a fourth dropdown with variables/consts and local functions in current member?</Description>
    <CreatedDate>12/02/2017</CreatedDate>
    <ClosedDate>13/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17068</IssueID>
    <Title>EditorConfig expression-bodied member enforcement throws error</Title>
    <Description>From @scottaddie at https://github.com/aspnet/Tooling/issues/991

I'm using VS 2017 Enterprise RC4 (26206.0) on Windows 10 (version 1607). The type of project used here is an ASP.NET Core web application targeting .NET Core. Here are the steps to reproduce:

1. Clone https://github.com/scottaddie/TagHelpersDemo
2. Add a `.editorconfig` file to the `Solution Items` solution folder. It should contain the following:
```
# top-most EditorConfig file
root = true

[*.cs]
csharp_style_expression_bodied_methods = true : error
```
3. Modify the `Controllers\HomeController.cs` file's `Index` action method to resemble the following:
```c#
public IActionResult Index()
{
    return View();
}
```
4. After saving the changes to the `Index` action method, a red squiggly line appears under `return View();`. Hover over this, and click the "Show potential fixes" link. The following error appears:

![editorconfig_error](https://cloud.githubusercontent.com/assets/10702007/22788696/4465a3e4-eea6-11e6-9e45-8d40357e1a4d.png)

Here's the stack trace:

```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Extensions.ArrowExpressionClauseSyntaxExtensions.ConvertToBlock(ArrowExpressionClauseSyntax arrowExpression,SyntaxToken semicolonToken,Boolean createReturnStatementForExpression)
   at Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider`1.WithGenerateBody(TDeclaration declaration,OptionSet options)
   at Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider`1.Update(TDeclaration declaration,Boolean preferExpressionBody,OptionSet options)
   at Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider`1.AddEdits(SyntaxEditor editor,Diagnostic diagnostic,OptionSet options,Boolean preferExpressionBody,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider`1.FixAllAsync(Document document,ImmutableArray`1 diagnostics,SyntaxEditor editor,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.&lt;&gt;c__DisplayClass2_0.&lt;FixAllAsync&gt;b__0(SyntaxEditor editor)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

/cc: @morrisjoe </Description>
    <CreatedDate>09/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17032</IssueID>
    <Title>Remove Unnecessary Usings doesn't remove empty line</Title>
    <Description>**Version Used**: VS2017RC 15.0.26206.0

**Steps to Reproduce**:

Exec `Remove Unnecessary Usings`:

```C#
// Hello, World!

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SomeNamespace
{
}
```

**Expected Behavior**:

```C#
// Hello, World!

namespace SomeNamespace
{
}
```

**Actual Behavior**:

```C#
// Hello, World!


namespace SomeNamespace
{
}
```</Description>
    <CreatedDate>08/02/2017</CreatedDate>
    <ClosedDate>02/08/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17007</IssueID>
    <Title>Initialize field from constructor</Title>
    <Description>_From @jchannon on July 20, 2016 9:52_

## Environment data

`dotnet --info` output:

```
.NET Command Line Tools (1.0.0-preview2-003121)

Product Information:
 Version:            1.0.0-preview2-003121
 Commit SHA-1 hash:  1e9d529bc5

Runtime Environment:
 OS Name:     Mac OS X
 OS Version:  10.11
 OS Platform: Darwin
 RID:         osx.10.11-x64
```

VS Code version:1.3.1
C# Extension version:1.2.2
## Steps to reproduce

Add a new argument to a constructor
## Expected  behavior

Alt+Enter/Lightbulb option to "Initialize field from argument"
## Actual behavior

No options in lightbubl


_Copied from original issue: OmniSharp/omnisharp-vscode#591_</Description>
    <CreatedDate>07/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>17006</IssueID>
    <Title>Intellisense should suggest classes that are in the loaded projects/namespaces + add using</Title>
    <Description>_From @CarlosTorrecillas on October 15, 2016 8:53_

## Environment data

`dotnet --info` output:

Product Information:
 Version:            1.0.0-preview2-003131
 Commit SHA-1 hash:  635cf40e58

Runtime Environment:
 OS Name:     Mac OS X
 OS Version:  10.12
 OS Platform: Darwin
 RID:         osx.10.12-x64

VS Code version: 1.6.1
C# Extension version: 1.4.1
## Steps to reproduce
1. Create a public class under a namespace of one of your projects.
2. Go to another project /different namespace and on a different class try to create an instance of the class you created on step 1.
## Expected  behavior

Intellisense to show the class created previously suggesting it and if I select it, the relevant using namespace should be added to the file.
## Actual behavior

You need to type the name of the class and then you can quick fix to add the namespace.


_Copied from original issue: OmniSharp/omnisharp-vscode#825_</Description>
    <CreatedDate>07/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16996</IssueID>
    <Title>Is it possible to sort suggestion base on type hierarchy?</Title>
    <Description>_From @Thaina on May 18, 2016 4:14_

I would like vscode in C# could have this feature from monodevelop. To sort members of an object by the class it defined

![image](https://cloud.githubusercontent.com/assets/1042507/15347193/65abbb7c-1ce9-11e6-8f69-68e4ec247936.png)

It quite useful for class with a load of member from hierarchy. Such as monobehaviour in unity


_Copied from original issue: OmniSharp/omnisharp-vscode#337_</Description>
    <CreatedDate>07/02/2017</CreatedDate>
    <ClosedDate>08/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16993</IssueID>
    <Title>Is T expressions result in CS8121 error if sealed class, implementing a generic interface, is used for T</Title>
    <Description>Visual C# 2017 RC 00369-50000-00000-AA146
Visual Studio/15.0.0-RC.3+26127.3: 

**Steps to Reproduce**:

Attempt to compile the following code:

````cs
namespace NS1
{
    public interface ITest&lt;T&gt; {}

    internal class Test1 : ITest&lt;int&gt; { }
    internal sealed class Test2 : ITest&lt;int&gt; { }

    internal class C&lt;T&gt;
    {
        public void F(ITest&lt;T&gt; x)
        {
            if (x is Test1 z) { }
            if (x is Test2 y) { }
        }
    }
}
````

**Expected Behavior**:
All compiles OK.

**Actual Behavior**:
The `if (x is Test2 y) { }` line results in the error:
`CS8121 An expression of type ITest&lt;T&gt; cannot be handled by a pattern of type Test2`
</Description>
    <CreatedDate>07/02/2017</CreatedDate>
    <ClosedDate>23/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16933</IssueID>
    <Title>Incorrect behavior with newline with comments</Title>
    <Description>**Version Used**: 15.0.0-RC.3+26127.0

**Steps to Reproduce**:

1. Paste following code in VS.
```CSharp
public class C
{
    private void Method()
    {
        if (true)
        {
            //Press Enter Here Twice-&gt;
            //var stronglyTypedHandlers = from handler in _commandHandlers
            //                            where handler is ICommandHandler&lt;T&gt;
            //                            where handler.Metadata.ContentTypes.Any(contentType.IsOfType)
            //                            select handler.Value as ICommandHandler&lt;T&gt;;
        }
    }
}
```

2. Place caret at end of first comment line
3. Press Enter twice
4. The first enter is handled correctly, the second is not.

![image](https://gyazo.com/b6ce961f19833c1bf98149dc981850e0.gif)
</Description>
    <CreatedDate>03/02/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16927</IssueID>
    <Title>Formatting on close brace doesn't work for some items</Title>
    <Description>**Version Used**: 15.0.0-RC.3+26127.0

**Steps to Reproduce**:

1. Paste following code in VS.
```CSharp
class Program
{
    public static void SomeOtherMethod(bool param = false)
    {
                if (true)
                {
                }

                ((string)"").AsEnumerable();
    }
}
```

2. Delete closing brace
3. Type closing brace to trigger formatting
4. The If-Statement is formatted correctly, but the invocation is not.

![image](https://i.gyazo.com/c805d8af369fb0000e4fed93fe785239.gif)
</Description>
    <CreatedDate>03/02/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16817</IssueID>
    <Title>Add feature to disable or grey-out obsolete/deprecated C# methods, attributes, etc on autocomplete</Title>
    <Description>[@DustinCampbell recommended, a few weeks ago, that I post the request here also. Originally in [https://github.com/OmniSharp/omnisharp-vscode/issues/1109](https://github.com/OmniSharp/omnisharp-vscode/issues/1109)]

I couldn't find a setting for this, nor find results about it on Google. It would be really helpful to avoid auto-completing obsolete stuff when using an API that has legacy methods and attributes. In VSCode, greying out things marked Obsolete (and showing them last in the autocomplete list) - or maybe even being able to disable them - would be great.

Thanks,
Daniel</Description>
    <CreatedDate>29/01/2017</CreatedDate>
    <ClosedDate>29/04/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16778</IssueID>
    <Title>Declared variables confused with tuple arguments in VS tooltips</Title>
    <Description>```vb.net
Module Module1
    Sub Main()
        Dim a = 0
        Dim tuple = (a:=0, b:=0)
    End Sub
End Module
```

Hovering over `b` (the tuple argument) produces nothing, but hovering over 'a' (the other tuple argument) produces a tooltip about `a` (the declared variable).

![image](https://cloud.githubusercontent.com/assets/15987992/22351743/347d3bbe-e3ce-11e6-9a8d-dab487cdd3e5.png)

</Description>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>23/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16623</IssueID>
    <Title>Code Style: Sort modifiers</Title>
    <Description>This should prevent people to write cool modifier lists e.g. `static readonly public`.

PS: "Use explicit accessibility modifier" code style option would be a good companion to this one.</Description>
    <CreatedDate>19/01/2017</CreatedDate>
    <ClosedDate>06/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16549</IssueID>
    <Title>Please support 'edit and continue' in 'is-expressions with patterns'</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC
Version 15.0.26020.0 D15REL
Microsoft .NET Framework
Version 4.6.01055
Installed Version: Enterprise

**Steps to Reproduce**:

1. Write an 'is expression' with declaration pattern, e.g. if (item is int i)
2. Put a break point in the 'if' block and  run the program
3. When break, edit something within the 'if' body (block)

**Expected Behavior**:
If the change is something that allowed (see [here](https://github.com/dotnet/roslyn/wiki/EnC-Supported-Edits)), the program should continue to run 

**Actual Behavior**:
EnC not supported
</Description>
    <CreatedDate>17/01/2017</CreatedDate>
    <ClosedDate>18/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16542</IssueID>
    <Title>IntelliSense should show conditional compilation symbols</Title>
    <Description>**Version Used**: Visual Studio 2017 RC.3+26114.2.d15rel

**Steps to Reproduce**:

1. Create a new C# project
2. Add a conditional compilation symbol to your project (e.g. `AWESOME`)
3. Start typing `#if ` and invoke IntellISense

**Expected Behavior**:

IntelliSense displays the list of conditional compilation symbols. Ideally, across all configurations but at least for the current project configuration (e.g. `Debug|x86`).

**Actual Behavior**:

It helpfully shows `true` and `false`. Hooray!

This is especially frustrating for projects that are cross-compiled (i.e. compile for multiple TFMs). The developer cannot easily discover the conditional compilation symbol for the TFM. I ended up running a diagnostic build to see what's passed to CSC.

![image](https://cloud.githubusercontent.com/assets/5169960/22000242/f50715b4-dbf2-11e6-8f23-84350832e459.png)
</Description>
    <CreatedDate>16/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16538</IssueID>
    <Title>Crash when declaring an array before member method call with out declaration</Title>
    <Description>**Version Used**: 2.0.0.61313

**Steps to Reproduce**:

```c#
static void Main(string[] args)
{
     float|
     m.Get(out float x);
}
```
Typing `[` will cause System.InvalidOperationException: This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.CSharp.Binder.BindOutVariableDeclarationArgument(DeclarationExpressionSyntax declarationExpression, DiagnosticBag diagnostics)</Description>
    <CreatedDate>16/01/2017</CreatedDate>
    <ClosedDate>18/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16537</IssueID>
    <Title>Pattern-matching NRE when variable is captured in lambdas</Title>
    <Description>In 2017 RC (26020), a NullReferenceException is thrown when entering pattern-matching cases containing lambdas that capture the introduced variable. 
In the example bellow, an NRE is thrown when entering the `switch` statement. 

A similar issue occurs when falling through cases, where the case we're falling into contains a lambda referring the introduced variable.

Examining the generated code, it appears that a closure instance is referred to without initialization.

```
    class C { public int A; }

    class Program
    {
        static void Main(string[] args)
        {
            switch (new C())
            {
                case C c:
                    Func&lt;bool&gt; f = () =&gt; c.A &gt; 10;
                    break;
                default:
                    break;
            }
        }
    }
```</Description>
    <CreatedDate>16/01/2017</CreatedDate>
    <ClosedDate>16/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16520</IssueID>
    <Title>Quick Fix: Null Check can be simplified ignores second branch of ternary</Title>
    <Description>**Version Used**: 15.0.26020.0

```C#
var s = "";
var a = s != null ? s.Length : 42;
```

Quick fix produces
```C#
var s = "";
var a = s?.Length;
```

This silently changes the type of `a` to from `int` to `int?` and drops the `42`.

It should be
```C#
var a = s?.Length ?? 42;
```
</Description>
    <CreatedDate>15/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16511</IssueID>
    <Title>"Go to definition" not working between F# and C#</Title>
    <Description>Since F# moved over to Roslyn in the Visual Studio 2017 RC we thought one of the benefits would be to have easier navigation between F# and C#. Unfortunately this is not implemented yet.

@vasily-kirichenko and myself are interested in helping to make that work. Any pointers on where would have to look? 

/cc @KevinRansom @cartermp @dsyme</Description>
    <CreatedDate>14/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16507</IssueID>
    <Title>Compiler crashes with StackOverflowException when using out var</Title>
    <Description>**Version Used**: 
csc.dll, 2.0.0-beta6-60922-08 for .NET Core

**Steps to Reproduce**:

1. Install dotnet-cli 1.0.0-preview4-004233
2. Download this repo:  [roslyn-overflow.zip](https://github.com/dotnet/roslyn/files/705672/roslyn-overflow.zip)
3. Run `dotnet restore` and `dotnet build` on this project: test\Microsoft.DotNet.Watcher.Tools.Tests\Microsoft.DotNet.Watcher.Tools.Tests.csproj

**Expected Behavior**:
Compiles.

**Actual Behavior**:
&gt; error MSB6006: "C:\Users\namc\AppData\Local\Microsoft\dotnet\sdk\1.0.0-preview4-004233\RunCsc.cmd" exited with code -1073741571.
Process is terminated due to StackOverflowException.

The compiler failed by making this change:
```diff
--- MsBuildFileSetFactoryTest.cs	2017-01-13 17:34:06.494445500 -0800
+++ MsBuildFileSetFactoryTest1.cs	2017-01-13 17:28:00.606618500 -0800
@@ -29,19 +29,17 @@
         [Fact]
         public async Task ProjectReferences_OneLevel()
         {
-            TemporaryCSharpProject proj2;
-            TemporaryCSharpProject target;
             _tempDir
                 .SubDir("src")
                     .SubDir("Project2")
-                        .WithCSharpProject("Project2", out proj2)
+                        .WithCSharpProject("Project2", out var proj2)
                         .WithTargetFrameworks("netstandard1.1")
                         .WithDefaultGlobs()
                         .Dir()
                         .WithFile("Class2.cs")
                     .Up()
                     .SubDir("Project1")
-                        .WithCSharpProject("Project1", out target)
+                        .WithCSharpProject("Project1", out var target)
                         .WithTargetFrameworks("netcoreapp1.0", "net451")
                         .WithProjectReference(proj2)
                         .WithDefaultGlobs()
```
See code in its original context: https://github.com/aspnet/DotNetTools/blob/7ee45afed40e85652545f037cd9c3e04dd385493/test/Microsoft.DotNet.Watcher.Tools.Tests/MsBuildFileSetFactoryTest.cs#L147-L182</Description>
    <CreatedDate>14/01/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16454</IssueID>
    <Title>Constants used in local function parameter default not considered "used"</Title>
    <Description>This program

```cs
class C
{
    public static void Main(string[] args)
    {
        const int N = 2;
        void Local1(int n = N) { System.Console.WriteLine(n); }
        Local1();
        Local1(3);
    }
}
```

results in this error:

```none
warning CS0219: The variable 'N' is assigned but its value is never used
```
</Description>
    <CreatedDate>12/01/2017</CreatedDate>
    <ClosedDate>11/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16393</IssueID>
    <Title>Setting not persisted: Completion list after delete</Title>
    <Description>**Version Used**: 2.0.0.61308

_Text Editor &gt; C# &gt; IntelliSense &gt; Show completion list after a character is deleted_ setting does not seem to be preserved.

1. Export settings
2. Change the setting above
3. Import the exported setting

**Expected Behavior**: The setting to be restored to the state at the time of export

**Actual Behavior**: Setting not influenced by the import
</Description>
    <CreatedDate>10/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16392</IssueID>
    <Title>Setting not persisted: Collapse #regions</Title>
    <Description>**Version Used**: 2.0.0.61308

_Text Editor &gt; C# &gt; Advanced &gt; Collapse #regions when collapsing to definitions_ setting does not seem to be preserved.

1. Export settings
2. Enable the setting above
3. Import the exported settings

**Expected:** The setting to be cleared as it was at the time of export
**Actual:** Stays enabled</Description>
    <CreatedDate>10/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16358</IssueID>
    <Title>Suppressing StyleCop Rule with QuickAction changed indentation of summary</Title>
    <Description>**Version Used**: 1.3.1.60621

**Steps to Reproduce**:

1. Using following code:
```
        /// &lt;summary&gt;
        /// Intercepts route not found error in order to show it as friendly message on the screen.
        /// &lt;/summary&gt;
        /// &lt;param name="path"&gt;Path.&lt;/param&gt;
        /// &lt;returns&gt;404 with &lt;see cref="ErrorInfoModel"/&gt; object as content.&lt;/returns&gt;
        [HttpGet, HttpPost, HttpPut, HttpPatch, HttpDelete, HttpHead, HttpOptions]
        public HttpResponseMessage NotFound(string path)
        {
        }
```
2. Using [StyleCop](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) with active Rule [SA1133](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1133.md)
3. The attribute HttpPost will be reported as violating.
4. Suppressing the Rule

**Expected Behavior**: The code should look like this:

```
#pragma warning disable SA1133 // Do not combine attributes
        /// &lt;summary&gt;
        /// Intercepts route not found error in order to show it as friendly message on the screen.
        /// &lt;/summary&gt;
        /// &lt;param name="path"&gt;Path.&lt;/param&gt;
        /// &lt;returns&gt;404 with &lt;see cref="ErrorInfoModel"/&gt; object as content.&lt;/returns&gt;
        [HttpGet, HttpPost, HttpPut, HttpPatch, HttpDelete, HttpHead, HttpOptions]
#pragma warning restore SA1133 // Do not combine attributes
        public HttpResponseMessage NotFound(string path)
        {
        }
```

**Actual Behavior**: The summary will be indented to far:

```
#pragma warning disable SA1133 // Do not combine attributes
                              /// &lt;summary&gt;
                              /// Intercepts route not found error in order to show it as friendly message on the screen.
                              /// &lt;/summary&gt;
                              /// &lt;param name="path"&gt;Path.&lt;/param&gt;
                              /// &lt;returns&gt;404 with &lt;see cref="ErrorInfoModel"/&gt; object as content.&lt;/returns&gt;
        [HttpGet, HttpPost, HttpPut, HttpPatch, HttpDelete, HttpHead, HttpOptions]
#pragma warning restore SA1133 // Do not combine attributes
        public HttpResponseMessage NotFound(string path)
        {
        }
```

Originally filed as [DotNetAnalyzers/StyleCopAnalyzers#2273](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/2273), but they referred me here since the code fix that caused a problem is provided by Roslyn.</Description>
    <CreatedDate>09/01/2017</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16336</IssueID>
    <Title>Evaluating type switch in quick watch permanently introduces variable</Title>
    <Description>**Version Used**: VS 2017 RC (15.0.26020.0)

**Steps to Reproduce**:
```csharp
class Program
{
    static void Main(string[] args)
    {
        object value = 0;
    }$$
}
```
1. Set breakpoint at `$$`
2. Open quick watch and evaluate `(value is int a &amp;&amp; a == 0)`
3. Evaluate it again

**Expected Behavior**:
Returns `true` everytime.

**Actual Behavior**:
Returns `true` on the first evaluation and `error CS0136: A local or parameter named 'a' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter` on every further evaluation.</Description>
    <CreatedDate>08/01/2017</CreatedDate>
    <ClosedDate>08/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16293</IssueID>
    <Title>Switch over type throws null ref exception</Title>
    <Description>Reporting the unexpected behavior seen in this question: http://stackoverflow.com/questions/41504414/c-sharp-7-pattern-matching-semantics

**Version Used**: 
Microsoft Visual Studio Professional 2017 RC
Version 15.0.26014.0 D15REL
Microsoft .NET Framework
Version 4.6.01038

Installed Version: Professional
Visual C# 2017 RC   00369-50000-00000-AA365
Microsoft Visual C# 2017 RC

**Steps to Reproduce**:

1. I have not been able to reproduce this outside of my library code:
I have this block of code:
https://github.com/AsynkronIT/protoactor-dotnet/blob/master/src/Proto.Remoting/EndpointManager.cs#L21
```c#
var msg = context.Message;
//TODO: convert to switch later, currently doesnt work, switching on type throws null ref error
if (msg is Started)
{
    Console.WriteLine("[REMOTING] Started EndpointManager");
    return Actor.Done;
}
if (msg is MessageEnvelope)
{
    var env = (MessageEnvelope)msg;
    PID pid;
    if (!_connections.TryGetValue(env.Target.Host, out pid))
    {
        Console.WriteLine("Resolving EndpointWriter for {0}", env.Target.Host);
        var props =
            Actor.FromProducer(() =&gt; new EndpointWriter(env.Target.Host))
                .WithMailbox(() =&gt; new EndpointWriterMailbox());
        pid = context.Spawn(props);
        _connections.Add(env.Target.Host, pid);
    }
    pid.Tell(msg);
    return Actor.Done;
}
return Actor.Done;
```

Which works as expected.

This block however, https://github.com/AsynkronIT/protoactor-dotnet/blob/master/src/Proto.Remoting/EndpointManager.cs#L45
```c#
switch (context.Message)
{
    case Started _:
        Console.WriteLine("[REMOTING] Started EndpointManager");
        return Actor.Done;
    case MessageEnvelope env:
        PID pid;
        if (!_connections.TryGetValue(env.Target.Host, out pid))
        {
            Console.WriteLine("Resolving EndpointWriter for {0}", env.Target.Host);
            var props =
                Actor.FromProducer(() =&gt; new EndpointWriter(env.Target.Host))
                    .WithMailbox(() =&gt; new EndpointWriterMailbox());
            pid = context.Spawn(props);
            _connections.Add(env.Target.Host, pid);
        }
        pid.Tell(env);
        return Actor.Done;
    default:
        return Actor.Done;
}
```
Throws Null reference exception.

I have narrowed it down to the `case MessageEnvelope env:` line.
Replacing that with:
```c#
case MessageEnvelope _:
     var env = context.Message as MessageEnvelope;
```
Fixes the issue.

**Expected Behavior**:
I would expect the above to work just like the original if based code.

**Actual Behavior**:
Null reference exception on the `case MessageEnvelope env:` line.
Or rather it throws null reference exception directly on the `switch(context.Message)` before I am able to step into any of the case blocks.  but the above mentioned fix removes the issue.

</Description>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16259</IssueID>
    <Title>Implement customizable classification using Symbol Specifications</Title>
    <Description>
    </Description>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16233</IssueID>
    <Title>[C# Feature] Local Enums</Title>
    <Description>## Background
Local Functions are a great new feature. One of the uses I've see for local functions is local decision making. For example, functions containing switch statements. Switching on Enum values is common.

A side effect of local function capability is that it creates additional layers of scope. A best-practice is to declare variables near the point of use, for clarity. When we had only one level of scope inside a function, declaring enums at the class level was "close enough". While the idea of declaring local enums has come up before, I think they were more nice to have's than anything else. I believe that the introduction of local functions makes this something to reconsider.

## Proposed
Allow declaring enumerations inside methods.

### Justification
Using an enumeration inside a local function now requires "declaring a 'variable'" at least two levels above the point of use.

```
public class MyClass {
    public enum SwitchEnum { Option1, Option2 }
    // do stuff
    // .... stuff that doesn't care about SwitchEnum
    
    // Method that has no concept of SwitchEnum
    public string SomeMethod(){ }

    // Method the "almost" cares about SwitchEnum
    public int OuterMethod {
        // Do stuff
        // Method that cares about SwitchEnum
        int DecisionMethod( SwitchEnum switchValue ){
            switch (switchValue) {
                case switchValue.Option1: { return 38; }
            }
        }
    }
}
```
If there was ever any valid reason to put a local in a local, the enum gets even farther removed.

Clearer is
```
public class MyClass {
    public int OuterMethod {
        public enum SwitchEnum { Option1, Option2 }
        // Setup for decision
        var switchValue = SwitchEnum.Option2; 
        int DecisionMethod( SwitchEnum switchValue ){
            switch (switchValue) {
                case switchValue.Option1: { return 38; }
            }
        }
    }
}
```
The scope of declaration should mean that the declared item has meaning within that scope. Currently, this will not always be the case with local functions and enums.  

I think this case makes it worth revisiting the idea of local enums.</Description>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16187</IssueID>
    <Title>Proposal: implement limited CHA in RyuJit and take into account 'sealed' keyword</Title>
    <Description>**Devirtualize more aggressively sealed classes**: 

**Steps to Reproduce**:

Most of times calling ToString(). GetHashCode() and co is converted to a virtual call. But by specification sealed methods and classes cannot have overriden methods, so if in context the virtual method cannot be overriden, it should be enforced to be devirtualized safely. There is one difference between calling a virtual method and a non-virtual method (the null pointer check) which should be still checked on this devirtualization.

**Expected Behavior**:

It should be expected that calling .ToString() to a provable sealed class (like against an Array&lt;T&gt; classes, as byte[], should call a non-virtual method). 

This snippet of code is inside a class which is not overriden anywhere:

```
        sealed class Internal
        {
            private const string Abc = "abc";

            public override string ToString()
            {
                return Abc;
            }

            public string ToStringStatic()
            {
                return Abc;
            }
        }

       [Test]
        public void TestNonVirtualSplit()
        {
            int count = 100000000;
            var inter = new Internal();
            var virtualCall = TimmingAction.TimeInMs(() =&gt; inter.ToString(), count);
            var staticCall = TimmingAction.TimeInMs(() =&gt; inter.ToStringStatic(), count);
            Console.WriteLine($"Time: virtual: {virtualCall} static: {staticCall}");
            Assert.IsTrue(virtualCall &gt;= staticCall, "Static call should be faster");
        }
```

The output of this program is:

```
Time: virtual: 266 static: 188
```
(the code does a lambda capture, 

Not only that static calls could be optimized, but RyuJit could have bigger devirtualization opportunities.

As a phase two of this proposal, it is that RyuJit to identify sealed classes which are in context of assemblies:

- **internal classes which are not overriden inside the assembly** could be considered sealed

- **private classes (classes defined inside another classes) which are not overriden**, could be considered sealed

This optimization step could add extra startup cost when loading new assemblies to check the Class Hierarchy Analysis, so maybe the marking of internal classes/priva classes as sealed, could be done on Roslyn side

I added a reverse link [to RyuJIT repository](https://github.com/dotnet/coreclr/issues/8772)</Description>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>02/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16180</IssueID>
    <Title>Switch on pattern throws NullReferenceException</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC
Version 15.0.26014.0 D15REL
netstandard1.4

**Steps to Reproduce**:

Call this method:
```
private static RuntimeTransition BuildRuntimeTransition(TransitionBase transitionBase, IEnumerable&lt;RuntimeStateBase&gt; runtimeStates)
{
    switch (transitionBase)
    {
        case Transition transition:
            return new RuntimeTransition(
                transition.Name,
                runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                transition.Action,
                null);
        case InternalTransition transition:
            return new RuntimeTransition(
                transition.Name,
                null,
                transition.Action,
                transition.Guard);
        case ExternalTransition transition:
            return new RuntimeTransition(
                transition.Name,
                runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                transition.Action,
                transition.Guard);
        default:
            throw new ArgumentOutOfRangeException(
                nameof(transitionBase), 
                $"Invalid transition type: {transitionBase.GetType().FullName}");
    }
}
```

The method can be found [here](https://github.com/paulomorgado/StateMachineExplorations/blob/e987a5ffcf3edc1923ffacb91cd71482ea9bbd17/src/StateMachineExplorations/Definitions/RuntimeBuilder.cs#L108-L135) and a test that calls into it [here](https://github.com/paulomorgado/StateMachineExplorations/blob/e987a5ffcf3edc1923ffacb91cd71482ea9bbd17/tests/StateMachineExplorationTests/Definitions/IfElseStateTests.cs).

**Expected Behavior**:
Selects the correct branch.

**Actual Behavior**:
Throws `NullReferenceException` in the `switch (transitionBase)` line.

**Comments**

Refactoring the code to this:
```

private static RuntimeTransition BuildRuntimeTransition(TransitionBase transitionBase, IEnumerable&lt;RuntimeStateBase&gt; runtimeStates)
{
    if (transitionBase != null)
    {
        {
            if (transitionBase is Transition transition)
            {
                return new RuntimeTransition(
                    transition.Name,
                    runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                    transition.Action,
                    null);
            }
        }

        {
            if (transitionBase is InternalTransition transition)
            {
                return new RuntimeTransition(
                    transition.Name,
                    null,
                    transition.Action,
                    transition.Guard);
            }
        }

        {
            if (transitionBase is ExternalTransition transition)
            {
                return new RuntimeTransition(
                    transition.Name,
                    runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                    transition.Action,
                    transition.Guard);
            }
        }
    }

    throw new ArgumentOutOfRangeException("transitionBase", string.Format("Invalid transition type: {0}", transitionBase.GetType().FullName));
}
```

works as expected.

Decompiling the code with .NET Reflector 9.0 gives me this code:

```
private static RuntimeTransition BuildRuntimeTransition(TransitionBase transitionBase, IEnumerable&lt;RuntimeStateBase&gt; runtimeStates)
{
    TransitionBase base2 = transitionBase;
    if (base2 != null)
    {
        Transition transition = base2 as Transition;
        if (transition != null)
        {
            &lt;&gt;c__DisplayClass3_0 class_;
            class_.transition = transition;
            return new RuntimeTransition(class_.transition.Name, (runtimeStates != null) ? ((ITransitionTarget) Enumerable.Single&lt;RuntimeStateBase&gt;(runtimeStates, new Func&lt;RuntimeStateBase, bool&gt;(class_.&lt;BuildRuntimeTransition&gt;b__0))) : null, class_.transition.Action, null);
        }
        InternalTransition transition2 = base2 as InternalTransition;
        if (transition2 != null)
        {
            InternalTransition transition5 = transition2;
            return new RuntimeTransition(transition5.Name, null, transition5.Action, transition5.Guard);
        }
        ExternalTransition transition3 = base2 as ExternalTransition;
        if (transition3 != null)
        {
            &lt;&gt;c__DisplayClass3_1 class_2;
            class_2.transition = transition3;
            return new RuntimeTransition(class_2.transition.Name, (runtimeStates != null) ? ((ITransitionTarget) Enumerable.Single&lt;RuntimeStateBase&gt;(runtimeStates, new Func&lt;RuntimeStateBase, bool&gt;(class_2.&lt;BuildRuntimeTransition&gt;b__1))) : null, class_2.transition.Action, class_2.transition.Guard);
        }
    }
    throw new ArgumentOutOfRangeException("transitionBase", $"Invalid transition type: {transitionBase.GetType().FullName}");
}
```

I don't know why the need for the `&lt;&gt;c__DisplayClass3_0` and `&lt;&gt;c__DisplayClass3_1` but they seem to be causing this issue.</Description>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>02/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16173</IssueID>
    <Title>Implement customizable type/member sorting using Symbol Specifications</Title>
    <Description>Currently, we can add Symbols Specification and then control the style for each specification and that's great but there's no way to to sort these Symbols Specification inside the Manage Specifications window and I think that it would be awesome if we could control the order and then make the formatting mechanism use these specifications to sort the _code_.

In R# there's a feature called File Layout where you can plan how you want to structure the code and you can have some complex rules there, however, for people that don't use R# for whatever reason they may find this feature attractive and as useful as having naming styles.

Any plans for something like this?
</Description>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16139</IssueID>
    <Title>Proposal: Partial interface implementation a.k.a. Traits</Title>
    <Description>I believe C# could benefit from from a feature similar to traits in Scala, or mixins in other languages. This proposal could be a potential implementation for asks in both #73 or #258. The main difference would be in the implementation.

## Benefits

- Reduce boilerplate by enabling the definition of default or universal implementations on interfaces.
- Maintain the DRY rule for code that may make heavy use of common interfaces.

## Syntax
```
interface IFoo {

     void DoStuff();

     void DoThing() =&gt; { Console.WriteLine("Did Things"); }
}
```

## Syntax: Overriding default implementation

**Goal**: Don't introduce new complexity, just reuse "override" here
```
class Bar : IFoo {

     void DoStuff(){
          //Do stuff here
     }

     override void DoThing(){
          //My new impl goes here
     }
}
```

This example, while contrived demonstrates a scenario where I've chosen to implement one of the two functions in the interface, For the implementation, I've chosen explicitly to use expression bodied methods as the implementor of the functionality.

**Side Note**: I wonder how much IEquatable code is being copied and pasted between classes in code bases because this feature is missing.</Description>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>20/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16138</IssueID>
    <Title>MoveTypeCodeRefactoringProvider does not work on new project system</Title>
    <Description>**Version Used**: Visual Studio 2017 RC2

**Steps to Reproduce**:

1.  Create a netstandard project that uses the new project system
2. Change the name of the class to be different from the filename
3.  Invoke MoveTypeCodeRefactoringProvider

**Expected Behavior**:
File is renamed

**Actual Behavior**:
refactoring fails
```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.RemoveDocumentCore(DocumentId documentId)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyDocumentRemoved(DocumentId documentId)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorkerAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass19_0.&lt;InvokeCoreAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16112</IssueID>
    <Title>Question: Boxing on stack for function calls</Title>
    <Description>According to C# documentation boxing is done on heap. What i am wondering about is whether it's a good idea in theory to allocate box on stack in case boxing is done for a function argument. And move that box to heap later only if that box gets referenced from heap. I think it would be a significant optimization for function calls with object-type arguments and the ones with variable number of arguments. Please enlighten me on this matter.</Description>
    <CreatedDate>27/12/2016</CreatedDate>
    <ClosedDate>28/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16068</IssueID>
    <Title>Compiler: Hard crash when deconstructing single-valued tuple</Title>
    <Description>**Version Used**: 	a2df65047264ed08fb3a985056085dbcee821253

```C#
var (x) = ValueTuple.Create(1);
```

The compiler crashes [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Symbols/Tuples/TupleTypeSymbol.cs,87) because single-valued tuples aren't supposed to exist.

Even worse, typing the last `)` into VS will CTD the entire IDE 💥 
```
	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Symbols.TupleTypeSymbol.Create(Microsoft.CodeAnalysis.Location locationOpt, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol&gt; elementTypes, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; elementLocations, System.Collections.Immutable.ImmutableArray&lt;string&gt; elementNames, Microsoft.CodeAnalysis.CSharp.CSharpCompilation compilation, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.MakeDeconstructionConstructionStep(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructValuePlaceholder&gt; constructionInputs)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.DeconstructOrAssignOutputs(Microsoft.CodeAnalysis.CSharp.BoundDeconstructionDeconstructStep deconstructionStep, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.Binder.DeconstructionVariable&gt; variables, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionDeconstructStep&gt; deconstructionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; conversionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; assignmentSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionConstructionStep&gt; constructionStepsOpt)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.DeconstructIntoSteps(Microsoft.CodeAnalysis.CSharp.BoundDeconstructValuePlaceholder targetPlaceholder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.Binder.DeconstructionVariable&gt; variables, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionDeconstructStep&gt; deconstructionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; conversionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; assignmentSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionConstructionStep&gt; constructionStepsOpt)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionAssignment(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.Binder.DeconstructionVariable&gt; checkedVariables, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CSharp.BoundDeconstructValuePlaceholder rhsPlaceholder)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstruction(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax syntax, bool allowsAnyExpression, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
```

http://tryroslyn.azurewebsites.net/#b:master/f:r/K4Zwlgdg5gBAygTxAFwKYFsDcAoUlaIoYB0AwgPYA2lqAxsmORCDntPEmumVTfY82IBxVBFQAnMLVbh2hLsQAiYAIZQI5FFJa5ZBTiQBywdBO3EAEipAALfDPwci3AErAIDU8QCSHieQAHOAkANylUHWwA4AAjSikYWkprEBhSGABvbABIaLiEkPIwABMYAFkACgBKTOwYeob6kJVxGAqADxqAXhgANRVKYFQAFWAAmjJxVBU0CoBGKpxsgF9sVYgVUxAAlVpUJy5anMg0cQ3KGBOJADNd/e9R8dRfU/Pa7OyTmBFkK1sKYqoCreACiAEdgAMwMgEBR0Dspq1aOR4S0JIscp8PPAwAAvfYZGBQVDITAwVYfFCSdjDchwZDUqAgiDFapLVY5PLxWgwKnAeh9AZDR40GAALhgoIhMxUcVQAB5+oMRmMaAA+AA0kvp4n5yGA4gG4MhyFlNC13h1eoNAzhCLNqAtdpaDqdKPtcsVQpVT01kpFzz8ZwG71ysW5MHIIQkkkBMBi5CoMGNAxAFXIMQAVnRkJGszUsh9slN9Wc85nLqklcLVaglitsJiuQkE0mU5Q09WfaLyMgbOjQ8WSQaIDAGUN6xyPq2Lpbx/QbZQU6a5cR22mM9mBb3++ILe3obD3WikcfEQXMUPS6OdxJK4LlQHJ42Pl9vM7DauPyNyOmsznIz7AdC1fa42lvVouh6CBgGoGoSxHGA5hwS8ELLAAGZ8m3DBIvm/WkKi7ANAN3C8izQ0dMMxKcsVzOddQXQ1KA/B0eFRKYCM3ACILddi72RPjxDI0DwKAyDoNgyh4OHMtkMbVCZMorCPmbHkoxjEp9i+H4/hsAEgWEq9EKoj4aLfK1GKNaUVwmHTrD08hAWBA8YW/U9BMMiiYBMhtMTfAMXgkc5hBJXT9Oc6V4lcs9+JioTBy8nyaNUyNo3EWN9ipRxaR1fBqgSxSYAAImqIrlOyLL2AeWtAuDShiByhl8GZVlPMKoqqjK6iX1o/0aqDYK4DxfYujVbyUJUnCeRQGYEiI2s0imGYDJgUbsDEAB3B8ayeNkepSmaGB5eannlYY5jG0glrQM6Loqc7Li4BZVrVdbUC2k6aFutUKmhDAFgmsN8mm00ju27sFXOrVhgAJku67IbmaG4fuuZHv+5H0fQGHulezbwYDW7kZ+v70CRrGccBq46t5UHcOxOEYkgVAwsciJfuxGxya+GwcYK69xu6nIpwO+dc0+xHXolKUTQdL1H1rb6/Xo60mOXV1tTFxcWLlXiPXNSUda+iWlYtAKBpDECUoe7wnsBlKJdRrHnpA7Jbf+1bnfKlL1PSzT40TC51z/Ldc03NqBc3e8TfOsaADI4+TSK00I71Cdjqpw+9qaA7bZPU4V07Y5I4CFIFlyj0E76lFQW5YOQNd8/dsmtQgnwnoxUyepnTWGNLKzZdXYOuO3MT90iw83MSOLDLAMD0zE1aJOoGAAB9V5gABCBfd2jtPFYz6SBduDs6x67JmlaTdiJ6Audq+jOIMBoyywEhEJEbyEO2BJ7W6zAN27/U7r5V82J3xnlYvhX8I8w5iVnvPCCS8YAwTgjALyclLxzzaNvRBYAqz7yLhdKohlsh9nEOQLa+MACC4goAmFEMgEE7Q9gBAYEwCoRUipag2KYcg1wd7omASAj4l9yw3zaDHIhT9z5eTctXRQtcVD1zYu/H+GMxG1kAWTYByUc54RigRSRY0IIR0QnI2ONc66UAbt+NRLcS7iC0QDIWoC6IWX7sxCBX4DHQP/KPXcesTzTw8oOLBAjxLIMkkfRCGCixhJwYvPBBMD5EJIWQihyD3owBoXQ0wHgmEsLYRADhXDkGbFQHw8JxD6zCIvi0DRTxPZ3wht9TOYln5eTfieFRaI7Hk2vpo5uziu7YWBqlDScZtKhXsuFUxZYK7mIupYpR1iQq/BmWzPpOiermS1mrayrE7L/E2TLKE0VBLBPfvFV2nS4prNZk5IZ2y/JgPNq8AY9yNmPIWXFS5J45mji6YiT5xzHkd2zmM32GVaaMhgI1Rk+UbntQ4TAAA1JKJ6AB+BqdImrQHyuijqXURmUjxbAaqTxarBXhc1FkiKy6ISGdiml+KaiEs6uVfy/V3n1SGviF6SF2QvgANruIADIqAQOQYAyAKgSqlTKgA0pAYoxAqEyvIFUAAupyHOfIBSSOJtgaW6tPSGrhXDZW7jFymoNirSynj2Ia3AU63WhsvHGwIQ/cmsM1TKzeUFS2oyIw2ztvtHOsMMUYBhvbHOjsHqkx9TDCmhkhme0TTU5uyaeikxjS4oGEYoX+x7sPPxYd8z80QlHJJ5rfUwATknL+Kda1w0zvmCFEYS35xbcYuBlb5kT3OVc+RijlHByGa3MSTiqiXmyA2n5VdfXLLHU3LgMNJ27i0ZTfNPd7UeNtagT+qYQ7cTHpKBdVy/nnlCQgxeUFIkr3XlvcJe9C7euJsQtBhUT4gDPpeURAzGm3x7W03cHTCpAo/uO3+DSJhPNnQ2yDjjoPRr/pmABWbnmuPda6iYUCT3+NLnE29u970oKkl+gWsSRIVASbvGtXrEYfrSTYchlCsk5Pofk5hqBWECBKdw8plSTFCJoi/Uc+HmnpyTWqUD6IO301zPhntDjZ7Yh5D0RZapl2rNsROhx06alhJ5JvHo6Fomv3AwLcxcMdM2JinY9dBnMOcrAdapiRtD34ZgQ4wJiIr1EZo4gsjUTKMxOfvEl9DG31MYtbJljbHMlbU43kxhPG+PsM4YJ3h/CRM1LEwB/+C1gOMaJnFuT4gIvqc9khnpUw+loYw+CzB88TNmYs4CqziFat6bXY1wZa6sMFoSEWyZ2IjkOScgC5JTw2JMzEA89mF6TwjqsQ3Cb4UnkalnUWXbDRluIjOrZhRa2QWTaBJhobuy+42oOauDbJyDuxRCUigWD3AQUHq0hobARJDNDQJccb0zQWoE+xdp77krnTYlnN5mi20y1fexdju23dto4+A0RHwPzuOeqfmrllKLb1SRxFL+k9fnff7aOJHYOKjfYU2pNK0LKqwBZVAel5FkVFTRVGsmzLcUIrZcVLU3P0VZv57lVlPOiXlRZ31QnPKcWS6ZHS6bTKldkoJcL4qPPxca8F9Ljl+PXncsDby4aAq80NmWEAA===</Description>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>23/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>16042</IssueID>
    <Title>Lots of false errors in IDE</Title>
    <Description>**Version Used**: 
VS 2017 RC2

**Steps to Reproduce**:

1. Check out the following commit from Rx.NET: https://github.com/Reactive-Extensions/Rx.NET/tree/618817a75b466734f100b27f1ee74d5e2a54c46a
2. Load Rx.NET/Source/System.Reactive.sln
3. Compile and see it succeed
4. Open up ObservableQuery.cs and see lots of false errors.

**Expected Behavior**:
No false errors.

**Actual Behavior**:

Lots of errors like these:
Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0121	The call is ambiguous between the following methods or properties: 'ObservableQuery&lt;TSource&gt;.ObservableRewriter.FindObservableMethod(MethodInfo, IList&lt;Expression&gt;)' and 'ObservableQuery&lt;TSource&gt;.ObservableRewriter.FindObservableMethod(MethodInfo, IList&lt;Expression&gt;)'	System.Reactive(net45), System.Reactive(net46), System.Reactive(netstandard1.3), System.Reactive(uap10.0)	C:\dev\RxNET\Rx.NET\Source\System.Reactive.Providers\Reactive\ObservableQuery.cs	294	Active


Note this is all in a single project that's multi-targeting. There is no ambiguity. </Description>
    <CreatedDate>21/12/2016</CreatedDate>
    <ClosedDate>21/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15976</IssueID>
    <Title>condition expression with multiple operations</Title>
    <Description>Same JavaScript do more than one single operation per case, separating them with a comma and for assignation the last comma-separated value of the parenthesis will be the value to be assigned.
```
condition ? (expr1, expr2) : (expr1, expr2);
assignation = condition ? (expr1, "if") : (expr1, "else");
```
</Description>
    <CreatedDate>17/12/2016</CreatedDate>
    <ClosedDate>21/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15928</IssueID>
    <Title>Class Alias</Title>
    <Description>Really like to have a Class alias feature.

i.e.: Alias xx = cc.vv.rrr;

This is different than the using statement. The problem of using statement is: It's only effective inside the file that defines it.

What it should do is: define it in an assembly, then whatever project refer to that assembly, should automatically have that alias.

I think the price to pay for this feature is minimum.

on reflection, the type name can go back to the original class name, or make it really fancy, add a alias property to Type class. Though I think it's unnecessary.
</Description>
    <CreatedDate>15/12/2016</CreatedDate>
    <ClosedDate>15/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15862</IssueID>
    <Title>[Failing Test] BasicQuickInfo.xml</Title>
    <Description>document missing from result

https://ci.dot.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p1_prtest/132/artifact/Open/Binaries/Release/Exes/EditorTestApp/VSIntegrationTestLogs/BasicQuickInfo.html

....

System.Exception: 
ExpectedQuickInfo: Class‎ System.String
Represents text as a series of Unicode characters.To browse the .NET Framework source code for this type, see the Reference Source.

ActualQuickInfo: Class‎ System.String</Description>
    <CreatedDate>13/12/2016</CreatedDate>
    <ClosedDate>13/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15761</IssueID>
    <Title>When doing a "fix all" there's no indication that anything is happening</Title>
    <Description>1. Clone this repo to this commit: https://github.com/dotnet/roslyn-project-system/commit/e8f444a1ebe3d78b6b494d5dc355e95b7da19086
2. From a VS command prompt, run build.cmd from the root
3. Open src\ProjectSystem.sln (build 26005.0 D15PreRel)
4. Change your VB code style settings to:
![image](https://cloud.githubusercontent.com/assets/1103906/21003545/17200750-bd80-11e6-9058-5a78ad4bd2bd.png)
5. Open a file with "Me.
6. Drop lightbulb, and click Fix all in solution
-- Notice UI isn't blocked, appears if nothing is happen --
7. Drop lightbulb, and click Fix all in project
8. Drop lightbulb again, and click Fix all in project

I could get three or four preview windows showing up.

![image](https://cloud.githubusercontent.com/assets/1103906/21005104/90776c72-bd87-11e6-9def-46ef39eb013e.png)


Given it took so long and was async had zero indication that anything was happening.</Description>
    <CreatedDate>08/12/2016</CreatedDate>
    <ClosedDate>12/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15759</IssueID>
    <Title>Preserve broken expression in variable of a foreach</Title>
    <Description>Although this is a syntax error

```cs
foreach (M(e1, e2) in e3) ...
```

We do not currently preserve the binding of the expression `M(e1, e2)` in the initial bound trees. Although there are no symptoms of this (we handle the scoping of expression variables properly, and build binders as needed, and the semantic model binds the expression if and when needed so it works in all of the usual ways), we should bind and preserve it during initial binding for consistency with the design principles of the initial bound tree.

This is somewhat complicated by #13270, as we *do* have a (improper) representation of parts of the expression in some circumstances. We will have to either fix #13270, or tease apart the redundant parts so as to avoid producing a DAG (rather than a tree) in the initial bound tree. The simplest approach would be to fix #13270 and then address this, if anything remains of it. Another approach would be to have mutually exclusive parts of the bound node, one for the `BoundForEachDeconstructStep` (if it remains in the bound tree) and a new field just to preserve a broken expression in this location.</Description>
    <CreatedDate>08/12/2016</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15757</IssueID>
    <Title>Should have a way to go from a Code Style fixer -&gt; code style setting</Title>
    <Description>For naming rules, I can go from the fixer to the rule, but for code styles, there's no association between the message that shows up in the ErrorList/Editor and the rule that enforces it:

![image](https://cloud.githubusercontent.com/assets/1103906/21003125/b97c1e42-bd7d-11e6-8ea8-0dfa3860eef5.png)

It looks like I'm expected to understand that "IDE0017" is controlled by the "Prefer object initializer" setting?</Description>
    <CreatedDate>08/12/2016</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15755</IssueID>
    <Title>Fixer that fixes name violation doesn't appear to work for WithEvents</Title>
    <Description>I've previously filed the bug around this firing on withevents "fields" in the first place - but even if I wanted to fix this, it doesn't appear that you can:

![image](https://cloud.githubusercontent.com/assets/1103906/21001780/6cadeb60-bd76-11e6-9700-aed976113883.png)

Note there's no Preview? If I click Fix Name Violation, nothing visibly happens to the file (however, "Git Changes window things that the file has been modified in memory - as it appears in its changes list)

</Description>
    <CreatedDate>08/12/2016</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15754</IssueID>
    <Title>Can't fix all naming violations</Title>
    <Description>Unlike a lot of our code fixes, I can't fix all naming violations:

![image](https://cloud.githubusercontent.com/assets/1103906/21001563/31acb588-bd75-11e6-9268-383edca7d9b7.png)

Please allow it. :)</Description>
    <CreatedDate>08/12/2016</CreatedDate>
    <ClosedDate>12/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15744</IssueID>
    <Title>[Failing Test] BasicVenus.xml</Title>
    <Description>when manually ran, all run failed

..

https://ci.dot.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p1/289/console

..

  Dumping log file d:\j\workspace\windows_vsi_p13cea124f\Open\Binaries\Release\Exes\EditorTestApp\VSIntegrationTestLogs\BasicVenus.txt
22:23:22 Test: BasicVenus started: 12/7/2016 10:15:26 PM
22:23:22 	Executing action [12/7/2016 10:15:26 PM] StartTarget
22:23:22 Begin Waiting for Apex Communication
22:23:22 	Executing action [12/7/2016 10:15:26 PM] SetToolsOption
22:23:22 Previous option value: TextEditor &gt; HTML &gt; InsertTabs = False
22:23:22 Setting option: TextEditor &gt; HTML &gt; InsertTabs = false
22:23:22 	Executing action [12/7/2016 10:15:26 PM] SetFeatureOption
22:23:22 	Executing action [12/7/2016 10:15:26 PM] AddProject
22:23:22 	Executing action [12/7/2016 10:15:27 PM] AddItem
22:23:22  Scenario: Tab completing an event inserts Event Handler
22:23:22 	Executing action [12/7/2016 10:15:28 PM] OpenFile
22:23:22 DEBUG: executed DTE command File.OpenFile.
22:23:22 DEBUG: start polling for code window
22:23:22 DEBUG: polling complete
22:23:22 	Executing action [12/7/2016 10:15:28 PM] PlaceCursor
22:23:22 	Executing action [12/7/2016 10:15:28 PM] InsertText
22:23:22 	Executing action [12/7/2016 10:15:28 PM] PlaceCursor
22:23:22 	Executing action [12/7/2016 10:15:28 PM] Venus
22:23:22 	Executing action [12/7/2016 10:15:32 PM] WaitForWorkspace
22:23:22 	Executing action [12/7/2016 10:15:32 PM] SendKeys
22:23:22 	Executing action [12/7/2016 10:15:34 PM] OpenFile
22:23:22 DEBUG: executed DTE command File.OpenFile.
22:23:22 DEBUG: start polling for code window
22:23:22 DEBUG: polling complete
22:23:22 	Executing action [12/7/2016 10:15:34 PM] VerifyEditorContainsText
22:23:22 --------------------------------
22:23:22 System.Exception: Actual and expected items don't match:
22:23:22 Expected:     Protected Sub Button1_Click(sender As Object, e As EventArgs)
22:23:22 
22:23:22     End Sub
22:23:22 Actual: 
22:23:22 Partial Class _Default
22:23:22     Inherits System.Web.UI.Page
22:23:22 
22:23:22 End Class</Description>
    <CreatedDate>07/12/2016</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15736</IssueID>
    <Title>Incorrect suggestion to use 'var'.</Title>
    <Description>![image](https://cloud.githubusercontent.com/assets/4564579/20989874/37cff744-bc8b-11e6-82f6-edc557f8ff53.png)

In this case, I'm foreaching over an InlineCollection, but i'm stating that the values will be of type "Run".  This is effectively doing a ```.Cast&lt;Run&gt;()``` on the expression i'm foreaching over.  If this gets changes to 'var', then the type will be 'Inline', not 'Run'.  And if that happens, i won't be able to call "run.Text" below (as .Text is not defined on 'Inline').</Description>
    <CreatedDate>07/12/2016</CreatedDate>
    <ClosedDate>12/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15723</IssueID>
    <Title>Fix Code Style should have an option for fix all occurences like analzysers do</Title>
    <Description>**Version Used**: 

Visual Studio  2017 RC

**Steps to Reproduce**:

1.  Create any project
2.  add this method:
```
        public async Task Test()
        {
            await Task.Delay(100);
        }
```
3. Open Quick Actions 
![capture](https://cloud.githubusercontent.com/assets/24432440/20965753/7f75a59e-bc77-11e6-9380-076c15e11abc.PNG)


**Expected Behavior**:

Have an option for fix all code styles in Project, Document or Solution like analzysers have.


**Actual Behavior**:

Fixes only the current selection
</Description>
    <CreatedDate>07/12/2016</CreatedDate>
    <ClosedDate>12/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15693</IssueID>
    <Title>Hang in VS when closing MSBuild solution</Title>
    <Description>**Version Used**: VS d15rel 26001.1

**Steps to Reproduce**:

- Open MSBuild.sln from the [MSBuild repo](https://github.com/microsoft/msbuild)
- Use Visual Studio
- Close Visual Studio

(I don't think this repros all the time but I have seen it a few times)

**Expected Behavior**:
Visual Studio closes

**Actual Behavior**:
Visual studio hangs with dialog box saying "Unloading the selected projects..."
![image](https://cloud.githubusercontent.com/assets/145043/20912587/2443c410-bb25-11e6-8692-1230b1e5e492.png)

Dump shared at "\\mlangfs1\public\daplaist\dumps\devenv d15rel 26001.1 hang closing MSBuild.sln.dmp"

Call stack of UI thread:
&gt;  	[Managed to Native Transition]	
&gt;	WindowsBase.dll!MS.Win32.UnsafeNativeMethods.WaitForMultipleObjectsEx(int nCount, System.IntPtr[] pHandles, bool bWaitAll, int dwMilliseconds, bool bAlertable)	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	mscorlib.dll!System.Threading.SynchronizationContext.InvokeWaitMethodHelper(System.Threading.SynchronizationContext syncContext, System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	mscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout, bool exitContext)	Unknown
 	mscorlib.dll!System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Threading.SemaphoreSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.OnDocumentContextUpdated(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceTextContainer container)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.OnHierarchyChanged(uint docCookie, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy pHierOld, uint itemidOld, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy pHierNew, uint itemidNew, bool itemidChanged)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.OnAfterAttributeChangeEx(uint docCookie, uint grfAttribs, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy pHierOld, uint itemidOld, string pszMkDocumentOld, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy pHierNew, uint itemidNew, string pszMkDocumentNew)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.RunningDocTableEventsSink.OnAfterAttributeChangeEx(uint docCookie, uint grfAttribs, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy pHierOld, uint itemidOld, string pszMkDocumentOld, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy pHierNew, uint itemidNew, string pszMkDocumentNew)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.SetDocumentContext(Microsoft.CodeAnalysis.DocumentId documentId)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearOpenDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool isSolutionClosing)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearOpenDocuments(Microsoft.CodeAnalysis.ProjectId projectId)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearProjectData(Microsoft.CodeAnalysis.ProjectId projectId)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.VisualStudioWorkspaceHost.Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioWorkspaceHost.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.RemoveProject_Foreground(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject project)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.RemoveProject.AnonymousMethod__0()	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.ExecuteOrScheduleForegroundAffinitizedAction(System.Action action)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.RemoveProject(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject project)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.Disconnect()	Unknown
 	Microsoft.VisualStudio.LanguageServices.CSharp.dll!Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim.CSharpProjectShimWithServices.Disconnect()	Unknown

</Description>
    <CreatedDate>06/12/2016</CreatedDate>
    <ClosedDate>06/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15659</IssueID>
    <Title>Proposal: Inline local var and consts declaration in C#</Title>
    <Description>It would be great if declaring local variables and constants was easier. E.g.:
```
myList.AddRange(var defaultItems = new[]{1,2,3,4});
//and/or
myList.AddRange(int[] defaultItems = var anotherVar = new[]{1,2,3,4});
```</Description>
    <CreatedDate>04/12/2016</CreatedDate>
    <ClosedDate>06/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15614</IssueID>
    <Title>Compiler produces unverified code for ref returns</Title>
    <Description>This test fails:

```cs
        [Fact]
        void InvokeVarForLvalueInParens()
        {
            var source = @"
class Program
{
    public static void Main()
    {
        (var(x, y)) = 10;
        System.Console.WriteLine(z);
    }
    static int x = 1, y = 2, z = 3;
    static ref int var(int x, int y)
    {
        return ref z;
    }
}";
            var compilation = CreateCompilationWithMscorlib(source, references: new[] { ValueTupleRef, SystemRuntimeFacadeRef }, options: TestOptions.DebugExe);
            compilation.VerifyDiagnostics();
            CompileAndVerify(compilation, expectedOutput: "10");
        }
```

with

```none
------ Test started: Assembly: Roslyn.Compilers.CSharp.Emit.UnitTests.dll ------

Unknown .NET Framework Version: v4.6
Test 'Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenDeconstructTests.InvokeVarForLvalueInParens' failed: Microsoft.CodeAnalysis.Test.Utilities.PeVerifyException : 
PeVerify failed for assembly 'C:\Users\ngafter\AppData\Local\Temp\':
[ : Program::var1][mdToken=0x6000002][offset 0x0000000A] Return type is ByRef, TypedReference, ArgHandle, or ArgIterator.


	at Microsoft.CodeAnalysis.Test.Utilities.RuntimeAssemblyManager.PeVerifyModules(String[] modulesToVerify, Boolean throwOnError)
	at Microsoft.CodeAnalysis.Test.Utilities.RuntimeAssemblyManager.PeVerifyModules(String[] modulesToVerify, Boolean throwOnError)
	at Microsoft.CodeAnalysis.Test.Utilities.HostedRuntimeEnvironment.PeVerify()
	at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompilationVerifier.Emit(String expectedOutput, IEnumerable`1 manifestResources, EmitOptions emitOptions, Boolean peVerify, SignatureDescription[] expectedSignatures)
	at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit(Compilation compilation, IEnumerable`1 dependencies, IEnumerable`1 manifestResources, SignatureDescription[] expectedSignatures, String expectedOutput, Action`1 assemblyValidator, Action`1 symbolValidator, EmitOptions emitOptions, Boolean verify)
	at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, EmitOptions emitOptions, Boolean verify)
	at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 validator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Boolean verify)
	CodeGen\CodeGenDeconstructTests.cs(5802,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenDeconstructTests.InvokeVarForLvalueInParens()

0 passed, 1 failed, 0 skipped, took 3.15 seconds (xUnit.net 2.1.0 build 3179).
```

We probably need to test a similar consumption scenario for VB.</Description>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>16/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15601</IssueID>
    <Title>Suggestion: provide better SemanticModel/IDE experience inside broken foreach declaration</Title>
    <Description>[In a code review it was suggested](https://github.com/dotnet/roslyn/pull/15548#discussion_r90164938) that we should bind and give good SemanticModel (and therefore IDE) experience inside an expression in this context:

`foreach (AnyExpression in e) {}`

where `AnyExpression` is some expression form not legally supported in this context.
</Description>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15587</IssueID>
    <Title>CSharpScript.RunAsync() fails when providing a Globals object</Title>
    <Description>**Version Used**: `Microsoft.CodeAnalysis.Scripting 1.3.2 and 2.0.0 RC (Issue occurs with .NET Core 1.1.0 but not 1.0.1)

**Steps to Reproduce**:

1. Use `CSharpScript.RunAsync()`, providing Globals 

**Expected Behavior**:
Script is compiled and executed.

**Actual Behavior**:
[InvalidCastException](https://gist.github.com/khionu/a69ab39950035e9533a0484d7627671d)

**Additional Notes**:
I am unsure if this is my environment or Roslyn, but given this broke after using .NET Core 1.1.0 and with how little information I could find on troubleshooting this issue, I felt it was best to report it.

I can confirm that the runtimes being used by Roslyn and my Project are the same, and that I only have one instance of the Entry Assembly (where the class `ReplGlobals` is) loaded.</Description>
    <CreatedDate>29/11/2016</CreatedDate>
    <ClosedDate>29/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15486</IssueID>
    <Title>The naming rule violation is inadequate for non-Latin languages</Title>
    <Description>**Version Used**: 

Visual Studio 2017 RC

**Steps to Reproduce**:

1. Use Japanese characters for identifiers

**Expected Behavior**:

There is no message.

**Actual Behavior**:

The code analyzer says "Naming rule violation: These words must begin with upper case characters".

![image](https://cloud.githubusercontent.com/assets/3760955/20550074/54470168-b175-11e6-9e91-c85d06d6ccce.png)

However, Japanese characters don't have such a classification. There is no upper case in Japanese characters. This message may be inadequate for many non-Latin languages.

You should not simply use `char.IsLower`/`IsUpper` methods for this purpose.
https://github.com/dotnet/roslyn/blob/7a105a46a735d8c3b21a9c1990cecbe6ac4dde8c/src/Features/Core/Portable/Diagnostics/Analyzers/NamingStyles/Serialization/NamingStyle.cs#L136
</Description>
    <CreatedDate>23/11/2016</CreatedDate>
    <ClosedDate>31/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15464</IssueID>
    <Title>Do not trigger IDE1006 name violation if it cannot be fixed</Title>
    <Description>**Version Used**: 2.0.0.61104

**Steps to Reproduce**:

```C#
        class MyClass
        {
            public string கி { get; set; }
        }
```

**Expected Behavior**: No violation if the letter does not have a notion of case.

**Actual Behavior**:
![untitled](https://cloud.githubusercontent.com/assets/10546952/20535451/adf67174-b0dc-11e6-85ab-57a611be1224.png)

Similarly with other casing rules.
Maybe instead of char.IsUpper test !char.IsLower? Or skip all casing rules if char.IsUpper==char.IsLower?
</Description>
    <CreatedDate>22/11/2016</CreatedDate>
    <ClosedDate>23/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15386</IssueID>
    <Title>Full solution analysis does not respect Code Style settings</Title>
    <Description>**Version Used**: 25909

**Steps to Reproduce**:

1. Enable full solution analysis
2. Change the default Code Style settings, 
3. Open some files that will trigger Code Style

**Expected Behavior**: Settings (i.e. preference and severity) to apply for the whole solution

**Actual Behavior**: Settings applied for opened files only. Rest of the solution is analysed with default settings.
</Description>
    <CreatedDate>19/11/2016</CreatedDate>
    <ClosedDate>21/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15342</IssueID>
    <Title>Structure guide line info should not display custom attributes</Title>
    <Description>I think it would be more useful to display the line with declaration name.

![image](https://cloud.githubusercontent.com/assets/41759/20414827/60c54d22-ace9-11e6-8e1d-b96f49705254.png)
</Description>
    <CreatedDate>18/11/2016</CreatedDate>
    <ClosedDate>18/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15286</IssueID>
    <Title>Go to Type Definition</Title>
    <Description>From @kieranmo:

There are situations in the language where is difficult to navigate to the type of a thing. For example, lambda parameters. Soon, tuples will have a similar problem. I.e. what does F12 do on `var` in this case?

```C#
var (x, y, z) = GetData();
```

We need a way to navigate from `x`, to the type of `x`. Likewise, for lambda arguments:

```C#
Console.CancelKeyPress += (a, b) =&gt;
{
    Console.Write($"Hello {a}"); 
}
```

If the caret is on the reference to `a` inside the body of the lambda, how can I get to the type of `a`?

From @DustinCampbell: We need a new feature here! Let's do it!</Description>
    <CreatedDate>16/11/2016</CreatedDate>
    <ClosedDate>16/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15255</IssueID>
    <Title>AnalyzerDependencyCheckerTests have hardcoded dependency on msbuild 14</Title>
    <Description>https://github.com/dotnet/roslyn/blob/614299ff83da9959fa07131c6d0ffbc58873b6ae/src/VisualStudio/Core/Test/AnalyzerSupport/AnalyzerDependencyCheckerTests.vb#L22</Description>
    <CreatedDate>15/11/2016</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15230</IssueID>
    <Title>Make ChangeSignature more flexible.</Title>
    <Description>After talking with @dpoeschl, i think i want two new capabilities from ChangeSignature:

1. The ability to change names of signature items, and have those renames happen
2. The ability to use ChangeSignature on a tuple.  Both for reordering tuple elements, and for potentially adding/removing names for tuple elements (and having references fixed up).

@dpoeschl Thinks this should be doable.</Description>
    <CreatedDate>14/11/2016</CreatedDate>
    <ClosedDate>15/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15218</IssueID>
    <Title>Extract method should place CancellationToken parameter last.</Title>
    <Description>
    </Description>
    <CreatedDate>14/11/2016</CreatedDate>
    <ClosedDate>15/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15186</IssueID>
    <Title>Completion for enums doesn't work anymore</Title>
    <Description>In the following code typing a space after typing ```=``` or ```case``` in locations indicated by ```$``` should preselect ```Foo``` but it doesn't.

```C#
    enum Foo { A,B,C }

    class Program
    {
        static void Main(string[] args)
        {
            Foo f =$
            switch (f)
            {
                case$
            }

        }
    }
```

VS build d15rel/15.0.25909.2</Description>
    <CreatedDate>12/11/2016</CreatedDate>
    <ClosedDate>14/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15165</IssueID>
    <Title>Suppress ReplaceMethodWithProperty for overriden method declared outside solution</Title>
    <Description>I would propose to suppress ReplaceMethodWithProperty refactoring for overriden method that are declared outside solution.

An attempt to replace that kind of method with property will always produce invalid code.

#### Code Sample:

```csharp
public class Foo
{
    public override string ToString() // Replace 'ToString' with property
    {
        return base.ToString();
    }
}
```
</Description>
    <CreatedDate>11/11/2016</CreatedDate>
    <ClosedDate>14/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15143</IssueID>
    <Title>SaveEventsService is causing a deadlock during MEF construction</Title>
    <Description>SaveEventsService is making `GetService` calls during construction. This ends up causing a deadlock because COM calls are being made, which request the UI thread, and the UI thread is waiting for the SaveEventsService to be constructed. This appears to be relatively rare, but something about migrated xproj solutions causes it to happen more often. The fix is to import the correct types in the constructor for SaveEventsService, instead of importing a service provider and calling `GetService`.</Description>
    <CreatedDate>10/11/2016</CreatedDate>
    <ClosedDate>11/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15083</IssueID>
    <Title>Indent Guides BlockContextProvider does not show relevant lines</Title>
    <Description>![untitled](https://cloud.githubusercontent.com/assets/10546952/20105027/08db24ec-a5c8-11e6-832d-7e5e50f701be.png)

Showing the last line is probably not going to make it for multiline statements, but neither does the first line as shown in the case of attributes above.

Expected: class names instead of [Serializable]...</Description>
    <CreatedDate>08/11/2016</CreatedDate>
    <ClosedDate>14/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>15024</IssueID>
    <Title>Preselect for enums seems to have regressed</Title>
    <Description>Typing:

![image](https://cloud.githubusercontent.com/assets/4564579/20026835/46e31f3e-a2c0-11e6-822e-e791a1e68fe2.png)

Expected that BindingFlags woudl not be preselected.  It wasn't.</Description>
    <CreatedDate>05/11/2016</CreatedDate>
    <ClosedDate>14/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14989</IssueID>
    <Title>Code-style-analyzers should opt-out of running in generated code.</Title>
    <Description>I'm getting lots of messages about fixes to be made in files like BoundNodes.xml.generated.cs (like 'use object initializer).  These generated files should be skipped.</Description>
    <CreatedDate>04/11/2016</CreatedDate>
    <ClosedDate>14/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14893</IssueID>
    <Title>[Test Failure] BasicWinForms - Change Accessibility failed in windows_vsi_p1_open_prtest #14889</Title>
    <Description>BasicWinForms - Scenario: Change Accessibility failed in #14889 

```
Scenario: Change Accessibility
    Executing action [11/2/2016 3:20:34 PM] AddProject
    Executing action [11/2/2016 3:20:35 PM] OpenFile
DEBUG: found and activated window.
DEBUG: start polling for code window
DEBUG: polling complete
    Executing action [11/2/2016 3:20:35 PM] WinFormsAddControl
        Control 'SomeButton' added successfully.
    Executing action [11/2/2016 3:20:35 PM] WinFormsEditControlProperty
        Property 'Modifiers' changed to 'Public' successfully.
    Executing action [11/2/2016 3:20:35 PM] Build
Waiting for Roslyn features SolutionCrawler: 11/2/2016 3:20:36 PM
Waiting for Roslyn features ErrorList: 11/2/2016 3:20:41 PM
Finished waiting for Roslyn features SolutionCrawler and ErrorList: 11/2/2016 3:20:41 PM
Waiting for error list: 11/2/2016 3:20:43 PM
Finished waiting for error list: 11/2/2016 3:21:15 PM
1 projects failed build. Build output:
1&gt;------ Build started: Project: TestProj, Configuration: Debug Any CPU ------
1&gt;d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Temp\hxhziubr.ogi\TestProj\Form1.Designer.vb(25,9): error BC30456: 'SomeButton' is not a member of 'Form1'.
1&gt;d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Temp\hxhziubr.ogi\TestProj\Form1.Designer.vb(30,9): error BC30456: 'SomeButton' is not a member of 'Form1'.
1&gt;d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Temp\hxhziubr.ogi\TestProj\Form1.Designer.vb(31,9): error BC30456: 'SomeButton' is not a member of 'Form1'.
1&gt;d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Temp\hxhziubr.ogi\TestProj\Form1.Designer.vb(32,9): error BC30456: 'SomeButton' is not a member of 'Form1'.
1&gt;d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Temp\hxhziubr.ogi\TestProj\Form1.Designer.vb(33,9): error BC30456: 'SomeButton' is not a member of 'Form1'.
1&gt;d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Temp\hxhziubr.ogi\TestProj\Form1.Designer.vb(40,25): error BC30456: 'SomeButton' is not a member of 'Form1'.
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========

--------------------------------
Tao.Engine.Exceptions.UnexpectedResultException`1[Roslyn.VSHosting.Test.RoslynActions.BuildAction]: 6 Unexpected errors during build:
'SomeButton' is not a member of 'Form1'., File: Form1.Designer.vb, Project: TestProj
'SomeButton' is not a member of 'Form1'., File: Form1.Designer.vb, Project: TestProj
'SomeButton' is not a member of 'Form1'., File: Form1.Designer.vb, Project: TestProj
'SomeButton' is not a member of 'Form1'., File: Form1.Designer.vb, Project: TestProj
'SomeButton' is not a member of 'Form1'., File: Form1.Designer.vb, Project: TestProj
'SomeButton' is not a member of 'Form1'., File: Form1.Designer.vb, Project: TestProj
   at Tao.Utilities.Extensions.ThrowUnexpectedResultException[TAction](TAction action, String message, Object[] messageArgs) in f:\dd\src\Omni\Tao\Tao.Utilities\Extensions.cs:line 465
   at Roslyn.VSHosting.Test.RoslynActions.BuildAction.Execute(TaoEngine engine) in d:\j\workspace\windows_vsi_p---9a06aa34\Closed\Hosting\RoslynTaoActions\Actions\VisualStudio\BuildAction.cs:line 145
   at Tao.Engine.DebuggableActionExecutor.Execute() in f:\dd\src\omni\TAO\Tao.Engine\ActionExecutor.cs:line 139
   at Tao.Engine.DefaultActionExecutor.Execute() in f:\dd\src\omni\TAO\Tao.Engine\ActionExecutor.cs:line 36
================================


Saved screenshot: d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Release\Exes\EditorTestApp\Screenshots\2016-11-02_15-21-17_27 - Exception Tao.Engine.Exceptions.UnexpectedResultException`1[Roslyn.VSHosting.Test.RoslynActions.BuildAction].png

    Executing action [11/2/2016 3:21:17 PM] CloseSolution
```
![basicwinforms](https://cloud.githubusercontent.com/assets/788783/19940165/f71be784-a0e8-11e6-90ea-5e4b074fc5a0.png)
</Description>
    <CreatedDate>02/11/2016</CreatedDate>
    <ClosedDate>07/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14885</IssueID>
    <Title>Seemingly needless error CS0121: The call is ambiguous between the following methods or properties: 'x(Action)' and 'x(Func&lt;Task&gt;)'</Title>
    <Description>**Version Used**: 
VS 2015 Update 3

**Steps to Reproduce**:

Attempt to compile the following code:

```cs
private void x()
{
}

private void yyyyyyyyyyyyyyy(Action a)
{
}

private void yyyyyyyyyyyyyyy(Func&lt;Task&gt; a)
{
}

private void z()
{
	yyyyyyyyyyyyyyy(x);
}
```

**Expected Behavior**:

Code compiles and the `Action` overload is used in `z()`.

**Actual Behavior**:

CS0121: The call is ambiguous between the following methods or properties: 'foo.yyyyyyyyyyyyyyy(Action)' and 'foo.yyyyyyyyyyyyyyy(Func&lt;Task&gt;)'

**Further notes**:

Explicitly casting it as `yyyyyyyyyyyyyyy((Action)x);` works fine.

Casting as `yyyyyyyyyyyyyyy((Func&lt;Task&gt;)x);` is a compile error.</Description>
    <CreatedDate>02/11/2016</CreatedDate>
    <ClosedDate>02/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14866</IssueID>
    <Title>Roslyn fails to load analyzer dependency assemblies</Title>
    <Description>**Version Used**: 2.0.0-beta3

**Steps to Reproduce**:

1. sync to dotnet/corefx master
2. Replace BuildToolsVersion.txt with the following:

&gt; 1.0.27-prerelease-01001-03	

3. run init-tools.cmd
4. touch foo.cs
5. run csc using `Tools/dotnetcli/dotnet.exe Tools/csc.exe` with the following commands:

&gt; /target:library
/out:foo.dll
/analyzer:Tools/analyzers/Desktop.CSharp.Analyzers.dll
foo.cs

**Expected Behavior**:
binary foo.dll is produced with no warnings

**Actual Behavior**:
The analyzer fails to load due to missing dependencies. The specific dependency is Desktop.Analyzers.dll
</Description>
    <CreatedDate>01/11/2016</CreatedDate>
    <ClosedDate>23/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14749</IssueID>
    <Title>Option to enforce code style automatically</Title>
    <Description>Not sure if this is part of #7071 but it would be great if either as another severity level or a different option I could set the IDE to enforce code styles during formatting and autoformatting, i.e. when `}` is typed or the format document/selection command is invoked.

So that for example all vars I type would turn into explicit types or all framework types would turn into built-in types etc. on the go.
</Description>
    <CreatedDate>26/10/2016</CreatedDate>
    <ClosedDate>29/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14737</IssueID>
    <Title>Typing "goto default" in a switch case completes incorrectly</Title>
    <Description>Type `goto default` and `;` in the indicated location:

``` C#
switch (foo)
{
   case 1:
      |
   default:
      break;
}
```

The completion list contains `default:` and thus the result is:

``` C#
switch (foo)
{
   case 1:
      goto default:;
   default:
      break;
}
```

Notice the extra `:`.
</Description>
    <CreatedDate>25/10/2016</CreatedDate>
    <ClosedDate>26/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14735</IssueID>
    <Title>Broken Tao Test: BasicGenerateTypeDialog</Title>
    <Description>The BasicGenerateTypeDialog VSI Test is failing on this line: https://github.com/dotnet/roslyn-internal/blob/6bb2fb17ebab81584b68877184f753991fc51e3a/Closed/Hosting/RoslynTaoActions/IntegrationTests/BasicGenerateTypeDialog.xml#L37. It appears that the file isn't being found.

```
System.Runtime.InteropServices.COMException (0x800706BE): The remote procedure call failed. (Exception from HRESULT: 0x800706BE)
   at EnvDTE._DTE.ExecuteCommand(String CommandName, String CommandArgs)
   at Roslyn.VSHosting.Test.OpenFileAction.Execute(TaoEngine engine) in d:\j\workspace\windows_vsi_p08ba736a3\Closed\Hosting\Test\Actions\VisualStudio\OpenFileAction.cs:line 82
   at Tao.Engine.DebuggableActionExecutor.Execute() in f:\dd\src\omni\TAO\Tao.Engine\ActionExecutor.cs:line 139
   at Tao.Engine.DefaultActionExecutor.Execute() in f:\dd\src\omni\TAO\Tao.Engine\ActionExecutor.cs:line 36
```

Example:
https://ci.dot.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p0/1076/artifact/Open/Binaries/Release/Exes/EditorTestApp/VSIntegrationTestLogs/BasicGenerateTypeDialog.html

Started failing with this run: https://ci.dot.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p0/1059/

@CyrusNajmabadi @jasonmalinowski @dotnet/roslyn-infrastructure 
</Description>
    <CreatedDate>25/10/2016</CreatedDate>
    <ClosedDate>07/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14641</IssueID>
    <Title>Breaking change: constant patterns and binary expressions</Title>
    <Description>``` c#
class C {
  // error CS1525: Invalid expression term 'string'
  object O =&gt; O is string + "";
}
```

This code no longer compiles in C# 7.0, since `string + ""` now parses as a constant pattern instead of type syntax and additive expression concatenating `""` literal with the results of `is` expression.
</Description>
    <CreatedDate>20/10/2016</CreatedDate>
    <ClosedDate>20/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14627</IssueID>
    <Title>Add a test for code that may have hung a previous version of the parser.</Title>
    <Description>@dotnet/roslyn-compiler Please review this small test-only addition.
</Description>
    <CreatedDate>19/10/2016</CreatedDate>
    <ClosedDate>20/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14586</IssueID>
    <Title>Unable to change context for shared project files after closing and re-opening documents</Title>
    <Description>**Version Used**: 
Dev14 Update3 (also repros on Dev15 Preview5)

**Steps to Reproduce**:
1.  Open the attached solution:
   [SharedProject2.zip](https://github.com/dotnet/roslyn/files/536915/SharedProject2.zip)
2. Open source file Class1.cs in the SharedProject2 - verify the navigation bar shows ConsoleApplication1 and ConsoleApplication2 (SharedProject2 is referenced by both these desktop apps).
3. Change the navigation bar context for the source file between ConsoleApplication1 and ConsoleApplication2 - as expected, the context changes fine and the defines specific to the project are respected.
4. Close and reopen Class1.cs.
5. Attempt to repeat step3

**Expected Behavior**:
Same as prior to closing and re-opening the source file - context switches between owning projects.

**Actual Behavior**:
Context doesn't switch between owning projects and the navigation bar always switches back to ConsoleApplication1. Repeating steps 4 and 5 multiple times doesn't help. Only closing and reopening the solution fixes the behavior (until the file is closed again).

**NOTE**: This scenario is also reproing for dotnet core cross targeting projects (which mimic shared project functionality).
</Description>
    <CreatedDate>18/10/2016</CreatedDate>
    <ClosedDate>07/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14553</IssueID>
    <Title>Implementing missing members of an interface uses .NET framework value types instead of aliased value types</Title>
    <Description>**Version Used**: Visual Studio "15" Preview 5

**Steps to Reproduce**:
1. Create an interface with a method that has a aliased value type as a parameter, e.g. string, int, bool. 
2. Create a class that implements the interface. (don't implement the methods manually)
3. Use the IntelliSense helper to implement the missing members.

**Expected Behavior**: IntelliSense should implement the methods with the aliased value types as parameters, i.e. string, int, bool.

**Actual Behavior**: IntelliSense uses the .NET framework types as parameters, i.e. String, Int32, Boolean.
</Description>
    <CreatedDate>17/10/2016</CreatedDate>
    <ClosedDate>03/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14534</IssueID>
    <Title>NonFatalWatsons don't seem to be uploaded.</Title>
    <Description>@jmarolf run into this on his box.  He got a NFW but his event viewer showed no watson bucket actually filed.  
</Description>
    <CreatedDate>14/10/2016</CreatedDate>
    <ClosedDate>17/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14455</IssueID>
    <Title>"Hide base name" code fix does the wrong thing for const fields</Title>
    <Description>_Ported from Visual Studio Feedback_

``` C#
class A { internal const int i = 0; }
class B : A { internal const int i = 1; }
```

Apply "Hide base name" from the light bulb.

![image](https://cloud.githubusercontent.com/assets/116161/19323713/f126c8fc-9072-11e6-97cb-bca47196e7ef.png)

Note that there are two problems. First, there's a formatting issue, and second, that's an illegal position for "new" to appear in the language.
</Description>
    <CreatedDate>12/10/2016</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14386</IssueID>
    <Title>Getting the semantic model for a document throws AggregateException when a project contains a duplicate reference</Title>
    <Description>**Version Used: 1.3.2**: 

**Steps to Reproduce**:
1. Create a MSBuildWorkspace
2. Open a solution with a project that contains a duplicate project reference (like this one https://gist.github.com/ap0llo/1ae386f85465faa257cc47db9a299c13)
3. Try to get the semantic model for a document 

```
var workspace = MSBuildWorkspace.Create();
var solution = workspace.OpenSolutionAsync(solutionPath).Result;

foreach (var project in solution.Projects)
{
    foreach (var document in project.Documents)
    {
        var semanticModel = document.GetSemanticModelAsync().Result;
    }
}
```

**Expected Behavior**:
I think the duplicate reference should either be ignored (as msbuild does not seem to have a problem with duplicate references) or a more specific exception should be thrown so it can be determined more easily what the problem is

**Actual Behavior**:
An AggregateException wrapping a TaskCanceledException with no inner exception is thrown, which makes finding the error difficult. 
I was able to identify why the task is being canceled. In SolutionState.FinalizeCompilationAsync() an ArgumentException is thrown because a duplicate key is added to the metadataReferenceToProjectId dictionary
</Description>
    <CreatedDate>08/10/2016</CreatedDate>
    <ClosedDate>10/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14241</IssueID>
    <Title>SigHelp shows incorrect signature</Title>
    <Description>**Version Used**: VS '15' Preview 4

**Steps to Reproduce**:
1. Add `Console.WriteLine("Hello, World");`
2. Move caret to somewhere inside the parameter list
3. Press Ctrl+Shift+Space to bring up Signature Help

**Expected Behavior**:

I expect to see the correct signature `WriteLine(string)`

**Actual Behavior**:

Seems like it picks the first method with the right number of params, `WriteLine(bool)` is shown instead.

![sighlp](https://cloud.githubusercontent.com/assets/1060731/19037654/aa60bbe6-8977-11e6-8667-1e294c4d763b.png)

Sometimes I'd like to quickly see which method it is or to read param docs and pressing Ctrl+Shift+Space is quicker than using the mouse or moving the caret to the method and pressing Ctrl+K,Ctrl+I.
</Description>
    <CreatedDate>03/10/2016</CreatedDate>
    <ClosedDate>17/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14197</IssueID>
    <Title>Call Hierarchy never finishes finding calls to Local Functions</Title>
    <Description>**Version Used**: 25725

``` C#
class C
{
    void M()
    {
        MM();

        void $$MM() { }
    }
}
```

Invoke Call Hierarchy at the $$ location, and expand the "Calls To 'MM'" node.

![image](https://cloud.githubusercontent.com/assets/235241/18973436/4f0c7424-8652-11e6-8dbd-02f4e530f82b.png)
</Description>
    <CreatedDate>29/09/2016</CreatedDate>
    <ClosedDate>29/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14196</IssueID>
    <Title>Extract Interface doesn't properly persist ref returns</Title>
    <Description>**Version Used**: 25725

``` C#
using System;

class C
{
    public ref int M()
    {
        throw new NotImplementedException();
    }
}
```

Extract Interface on C gives

``` C#
interface IC
{
    int M();
}
```
</Description>
    <CreatedDate>29/09/2016</CreatedDate>
    <ClosedDate>29/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14156</IssueID>
    <Title>Instrumentation behavior for a switch "when clause" needs to be decided and implemented</Title>
    <Description>
    </Description>
    <CreatedDate>28/09/2016</CreatedDate>
    <ClosedDate>17/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14129</IssueID>
    <Title>Tuples have no way to control the spacing around the parentheses</Title>
    <Description>**Version Used**: preview/25725
</Description>
    <CreatedDate>27/09/2016</CreatedDate>
    <ClosedDate>29/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14112</IssueID>
    <Title>Roslyn.sln fails to build with WarnOnError=true</Title>
    <Description>I'm getting these warnings now in the OOP projects:

```
C:\Program Files (x86)\Microsoft Visual Studio\VS15Preview\MSBuild\15.0\bin\Microsoft.Common.CurrentVersion.targets(190
2,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be reso
lved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\GitHub\roslyn-i
nternal\Open\src\VisualStudio\RemoteHostClientMock\RemoteHostClientMock.csproj]

C:\Program Files (x86)\Microsoft Visual Studio\VS15Preview\MSBuild\15.0\bin\Microsoft.Common.CurrentVersion.targets(190
2,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be reso
lved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\GitHub\roslyn-i
nternal\Open\src\VisualStudio\Core\Test.Next\VisualStudioTest.Next.csproj]
```

I believe both of these are heejae's new assemblies.

Note that these have occasionally been breakign the build on Jenkins.  I'm not sure why it doesn't consistentl ybreak (but maybe  it has to do with Node reuse and if that node has that option set).
</Description>
    <CreatedDate>27/09/2016</CreatedDate>
    <ClosedDate>19/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>14090</IssueID>
    <Title>Jenkins failing to build</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/4027/

CreatePkgDef : error : ProvideCodeBaseAttribute: Could not load specified assembly: '' reason: Could not load file or assembly 'file:///D:\j\workspace\windows_debug---09a07fba\Binaries\Debug\System.AppContext.dll' or one of its dependencies. The system cannot find the file specified. [D:\j\workspace\windows_debug---09a07fba\src\VisualStudio\Setup\VisualStudioSetup.csproj]
Indication 2 
</Description>
    <CreatedDate>26/09/2016</CreatedDate>
    <ClosedDate>12/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13976</IssueID>
    <Title>No way to get elements of a tuple conversion</Title>
    <Description>The compiler's APIs provide no way to get the elementwise conversions of a tuple conversion, or of a deconstruction. Both should be easily available.

For example, there is no way in an analyzer to know that a user-defined conversion is used within the conversion underlying a tuple passed as a parameter.
</Description>
    <CreatedDate>22/09/2016</CreatedDate>
    <ClosedDate>01/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13932</IssueID>
    <Title>Implement Interface: control generated property style</Title>
    <Description>Ported from DevDiv 220644

---

 Problem Description 

---

 Description: It's not really a bug but an improvement could be made. 

 In previous versions of Visual Studio it was possible to change the generation of PropertyStubs during "Implement Interface" actions (See also https://connect.microsoft.com/VisualStudio/feedback/details/1857694/visual-studio-2015-implement-interface-snippet-not-working) 

 I don't like the generation of properties like this: 
 public string Name 
 { 
 get 
 { 
 throw new NotImplementedException(); 
 } 
 set 
 { 
 throw new NotImplementedException(); 
 } 

 why it is not possible to customize it (like in previous versions by modifying snippets) to get something like: 
 public string Name { get; set; } 
 } 

 Snippets in directory are not used anymore for refactoring 
 C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC#\Snippets\1031\Refactoring 

 Repro Steps:Define some Interface, write class that should implement that interface, and execute "Implement interface" from context menu. 

 public interface ITest 
{ 
 string Name { get;set;} 
 } 

 public class Test : ITest (right click - implement interface) 
 { 
 } 

 Impact:It was a good feature to modify the snippets, why it's gone?
</Description>
    <CreatedDate>20/09/2016</CreatedDate>
    <ClosedDate>11/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13825</IssueID>
    <Title>New preselection doesn't work if done before an attribute</Title>
    <Description>``` C#
        private readonly object _lock = new $

        [ImportingConstructor]
        public SourceItemHandler(UnconfiguredProject project, IPhysicalProjectTree projectTree)
        {
            Requires.NotNull(project, nameof(project));
            Requires.NotNull(projectTree, nameof(projectTree));

            _project = project;
            _projectTree = projectTree;
        }

```

At $ expected to get "object" preselected in the completion Window. I do not.
</Description>
    <CreatedDate>15/09/2016</CreatedDate>
    <ClosedDate>19/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13811</IssueID>
    <Title>Find All References doesn't display usages inside XML doc comments very well</Title>
    <Description>![image](https://cloud.githubusercontent.com/assets/1103906/18533593/10fcbab4-7a99-11e6-8c49-0f508ca27c76.png)
</Description>
    <CreatedDate>14/09/2016</CreatedDate>
    <ClosedDate>14/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13788</IssueID>
    <Title>Test TestRecoverableSyntaxTreeCSharp is flaky</Title>
    <Description>The test `Microsoft.CodeAnalysis.UnitTests.SolutionTests.TestRecoverableSyntaxTreeCSharp` depends on GC behavior that is not guaranteed. I've seen it fail nondeterministically, for example

http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit64_prtest/3542/
</Description>
    <CreatedDate>14/09/2016</CreatedDate>
    <ClosedDate>05/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13642</IssueID>
    <Title>add analyzer option pages that controls which analyzers run only opened files and all files</Title>
    <Description>currently we use effective severity to determine whether we are going to run diagnostic analyzers only for opened files or all files. but that only works because currently severity is per compilation. on going work to make editor config part of compilation will break that (since now diagnostic can have different effective severity per files)

so we no longer can use effective severity as a way to determine what analyzers to run on opened files and what not.

we need explicit control from users for it. so we need UI for users to set those.
</Description>
    <CreatedDate>06/09/2016</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13591</IssueID>
    <Title>Code Style Options are not accessible to Narrator</Title>
    <Description>![image](https://cloud.githubusercontent.com/assets/235241/18221039/2f615958-712d-11e6-9ffe-1076d9c19060.png)

The dropdowns read the typename instead of the contents.
</Description>
    <CreatedDate>02/09/2016</CreatedDate>
    <ClosedDate>24/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13575</IssueID>
    <Title>CodeStyle Tools Options window : Make preview window resizable</Title>
    <Description>make it resizable and also choose a better default size
</Description>
    <CreatedDate>02/09/2016</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13548</IssueID>
    <Title>AcessViolation in Roslyn.Services.Editor.UnitTests2</Title>
    <Description>```
15:32:01   Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
15:32:01      at System.Reflection.Metadata.Ecma335.TypeDefTableReader.GetExtends(TypeDefinitionHandle handle)
15:32:01      at Microsoft.CodeAnalysis.PEModule.GetBaseTypeOfTypeOrThrow(TypeDefinitionHandle typeDef) in q:\roslyn\src\Compilers\Core\Portable\MetadataReader\PEModule.cs:line 860
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredBaseType() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 429
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredBaseType(ConsList`1 basesBeingResolved) in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 406
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.get_TypeKind() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 1603
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.Microsoft.CodeAnalysis.ITypeSymbol.get_TypeKind() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\TypeSymbol.cs:line 694
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.SymbolKeyWriter.VisitNamedType(INamedTypeSymbol namedTypeSymbol) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.SymbolKeyWriter.cs:line 368
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.Accept[TResult](SymbolVisitor`1 visitor) in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\NamedTypeSymbol.cs:line 1499
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.SymbolKeyWriter.WriteSymbolKey(ISymbol symbol, Boolean first) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.SymbolKeyWriter.cs:line 163
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.SymbolKeyWriter.WriteFirstSymbolKey(ISymbol symbol) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.SymbolKeyWriter.cs:line 129
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.ToString(ISymbol symbol, CancellationToken cancellationToken) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.cs:line 134
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.Create(ISymbol symbol, CancellationToken cancellationToken) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.cs:line 125
15:32:01      at Microsoft.CodeAnalysis.SymbolKeyExtensions.GetSymbolKey(ISymbol symbol) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKeyExtensions.cs:line 11
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindSourceDefinitionWorkerAsync&gt;d__5.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\SymbolFinder.cs:line 149
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDefinitionWorkerAsync(ISymbol symbol, Solution solution, CancellationToken cancellationToken)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDefinitionAsync(ISymbol symbol, Solution solution, CancellationToken cancellationToken) in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\SymbolFinder.cs:line 98
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsCoreAsync&gt;d__26.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\FindReferences\FindReferencesSearchEngine_MapCreation.cs:line 148
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsCoreAsync(ISymbol symbol, ConcurrentSet`1 result)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsAsync&gt;d__25.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\FindReferences\FindReferencesSearchEngine_MapCreation.cs:line 136
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsAsync(ISymbol symbol)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__12.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\FindReferences\FindReferencesSearchEngine.cs:line 65
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(ISymbol symbol)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__50.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\SymbolFinder_References.cs:line 65
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(ISymbol symbol, Solution solution, IFindReferencesProgress progress, IImmutableSet`1 documents, CancellationToken cancellationToken)
15:32:01      at Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests.VB$StateMachine_483_TestAPI.MoveNext() in q:\roslyn\src\EditorFeatures\Test2\FindReferences\FindReferencesTests.vb:line 156
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
15:32:01      at Xunit.Sdk.AsyncTestSyncContext.&lt;&gt;c__DisplayClass7_0.&lt;Post&gt;b__1(Object _) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\AsyncTestSyncContext.cs:line 75
15:32:01      at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
15:32:01      at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
15:32:01      at System.Windows.Threading.DispatcherOperation.InvokeImpl()
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
15:32:01      at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)
15:32:01      at System.Windows.Threading.DispatcherOperation.Invoke()
15:32:01      at System.Windows.Threading.Dispatcher.ProcessQueue()
15:32:01      at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)
15:32:01      at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)
15:32:01      at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)
15:32:01      at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
15:32:01      at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
15:32:01      at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)
15:32:01      at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)
15:32:01      at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)
15:32:01      at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)
15:32:01      at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
15:32:01      at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
15:32:01      at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
15:32:01      at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority)
15:32:01      at Roslyn.Test.Utilities.WaitHelper.WaitForDispatchedOperationsToComplete(DispatcherPriority priority) in q:\roslyn\src\EditorFeatures\TestUtilities\Async\WaitHelper.cs:line 19
15:32:01      at Roslyn.Test.Utilities.WpfTestCase.&lt;&gt;c.&lt;RunAsync&gt;b__2_1() in q:\roslyn\src\EditorFeatures\TestUtilities\Threading\WpfTestCase.cs:line 70
15:32:01      at System.Threading.Tasks.Task.Execute()
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
15:32:01      at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
15:32:01      at Roslyn.Test.Utilities.StaTaskScheduler.&lt;.ctor&gt;b__7_1() in q:\roslyn\src\EditorFeatures\TestUtilities\Threading\StaTaskScheduler.cs:line 51
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
15:32:01      at System.Threading.ThreadHelper.ThreadStart()
15:32:01   Command: C:\Users\dotnet-bot\.nuget\packages\xunit.runner.console\2.2.0-beta1-build3239\tools\xunit.console.exe "Binaries\Debug\Roslyn.Services.Editor.UnitTests2.dll" -class "ExpectedItem" -class "Microsoft.CodeAnalysis.Editor.Implementation.CodeFixes.UnitTests.CodeFixServiceTests" -class "Microsoft.CodeAnalysis.Editor.Implementation.CodeFixes.UnitTests.CodeFixServiceTests+ProjectCodeFixProvider" -class "Microsoft.CodeAnalysis.Editor.Implementation.CodeFixes.UnitTests.CodeFixServiceTests+WorkspaceCodeFixProvider" -class "Microsoft.CodeAnalysis.Editor.Implementation.CodeFixes.UnitTests.CodeFixServiceTests+WorkspaceDiagnosticAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Compilation.UnitTests.CompilationTests" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticProviderTests" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+CodeBlockEndedAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+CodeBlockOrSyntaxNodeAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+CodeBlockStartedAnalyzer`1" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+CodeBlockStartedAndEndedAnalyzer`1" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+CompilationAnalyzerWithAnalyzerOptions" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+CompilationEndedAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+DummySymbolAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+FieldDeclarationAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+MethodSymbolAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+MustOverrideMethodAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+NamedTypeAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+PartialTypeDiagnosticAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+ProjectDiagnosticAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+ProjectDiagnosticAnalyzer2" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+StatefulCompilationAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+ThrowsExceptionAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests+WorkspaceDiagnosticAnalyzer" -class "Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.NamingStyleTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.CallHierarchy.CallHierarchyTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AddImport.AddImportCrossLanguageTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AdditionalFiles.AdditionalFileAnalyzer" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AdditionalFiles.AdditionalFileDiagnosticsTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AdditionalFiles.AdditionalFileFixer" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AddMissingReference.AddMissingReferenceTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.GenerateConstructor.GenerateConstructorCrossLanguageTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.GenerateEvent.GenerateEventCrossLanguageTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.GenerateMethod.GenerateMethodCrossLanguageTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.GenerateVariable.GenerateVariableCrossLanguageTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.ImplementInterface.ImplementInterfaceCrossLanguageTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.UseAutoProperty.UseAutoPropertyTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Expansion.ExtensionMethodExpansionRewriteTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Expansion.LambdaParameterExpansionTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Expansion.ModuleNameExpansionTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Expansion.NameExpansionTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests+FileNameAndSpans" -class "Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests+TestContext" -class "Microsoft.CodeAnalysis.Editor.UnitTests.GoToDefinition.GoToDefinitionCancellationTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.GoToDefinition.GoToDefinitionTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.GoToImplementation.GoToImplementationTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CompletionRulesTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CompletionServiceTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CompletionServiceTests+TestCompletionProvider" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests_Projections" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests+SlowProvider" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpIntelliSenseCommandHandlerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpSignatureHelpCommandHandlerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModelTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModelTests+TestModelComputation" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.QuickInfoControllerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.SessionTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.SignatureHelpControllerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests_Projections" -class "Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicSignatureHelpCommandHandlerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.InteractivePaste.InteractivePasteCommandhandlerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.KeywordHighlighting.CSharpKeywordHighlightingTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.KeywordHighlighting.VisualBasicKeywordHighlightingTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.LanguageServices.SyntaxFactsServiceTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.NavigationBar.CSharpNavigationBarTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.NavigationBar.NavigationBarControllerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.NavigationBar.NavigationBarControllerTests+NavigationBarWaiter" -class "Microsoft.CodeAnalysis.Editor.UnitTests.NavigationBar.VisualBasicNavigationBarTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Peek.PeekTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.ReferenceHighlighting.CrossLanguageReferenceHighlightingTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.ReferenceHighlighting.CSharpReferenceHighlightingTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.ReferenceHighlighting.VisualBasicReferenceHighlightingTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.AliasTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.DeclarationConflictTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.EscapingTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.GenericTypeParameterTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.ImplicitReferenceConflictTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.InteractiveTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.InterfaceTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.CSharp.LocalConflictTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.DashboardTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.InlineRenameTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameCommandHandlerTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameEngineTests" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameEngineTests+CSharpConflicts" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameEngineTests+VisualBasicConflicts" -class "Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameNonRenameableSymbols"  -xml "Binaries\Debug\xUnitResults\Roslyn.Services.Editor.UnitTests2.dll.1.xml" -noshadow -verbose
15:32:01   xUnit output log: Binaries\Debug\xUnitResults\Roslyn.Services.Editor.UnitTests2.dll.1.out.log
15:32:01   
15:32:01   Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
15:32:01      at System.Reflection.Metadata.Ecma335.TypeDefTableReader.GetExtends(TypeDefinitionHandle handle)
15:32:01      at Microsoft.CodeAnalysis.PEModule.GetBaseTypeOfTypeOrThrow(TypeDefinitionHandle typeDef) in q:\roslyn\src\Compilers\Core\Portable\MetadataReader\PEModule.cs:line 860
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredBaseType() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 429
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredBaseType(ConsList`1 basesBeingResolved) in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 406
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.get_TypeKind() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 1603
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.Microsoft.CodeAnalysis.ITypeSymbol.get_TypeKind() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\TypeSymbol.cs:line 694
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.SymbolKeyWriter.VisitNamedType(INamedTypeSymbol namedTypeSymbol) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.SymbolKeyWriter.cs:line 368
15:32:01      at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.Accept[TResult](SymbolVisitor`1 visitor) in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\NamedTypeSymbol.cs:line 1499
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.SymbolKeyWriter.WriteSymbolKey(ISymbol symbol, Boolean first) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.SymbolKeyWriter.cs:line 163
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.SymbolKeyWriter.WriteFirstSymbolKey(ISymbol symbol) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.SymbolKeyWriter.cs:line 129
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.ToString(ISymbol symbol, CancellationToken cancellationToken) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.cs:line 134
15:32:01      at Microsoft.CodeAnalysis.SymbolKey.Create(ISymbol symbol, CancellationToken cancellationToken) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKey.cs:line 125
15:32:01      at Microsoft.CodeAnalysis.SymbolKeyExtensions.GetSymbolKey(ISymbol symbol) in q:\roslyn\src\Workspaces\Core\Portable\SymbolKey\SymbolKeyExtensions.cs:line 11
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindSourceDefinitionWorkerAsync&gt;d__5.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\SymbolFinder.cs:line 149
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDefinitionWorkerAsync(ISymbol symbol, Solution solution, CancellationToken cancellationToken)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDefinitionAsync(ISymbol symbol, Solution solution, CancellationToken cancellationToken) in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\SymbolFinder.cs:line 98
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsCoreAsync&gt;d__26.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\FindReferences\FindReferencesSearchEngine_MapCreation.cs:line 148
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsCoreAsync(ISymbol symbol, ConcurrentSet`1 result)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsAsync&gt;d__25.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\FindReferences\FindReferencesSearchEngine_MapCreation.cs:line 136
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsAsync(ISymbol symbol)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__12.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\FindReferences\FindReferencesSearchEngine.cs:line 65
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(ISymbol symbol)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__50.MoveNext() in q:\roslyn\src\Workspaces\Core\Portable\FindSymbols\SymbolFinder_References.cs:line 65
15:32:01      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
15:32:01      at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(ISymbol symbol, Solution solution, IFindReferencesProgress progress, IImmutableSet`1 documents, CancellationToken cancellationToken)
15:32:01      at Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests.VB$StateMachine_483_TestAPI.MoveNext() in q:\roslyn\src\EditorFeatures\Test2\FindReferences\FindReferencesTests.vb:line 156
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
15:32:01      at Xunit.Sdk.AsyncTestSyncContext.&lt;&gt;c__DisplayClass7_0.&lt;Post&gt;b__1(Object _) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\AsyncTestSyncContext.cs:line 75
15:32:01      at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
15:32:01      at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
15:32:01      at System.Windows.Threading.DispatcherOperation.InvokeImpl()
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
15:32:01      at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)
15:32:01      at System.Windows.Threading.DispatcherOperation.Invoke()
15:32:01      at System.Windows.Threading.Dispatcher.ProcessQueue()
15:32:01      at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)
15:32:01      at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)
15:32:01      at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)
15:32:01      at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
15:32:01      at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
15:32:01      at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)
15:32:01      at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)
15:32:01      at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)
15:32:01      at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)
15:32:01      at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
15:32:01      at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
15:32:01      at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
15:32:01      at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority)
15:32:01      at Roslyn.Test.Utilities.WaitHelper.WaitForDispatchedOperationsToComplete(DispatcherPriority priority) in q:\roslyn\src\EditorFeatures\TestUtilities\Async\WaitHelper.cs:line 19
15:32:01      at Roslyn.Test.Utilities.WpfTestCase.&lt;&gt;c.&lt;RunAsync&gt;b__2_1() in q:\roslyn\src\EditorFeatures\TestUtilities\Threading\WpfTestCase.cs:line 70
15:32:01      at System.Threading.Tasks.Task.Execute()
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
15:32:01      at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
15:32:01      at Roslyn.Test.Utilities.StaTaskScheduler.&lt;.ctor&gt;b__7_1() in q:\roslyn\src\EditorFeatures\TestUtilities\Threading\StaTaskScheduler.cs:line 51
15:32:01      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
15:32:01      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
15:32:01      at System.Threading.ThreadHelper.ThreadStart()
15:32:01   ================
...
15:32:01   Roslyn.Services.Editor.UnitTests2.dll.1                                     FAILED 00:08:20.4939721
...
15:32:01   ================
15:32:01   Test execution time: 00:19:59.4980514
15:32:01   Test failures encountered
```
</Description>
    <CreatedDate>01/09/2016</CreatedDate>
    <ClosedDate>02/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13509</IssueID>
    <Title>Parser OOMs while parsing incomplete code</Title>
    <Description>Likely an infinite loop.

```
&lt;TraceRecord xmlns="http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord" Severity="Critical"&gt;&lt;TraceIdentifier&gt;http://msdn.microsoft.com/TraceCodes/System/ActivityTracing/2004/07/Reliability/Exception/Unhandled&lt;/TraceIdentifier&gt;&lt;Description&gt;Unhandled exception&lt;/Description&gt;&lt;AppDomain&gt;DefaultDomain&lt;/AppDomain&gt;&lt;Exception&gt;&lt;ExceptionType&gt;System.OutOfMemoryException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/ExceptionType&gt;&lt;Message&gt;Exception of type 'System.OutOfMemoryException' was thrown.&lt;/Message&gt;&lt;StackTrace&gt;   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Resize()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateEntry(TKey key, TValue value)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(TKey key, TValue value)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16 kind, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16 kind, DiagnosticInfo[] diagnostics, SyntaxAnnotation[] annotations)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.IdentifierNameSyntax.SetDiagnostics(DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.GreenNodeExtensions.WithDiagnosticsGreen[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.WithAdditionalDiagnostics[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.AddError[TNode](TNode node, ErrorCode code, Object[] args)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentExpression(Boolean isIndexer)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentList(SyntaxToken&amp;amp;amp; openToken, SeparatedSyntaxList`1&amp;amp;amp; arguments, SyntaxToken&amp;amp;amp; closeToken, SyntaxKind openKind, SyntaxKind closeKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseParenthesizedArgumentList()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePostFixExpression(ExpressionSyntax expr)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementNoDeclaration(Boolean allowAnyExpression)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatements(CSharpSyntaxNode&amp;amp;amp; previousNode, SyntaxListBuilder`1 statements, Boolean stopOnSwitchSections)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlock(Boolean isMethodBody, Boolean isAccessorBody)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementNoDeclaration(Boolean allowAnyExpression)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseEmbeddedStatement(Boolean complexCheck)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseIfStatement()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementNoDeclaration(Boolean allowAnyExpression)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatements(CSharpSyntaxNode&amp;amp;amp; previousNode, SyntaxListBuilder`1 statements, Boolean stopOnSwitchSections)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlock(Boolean isMethodBody, Boolean isAccessorBody)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlockAndExpressionBodiesWithSemicolon(BlockSyntax&amp;amp;amp; blockBody, ArrowExpressionClauseSyntax&amp;amp;amp; expressionBody, SyntaxToken&amp;amp;amp; semicolon, Boolean parseSemicolonAfterBlock)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMethodDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers, SyntaxToken refKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceOpt, SyntaxToken identifier, TypeParameterListSyntax typeParameterList)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind, String typeName)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTypeDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind, String typeName)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp;amp;amp; openBrace, NamespaceBodyBuilder&amp;amp;amp; body, SyntaxListBuilder&amp;amp;amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclaration()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp;amp;amp; openBrace, NamespaceBodyBuilder&amp;amp;amp; body, SyntaxListBuilder&amp;amp;amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnitCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseWithStackGuard[TNode](Func`1 parseFunc, Func`1 createEmptyNodeFunc)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnit()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(SourceText newText, IReadOnlyList`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.&amp;amp;lt;IncrementallyParseTreeAsync&amp;amp;gt;d__13.MoveNext()&lt;/StackTrace&gt;&lt;ExceptionString&gt;System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Resize()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateEntry(TKey key, TValue value)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(TKey key, TValue value)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16 kind, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16 kind, DiagnosticInfo[] diagnostics, SyntaxAnnotation[] annotations)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.IdentifierNameSyntax.SetDiagnostics(DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.GreenNodeExtensions.WithDiagnosticsGreen[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.WithAdditionalDiagnostics[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.AddError[TNode](TNode node, ErrorCode code, Object[] args)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentExpression(Boolean isIndexer)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentList(SyntaxToken&amp;amp;amp; openToken, SeparatedSyntaxList`1&amp;amp;amp; arguments, SyntaxToken&amp;amp;amp; closeToken, SyntaxKind openKind, SyntaxKind closeKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseParenthesizedArgumentList()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePostFixExpression(ExpressionSyntax expr)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementNoDeclaration(Boolean allowAnyExpression)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatements(CSharpSyntaxNode&amp;amp;amp; previousNode, SyntaxListBuilder`1 statements, Boolean stopOnSwitchSections)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlock(Boolean isMethodBody, Boolean isAccessorBody)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementNoDeclaration(Boolean allowAnyExpression)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseEmbeddedStatement(Boolean complexCheck)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseIfStatement()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementNoDeclaration(Boolean allowAnyExpression)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatements(CSharpSyntaxNode&amp;amp;amp; previousNode, SyntaxListBuilder`1 statements, Boolean stopOnSwitchSections)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlock(Boolean isMethodBody, Boolean isAccessorBody)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlockAndExpressionBodiesWithSemicolon(BlockSyntax&amp;amp;amp; blockBody, ArrowExpressionClauseSyntax&amp;amp;amp; expressionBody, SyntaxToken&amp;amp;amp; semicolon, Boolean parseSemicolonAfterBlock)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMethodDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers, SyntaxToken refKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceOpt, SyntaxToken identifier, TypeParameterListSyntax typeParameterList)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind, String typeName)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTypeDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind, String typeName)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp;amp;amp; openBrace, NamespaceBodyBuilder&amp;amp;amp; body, SyntaxListBuilder&amp;amp;amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclaration()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp;amp;amp; openBrace, NamespaceBodyBuilder&amp;amp;amp; body, SyntaxListBuilder&amp;amp;amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnitCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseWithStackGuard[TNode](Func`1 parseFunc, Func`1 createEmptyNodeFunc)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnit()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(SourceText newText, IReadOnlyList`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.&amp;amp;lt;IncrementallyParseTreeAsync&amp;amp;gt;d__13.MoveNext()&lt;/ExceptionString&gt;&lt;/Exception&gt;&lt;/TraceRecord&gt;
```

Crash dump at `%internal_share%\public\tomat\Bugs\13509`
</Description>
    <CreatedDate>31/08/2016</CreatedDate>
    <ClosedDate>31/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13506</IssueID>
    <Title>Microsoft.CodeAnalysis.UnitTests.SolutionTests.TestRecoverableSyntaxTreeCSharp seems flaky</Title>
    <Description>It's failed twice in the past two days: 
- http://jdash.azurewebsites.net/builds/test?name=Microsoft.CodeAnalysis.UnitTests.SolutionTests.TestRecoverableSyntaxTreeCSharp&amp;viewName=dotnet_roslyn&amp;pr=False&amp;limit=10&amp;startDate=2016-08-30
- https://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_release_unit64/567/

I suspect this has the same root cause as https://github.com/dotnet/roslyn/issues/13433
</Description>
    <CreatedDate>31/08/2016</CreatedDate>
    <ClosedDate>16/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13493</IssueID>
    <Title>Proposal: Language "using" blocks with multiple resources</Title>
    <Description>This is more a feature than an issue. It would be nice if we can use "using" block with multiple resources such as below:
`using(var custSvc =  new CustomerService(), var empSvc = new EmployeeService()) { }`

I do not for see any limitations to being able to achieve this but I could be wrong.
</Description>
    <CreatedDate>31/08/2016</CreatedDate>
    <ClosedDate>01/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13479</IssueID>
    <Title>[Feature Request] Pipeline operator in c#</Title>
    <Description>I suggest such syntax.

```
var y = new object();
var x1 = new {num = 1, str = "foo", y} -&gt; $"{*.num} {*.str} " + *.y.ToString();
var x2 = new [] {1,2,3} -&gt; Array.Sort;
var x3 = new object [] {1,2,3} -&gt; Cast&lt;int&gt; -&gt; $.Sum;
```

I don't suggest =&gt; because new tuple syntax would be interpreted as lambda declaration.
</Description>
    <CreatedDate>31/08/2016</CreatedDate>
    <ClosedDate>31/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13466</IssueID>
    <Title>Typing ':' (colon) after open-paren should not commit completion</Title>
    <Description>Typing `var t = (a` and then pressing ‘:’ currently yields `var t = (args:` which is undesirable. 

FYI @CyrusNajmabadi.
</Description>
    <CreatedDate>30/08/2016</CreatedDate>
    <ClosedDate>12/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13465</IssueID>
    <Title>Misleading warning is reported for a field returned by reference</Title>
    <Description>```
public class Cls
{
    private static int F1;
    public static void Main()
    {
        object x1 = null;
        Test1(out M (x1));
        System.Console.WriteLine(F1);
    }

    static ref int M(object x)
    {
        return ref F1;
    }

    static object Test1(out int x)
    {
        x = 123;
        return null;
    }
}
```

Observed:

```
                // (4,24): warning CS0649: Field 'Cls.F1' is never assigned to, and will always have its default value 0
                //     private static int F1;
```

Expected:
No warning, or its wording should be softened, "**might** always have its default value ..." etc.
</Description>
    <CreatedDate>30/08/2016</CreatedDate>
    <ClosedDate>13/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13448</IssueID>
    <Title>Roslyn should have better support for document rename.</Title>
    <Description>**Issue**
Currently tracking a document rename requires listening for a document removal and subsequent document add event from the workspace.

**Suggestion**
The workspace should expose a DocumentRenamed event and provide some method for renaming a Document.
</Description>
    <CreatedDate>29/08/2016</CreatedDate>
    <ClosedDate>02/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13397</IssueID>
    <Title>Suggestion: this class type</Title>
    <Description>Is it possible to add special keyword to return this class type? We need if we use inherited class.

```
public class A
{
    public this Method1 ()
    {
        // do something
        return this;
    }
}

public class B : A
{
    public B Method2 () {}
}

var b = new B ();
b.Method1().Method2();
```
</Description>
    <CreatedDate>26/08/2016</CreatedDate>
    <ClosedDate>01/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13364</IssueID>
    <Title>Proposal: If / while with multiple statements condition</Title>
    <Description>Add ability to put multiple statements into condition for if and while.
Example:

```
if (
var p = GetPoint();
p.X += 10;
p.Length &gt; 20)
{
...
}
```

Last statement (required) is expression that provide bool value.

Benefits:
- better semantically corelated preparing and checking 
- less effort to avoid conflicts with names of temporaryy variables
</Description>
    <CreatedDate>25/08/2016</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13298</IssueID>
    <Title>VB Tuples - need to handle generic methods in ValueTuple types</Title>
    <Description>We do not have generic methods in ValueTuple, but in a custom ValueTuple implementation, they may exist.

We need to handle that case.
</Description>
    <CreatedDate>22/08/2016</CreatedDate>
    <ClosedDate>23/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13269</IssueID>
    <Title>Enum type in autocomplete list if member of the same name exists</Title>
    <Description>**Version Used**: 2.0.0.60808 (I suspect this is might be a regression)

**Steps to Reproduce**:

``` C#
class Program
{
    static ConsoleKey ConsoleKey { get; }

    static void Main(string[] args)
    {
        ConsoleKey key = ConsoleKey.|
    }
}
```

**Expected Behavior**:
Only enum values in the list.

**Actual Behavior**:
![untitled](https://cloud.githubusercontent.com/assets/10546952/17812534/5a435b6c-661f-11e6-952d-50a98315d8ab.png)
I can't think of a situation where this would be a valid suggestion.

Might be related to #5418.
</Description>
    <CreatedDate>19/08/2016</CreatedDate>
    <ClosedDate>19/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13255</IssueID>
    <Title>Proposal: target typing for "default" in C#</Title>
    <Description>The `default` keyword currently requires an explicit type.
For instance, one has to write `default(ImmutableArray&lt;string&gt;)`. 
But the type could be omitted in most cases, resulting in simpler code: `default`.

You would be allowed to write:
1. `M(default);`,
2. `x = default;`, where `x` is known to have type `ImmutableArray&lt;string&gt;`.

Note this feature is already available in VB, as you can use the `Nothing` keyword for the default value (both for class and struct types). 
If we wanted to follow the VB approach, the proposal could extend to allowing `null` as default value for value types as well, such as `ImmutableArray&lt;string&gt; x = null;`.

FYI @dotnet/roslyn-compiler 

Update: As @svick pointed out, proposal #35 to allow type inference in constructions (`new ()`), but @gafter clarified this would have different meaning.

Update: We should allow:
1. `const int x = default;` (using target-typed `default` for constant)
2. `object x = default;` (using target-typed `default` for reference type)
</Description>
    <CreatedDate>18/08/2016</CreatedDate>
    <ClosedDate>01/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13233</IssueID>
    <Title>Squiggles disappear on invoking code fix</Title>
    <Description>**Version Used**: 
Latest Roslyn bits

**Steps to Reproduce**:
1. Compile Roslyn.sln on Dev15 Preview3 to deploy latest bits to RoslynDev hive.
2. devenv /rootsuffix RoslynDev
3. Unzip `Closed\Test\Solutions\Newtonsoft.Json.zip` and open `Closed\Test\Solutions\Newtonsoft.Json\Newtonsoft.Json\Newtonsoft.Json.Portable.sln`
4. Open `Closed\Test\Solutions\Newtonsoft.Json\Newtonsoft.Json\Linq\JsonLoadSettings.cs`, go to line 27 with text `_commentHandling = value;`. You should see a green squiggle with SA1101 (prefix with this).
5. Hit Ctrl + dot and Enter to invoke the code fix, but press cancel while code fix is being computed.

**Expected Behavior**:
Squiggles still appear on the open document.

**Actual Behavior**:
Squiggles disappear as soon as code fix is invoked and don't appear again. Error list still shows the diagnostics, and the code fix for SA1101 is still offered at line 27.
</Description>
    <CreatedDate>17/08/2016</CreatedDate>
    <ClosedDate>18/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13220</IssueID>
    <Title>A C#-style syntax for function signatures</Title>
    <Description>After reading the Ceylon language tour http://ceylon-lang.org/documentation/1.2/tour/functions/ I realised that they have a very nice way of representing function signatures (i.e. the type of a lambda function) using a type-first, C-style syntax.

Currently, we have to use the Func&lt;&gt; and Action&lt;&gt; types if we wish to write a higher order function, such as in this fictional MyList class:

``` csharp
public class MyList&lt;TElement&gt;
{
    public List&lt;TReturn&gt; Select&lt;TReturn&gt;(Func&lt;TElement, TReturn&gt; selector)
    {
        // ...
    }

    public void ForEach(Action&lt;TElement&gt; action)
    {
        // ...
    }
}
```

but using this new syntax we can write `Func&lt;TArg, TReturn&gt; function` as `TReturn function(TArg)`, which is easier to understand as it looks a lot like a method signature on a class. Also, we can represent actions using `void function(TArg)`. If we apply this to the example above we get:

``` csharp
public class MyList&lt;TElement&gt;
{
    public List&lt;T&gt; Select&lt;T&gt;(T selector(TElement))
    {
        // ...
    }

    public void ForEach(void action(T))
    {
        // ...
    }
}
```

In addition to the advantages already mentioned this would allow us to name the arguments in our functions. Sometimes the type alone isn't helpful, such as the Select overload that takes a `Func&lt;int, TElement, TResult&gt;`. If we are dealing with an `IEnumerable&lt;int&gt;` then the signature is Func&lt;int, int, TResult&gt; and we can easily get confused as to which lambda argument is the index and which is the element from the list.

If we can declare pseudonames for the lambda arguments (using the same magic as the new named Tuples?) then, lifting from Ceylon again, we would be able to write:

``` csharp
public List&lt;TResult&gt; Select&lt;TResult&gt;(TResult selector(int index, TElement element))
{
    // ...
}
```

And the calling code would be able to distinguish between the lambda arguments because instead of seeing the signature as `Func&lt;int, int, TResult&gt;` they would see `TResult selector(int index, int element)`.

You could also used named &amp; positional parameters when calling one of these lambdas. Currently, when calling a lambda with the signature `Action&lt;int, int&gt;`, you see the signature `.Invoke&lt;int, int&gt;(int arg1, int arg2)`, for example. Under the new system I would be able to write:

``` csharp
public void Do(void printLocation(int x, int y))
{
    printLocation(x : 4, y : 5);
}
```
</Description>
    <CreatedDate>17/08/2016</CreatedDate>
    <ClosedDate>17/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13171</IssueID>
    <Title>Parser regression involving async</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:
1. Compile attached sample

``` csharp
using System;
using System.Threading;

class X
{
    void ParserError (IAsyncResult ar)
    {
        var async = ar.AsyncState as ThreadStart;
        async.EndInvoke (ar);
    }
}
```

**Expected Behavior**:

No parser error

**Actual Behavior**:

(9,19): error CS1001: Identifier expected
(9,19): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)
(9,19): error CS1003: Syntax error, '[' expected
(9,23): error CS1003: Syntax error, ']' expected
</Description>
    <CreatedDate>15/08/2016</CreatedDate>
    <ClosedDate>15/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13170</IssueID>
    <Title>Proposal: Multiple comparison operators in an expression</Title>
    <Description>To check whether a value is within a range, one must do this now:

```
if (value &gt;= minValue &amp;&amp; value &lt;= maxvalue) { }
```

It would be easier to read if this was allowed:

```
if (minValue &lt;= value &lt;= maxValue) { }
```

The compiler could take all comparison operators and combine them with an AND expression. Here's the proposed order to be generated by the compiler:

```
if (minValue &lt;= value &amp;&amp; value &lt;= maxValue) { }
```

This could be extended to an arbitrary number of comparisons:

```
if (a &lt; b &lt; c &lt; d &lt; e) { }
```

Would result in:

```
if (a &lt; b &amp;&amp; b &lt; c &amp;&amp; c &lt; d &amp;&amp; d &lt; e) { }
```

Does that sound reasonable?

I understand that this syntax is currently invalid because `a &lt; b` evaluates to `bool` and there is no comparison operator overload for `bool` and the type of `c` (which is normally not `bool`). It would be the compiler's task to figure this out.

This might be restricted to sequences of the same comparison operator direction, so this should be allowed:

```
a &lt;= b &lt; c &lt;= d &lt; e
```

While this may not make sense:

```
a &lt; b &gt; c &lt; d &gt;= e
```
</Description>
    <CreatedDate>15/08/2016</CreatedDate>
    <ClosedDate>17/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13157</IssueID>
    <Title>We need mixins/traits quickly!!</Title>
    <Description>Lets say you have a class Animal and a class Human
Both should be able to walk() and swim() so I wanna provide them both with a basic implementation for it. Let's say I already derive both from Entity and entities dont necessarily walk or swim so they shouldnt get both those methods.
What now? Impossible unless I duplicate the code in both Animal and Human or I create another class called, lets say Actor and put them in both Animal and Human composition style but then I always have to call:
myAnimal.actor.walk()
myAnimal.actor.swim()

There is no good solution in c#. Please fix!

Here is how it would look:

```
trait Tail {
     void wag() {}
}
trait Feet {
     void run() {}
}
trait Face {
     void smile() {}
}

class Animal has Tail, Feet, Face {
}

new Animal().smile();
```
</Description>
    <CreatedDate>14/08/2016</CreatedDate>
    <ClosedDate>15/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13123</IssueID>
    <Title>"Attempted to read or write protected memory." in metadata reader.</Title>
    <Description>We had a test failure here: 
http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit64_prtest/2337/

With this stack:
09:34:51   Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
09:34:51      at System.Reflection.Metadata.Ecma335.TypeDefTableReader.GetExtends(TypeDefinitionHandle handle)
09:34:51      at Microsoft.CodeAnalysis.PEModule.GetBaseTypeOfTypeOrThrow(TypeDefinitionHandle typeDef) in q:\roslyn\src\Compilers\Core\Portable\MetadataReader\PEModule.cs:line 860
09:34:51      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredBaseType() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 429
09:34:51      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredBaseType(ConsList`1 basesBeingResolved) in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 406
09:34:51      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.get_TypeKind() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 1603
09:34:51      at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.Microsoft.CodeAnalysis.ITypeSymbol.get_TypeKind() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\TypeSymbol.cs:line 694
</Description>
    <CreatedDate>12/08/2016</CreatedDate>
    <ClosedDate>12/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>13097</IssueID>
    <Title>IDE inserts wrong indent</Title>
    <Description>**Version Used**: VS2015 Update3

**Steps to Reproduce**:

![wrongindent](https://cloud.githubusercontent.com/assets/3316258/17598135/edf4c580-5fad-11e6-9b7e-d5e774289e0d.gif)

This is the starting file:

``` cs
using System;

// Hello

class Class1
{
    // Hello

    int f() =&gt; 1;

}
```

What I do is position the cursor at the end of either `// Hello` and press ENTER twice.

**Expected Behavior**:

It should line up my cursor underneath the preceding `//`

**Actual Behavior**:

It lines up my cursor indented by 4.
</Description>
    <CreatedDate>11/08/2016</CreatedDate>
    <ClosedDate>11/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12981</IssueID>
    <Title>VB.NET Intellisense (auto complete) broken</Title>
    <Description>**Version Used**: VS2015 Enterprise Update 3 

**Steps to Reproduce**:

Just type code! Various autocomplete options are simply wrong, based on the type of object that must follow.

Screenshots showing the behaviour (and compared with VS2013 attached.

**Expected Behavior**: Autocomplete should show correct available options

**Actual Behavior**: Autocomplete shows completely wrong options.

The following screenshots illustrate the VS2013 (correct) and VS2015 (incorrect) behaviour:

![vs2015-autocompleteboolean](https://cloud.githubusercontent.com/assets/20885630/17461808/b0d390ac-5c90-11e6-9185-61d0d0005820.png)
![vs2013-autocompleteboolean](https://cloud.githubusercontent.com/assets/20885630/17461809/baa737be-5c90-11e6-9688-74e881dfd5e7.png)
![vs2015-autocompleteforselectedmethodoverload](https://cloud.githubusercontent.com/assets/20885630/17461810/be1ed9b0-5c90-11e6-8e4b-4c929a760ac5.png)
![vs2013-autocompleteforselectedmethodoverload](https://cloud.githubusercontent.com/assets/20885630/17461812/c33ae2cc-5c90-11e6-822d-1900537aef0e.png)
</Description>
    <CreatedDate>07/08/2016</CreatedDate>
    <ClosedDate>08/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12964</IssueID>
    <Title>VB Tuples: name match/mismatch rules similar</Title>
    <Description>- dominant type computation among multiple candidates differing only in names (include casing?)
   not sure if all "dominant type computations" are unified. may need to happen in several places
   see ternary operators, method type inference, lambdas with multiple returns, array literals inference...
- OHI 
  when override does not match a base only in tuple names give diagnostics. Warning - in VB spirit of naming permissiveness.
  implementing methods may not need to match. Confirm with LDM
- losing tuple literal names in assignments - same warning as in C#, but case insensitive.
</Description>
    <CreatedDate>05/08/2016</CreatedDate>
    <ClosedDate>08/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12881</IssueID>
    <Title>Intermittent failure in CSharpRazor.VerifyCompletionList</Title>
    <Description>See https://github.com/dotnet/roslyn/issues/12320#issuecomment-237044742

Scenario: Verify Completion list in Razor syntax
 Executing action [8/2/2016 7:08:34 PM] OpenFile
 DEBUG: executed DTE command File.OpenFile.
 DEBUG: start polling for code window
 DEBUG: polling complete
 Executing action [8/2/2016 7:08:37 PM] PlaceCursor
 Executing action [8/2/2016 7:08:37 PM] SendKeys
 Executing action [8/2/2016 7:08:42 PM] WebUtilities
 Executing action [8/2/2016 7:08:42 PM] WaitForWorkspace
 Executing action [8/2/2016 7:08:42 PM] PlaceCursor
 Executing action [8/2/2016 7:08:43 PM] SendKeys
 Executing action [8/2/2016 7:08:44 PM] VerifyCompletionList

System.Exception: The following expected item(s) not found:
 DateTime
</Description>
    <CreatedDate>02/08/2016</CreatedDate>
    <ClosedDate>02/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12862</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure in windows_vsi_p0_open_prtest on PR #12826</Title>
    <Description>Add Analyzer TAO action failed.

...

PR: [#12826](https://github.com/dotnet/roslyn/pull/12826) _porting OOP to preview 4 branch_ by @heejaechang
Failure: http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/dev15-preview-4/job/windows_vsi_p0_open_prtest/7/

**2 Test Failures:**
AnalyzersNode.C# Analyzers Node
AnalyzersNode.VB Analyzers Node

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

AnalyzersNode.xml
</Description>
    <CreatedDate>01/08/2016</CreatedDate>
    <ClosedDate>04/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12823</IssueID>
    <Title>Visual Studio becomes unresponsive then eventually crashes with OOM after writing "throw" in method argument list</Title>
    <Description>Recent Preview 4 build
1.  At $ enter a space _then_ backspace

``` C#
using System;

class Program
{
    static void Main(string[] args)
    {
        Type.GetType("Foo", throw$)
    }
}

```

Visual Studio becomes unresponsive and finally crashes with an OOM with this stack:

```
&gt;   Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler)  Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(Roslyn.Utilities.ValueSource&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt; oldTreeSource, Roslyn.Utilities.ValueSource&lt;Microsoft.CodeAnalysis.TextAndVersion&gt; newTextSource, System.Threading.CancellationToken cancellationToken)  Unknown
    [Native to Managed Transition]  
    [Managed to Native Transition]  
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.IdentifierNameSyntax.SetDiagnostics(Microsoft.CodeAnalysis.DiagnosticInfo[] diagnostics)  Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.GreenNodeExtensions.WithDiagnosticsGreen&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticInfo[] diagnostics)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.WithAdditionalDiagnostics&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticInfo[] diagnostics)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.AddError&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax node, Microsoft.CodeAnalysis.CSharp.ErrorCode code, object[] args)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.Precedence precedence)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.Precedence precedence)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.Precedence precedence)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentExpression(bool isIndexer)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentList(out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken openToken, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax&gt; arguments, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken closeToken, Microsoft.CodeAnalysis.CSharp.SyntaxKind openKind, Microsoft.CodeAnalysis.CSharp.SyntaxKind closeKind) Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseParenthesizedArgumentList()   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePostFixExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax expr)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.Precedence precedence)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.Precedence precedence)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.Precedence precedence)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseElementInitializer()  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseVariableInitializer(bool allowStackAlloc) Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseVariableDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeSyntax parentType, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.VariableFlags flags, bool isFirst, bool allowLocalFunctions, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken&gt; mods, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken refTokenOpt, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LocalFunctionStatementSyntax localFunction, bool isExpressionContext)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseVariableDeclarators(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.VariableFlags flags, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SeparatedSyntaxListBuilder&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.VariableDeclaratorSyntax&gt; variables, bool variableDeclarationsExpected, bool allowLocalFunctions, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken&gt; mods, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken refTokenOpt, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LocalFunctionStatementSyntax localFunction)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLocalDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SeparatedSyntaxListBuilder&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.VariableDeclaratorSyntax&gt; variables, bool allowLocalFunctions, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken&gt; mods, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken refTokenOpt, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeSyntax type, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LocalFunctionStatementSyntax localFunction)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLocalDeclarationStatement()   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleBadAwaitStatement(ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ResetPoint resetPointBeforeStatement)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleBadAwaitStatement()   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatementCore()   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseStatements(ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode previousNode, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.StatementSyntax&gt; statements, bool stopOnSwitchSections)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlock(bool isMethodBody, bool isAccessorBody) Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseBlockAndExpressionBodiesWithSemicolon(out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax blockBody, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArrowExpressionClauseSyntax expressionBody, out Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken semicolon, bool parseSemicolonAfterBlock)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt; attributes, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken refKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceOpt, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeParameterListSyntax typeParameterList)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind parentKind, string typeName)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseClassOrStructOrInterfaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt; attributes, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder modifiers)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTypeDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt; attributes, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder modifiers)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind parentKind, string typeName)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken openBrace, ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.NamespaceBodyBuilder body, ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder initialBadNodes, Microsoft.CodeAnalysis.CSharp.SyntaxKind parentKind)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclaration()    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken openBrace, ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.NamespaceBodyBuilder body, ref Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxListBuilder initialBadNodes, Microsoft.CodeAnalysis.CSharp.SyntaxKind parentKind)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnitCore() Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseWithStackGuard&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax&gt;(System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax&gt; parseFunc, System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax&gt; createEmptyNodeFunc)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnit() Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(Microsoft.CodeAnalysis.Text.SourceText newText, System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt; changes) Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText newText)    Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(Roslyn.Utilities.ValueSource&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt; oldTreeSource, Roslyn.Utilities.ValueSource&lt;Microsoft.CodeAnalysis.TextAndVersion&gt; newTextSource, System.Threading.CancellationToken cancellationToken)  Unknown
    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.DocumentState.&lt;IncrementallyParseTreeAsync&gt;d__13&gt;(ref Microsoft.CodeAnalysis.DocumentState.&lt;IncrementallyParseTreeAsync&gt;d__13 stateMachine)    Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(Roslyn.Utilities.ValueSource&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt; oldTreeSource, Roslyn.Utilities.ValueSource&lt;Microsoft.CodeAnalysis.TextAndVersion&gt; newTextSource, System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.DocumentState.CreateLazyIncrementallyParsedTree.AnonymousMethod__0(System.Threading.CancellationToken c)   Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.AsyncLazy&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt;.StartAsynchronousComputation(Roslyn.Utilities.AsyncLazy&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt;.AsynchronousComputationToStart computationToStart, Roslyn.Utilities.AsyncLazy&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt;.Request requestToCompleteSynchronously, System.Threading.CancellationToken callerCancellationToken) Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.AsyncLazy&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt;.GetValueAsync(System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(System.Threading.CancellationToken cancellationToken) Unknown
    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.DocumentState.&lt;GetSyntaxTreeAsync&gt;d__34&gt;(ref Microsoft.CodeAnalysis.DocumentState.&lt;GetSyntaxTreeAsync&gt;d__34 stateMachine)  Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Host.BackgroundParser.ParseDocumentAsync.AnonymousMethod__0()    Unknown

****
```
</Description>
    <CreatedDate>29/07/2016</CreatedDate>
    <ClosedDate>29/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12804</IssueID>
    <Title>Dynamic doesn't recognize tuple conversions</Title>
    <Description>``` C#
void f((int, int) x) { ... }
void f((long, long) x) { ... }
void M() 
{
    dynamic d = ((byte) 1, (byte) 2);
    (int x, int y) z1 = d; // should succeed

    f(d); // should succeed

    dynamic nd = (1, d);
    (int, (byte, byte)) z2 = d1; // should succeed
}
```

CC @gafter @VSadov FYI
</Description>
    <CreatedDate>28/07/2016</CreatedDate>
    <ClosedDate>23/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12754</IssueID>
    <Title>BasicExtractInterfaceDialog and CSharpExtractInterfaceDialog are failing to open dialog due to wrong cursor placement</Title>
    <Description>**Version Used**: 
ML 25526.00
Roslyn-Signed - Master - 20160722.2
**Steps to Reproduce**:
Run the tests via standalone context (contact me for a machine) 
For VB, the test is running the following command in scenario 1 after setting the editor text:
&lt;PlaceCursor CharsOffset="1" Marker="Class C"/&gt;
As you can see below, the class is selected. It is unable to open the extract interface dialog quick action here, but would be able to if C was selected. 

![image](https://cloud.githubusercontent.com/assets/10537189/17150124/10ab1396-5323-11e6-8e14-54a01432c94d.png)
</Description>
    <CreatedDate>26/07/2016</CreatedDate>
    <ClosedDate>22/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12752</IssueID>
    <Title>Changes to WhenClauseSyntax API</Title>
    <Description>**From API Review**

The `WhenClauseSyntax` API should change in the following ways:
- The values `Condition` and `WhenKeyword` should not be optional as the entire `WhenClauseSyntax` is optional.
</Description>
    <CreatedDate>26/07/2016</CreatedDate>
    <ClosedDate>26/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12675</IssueID>
    <Title>Roslyn 1.3.2 fails to add any MetadataReferenece to any project for fly-man-/halcyon [MSBuildWorkspace]</Title>
    <Description>Rolsyn 1.3.2 fails to add any MetadataReference to any project for https://github.com/fly-man-/halcyon. 

I've written a simple example that demonstrates such behavior: 
https://gist.github.com/vedun-z/d2aec4e4c337c199be771284e9f1b636

However, msbuild builds halcyon successfully. 

I use runprebuild2015.bat to generate solution file.

It seems that the problem appears in this code (CSharpProjectFileLoader.CSharpProjectFile.cs:47):

``` C#

 public override async Task&lt;ProjectFileInfo&gt; GetProjectFileInfoAsync(CancellationToken cancellationToken) {
               var compilerInputs = new CSharpCompilerInputs(this);
                var executedProject = await this.BuildAsync("Csc", compilerInputs, cancellationToken).ConfigureAwait(false);

                if (!compilerInputs.Initialized)
                {
                    // if msbuild didn't reach the CSC task for some reason, attempt to initialize using the variables that were defined so far.
                    this.InitializeFromModel(compilerInputs, executedProject);
                }

                return CreateProjectFileInfo(compilerInputs, executedProject);
            }


```

According to the comment, msbuild did't reach the CSC task so lets try to initialize compilerInputs manually. Method InitializeFromModel expects that executedProject.GetItems("ReferencePath") returns paths for MetadataReferences. However, for fly-man-/halcyon projects exectuedPath.Items contains only "Reference" items, so no MetadataReferences are added.  Do you have any ideas why msbuild do not add any "ReferencePath" items? 
</Description>
    <CreatedDate>22/07/2016</CreatedDate>
    <ClosedDate>27/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12656</IssueID>
    <Title>Using edit and continue will crash visual studio</Title>
    <Description>When pausing a running process (x64) in debug mode and editing code visual studio will crash when trying to save. This only happens in our server project, but it is consistent.

**Version Used**: Visual Studio Professional 2015 Version 14.0.25424.00 Update 3

**Steps to Reproduce**:
1. Start process
2. Pause process
3. Edit code
4. Save
5. Visual studio will crash when trying to save

**Expected Behavior**:
The changed code will be saved and process resumes

**Actual Behavior**:
Save is completed but the client will crash (I can say the save is completed because when I restart visual studio the edited code was saved)
</Description>
    <CreatedDate>21/07/2016</CreatedDate>
    <ClosedDate>27/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12619</IssueID>
    <Title>Support discards in deconstructions, out var and patterns</Title>
    <Description>``` C#
(int i, int j, *) = M();
var (i, j, *) = M();
```

Even if wildcards don't make it into C# 7, we need to figure out the syntax model and design, so they can be added smoothly later.
</Description>
    <CreatedDate>19/07/2016</CreatedDate>
    <ClosedDate>16/11/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12592</IssueID>
    <Title>Tuple names in interface implementations should be roundtrippable through metadata in VB</Title>
    <Description>This should basically be the VB version of https://github.com/dotnet/roslyn/pull/12577
</Description>
    <CreatedDate>18/07/2016</CreatedDate>
    <ClosedDate>03/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12548</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure in windows_vsi_p0_open_prtest on PR #12532</Title>
    <Description>PR: [#12532](https://github.com/dotnet/roslyn/pull/12532) _Support doc comments for symbols declared off an anonymous type._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p0_open_prtest/272/

**2 Test Failures:**
AnalyzersNode.C# Analyzers Node
AnalyzersNode.VB Analyzers Node

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

AnalyzersNode.xml
</Description>
    <CreatedDate>15/07/2016</CreatedDate>
    <ClosedDate>15/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12542</IssueID>
    <Title>VS Stops responding after Open Paren</Title>
    <Description>**Version Used**: Dev15 Preview 3

**Steps to Reproduce**:
1. Typing https://github.com/333fred/roslyn-project-system/blob/oom-bug-code/src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/RenameStrategies/NestedClassRenameStrategy.cs#L38
2. Pressed (

This appears to be a consistent repro at least on my machine, happens every time I do this.

**Expected Behavior**:
( is typed, editor behaves as normal.

**Actual Behavior**:
Editor freezes. VS very quickly runs out of memory, chewing up additional memory at about 50-100 MB/sec.

Dump is in \internal-share\frsilb\devenv_bug_12542.DMP.

UI Thread Stack:

```
    [Managed to Native Transition]  
&gt;   WindowsBase.dll!System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)  Unknown
    mscorlib.dll!System.Threading.SynchronizationContext.InvokeWaitMethodHelper(System.Threading.SynchronizationContext syncContext, System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)    Unknown
    [Native to Managed Transition]  
    [Managed to Native Transition]  
    mscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout, bool exitContext)   Unknown
    mscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout) Unknown
    mscorlib.dll!System.Threading.ManualResetEventSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)  Unknown
    mscorlib.dll!System.Threading.Tasks.Task.SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)    Unknown
    mscorlib.dll!System.Threading.Tasks.Task.InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)    Unknown
    mscorlib.dll!System.Threading.Tasks.Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.FindToken(Microsoft.VisualStudio.Text.ITextSnapshot snapshot, int position, System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.AutomaticCompletion.Sessions.ParenthesisCompletionSession.CheckOpeningPoint(Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession session, System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.BraceCompletionSessionProvider.BraceCompletionSession.Start(System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.BraceCompletionSessionProvider.BraceCompletionSession.Start()    Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.BraceCompletion.Implementation.BraceCompletionStack.PushSession.AnonymousMethod__1()   Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(object errorSource, System.Action call) Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.BraceCompletion.Implementation.BraceCompletionStack.PushSession(Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession session)   Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.BraceCompletion.Implementation.BraceCompletionManager.PostTypeChar(char character) Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.BraceCompletionCommandFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)   Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)   Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)   Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000.AnonymousMethod__0()    Unknown
    Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.EventHookup.EventHookupCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers.AnonymousMethod__1()  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.DocumentationComments.AbstractDocumentationCommentCommandHandler&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler) Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers.AnonymousMethod__1()  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CommandHandlers.AbstractCompletionCommandHandler.ExecuteCommandWorker&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)   Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CommandHandlers.AbstractCompletionCommandHandler.Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)   Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers.AnonymousMethod__1()  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)   Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CommandHandlers.SignatureHelpCommandHandler.ExecuteCommandWorker&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)    Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CommandHandlers.SignatureHelpCommandHandler.Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)    Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers.AnonymousMethod__1()  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Formatting.FormatCommandHandler.ExecuteReturnOrTypeCommand(Microsoft.CodeAnalysis.Editor.CommandArgs args, System.Action nextHandler, System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Formatting.FormatCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)   Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers.AnonymousMethod__1()  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.DocumentationComments.AbstractXmlTagCompletionCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler)  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers.AnonymousMethod__1()  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.HandlePossibleTypingCommand(Microsoft.CodeAnalysis.Editor.CommandArgs args, System.Action nextHandler, System.Action&lt;Microsoft.VisualStudio.Text.SnapshotSpan&gt; actionIfInsideActiveSpan)   Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action nextHandler) Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;(System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;&gt; commandHandlers, Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action lastHandler)  Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Execute&lt;Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs&gt;(Microsoft.VisualStudio.Utilities.IContentType contentType, Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs args, System.Action lastHandler)    Unknown
    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteTypeCharacter(System.IntPtr pvaIn, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType, System.Action executeNextCommandTarget) Unknown
    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType)    Unknown
    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut) Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)   Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.Extensions.Exec(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget oleCommandTarget, Vim.VisualStudio.OleCommandData oleCommandData) Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.VsCommandTarget.TryCustomProcess(Vim.InsertCommand command)    Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.VsVimHost.TryCustomProcess(Microsoft.VisualStudio.Text.Editor.ITextView textView, Vim.InsertCommand command)   Unknown
    Vim.UI.Wpf.dll!Vim.UI.Wpf.VimHost.Vim.IVimHost.TryCustomProcess(Microsoft.VisualStudio.Text.Editor.ITextView textView, Vim.InsertCommand command)   Unknown
    Vim.Core.dll!Vim.InsertUtil.RunInsertCommandCore&lt;bool&gt;(Vim.InsertCommand command, bool addNewLines) Unknown
    Vim.Core.dll!Vim.Modes.Insert.InsertMode.RunInsertCommand(Vim.InsertCommand command, Vim.KeyInputSet keyInputSet, Vim.CommandFlags commandFlags)    Unknown
    Vim.Core.dll!Vim.Modes.Insert.InsertMode.ProcessCore(Vim.KeyInput keyInput) Unknown
    Vim.Core.dll!Vim.Modes.Insert.InsertMode.Process(Vim.KeyInput keyInput) Unknown
    Vim.Core.dll!Vim.Modes.Insert.InsertMode.Vim.IMode.Vim-IMode-Process(Vim.KeyInput keyInput) Unknown
    Vim.Core.dll!Vim.VimBuffer.ProcessOneKeyInput(Vim.KeyInput keyInput)    Unknown
    Vim.Core.dll!&lt;StartupCode$Vim-Core&gt;.$VimBuffer.processSet@453(Vim.VimBuffer x, Microsoft.FSharp.Core.FSharpRef&lt;Vim.ProcessResult&gt; processResult, Vim.KeyInputSet keyInputSet)   Unknown
    Vim.Core.dll!Vim.VimBuffer.ProcessCore(Vim.KeyInputSet keyInputSet) Unknown
    Vim.Core.dll!Vim.VimBuffer.Process(Vim.KeyInput keyInput)   Unknown
    Vim.Core.dll!Vim.VimBuffer.Vim.IVimBuffer.Vim-IVimBuffer-Process(Vim.KeyInput keyInput) Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.Implementation.Misc.StandardCommandTarget.TryProcessWithBuffer(Vim.KeyInput keyInput)  Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.Implementation.Misc.StandardCommandTarget.Exec(Vim.VisualStudio.EditCommand editCommand, out System.Action action) Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.Implementation.Misc.StandardCommandTarget.Vim.VisualStudio.ICommandTarget.Exec(Vim.VisualStudio.EditCommand editCommand, out System.Action action) Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.VsCommandTarget.Exec(Vim.VisualStudio.EditCommand editCommand, out System.Action action)   Unknown
    Vim.VisualStudio.Shared.dll!Vim.VisualStudio.VsCommandTarget.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(ref System.Guid commandGroup, uint commandId, uint commandExecOpt, System.IntPtr variantIn, System.IntPtr variantOut)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)   Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VsKeyboardFilter.SendCommand(System.Guid cmdGroup, uint cmdID, object inParam)    Unknown
    Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VsKeyboardFilter.TextInput(System.Windows.Input.TextCompositionEventArgs args)    Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Editor.Implementation.KeyProcessorDispatcher.DispatchTextInputEvents.AnonymousMethod__6_0(Microsoft.VisualStudio.Text.Editor.KeyProcessor p, System.Windows.Input.TextCompositionEventArgs args)   Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Editor.Implementation.KeyProcessorDispatcher.Dispatch.AnonymousMethod__0() Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(object errorSource, System.Action call) Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Editor.Implementation.KeyProcessorDispatcher.Dispatch&lt;System.Windows.Input.TextCompositionEventArgs&gt;(System.Action&lt;Microsoft.VisualStudio.Text.Editor.KeyProcessor, System.Windows.Input.TextCompositionEventArgs&gt; action, System.Windows.Input.TextCompositionEventArgs args) Unknown
    Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Editor.Implementation.KeyProcessorDispatcher.MakeHandler.AnonymousMethod__0(object sender, System.Windows.Input.TextCompositionEventArgs args) Unknown
    PresentationCore.dll!System.Windows.Input.TextCompositionEventArgs.InvokeEventHandler(System.Delegate genericHandler, object genericTarget) Unknown
    PresentationCore.dll!System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate handler, object target)   Unknown
    PresentationCore.dll!System.Windows.RoutedEventHandlerInfo.InvokeHandler(object target, System.Windows.RoutedEventArgs routedEventArgs) Unknown
    PresentationCore.dll!System.Windows.EventRoute.InvokeHandlersImpl(object source, System.Windows.RoutedEventArgs args, bool reRaised)    Unknown
    PresentationCore.dll!System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject sender, System.Windows.RoutedEventArgs args)   Unknown
    PresentationCore.dll!System.Windows.UIElement.RaiseTrustedEvent(System.Windows.RoutedEventArgs args)    Unknown
    PresentationCore.dll!System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs args, bool trusted) Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.ProcessStagingArea() Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs input)  Unknown
    PresentationCore.dll!System.Windows.Input.TextCompositionManager.UnsafeCompleteComposition(System.Windows.Input.TextComposition composition)    Unknown
    PresentationCore.dll!System.Windows.Input.TextCompositionManager.PostProcessInput(object sender, System.Windows.Input.ProcessInputEventArgs e)  Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.RaiseProcessInputEventHandlers(System.Windows.Input.ProcessInputEventHandler postProcessInput, System.Windows.Input.ProcessInputEventArgs processInputEventArgs) Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.ProcessStagingArea() Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs input)  Unknown
    PresentationCore.dll!System.Windows.Input.TextCompositionManager.UnsafeStartComposition(System.Windows.Input.TextComposition composition)   Unknown
    PresentationCore.dll!System.Windows.Input.TextCompositionManager.PostProcessInput(object sender, System.Windows.Input.ProcessInputEventArgs e)  Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.RaiseProcessInputEventHandlers(System.Windows.Input.ProcessInputEventHandler postProcessInput, System.Windows.Input.ProcessInputEventArgs processInputEventArgs) Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.ProcessStagingArea() Unknown
    PresentationCore.dll!System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs input)  Unknown
    PresentationCore.dll!System.Windows.Input.InputProviderSite.ReportInput(System.Windows.Input.InputReport inputReport)   Unknown
    PresentationCore.dll!System.Windows.Interop.HwndKeyboardInputProvider.ProcessTextInputAction(System.IntPtr hwnd, MS.Internal.Interop.WindowMessage msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)   Unknown
    PresentationCore.dll!System.Windows.Interop.HwndSource.OnPreprocessMessage(object param)    Unknown
    WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)  Unknown
    WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler) Unknown
    WindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)   Unknown
    WindowsBase.dll!System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority priority, System.Delegate method, object arg)    Unknown
    PresentationCore.dll!System.Windows.Interop.HwndSource.OnPreprocessMessageThunk(ref System.Windows.Interop.MSG msg, ref bool handled)   Unknown
    PresentationCore.dll!System.Windows.Interop.HwndSource.WeakEventPreprocessMessage.OnPreprocessMessage(ref System.Windows.Interop.MSG msg, ref bool handled) Unknown
    [Native to Managed Transition]  
    [Managed to Native Transition]  
    WindowsBase.dll!System.Windows.Interop.ComponentDispatcherThread.RaiseThreadMessage(ref System.Windows.Interop.MSG msg) Unknown
    Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.PreTranslateInput(ref Microsoft.VisualStudio.OLE.Interop.MSG oleMsg, bool handled)   Unknown
    [Native to Managed Transition]  
```
</Description>
    <CreatedDate>15/07/2016</CreatedDate>
    <ClosedDate>17/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12507</IssueID>
    <Title>[Test Failure] MSBuild Error in windows_vsi_p2_open_prtest on PR #12097</Title>
    <Description>PR: [#12097](https://github.com/dotnet/roslyn/pull/12097) _refactor how we do completion set filtering._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p2_open_prtest/257/

**Issue 1: MSBuild Error**
error MSB3073: The command ""d:\j\workspace\windows_vsi_p---5fa6ff52\Closed\Tools\ibcmerge\ibcmerge.exe" -q -f -partialNGEN -minify -mo "d:\j\workspace\windows_vsi_p---5fa6ff52\Open\Binaries\Obj\ServicesVisualStudio\Release\Microsoft.VisualStudio.LanguageServices.dll" -incremental "d:\j\workspace\windows_vsi_p---5fa6ff52\Closed\OptimizationData\Microsoft.VisualStudio.LanguageServices.pgo"" exited with code -1. [d:\j\workspace\windows_vsi_p---5fa6ff52\Open\src\VisualStudio\Core\Def\ServicesVisualStudio.csproj]
</Description>
    <CreatedDate>14/07/2016</CreatedDate>
    <ClosedDate>14/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12506</IssueID>
    <Title>[Test Failure] MSBuild Error in windows_vsi_p1_open_prtest on PR #12097</Title>
    <Description>PR: [#12097](https://github.com/dotnet/roslyn/pull/12097) _refactor how we do completion set filtering._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p1_open_prtest/237/

**Issue 1: MSBuild Error**
error MSB3073: The command ""d:\j\workspace\windows_vsi_p---9a06aa34\Closed\Tools\ibcmerge\ibcmerge.exe" -q -f -partialNGEN -minify -mo "d:\j\workspace\windows_vsi_p---9a06aa34\Open\Binaries\Obj\ServicesVisualStudio\Release\Microsoft.VisualStudio.LanguageServices.dll" -incremental "d:\j\workspace\windows_vsi_p---9a06aa34\Closed\OptimizationData\Microsoft.VisualStudio.LanguageServices.pgo"" exited with code -1. [d:\j\workspace\windows_vsi_p---9a06aa34\Open\src\VisualStudio\Core\Def\ServicesVisualStudio.csproj]
</Description>
    <CreatedDate>14/07/2016</CreatedDate>
    <ClosedDate>14/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12461</IssueID>
    <Title>Targeting netstandard1.3 with multiple imports breaks portable project flavor</Title>
    <Description>**Version Used**: Visual Studio 2015 Update 3 Microupdate 3.1

**Steps to Reproduce**:
1. Open Roslyn.sln at 255596ba195819fa2668b9a2c709a4105e2ac762
2. Look at the error list.

**Expected Behavior**: No warnings are in the error list.

**Actual Behavior**: There are warnings about incompatible PCL projects. If you look at 9df214f1507154b3486fd5e9f0366d27535cad6d you can see that removing imports that are lists made some of them go away.
</Description>
    <CreatedDate>12/07/2016</CreatedDate>
    <ClosedDate>25/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12438</IssueID>
    <Title>Add support for edit-and-continue for all new C# 7 features</Title>
    <Description>To start we're disabling edit-and-continue for new features in C# 7 (see #12380). We should re-enable them, adding support when necessary. The first task will be to take an inventory of what work is required.
</Description>
    <CreatedDate>11/07/2016</CreatedDate>
    <ClosedDate>28/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12437</IssueID>
    <Title>Support breakpoints in the when clause of a switch case</Title>
    <Description>It should be possible to set a breakpoint in the "when" clause of a switch case.
</Description>
    <CreatedDate>11/07/2016</CreatedDate>
    <ClosedDate>18/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12425</IssueID>
    <Title>Upgrading Analyzer Nuget packages and it doesnt work anymore</Title>
    <Description>**Version Used**: 
- Visual Studio 2015 Update 3

```
  &lt;package id="Microsoft.CodeAnalysis.Analyzers" version="1.1.0" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Common" version="1.3.2" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.CSharp" version="1.3.2" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.CSharp.Workspaces" version="1.3.2" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Workspaces.Common" version="1.3.2" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="Microsoft.Composition" version="1.0.30" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="NuGet.CommandLine" version="3.4.3" targetFramework="portable45-net45+win8" developmentDependency="true" /&gt;
  &lt;package id="System.Collections" version="4.0.11" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Collections.Immutable" version="1.2.0" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Diagnostics.Debug" version="4.0.11" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Globalization" version="4.0.11" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Linq" version="4.1.0" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Reflection.Metadata" version="1.3.0" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Resources.ResourceManager" version="4.0.1" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Runtime" version="4.1.0" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Runtime.Extensions" version="4.1.0" targetFramework="portable45-net45+win8" /&gt;
  &lt;package id="System.Threading" version="4.0.11" targetFramework="portable45-net45+win8" /&gt;
```

**Steps to Reproduce**:
1. Create a new Analyzer + CodeFix project 
2. Open Nuget
3. Update all Nuget packages

**Expected Behavior**:
It should work

**Actual Behavior**:
For some reason, when I launch the .vsix it doens't work. No idea why, don't know in what direction to look. Compilation is successful, it launches the VS dev instance. The dignostics are not detected (the default one making Program all caps) though.
</Description>
    <CreatedDate>11/07/2016</CreatedDate>
    <ClosedDate>11/08/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12418</IssueID>
    <Title>Expose SignatureHelpProvider infrastructure public</Title>
    <Description>**Version Used**: 1.3.2

First I have to thank you for exposing the completion service #8170. It was real fun to integrate the completion service -&gt; great job. If you are interested to see how I use it: [jbe2277.github.io/dotnetpad](https://jbe2277.github.io/dotnetpad).

Now, I would like to ask if you could expose the next feature via public API: **SignatureHelpProvider**
</Description>
    <CreatedDate>10/07/2016</CreatedDate>
    <ClosedDate>13/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12413</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure in windows_vsi_p3_open_prtest on PR #12407</Title>
    <Description>PR: [#12407](https://github.com/dotnet/roslyn/pull/12407) _Make IOptionService a genuine workspace service._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p3_open_prtest/221/

**1 Test Failures:**
CSharpRazor.Verify Completion commit after fully typed item.

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

CSharpRazor.xml
</Description>
    <CreatedDate>09/07/2016</CreatedDate>
    <ClosedDate>15/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12379</IssueID>
    <Title>[Umbrella] Improve EnC support for C#7 features</Title>
    <Description>Scope 0:
- [x] Disable EnC in presence of new VB nodes https://github.com/dotnet/roslyn/issues/14363 (not required)
- [x] Signature comparison for tuples in method signatures https://github.com/dotnet/roslyn/issues/14253
- [x] Disable EnC in presence of new C# nodes
- [x] Disable EnC in presence of C# 7 switch statement #12380
- [x] Edit-and-continue needs to be disabled for foreach loops that contain out vars #12736

Scope 1:
- [ ] Reasonable diff function
  - [ ] Deconstruction (statement, new foreach, updated for) (PR https://github.com/dotnet/roslyn/pull/13907)
  - [ ] Out var (I think this is N/A)
  - [ ] Switch
  - [ ] Local functions (should we need another level of comparison?)
  - [ ] Expression-bodied accessors, ctor, and dtor
- [x] Disable EnC in presence of v7 syntax (deconstruction, tuple, out var, ref locals, local functions) for active methods

Scope 2:
- [ ] Distance computation for C# 7 nodes, tracking slots with newly introduced locals and temps
</Description>
    <CreatedDate>07/07/2016</CreatedDate>
    <ClosedDate>28/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12327</IssueID>
    <Title>C# add usings use partial namespace when using statements are inside namespace blocks</Title>
    <Description>**Version Used**: Visual Studio 2015 Update 3

**Steps to Reproduce**:

![image](https://cloud.githubusercontent.com/assets/511355/16537845/59c6f08e-4042-11e6-93b6-b421ee443a17.png)

**Expected Behavior**:

Default to or have an option to output:

```
using System;
using Microsoft.ProductB;
```

**Actual Behavior**:

```
using System;
using ProductB;
```
</Description>
    <CreatedDate>02/07/2016</CreatedDate>
    <ClosedDate>05/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12283</IssueID>
    <Title>Field assigned via ref return warns about being un-assigned</Title>
    <Description>See `RefReturningInvocation` test.
The code runs fine, but the warning is incorrect.

``` C#

        [Fact, CompilerTrait(CompilerFeature.RefLocalsReturns)]
        public void RefReturningInvocation()
        {
            string source = @"
class C
{
    static int i;

    static void Main()
    {
        int x = 0, y = 0;
        M(x, y) = 42;
        System.Console.WriteLine(i);
    }
    static ref int M(int a, int b) { return ref i; }
}
";

            var comp = CompileAndVerify(source, expectedOutput: "42");
            comp.VerifyDiagnostics(
                // (4,16): warning CS0649: Field 'C.i' is never assigned to, and will always have its default value 0
                //     static int i;
                Diagnostic(ErrorCode.WRN_UnassignedInternalField, "i").WithArguments("C.i", "0").WithLocation(4, 16)
                );
        }
```

@VSadov FYI
</Description>
    <CreatedDate>29/06/2016</CreatedDate>
    <ClosedDate>13/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12273</IssueID>
    <Title>Broken analyzer dependencies in Update3</Title>
    <Description>**Version Used**: 
VS2015 Update3, master branch

**Steps to Reproduce**:
1. Build roslyn.sln, start VisualStudioSetup project.
2. In RoslynDev instance, create a new Console Application.
3. In package manager console, type:

```
install-package jetbrains.annotations
install-package resharpercodecontractnullability
```

**Expected Behavior**:
Analyzer runs (reports on Main method)

**Actual Behavior**:
Analyzer does not start. Instead, the next errors are displayed after build:

```
1&gt;CSC : warning CS8032: An instance of analyzer CodeContractNullability.CodeContractItemNullabilityAnalyzer cannot be created from e:\bart\documents\visual studio 2015\Projects\ConsoleApplication3\packages\ResharperCodeContractNullability.1.0.5\analyzers\dotnet\cs\CodeContractNullability.dll : Could not load file or assembly 'System.Collections.Immutable, Version=1.1.36.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified..
1&gt;CSC : warning CS8032: An instance of analyzer CodeContractNullability.CodeContractNullabilityAnalyzer cannot be created from e:\bart\documents\visual studio 2015\Projects\ConsoleApplication3\packages\ResharperCodeContractNullability.1.0.5\analyzers\dotnet\cs\CodeContractNullability.dll : Could not load file or assembly 'System.Collections.Immutable, Version=1.1.36.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified..
```

This reminds me of [a similar problem](https://github.com/dotnet/roslyn/issues/4831). Do we miss some binding redirects?

@srivatsn @tmeschter @mavasani 
</Description>
    <CreatedDate>29/06/2016</CreatedDate>
    <ClosedDate>01/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12193</IssueID>
    <Title>Anonymous type declaration with inferred property name causes an identity crysis</Title>
    <Description>**Version Used**: VS2015.2

**Steps to Reproduce**:

``` csharp
class Program
{
    static void Main(string[] args)
    {
        var tester = new Person();

        var result = new { tester.Name$$ };
    }
}

class Person
{
    public string Name { get; set; }
}
```
1. Set cursor to `$$`
2. Try to go to definition (F12)

**Expected Behavior**:
`public string Name { get; set; }` gets selected

![devenv_2016-06-24_01-32-01](https://cloud.githubusercontent.com/assets/7110884/16323522/aae85f36-39ab-11e6-91a7-fbe5028b0b4a.png)

**Actual Behavior**:
Selection just expands to `Name` on the same line.
When the property name is inferred, visual studio treats `tester.Name` as the anonymous type property. Changing that line to `var result = new { Name = tester.Name };` allows to go to definition on `tester.Name`.

![devenv_2016-06-24_01-32-21](https://cloud.githubusercontent.com/assets/7110884/16323526/b0920ed2-39ab-11e6-874c-f1d13f4c3eed.png)
</Description>
    <CreatedDate>23/06/2016</CreatedDate>
    <ClosedDate>30/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12155</IssueID>
    <Title>C# code not correctly indented </Title>
    <Description>Reformatting the file doesn't correctly re-indent the second .Foo (); line.

using System;
namespace SwitchvoxSoftphone
{
  public class SampleClass
  {
    public SampleClass ()
    {
      this.Foo ()
                  .Foo ();
    }

```
SampleClass Foo ()
{
}
```

  }
}
</Description>
    <CreatedDate>22/06/2016</CreatedDate>
    <ClosedDate>30/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12069</IssueID>
    <Title>[Test Failure] &lt;description&gt; in windows_eta_open_prtest on PR #12056</Title>
    <Description>PR: [#12056](https://github.com/dotnet/roslyn/pull/12056) _Improve parsing recovery for local functions_ by @agocke
Failure: http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_eta_open_prtest/614/
</Description>
    <CreatedDate>17/06/2016</CreatedDate>
    <ClosedDate>17/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12042</IssueID>
    <Title>Visual Studio Navigate to (Ctrl+,) doesn't rank "camel hump" matches highly</Title>
    <Description>**Version Used**: 
Visual Studio 2015 Update 3 RC (but this has existed in all version of VS 2015)

**Steps to Reproduce**:
1.  Open Navigate to (Ctrl+,)
2. Type "NTIP" 

**Expected Behavior**:
Matches such as **N**avigate**T**o**I**tem**P**rovider[.cs] should be ranked highly

**Actual Behavior**:
Instead these types of matches seem to come last (or at least very low) in the ranking.

The low ranking of these types of searches seems very counter intuitive especially since they only work if you use all capital letters, which imo reenforces the idea that they should be ranked much higher.

Sadly because of the low rankings my whole team (myself included) didn't even realize that VS supported this type of searching for a very long time (as we have a VERY large project so there are lots of matches) -- I only figured it out as I started out building a VS extension to implement it!

I'm not sure if this is a VS or Roslyn issue, but @davkean asked me to post it here to get it sorted.

Thanks!
</Description>
    <CreatedDate>16/06/2016</CreatedDate>
    <ClosedDate>30/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>12005</IssueID>
    <Title>Using Roslyn for doing code modifications from a console app, gives sporadic exceptions</Title>
    <Description>**Version Used**: 
Nuget version 1.2.2

**Steps to Reproduce**:

This is going to be complex. 
- Grab CosmosOS/Cosmos@d144745. This is the source code i'm running the console app on
- Grab CosmosOS/RoslynRefactorings@5d0fc1b. This is the console app.

The console app assumes the cosmos repository is cloned at `c:\Data\Sources\OpenSource\Cosmos`
This can be changed in Program.cs

**Expected Behavior**:
When running the console app, it's supposed to output a whole lot of dots to the console (meaning it succeeded modifying a single occurrence), and then exit because it's done. 

**Actual Behavior**:
Sporadically, I'm seeing the following error:

``````
System.AggregateException: One or more errors occurred. ---&gt; System.InvalidCastException: Kan een object van het type Microsoft.CodeAnalysis.Text.CompositeText niet converteren naar het type Microsoft.CodeAnalysis.Text.ChangedText.
   at Microsoft.CodeAnalysis.Text.ChangedText.WithChanges(IEnumerable`1 changes)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.TryApplyChanges(Solution newSolution)
   at RoslynTest.Program.&lt;DoMainAsync&gt;d__5.MoveNext() in C:\Data\Sources\OpenSource\CosmosRoslynRefactorings\RegistersToEnumRefactoring\Program.cs:line 84
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)
   at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout)
   at System.Threading.Tasks.Task.WaitAll(Task[] tasks)
   at RoslynTest.Program.Main(String[] args) in C:\Data\Sources\OpenSource\CosmosRoslynRefactorings\RegistersToEnumRefactoring\Program.cs:line 33
---&gt; (Inner Exception #0) System.InvalidCastException: Kan een object van het type Microsoft.CodeAnalysis.Text.CompositeText niet converteren naar het type Microsoft.CodeAnalysis.Text.ChangedText.
   at Microsoft.CodeAnalysis.Text.ChangedText.WithChanges(IEnumerable`1 changes)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.TryApplyChanges(Solution newSolution)
   at RoslynTest.Program.&lt;DoMainAsync&gt;d__5.MoveNext() in C:\Data\Sources\OpenSource\CosmosRoslynRefactorings\RegistersToEnumRefactoring\Program.cs:line 84&lt;---```
``````
</Description>
    <CreatedDate>14/06/2016</CreatedDate>
    <ClosedDate>16/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11966</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure (+1 more) in windows_vsi_p2_prtest on PR #1059</Title>
    <Description>PR: [#1059](https://github.com/dotnet/roslyn-internal/pull/1059) _Remove stale options._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_vsi_p2_prtest/141/

**6 Test Failures:**
CSharpFixAllOccurrences.FixAllOccurrences in Document - Apply Fix
CSharpFixAllOccurrences.FixAllOccurrences in Document - Undo
CSharpFixAllOccurrences.FixAllOccurrences in Solution - Apply Fix
CSharpFixAllOccurrences.FixAllOccurrences in Solution - Verify error list after applying fix
CSharpFixAllOccurrences.FixAllOccurrences in Solution - Verify document contents after applying fix
CSharpFixAllOccurrences.FixAllOccurrences in Solution - Remove this qualification

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

CSharpFixAllOccurrences.xml

**Issue 2: Build Script**
A script in the build failed to execute correctly causing a build failure.
</Description>
    <CreatedDate>13/06/2016</CreatedDate>
    <ClosedDate>23/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11737</IssueID>
    <Title>Unexpected behavior of IOperation</Title>
    <Description>IOperation routinely returns IInvalidExpression instance on expressions that are valid.  For example, in the following code:

``` vb
Option Strict On
Imports System.Runtime.CompilerServices

Namespace NS1
    Class C
        Sub Bar()
            Test(5)  ' Test(5) is invalid because there is no appropriate Import to bring it in.
        End Sub
    End Class
End Namespace
Namespace NS2
    Module A
        &lt;Extension()&gt;
        Sub Test(ByVal ec As NS1.C, ByVal n As Integer)
        End Sub
    End Module
End Namespace
```

This was unexpected to us when using the API.  While i could understand that 'Test' could not be resolved, we still expected to get an IInvocationExpression with appropriate ArgumentsInSourceOrder.  It was also expected that .TargetMethod could be null here as we could not find a suitable method.

The primary problem is that once you get an IInvalidExpression back, there's effectively nothing you can glean from it.  This means that it's harder to write features that operate on VB/C# agnostically in the presence of errors.  Instead, specific code has to be written again for each language again.

Ideally, in the presence of errors, the information reported back would still be as accurate as possible, without falling back to InvalidExpression/InvalidStatement and the like.
## 

Another example is:   "foo *= x".  If 'x' fails to bind, then we have an ICompoundAssignmentExpression (yaay,) that has a BinaryExpressionKind of Invalid (boo).  That means we have no way to tell at the IOperation level that this was even an attempt to Multiply.

Note: it's understandable that other information would be missing.  For example, it makes sense that we can't tell if this is int-multiple versus a long-multiply.  Similarly, we can't know if there was some operator that was invoked here.  However, we can still tell that this was a multiply, but that information gets lost due to the error below.
</Description>
    <CreatedDate>03/06/2016</CreatedDate>
    <ClosedDate>03/11/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11724</IssueID>
    <Title>Infinite loop when parsing a method body and possible throw exceptions</Title>
    <Description>**Branch**: future

**Steps to Reproduce**:
1. Set the following C# code in an editor:

``` C#
class C
{
    int M()
    {
        var i = M$$
        throw new System.Exception();
    }
}
```
1. Where `$$` represents the cursor's current location, type `(`.

**Actual Behavior**:
Eventual OOM coming from [`LanguageParser.cs`](https://github.com/dotnet/roslyn/blob/future/src/Compilers/CSharp/Portable/Parser/LanguageParser.cs#L9385-L9401) lines 9385-9401.  In short, `this.CurrentToken.Kind` is `ThrowKeyword` which causes the second branch of the `if` statement to evaluate to `true` (via `IsPossibleArgumentExpression()` but no token was consumed so `list` keeps getting missing commas and missing argument expressions added.
</Description>
    <CreatedDate>02/06/2016</CreatedDate>
    <ClosedDate>12/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11711</IssueID>
    <Title>Question/Issue : "NullReferenceException" when using interactive C#</Title>
    <Description>**Visual Studio 2015 Update 2**: 

**Steps to Reproduce**:

1.#r use to load one of our organization dll (sorry cannot share it) 

**Expected Behavior**:
Wanted to call a method from the loaded DLL

**Actual Behavior**:
I get this exception:

`Unexpected error:
System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Scripting.Hosting.CommonTypeNameFormatter.FormatNonGenericTypeName(TypeInfo typeInfo, CommonTypeNameFormatterOptions options)
   at Microsoft.CodeAnalysis.Scripting.Hosting.CommonTypeNameFormatter.FormatTypeName(Type type, CommonTypeNameFormatterOptions options)
   at Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpTypeNameFormatter.FormatTypeName(Type type, CommonTypeNameFormatterOptions options)
   at Microsoft.CodeAnalysis.Scripting.Hosting.CommonObjectFormatter.FormatMethodSignature(MethodBase method)
   at Microsoft.CodeAnalysis.Scripting.Hosting.CommonObjectFormatter.FormatException(Exception e)
   at Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpObjectFormatter.FormatException(Exception e)
   at Microsoft.CodeAnalysis.Interactive.InteractiveHost.Service.&lt;&gt;c__DisplayClass42_0.&lt;&lt;ExecuteOnUIThread&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Interactive.InteractiveHost.Service.&lt;ExecuteOnUIThread&gt;d__42.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Interactive.InteractiveHost.Service.&lt;ExecuteAsync&gt;d__30.MoveNext()

&gt; `

Interesting fact is that if I create a new class library just for testing then I am able to load and run the methods in that DLL but this dll (organization) which is a .net Assembly I am not able to get a method called.

I could help in debugging the problem if someone is wiling to help me. Thanks
*_Please close it if you seem it to be irrelevant *_
</Description>
    <CreatedDate>02/06/2016</CreatedDate>
    <ClosedDate>02/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11527</IssueID>
    <Title>Inline temporary variable does not parenthesize awaited call</Title>
    <Description>**Version Used**: VS2015.2

**Steps to Reproduce**:

``` csharp
using System.Linq;
using System.Threading.Tasks;

class Program
{
    static void Main(string[] args)
    {
        AsyncMain().Wait();
    }

    static async Task AsyncMain()
    {
        var $$text = await GetText();
        bool hasText = text.Any();
    }

    static async Task&lt;string&gt; GetText()
    {
        return "Hello";
    }
}
```
1. Set cursor to `$$`
2. Press `CTRL + .` to bring up the refactorings
3. Choose `Inline temporary variable`

**Expected Behavior**:

``` csharp
bool hasText = (await GetText()).Any();
```

**Actual Behavior**:

``` csharp
bool hasText = await GetText().Any();
```

causing error CS1061 since `Task&lt;string&gt;` does not contain a method named Any
</Description>
    <CreatedDate>24/05/2016</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11491</IssueID>
    <Title>Quick action to convert expression body to normal body and back</Title>
    <Description>Would be great if I could convert

``` C#
static int Add(int, int y)
{
    return x + y;
}
```

to

``` C#
static int Add(int x, int y) =&gt; x + y;
```

and back using quick actions (could even be code style)

And would be helpful for extracting fields from expression body too (#528).
</Description>
    <CreatedDate>22/05/2016</CreatedDate>
    <ClosedDate>02/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11453</IssueID>
    <Title>Intellisense Crash with this callstack</Title>
    <Description>devenv crashes in the middle of editing

I have put dump in "\&lt;share&gt;\hechang\intellisenseCrash\intellisenseCrash.dmp"

and below is the callstack.

it looks like EncodeSymbols tries to create SymbolId which ask for syntax tree that doesnt exist in compilation.

...

   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSemanticModel(SyntaxTree syntaxTree, Boolean ignoreAccessibility)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetSemanticModel(SyntaxTree syntaxTree, Boolean ignoreAccessibility)
   at Microsoft.CodeAnalysis.SymbolId.GetInteriorSymbols(ISymbol containingSymbol, List`1 symbols)
   at Microsoft.CodeAnalysis.SymbolId.GetInteriorSymbolOccurrence(ISymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.Generator.VisitLocal(ILocalSymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.Generator.Visit(ISymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.CreateId(ISymbol symbol)
   at Microsoft.CodeAnalysis.Completion.Providers.SymbolCompletionItem.EncodeSymbols(IReadOnlyList`1 symbols)
   at Microsoft.CodeAnalysis.Completion.Providers.SymbolCompletionItem.Create(String displayText, TextSpan span, IReadOnlyList`1 symbols, Int32 contextPosition, Int32 descriptionPosition, String sortText, String insertionText, Nullable`1 glyph, String filterText, Boolean preselect, SupportedPlatformData supportedPlatforms, Boolean isArgumentName, ImmutableDictionary`2 properties, ImmutableArray`1 tags, CompletionItemRules rules)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(String displayText, String insertionText, Int32 position, List`1 symbols, AbstractSyntaxContext context, TextSpan span, Boolean preselect, SupportedPlatformData supportedPlatformData)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(String displayText, String insertionText, Int32 position, List`1 symbols, AbstractSyntaxContext context, TextSpan span, Dictionary`2 invalidProjectMap, List`1 totalProjects, Boolean preselect)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;&gt;c__DisplayClass6_0.&lt;CreateItems&gt;b__3(IGrouping`2 g)
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems(Int32 position, IEnumerable`1 symbols, TextSpan span, AbstractSyntaxContext context, Dictionary`2 invalidProjectMap, List`1 totalProjects, Boolean preselect)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;GetItemsWorkerAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;ProvideCompletionsAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetProviderCompletionsAsync&gt;d__24.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetCompletionsAsync&gt;d__18.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.ModelComputer.&lt;GetCompletionListAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.ModelComputer.&lt;DoInBackgroundAsync&gt;d__13.MoveNext()
</Description>
    <CreatedDate>20/05/2016</CreatedDate>
    <ClosedDate>27/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11394</IssueID>
    <Title>Built-In ?=-Operator in C#</Title>
    <Description>A built-in operator like '?=' to assign a value to variable, if the current value is null.

**The expected behavior**

Instead of writing

``` csharp
    List&lt;short&gt; listOfNumbers = null;
    [...]
    if (listOfNumbers == null)
    {
        listOfNumbers = new List&lt;short&gt;();
    }
```

Simply write this

``` csharp
    List&lt;short&gt; listOfNumbers = null;
    [...]
    listOfNumbers ?= new List&lt;short&gt;();
```
</Description>
    <CreatedDate>18/05/2016</CreatedDate>
    <ClosedDate>18/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11359</IssueID>
    <Title>Proposal: Stronger type Inference for generics calls</Title>
    <Description>So today, C# can infer the type from the context for types like this:

```
var x = 1; // int
var y = "one"; // string
var z = 1f; // float
```

Now, when it comes to generics, say we have the following class:

```
class Foo&lt;T&gt;
{
    public Foo(T value)
    {
    }
}
```

When we are creating `Foo` we must satisfy the generic argument and provide the type explicitly like this:

```
var x = new Foo&lt;int&gt;(1);
var y = new Foo&lt;string&gt;("one");
var z = new Foo&lt;float&gt;(1);
```

Now, in C# 7 there's a new feature to allow C# to infer the type from the argument or whatever context it might be when the type is known instead of specifying the the actual type explicitly like this (which is just beautiful imo):

```
Foo(new (1, "one"));
```

So what I'm proposing is the ability to have stronger type inference for generics calls this means you no longer need to satisfy the type argument because it would be inferred by the compiler so in the _future_ we might have the ability to write the following code instead of the above:

```
var x = new Foo(1); // int
var y = new Foo("one"); // string
var z = new Foo(1f); // float
```

With my proposal the following will also be allowed so this is an addition to the C# 7.0 feature even though the C# 7.0 feature is more succinct:

```
Foo(new Bar(1, "one")); // Bar&lt;T, U&gt;
```

When it comes to overload resolution in cases like this:

```
class Foo&lt;T&gt;
{
    public Foo(T value)
    {
    }

    public Foo(object value)
    {
    }

    public Foo(int value)
    {
    }
}
```

I don't know what's the best approach to go with here but I'd assume it should pick the generic constructor over anything else.

The aim here is to make the code _more_ readable and _less_ explicit when it makes sense, in my opinion whether something is generic or not shouldn't concern the person that reads the code.

It's not like we handle things differently if something is generic, we just write it differently and I guess we can make it look like a normal code without all the verbosity and ceremony that generics brings, at least where we make the calls.
</Description>
    <CreatedDate>17/05/2016</CreatedDate>
    <ClosedDate>18/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11316</IssueID>
    <Title>Bug with command line args on Windows+Mono</Title>
    <Description>**Versions Used**: 
- Microsoft.Net.Compilers 1.2.1 (Visual C# Compiler version 1.2.0.60325)
- Microsoft.Net.Compilers 2.0.0-beta1 (Visual C# Compiler version 2.0.0.60317)
- Mono JIT compiler version 4.2.3 (Visual Studio built mono)

**Steps to Reproduce**:

Create a simple `Program.cs` file with a valid content. E.g:

``` cs
public class Program
{
   public static void Main()
   {
      System.Console.WriteLine("Hello, World!");
   }
}
```

Try to compile it with Roslyn+Mono:

```
mono csc.exe Program.cs
```

**Expected Behavior**:

Successful compilation.

**Actual Behavior**:

```
&gt; mono csc.exe Program.cs
Microsoft (R) Visual C# Compiler version 1.2.0.60325
Copyright (C) Microsoft Corporation. All rights reserved.

error CS2015: 'D:\Microsoft.Net.Compilers.1.2.1\tools\csc.exe' is a binary file instead of a text file
```

```
&gt; mono csc.exe Program.cs
Microsoft (R) Visual C# Compiler version 2.0.0.60317
Copyright (C) Microsoft Corporation. All rights reserved.

error CS2015: 'D:\Microsoft.Net.Compilers.2.0.0-beta1\tools\csc.exe' is a binary file instead of a text file
```
</Description>
    <CreatedDate>15/05/2016</CreatedDate>
    <ClosedDate>19/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11248</IssueID>
    <Title>Feature Request: Private extension methods</Title>
    <Description>Currently extension methods have to be public methods on public static classes but this means an extension method is available everywhere (internal and private extension methods accessible from public ones not withstanding and yes you can namespace them but with many tools offering automatic using statements on intellisense an extension method is constantly available anywhere in your code).

This becomes a problem when dealing with fluent classes, particularly complex configuration objects where you might have several common settings you want to reuse in a specific context. Currently the choices are to break DRY and repeat them all, to have a public extension method despite not being applicable elsewhere or to mix fluent and non-fluent code.

Allowing extension methods to be declared in a private nested class would solve this

```
public class ToExtend
{

}

public class MyClass {
    public DoThing() {
        var a = new ToExtend();
        //This would work
        a.ExtensionMethod()
    }
    private static NonPublicExtensions {
        public static ToExtend ExtensionMethod (this ToExtend toExtend) {
            //Do some work
            return toExtend;
        }
    }
}

public class MyOtherClass {
    public DoThing(){
        var a = new ToExtend();
        //This would not work as NonPublicExtensions is not visible
        a.ExtensionMethod()
    }
}
```
</Description>
    <CreatedDate>11/05/2016</CreatedDate>
    <ClosedDate>11/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11243</IssueID>
    <Title>Several crashes of Visual Studio 2015 when editing cs file</Title>
    <Description>**Version Used**: 

```
Visual Studio Enterprise 2015 v14.0.25123.00 Update 2
Roslyn Insider v1.3.0.60510 from nightly feed
```

**Steps to Reproduce**:

Several crashes of Visual Studio 2015 Update 2 when editing file.

**Expected Behavior**:

Visual Studio 2015 should not crash

**Actual Behavior**:

```
Anwendung: devenv.exe
Frameworkversion: v4.0.30319
Beschreibung: Die Anwendung forderte die Beendigung des Prozesses durch System.Environment.FailFast(Zeichenfolgenmeldung) an.
Meldung: System.AggregateException: One or more errors occurred. ---&gt; System.ArgumentException: SyntaxTree 'namespace App.Uap10.Services.DataSources
{
    using System;
    using System.Diagnostics;
    using System.Threading.Tasks;
    using App.Uap10.Services.DataSources.Base;
    using App.Commons.Annotations;
    using App.Commons.Logging;
    using App.Commons.Template10;

    public class BackgroundLoadingObservableCollection&lt;T&gt; : BaseDataSourceObservableCollection&lt;T&gt;
    {
        private static readonly ILogger logger = LogManager.GetLogger&lt;BackgroundLoadingObservableCollection&lt;T&gt;&gt;();
        private readonly TaskCompletionSource&lt;int&gt; firstPageCompletionSource;
        private readonly TaskCompletionSource&lt;int&gt; loadingTaskCompletionSource;

        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref="BackgroundLoadingObservableCollection{T}"/&gt; class.
        /// &lt;/summary&gt;
        public BackgroundLoadingObservableCollection()
        {
            this.firstPageCompletionSource = new TaskCompletionSource&lt;int&gt;();
            this.loadingTaskCompletionSource = new TaskCompletionSource&lt;int&gt;();
        }

        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref="BackgroundLoadingObservableCollection{T}"/&gt; class.
        /// &lt;/summary&gt;
        public BackgroundLoadingObservableCollection(BaseIncrementalLoadingDataSource&lt;T&gt; dataSource)
            : this()
        {
            // Do not pass DataSource to base constructor to make sure that loadingTaskCompletionSource is initialized!
            this.DataSource = dataSource;
        }

        /// &lt;summary&gt;
        /// Gets the first page task.
        /// &lt;/summary&gt;
        [PublicAPI]
        public Task&lt;int&gt; FirstPageTask
        {
            [DebuggerStepThrough]
            get { return this.firstPageCompletionSource.Task; }
        }

        /// &lt;summary&gt;
        /// Gets the loading task.
        /// &lt;/summary&gt;
        [PublicAPI]
        public Task&lt;int&gt; LoadingTask
        {
            [DebuggerStepThrough]
            get { return this.loadingTaskCompletionSource.Task; }
        }

        /// &lt;summary&gt;
        /// Waits for loading completed.
        /// &lt;/summary&gt;
        [PublicAPI]
        public async Task&lt;int&gt; WaitForLoadingCompleted()
        {
            return await this.loadingTaskCompletionSource.Task.ConfigureAwait(false);
        }

        #region Overrides of BaseDataSourceObservableCollection&lt;T&gt;

        /// &lt;summary&gt;
        /// Called when the data source was updated.
        /// &lt;/summary&gt;
        protected override void UpdateDataSource()
        {
            base.UpdateDataSource();

            Task.Run(async delegate
            {
                int count = 0;
                bool isFirstPage = true;
                try
                {
                    while (this.DataSource.HasMoreItems)
                    {
                        count = count + await this.DataSource.DoLoadMoreItemsAsync(this.Items).ConfigureAwait(false);
                        if ((count &gt; 0) &amp;&amp; isFirstPage)
                        {
                            isFirstPage = false;
                            await this.NotifyChangedAsync(this.DataSource).ConfigureAwait(f);
                            this.firstPageCompletionSource.TrySetResult(count);
                        }
                        await Task.Delay(1);
                    }
                    this.loadingTaskCompletionSource.TrySetResult(count);
                }
                catch (Exception ex)
                {
                    if (!ex.IsOperationCanceledException())
                    {
                        logger.WarnException(ex.Message, ex);
                        this.loadingTaskCompletionSource.TrySetException(ex);
                        if (isFirstPage)
                        {
                            this.NotifyChanged(this.DataSource);
                            this.firstPageCompletionSource.TrySetException(ex);
                        }
                    }
                    else
                    {
                        this.loadingTaskCompletionSource.TrySetResult(count);
                        if (isFirstPage)
                        {
                            this.NotifyChanged(this.DataSource);
                            this.firstPageCompletionSource.TrySetResult(count);
                        }
                    }
                }
            });
        }

        #endregion
    }
}' not found to remove
Parameter name: syntaxTree
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSemanticModel(SyntaxTree syntaxTree, Boolean ignoreAccessibility)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetSemanticModel(SyntaxTree syntaxTree, Boolean ignoreAccessibility)
   at Microsoft.CodeAnalysis.SymbolId.GetInteriorSymbols(ISymbol containingSymbol, List`1 symbols)
   at Microsoft.CodeAnalysis.SymbolId.GetInteriorSymbolOccurrence(ISymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.Generator.VisitLocal(ILocalSymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.Generator.Visit(ISymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.CreateId(ISymbol symbol)
   at Microsoft.CodeAnalysis.Completion.Providers.SymbolCompletionItem.EncodeSymbols(IReadOnlyList`1 symbols)
   at Microsoft.CodeAnalysis.Completion.Providers.SymbolCompletionItem.Create(String displayText, TextSpan span, IReadOnlyList`1 symbols, Int32 contextPosition, Int32 descriptionPosition, String sortText, String insertionText, Nullable`1 glyph, String filterText, Boolean preselect, SupportedPlatformData supportedPlatforms, Boolean isArgumentName, ImmutableDictionary`2 properties, ImmutableArray`1 tags, CompletionItemRules rules)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(String displayText, String insertionText, Int32 position, List`1 symbols, AbstractSyntaxContext context, TextSpan span, Boolean preselect, SupportedPlatformData supportedPlatformData)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(String displayText, String insertionText, Int32 position, List`1 symbols, AbstractSyntaxContext context, TextSpan span, Dictionary`2 invalidProjectMap, List`1 totalProjects, Boolean preselect)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;&gt;c__DisplayClass6_0.&lt;CreateItems&gt;b__3(IGrouping`2 g)
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems(Int32 position, IEnumerable`1 symbols, TextSpan span, AbstractSyntaxContext context, Dictionary`2 invalidProjectMap, List`1 totalProjects, Boolean preselect)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;GetItemsWorkerAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;ProvideCompletionsAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetProviderCompletionsAsync&gt;d__24.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetCompletionsAsync&gt;d__18.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.ModelComputer.&lt;GetCompletionListAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.ModelComputer.&lt;DoInBackgroundAsync&gt;d__13.MoveNext()
   --- End of inner exception stack trace ---
---&gt; (Inner Exception #0) System.ArgumentException: SyntaxTree 'namespace App.Uap10.Services.DataSources
{
    using System;
    using System.Diagnostics;
    using System.Threading.Tasks;
    using App.Uap10.Services.DataSources.Base;
    using App.Commons.Annotations;
    using App.Commons.Logging;
    using App.Commons.Template10;

    public class BackgroundLoadingObservableCollection&lt;T&gt; : BaseDataSourceObservableCollection&lt;T&gt;
    {
        private static readonly ILogger logger = LogManager.GetLogger&lt;BackgroundLoadingObservableCollection&lt;T&gt;&gt;();
        private readonly TaskCompletionSource&lt;int&gt; firstPageCompletionSource;
        private readonly TaskCompletionSource&lt;int&gt; loadingTaskCompletionSource;

        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref="BackgroundLoadingObservableCollection{T}"/&gt; class.
        /// &lt;/summary&gt;
        public BackgroundLoadingObservableCollection()
        {
            this.firstPageCompletionSource = new TaskCompletionSource&lt;int&gt;();
            this.loadingTaskCompletionSource = new TaskCompletionSource&lt;int&gt;();
        }

        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref="BackgroundLoadingObservableCollection{T}"/&gt; class.
        /// &lt;/summary&gt;
        public BackgroundLoadingObservableCollection(BaseIncrementalLoadingDataSource&lt;T&gt; dataSource)
            : this()
        {
            // Do not pass DataSource to base constructor to make sure that loadingTaskCompletionSource is initialized!
            this.DataSource = dataSource;
        }

        /// &lt;summary&gt;
        /// Gets the first page task.
        /// &lt;/summary&gt;
        [PublicAPI]
        public Task&lt;int&gt; FirstPageTask
        {
            [DebuggerStepThrough]
            get { return this.firstPageCompletionSource.Task; }
        }

        /// &lt;summary&gt;
        /// Gets the loading task.
        /// &lt;/summary&gt;
        [PublicAPI]
        public Task&lt;int&gt; LoadingTask
        {
            [DebuggerStepThrough]
            get { return this.loadingTaskCompletionSource.Task; }
        }

        /// &lt;summary&gt;
        /// Waits for loading completed.
        /// &lt;/summary&gt;
        [PublicAPI]
        public async Task&lt;int&gt; WaitForLoadingCompleted()
        {
            return await this.loadingTaskCompletionSource.Task.ConfigureAwait(false);
        }

        #region Overrides of BaseDataSourceObservableCollection&lt;T&gt;

        /// &lt;summary&gt;
        /// Called when the data source was updated.
        /// &lt;/summary&gt;
        protected override void UpdateDataSource()
        {
            base.UpdateDataSource();

            Task.Run(async delegate
            {
                int count = 0;
                bool isFirstPage = true;
                try
                {
                    while (this.DataSource.HasMoreItems)
                    {
                        count = count + await this.DataSource.DoLoadMoreItemsAsync(this.Items).ConfigureAwait(false);
                        if ((count &gt; 0) &amp;&amp; isFirstPage)
                        {
                            isFirstPage = false;
                            await this.NotifyChangedAsync(this.DataSource).ConfigureAwait(f);
                            this.firstPageCompletionSource.TrySetResult(count);
                        }
                        await Task.Delay(1);
                    }
                    this.loadingTaskCompletionSource.TrySetResult(count);
                }
                catch (Exception ex)
                {
                    if (!ex.IsOperationCanceledException())
                    {
                        logger.WarnException(ex.Message, ex);
                        this.loadingTaskCompletionSource.TrySetException(ex);
                        if (isFirstPage)
                        {
                            this.NotifyChanged(this.DataSource);
                            this.firstPageCompletionSource.TrySetException(ex);
                        }
                    }
                    else
                    {
                        this.loadingTaskCompletionSource.TrySetResult(count);
                        if (isFirstPage)
                        {
                            this.NotifyChanged(this.DataSource);
                            this.firstPageCompletionSource.TrySetResult(count);
                        }
                    }
                }
            });
        }

        #endregion
    }
}' not found to remove
Parameter name: syntaxTree
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSemanticModel(SyntaxTree syntaxTree, Boolean ignoreAccessibility)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetSemanticModel(SyntaxTree syntaxTree, Boolean ignoreAccessibility)
   at Microsoft.CodeAnalysis.SymbolId.GetInteriorSymbols(ISymbol containingSymbol, List`1 symbols)
   at Microsoft.CodeAnalysis.SymbolId.GetInteriorSymbolOccurrence(ISymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.Generator.VisitLocal(ILocalSymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.Generator.Visit(ISymbol symbol)
   at Microsoft.CodeAnalysis.SymbolId.CreateId(ISymbol symbol)
   at Microsoft.CodeAnalysis.Completion.Providers.SymbolCompletionItem.EncodeSymbols(IReadOnlyList`1 symbols)
   at Microsoft.CodeAnalysis.Completion.Providers.SymbolCompletionItem.Create(String displayText, TextSpan span, IReadOnlyList`1 symbols, Int32 contextPosition, Int32 descriptionPosition, String sortText, String insertionText, Nullable`1 glyph, String filterText, Boolean preselect, SupportedPlatformData supportedPlatforms, Boolean isArgumentName, ImmutableDictionary`2 properties, ImmutableArray`1 tags, CompletionItemRules rules)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(String displayText, String insertionText, Int32 position, List`1 symbols, AbstractSyntaxContext context, TextSpan span, Boolean preselect, SupportedPlatformData supportedPlatformData)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(String displayText, String insertionText, Int32 position, List`1 symbols, AbstractSyntaxContext context, TextSpan span, Dictionary`2 invalidProjectMap, List`1 totalProjects, Boolean preselect)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;&gt;c__DisplayClass6_0.&lt;CreateItems&gt;b__3(IGrouping`2 g)
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems(Int32 position, IEnumerable`1 symbols, TextSpan span, AbstractSyntaxContext context, Dictionary`2 invalidProjectMap, List`1 totalProjects, Boolean preselect)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;GetItemsWorkerAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.&lt;ProvideCompletionsAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetProviderCompletionsAsync&gt;d__24.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetCompletionsAsync&gt;d__18.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.ModelComputer.&lt;GetCompletionListAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.ModelComputer.&lt;DoInBackgroundAsync&gt;d__13.MoveNext()&lt;---

Stapel:
   bei System.Environment.FailFast(System.String, System.Exception)
   bei Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   bei Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   bei Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   bei Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)
   bei System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()
   bei System.Threading.Tasks.Task.Execute()
   bei System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   bei System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   bei System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   bei System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   bei System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   bei System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.Task.ContinueWithCore(System.Threading.Tasks.Task, System.Threading.Tasks.TaskScheduler, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions)
   bei System.Threading.Tasks.Task.ContinueWith(System.Action`2&lt;System.Threading.Tasks.Task,System.Object&gt;, System.Object, System.Threading.Tasks.TaskScheduler, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.StackCrawlMark ByRef)
   bei System.Threading.Tasks.Task.ContinueWith(System.Action`2&lt;System.Threading.Tasks.Task,System.Object&gt;, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
   bei Roslyn.Utilities.TaskExtensions.ReportFatalError(System.Threading.Tasks.Task, System.Object)
   bei System.Threading.Tasks.ContinuationTaskFromResultTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   bei System.Threading.Tasks.Task.Execute()
   bei System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   bei System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   bei System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   bei System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   bei System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   bei System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.Task.FinishContinuations()
   bei System.Threading.Tasks.Task.FinishStageThree()
   bei System.Threading.Tasks.Task.FinishStageTwo()
   bei System.Threading.Tasks.Task.Finish(Boolean)
   bei System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   bei System.Threading.Tasks.UnwrapPromise`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   bei System.Threading.Tasks.UnwrapPromise`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)
   bei System.Threading.Tasks.UnwrapPromise`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)
   bei System.Threading.Tasks.UnwrapPromise`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   bei System.Threading.Tasks.Task.FinishContinuations()
   bei System.Threading.Tasks.Task.FinishStageThree()
   bei System.Threading.Tasks.Task.FinishStageTwo()
   bei System.Threading.Tasks.Task.Finish(Boolean)
   bei System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   bei System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   bei System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
   bei Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.PrioritizedTaskScheduler.ThreadStart()
   bei System.Threading.ThreadHelper.ThreadStart_Context(System.Object)
   bei System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   bei System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   bei System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   bei System.Threading.ThreadHelper.ThreadStart()
```
</Description>
    <CreatedDate>11/05/2016</CreatedDate>
    <ClosedDate>26/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11210</IssueID>
    <Title>support conditions in a range</Title>
    <Description>**Version Used**:  Version 14.0.25123.00 Update 2

**Steps to Reproduce**:
conditions in a range

**Expected Behavior**:
`if (0&lt;n&lt;5)
{
return true;
}`
**Actual Behavior**:
`if (n&gt;0 &amp;&amp; n&lt;5)
{
return true;
}`
</Description>
    <CreatedDate>10/05/2016</CreatedDate>
    <ClosedDate>12/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11099</IssueID>
    <Title>Make SignatureHelp API public</Title>
    <Description>Needs to be moved to Features layer and redesigned for better separation between model and view.

Follow model for Completion API.
</Description>
    <CreatedDate>05/05/2016</CreatedDate>
    <ClosedDate>10/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11059</IssueID>
    <Title>Unable to use Visual Studio when no unique temporary file name is available</Title>
    <Description>**Version Used**: 
Visual Studio 2015 Update 2

**Steps to Reproduce**:
1. Run following code and wait until it fails (can take a while). It will fail with IOException "The file exists.".

``` C#
        static void Main(string[] args)
        {
            while (true)
            {
                Path.GetTempFileName(); 
            }
        }
```
1. Restart Studio.

**Expected Behavior**:
VS will work normally or tell me what is going on.

**Actual Behavior**:
Possible results (depends on yout settings): Crash / Shows only black window / Starts normaly.
If it starts normaly, try to open Error List window and it will crash.
</Description>
    <CreatedDate>04/05/2016</CreatedDate>
    <ClosedDate>05/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11043</IssueID>
    <Title>[C# Interactive] Exceptions thrown before namespace declarations are used cause CSI to forget the declarations</Title>
    <Description>**Version Used**: 
Update 2 - 25123.00
**Steps to Reproduce**:
Open csi and run the following few lines:

```
Console.Write("test");
throw new Exception();
Console.Write("test");
```

Note that it outputs the lines of "test" successfully both times.
Now reset csi via #reset and run the following:

```
throw new Exception();
Console.Write("test");
```

**Expected Behavior**:
It should throw the exception from the first line and output "test in the latter.
**Actual Behavior**:
The compiler is unable to output test due to 'Console' not existing in the current context.

![image](https://cloud.githubusercontent.com/assets/10537189/15002726/2ad5e27a-1159-11e6-9162-c277c276e433.png)
</Description>
    <CreatedDate>04/05/2016</CreatedDate>
    <ClosedDate>19/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>11035</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure in prtest/win/vsi/p2 on PR #11023</Title>
    <Description>PR: [#11023](https://github.com/dotnet/roslyn/pull/11023) _Add options to enable/disable nuget search._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p2/715/

**1 Test Failures:**
CSharpLineSeparators.Verify Line Separators

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

CSharpLineSeparators.xml
</Description>
    <CreatedDate>03/05/2016</CreatedDate>
    <ClosedDate>03/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10978</IssueID>
    <Title>Allow Change Signature refactoring on tuple</Title>
    <Description>If you write `(int a, string b) M(int c, string d)` you can use the Change Signature refactoring to order the parameters, but not the multiple return values.
</Description>
    <CreatedDate>29/04/2016</CreatedDate>
    <ClosedDate>10/05/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10963</IssueID>
    <Title>BasicLineSeparator.xml test is flaky</Title>
    <Description>build: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p0/669/

PR: https://github.com/dotnet/roslyn/pull/10950

tags looks like didn't produced at the expected time.
</Description>
    <CreatedDate>29/04/2016</CreatedDate>
    <ClosedDate>29/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10956</IssueID>
    <Title>Roslyn stack overflows on fluent method chain of length 1,000</Title>
    <Description>The pattern in question is the following:

``` csharp
container
  .Method1&lt;Type1, Type2&gt;()
  .Method2&lt;Type3, Type4&gt;()
  ....
  .Method1000();
```

Around 950 levels deep the compiler will stack overflow.  It's unclear if the generics are important here or not.   

Real repo available: `\\mlangfs1\public\jaredpar\fluent.cs`
</Description>
    <CreatedDate>28/04/2016</CreatedDate>
    <ClosedDate>22/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10946</IssueID>
    <Title>nameof for generic types</Title>
    <Description>C# 6.0: 

var str = nameof(Tuple&lt;,&gt;.Item1);

Should be "Item1" but get the error error CS1525
</Description>
    <CreatedDate>28/04/2016</CreatedDate>
    <ClosedDate>28/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10939</IssueID>
    <Title>[Proposal] Null Event Binding and Unbinding</Title>
    <Description>```
var c = cp?.Content;
if(c != null){
    c.PropertyChanged += C_PropertyChanged;
}
if(c != null){
    c.PropertyChanged -= C_PropertyChanged;
}
```

Can be easily written as

```
cp?.Content?.PropertyChanged += C_PropertyChanged;
cp?.Content?.PropertyChanged -= C_PropertyChanged;
```
</Description>
    <CreatedDate>28/04/2016</CreatedDate>
    <ClosedDate>28/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10912</IssueID>
    <Title>Fuzzy matching adds a using to a namespace even though it's already the current namespace</Title>
    <Description>``` C#
namespace Namespace
{
    class Program
    {
        static void Main(string[] args)
        {
            Bar bar = new Bar();
        }
    }


    class BarService
    {
    }
}

```

![image](https://cloud.githubusercontent.com/assets/1103906/14858826/6f99dffe-0c56-11e6-9aef-18876bfd4f23.png)
</Description>
    <CreatedDate>27/04/2016</CreatedDate>
    <ClosedDate>27/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10898</IssueID>
    <Title>Design and enable Rename refactoring for tuple fields</Title>
    <Description>The functionality is currently blocked to prevent accidental crashes because tuples do not expose enough positional information to make renames possible.

See RenameUtilities.cs

Once compiler provides sufficient info for the locations of tuple field declarations, the rename should be enabled.

There could be many scenarios specific to tuples, so it might make sense to design/discuss what behavior is actually expected.
</Description>
    <CreatedDate>26/04/2016</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10878</IssueID>
    <Title>Bug in test runner for buildandtest</Title>
    <Description>![image](https://cloud.githubusercontent.com/assets/3804346/14807052/606bee8e-0b2d-11e6-9a51-541c76cd8afa.png)
</Description>
    <CreatedDate>26/04/2016</CreatedDate>
    <ClosedDate>26/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10782</IssueID>
    <Title>Enable Edit.GoToBrace (Ctrl+]) for #region/#endregion pairs</Title>
    <Description>I was pleasantly surprised that Ctrl+Shift+Up/Down works for #region/#endregion pairs. Ctrl+] didn't work though. I'm imagining plumbing the command through should be easy now that Highlight References already works.

Would be nice for completeness/intuitiveness.
</Description>
    <CreatedDate>22/04/2016</CreatedDate>
    <ClosedDate>22/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10729</IssueID>
    <Title>Failure of BasicVenus.xml  is blocking integration from master to future</Title>
    <Description>See http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p1/625/
</Description>
    <CreatedDate>20/04/2016</CreatedDate>
    <ClosedDate>20/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10694</IssueID>
    <Title>Bug: CS0419 if two assemblies contain the same type, but the type is internal to one assembly</Title>
    <Description>**Version Used**: Visual Studio 2015 Update 2

**Steps to Reproduce**:
1. Create a new C# project
2. Enable XML documentation
3. Reference the following NuGet packages: `BouncyCastle.Crypto` and `Portable.Licensing`
4. On your main class, add the following method

```
using Org.BouncyCastle.Crypto.Parameters;
using System.Security.Cryptography;

(...)

        /// &lt;summary&gt;
        /// Converts a &lt;see cref="RsaPrivateCrtKeyParameters"/&gt; private key to a standard .NET
        /// private key.
        /// &lt;/summary&gt;
        private static RSA ToRSA(RsaPrivateCrtKeyParameters privKey)
        {
            throw new NotImplementedException();
        }
```
1. Compile

Also see attached
[ReferenceBug.zip](https://github.com/dotnet/roslyn/files/226719/ReferenceBug.zip) project.

**Expected Behavior**:
The `cref` does not generate a warning:
- `BouncyCastle.Crypto` contains a public `RsaPrivateCrtKeyParameters` class; whereas `Portable.Licensing` contains an internal`RsaPrivateCrtKeyParameters` class, the reference is unambigious (as also demonstrated by the fact that the code compiles correctly).

**Actual Behavior**:
The following warning is generated:

```
Warning CS0419  Ambiguous reference in cref attribute: 'RsaPrivateCrtKeyParameters'. Assuming 'RsaPrivateCrtKeyParameters', but could have also matched other overloads including 'RsaPrivateCrtKeyParameters'.
```
</Description>
    <CreatedDate>19/04/2016</CreatedDate>
    <ClosedDate>20/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10662</IssueID>
    <Title>Unnecessary qualified type argument name suggested when a field has the same name</Title>
    <Description>Extremely minor bug.

---

**Version Used**: VS 2015 Update 2

**Steps to Reproduce**:
1. `using System;`
2. In a class, declare a field `int Random`. (the type doesn't matter, only the name)
3. In the same class, type `Action&lt;Random&gt; a = new`, which prompts IntelliSense.

**Expected Behavior**: IntelliSense should recommend `Action&lt;Random&gt;()`.

**Actual Behavior**: IntelliSense recommends `Action&lt;System.Random&gt;()`.
</Description>
    <CreatedDate>18/04/2016</CreatedDate>
    <ClosedDate>18/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10629</IssueID>
    <Title>MSBuildWorkspace cannot compile project</Title>
    <Description>**Version Used**:  Microsoft.CodeAnalysis 1.2.1

**Steps to Reproduce**:
1. Sample project (one project, one file) at: https://github.com/JoshVarty/MSBuildWorkspaceBug
2. Use the following to try to build the project:

``` CSharp
//Replace with the correct filepath
var filePath = @"C:\Users\JoshVarty\Documents\GitHub\MSBuildWorkspaceBug\MSBuildWorkspaceBug.sln";
var msbws = MSBuildWorkspace.Create();
var soln = msbws.OpenSolutionAsync(filePath).Result;

foreach(var proj in soln.Projects)
{
    var name = proj.Name;
    var compilation = proj.GetCompilationAsync().Result;
    var errors = compilation.GetDiagnostics().Where(n =&gt; n.Severity == DiagnosticSeverity.Error).ToList();
}
```
1. Observe the following four errors:

```
C:\Users\JoshVarty\Documents\GitHub\MSBuildWorkspaceBug\raw\RawAssemblyAttributes.cs(12,11): error CS0246: The type or namespace name 'CLSCompliantAttribute' could not be found (are you missing a using directive or an assembly reference?)
C:\Users\JoshVarty\Documents\GitHub\MSBuildWorkspaceBug\raw\RawAssemblyAttributes.cs(12,11): error CS0246: The type or namespace name 'CLSCompliant' could not be found (are you missing a using directive or an assembly reference?)
C:\Users\JoshVarty\Documents\GitHub\MSBuildWorkspaceBug\raw\RawAssemblyAttributes.cs(12,24): error CS0518: Predefined type 'System.Boolean' is not defined or imported
C:\Users\JoshVarty\Documents\GitHub\MSBuildWorkspaceBug\raw\RawAssemblyAttributes.cs(11,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)
```

**Expected Behavior**:

Compiles without errors as it does within Visual Studio.

I'm assuming there are problems with the references, so I'll include the `.csproj` here as well:

```
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0"&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
    &lt;ProductVersion&gt;8.0.50727&lt;/ProductVersion&gt;
    &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
    &lt;ProjectGuid&gt;{C18D303B-2C55-43EB-A3DF-39CF3FB1D447}&lt;/ProjectGuid&gt;
    &lt;OutputType&gt;Library&lt;/OutputType&gt;
    &lt;RootNamespace&gt;raw&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;raw&lt;/AssemblyName&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
    &lt;StartupObject&gt;
    &lt;/StartupObject&gt;
    &lt;AssemblyOriginatorKeyFile&gt;
    &lt;/AssemblyOriginatorKeyFile&gt;
    &lt;AssemblyOriginatorKeyMode&gt;File&lt;/AssemblyOriginatorKeyMode&gt;
    &lt;SignAssembly&gt;true&lt;/SignAssembly&gt;
    &lt;TargetFrameworkVersion&gt;v4.0&lt;/TargetFrameworkVersion&gt;
    &lt;FileUpgradeFlags&gt;
    &lt;/FileUpgradeFlags&gt;
    &lt;OldToolsVersion&gt;2.0&lt;/OldToolsVersion&gt;
    &lt;UpgradeBackupLocation /&gt;
    &lt;PublishUrl&gt;publish\&lt;/PublishUrl&gt;
    &lt;Install&gt;true&lt;/Install&gt;
    &lt;InstallFrom&gt;Disk&lt;/InstallFrom&gt;
    &lt;UpdateEnabled&gt;false&lt;/UpdateEnabled&gt;
    &lt;UpdateMode&gt;Foreground&lt;/UpdateMode&gt;
    &lt;UpdateInterval&gt;7&lt;/UpdateInterval&gt;
    &lt;UpdateIntervalUnits&gt;Days&lt;/UpdateIntervalUnits&gt;
    &lt;UpdatePeriodically&gt;false&lt;/UpdatePeriodically&gt;
    &lt;UpdateRequired&gt;false&lt;/UpdateRequired&gt;
    &lt;MapFileExtensions&gt;true&lt;/MapFileExtensions&gt;
    &lt;ApplicationRevision&gt;0&lt;/ApplicationRevision&gt;
    &lt;ApplicationVersion&gt;1.0.0.%2a&lt;/ApplicationVersion&gt;
    &lt;IsWebBootstrapper&gt;false&lt;/IsWebBootstrapper&gt;
    &lt;UseApplicationTrust&gt;false&lt;/UseApplicationTrust&gt;
    &lt;BootstrapperEnabled&gt;true&lt;/BootstrapperEnabled&gt;
    &lt;TargetFrameworkProfile&gt;Client&lt;/TargetFrameworkProfile&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "&gt;
    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;false&lt;/Optimize&gt;
    &lt;OutputPath&gt;..\..\..\bin\Debug\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
    &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;
    &lt;CodeAnalysisRuleSet&gt;MinimumRecommendedRules.ruleset&lt;/CodeAnalysisRuleSet&gt;
    &lt;RunCodeAnalysis&gt;true&lt;/RunCodeAnalysis&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "&gt;
    &lt;DebugSymbols&gt;false&lt;/DebugSymbols&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputPath&gt;..\..\..\bin\Release\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
    &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;
    &lt;CodeAnalysisRuleSet&gt;AllRules.ruleset&lt;/CodeAnalysisRuleSet&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Compile Include="RawAssemblyAttributes.cs" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="System"&gt;
      &lt;HintPath&gt;..\..\..\..\..\..\..\..\..\..\..\..\..\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;BootstrapperPackage Include="Microsoft.Net.Client.3.5"&gt;
      &lt;Visible&gt;False&lt;/Visible&gt;
      &lt;ProductName&gt;.NET Framework 3.5 SP1 Client Profile&lt;/ProductName&gt;
      &lt;Install&gt;false&lt;/Install&gt;
    &lt;/BootstrapperPackage&gt;
    &lt;BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1"&gt;
      &lt;Visible&gt;False&lt;/Visible&gt;
      &lt;ProductName&gt;.NET Framework 3.5 SP1&lt;/ProductName&gt;
      &lt;Install&gt;true&lt;/Install&gt;
    &lt;/BootstrapperPackage&gt;
    &lt;BootstrapperPackage Include="Microsoft.Windows.Installer.3.1"&gt;
      &lt;Visible&gt;False&lt;/Visible&gt;
      &lt;ProductName&gt;Windows Installer 3.1&lt;/ProductName&gt;
      &lt;Install&gt;true&lt;/Install&gt;
    &lt;/BootstrapperPackage&gt;
  &lt;/ItemGroup&gt;
  &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSHARP.Targets" /&gt;
  &lt;PropertyGroup Condition=""&gt;
    &lt;PreBuildEvent&gt;
    &lt;/PreBuildEvent&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
```
</Description>
    <CreatedDate>15/04/2016</CreatedDate>
    <ClosedDate>21/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10611</IssueID>
    <Title>Codegen in debug mode fails on iterating over IEnumerable function in base class</Title>
    <Description>**Version Used**: Future branch head and VS15 Preview

**Steps to Reproduce**:

[Bug.zip](https://github.com/dotnet/roslyn/files/220577/Bug.zip)
1. Compile attached CS file in Debug configuration

**Expected Behavior**:

A successful compilation

**Actual Behavior**:

Crashing csharp compiler, when attaching to the crashing compiler it appears to try to do 
`Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GetLocalDebugName` on the `base.F()` on line 17, which fails because `CalculateLocalSyntaxOffset` fails on the `MoveNext`
</Description>
    <CreatedDate>15/04/2016</CreatedDate>
    <ClosedDate>09/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10610</IssueID>
    <Title>BasicWinForms.Change control property in code test is possibly flaky</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p1/593/

Regression

BasicWinForms.Change control property in code (from (empty))

Failing for the past 1 build (Since Failed#593 )
Took 12 sec.
add description
Stacktrace

MESSAGE:
Exception has been thrown by the target of an invocation.
+++++++++++++++++++
STACK TRACE:
Server stack trace: at Microsoft.Test.Apex.Hosts.Services.UIThreadInvokerHelper.InvokeOn(RemoteInvoker invoker, RemoteAction action, Object[] arguments) in f:\dd\src\Omni\Apex\Framework\Hosts\Services\UIThreadInvoker\UIThreadInvokerHelper.cs:line 105 at Microsoft.Test.Apex.Hosts.Services.UIThreadInvokerHelper.InvokeOn(IRemoteUIThreadInvokerService invoker, RemoteAction action, Object[] arguments) in f:\dd\src\Omni\Apex\Framework\Hosts\Services\UIThreadInvoker\UIThreadInvokerHelper.cs:line 78 at Microsoft.Test.Apex.Hosts.Services.UIThreadInvokerHelper.InvokeOn(IRemoteUIThreadInvokerService invoker, Action action) in f:\dd\src\Omni\Apex\Framework\Hosts\Services\UIThreadInvoker\UIThreadInvokerHelper.cs:line 52 at Microsoft.Test.Apex.Hosts.MarshallableApexObject.UIInvoke(Action action) in f:\dd\src\Omni\Apex\Framework\Hosts\MarshallableApexObject.cs:line 425 at Roslyn.VSHosting.Test.InProcessAPI.PlaceCaret(String marker, Int32 charsOffset, Int32 occurrence, Boolean extendSelection, Boolean selectBlock) in d:\j\workspace\dotnet_roslyn---a1c78f15\Closed\Hosting\Test\Actions\VisualStudio\Utilities\InProcessAPI.cs:line 94 at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs) at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg) Exception rethrown at [0]: at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type) at Roslyn.VSHosting.Test.InProcessAPI.PlaceCaret(String marker, Int32 charsOffset, Int32 occurrence, Boolean extendSelection, Boolean selectBlock) at Roslyn.VSHosting.Test.PlaceCursorAction.Execute(TaoEngine engine) in d:\j\workspace\dotnet_roslyn---a1c78f15\Closed\Hosting\Test\Actions\VisualStudio\PlaceCursorAction.cs:line 41 at Tao.Engine.DebuggableActionExecutor.Execute() in f:\dd\src\Omni\Tao\Tao.Engine\ActionExecutor.cs:line 139 at Tao.Engine.DefaultActionExecutor.Execute() in f:\dd\src\Omni\Tao\Tao.Engine\ActionExecutor.cs:line 36
</Description>
    <CreatedDate>15/04/2016</CreatedDate>
    <ClosedDate>15/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10599</IssueID>
    <Title>Internationalize pattern-matching diagnostics</Title>
    <Description>There are a few diagnostics in the pattern-matching implementation that use `ErrorCode.ERR_FeatureIsUnimplemented` along with a hardcoded english-language string. Those features should either be removed or properly implemented. If they represent a diagnostic that just hasn't been written yet, it should be properly internationalized.
</Description>
    <CreatedDate>15/04/2016</CreatedDate>
    <ClosedDate>25/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10586</IssueID>
    <Title>Intellisense does not help name members in tuple literals</Title>
    <Description>Intellisense doesn’t help when typing the parameters to a method that has tuples parameter

![tuple-return-intellisense](https://cloud.githubusercontent.com/assets/12466233/14541174/7d2328ba-023d-11e6-8071-8f26e46affe5.png)

There may be other scenarios where Intellisense could help type tuple member names:

``` C#
(int Alice, string Bob) M()
{
    return (Ali***
}
```

From discussion with Cyrus, this would likely be a new completion provider, possibly similar to `NamedParameterProvider`.
</Description>
    <CreatedDate>14/04/2016</CreatedDate>
    <ClosedDate>28/02/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10584</IssueID>
    <Title>Checkbox in "change signature" refactoring does nothing</Title>
    <Description>There was no noticeable difference when selecting the checkbox, despite the fact that the method being refactored was invoked in the project.

![change-signature-checkbox](https://cloud.githubusercontent.com/assets/12466233/14541069/f46ce7e0-023c-11e6-87eb-82a52f42d376.png)
</Description>
    <CreatedDate>14/04/2016</CreatedDate>
    <ClosedDate>14/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10539</IssueID>
    <Title>CSharpCodeActions InvokeDelegateWithConditionalAccess is flaky</Title>
    <Description>This suite has failed 9 times in the last 24 hours (release and debug).  All of the Jenkins failures are available in the following link: 
- [CSharpCodeActions.Invoke InvokeDelegateWithConditionalAccess failures](http://jdash.azurewebsites.net/builds/failure?name=CSharpCodeActions.Invoke+InvokeDelegateWithConditionalAccess+multiple+times&amp;startDate=2016-04-12&amp;pr=false)
</Description>
    <CreatedDate>13/04/2016</CreatedDate>
    <ClosedDate>14/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10496</IssueID>
    <Title>Language Feature Discussion: Allow Lambda Expressions In Method Attribute Initialiser</Title>
    <Description>**_Proposed syntax**_

``` C#
public class CustomController : Controller{

[CustomAuth(CustomProperty = ((Func&lt;T&gt;)((this) =&gt; {/*Insert complex code here*/ }))()]
public void MethodName(){

}

}
```

**_Why?**_
There are times where a developer needs to pass the current context to the Method Attribute initialiser to get data out.

This might be completely impossible so I would love to hear the discussion.
</Description>
    <CreatedDate>12/04/2016</CreatedDate>
    <ClosedDate>12/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10367</IssueID>
    <Title>NavigateTo not finding symbols.</Title>
    <Description>Search for 'SwitchStatementSyntax' in roslyn.

Actual:
No results come up.  

Expected: 
Results

I believe this is because SwitchStatementSyntax is defined in a generated file.  But so what?  It should still show up in NavigateTo.  That's the entire purpose of navigate to.
</Description>
    <CreatedDate>06/04/2016</CreatedDate>
    <ClosedDate>08/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10349</IssueID>
    <Title>Invalid URI strings generated in the ErrorLog output</Title>
    <Description>**Version Used**: VS2015 Update2 (1.2.0 compiler toolset)

**Steps to Reproduce**:
1. git clone https://github.com/jamesNK/Newtonsoft.Json/
2. Edit `&lt;%root%&gt;\newtonsoft.json\Newtonsoft.Json\Newtonsoft.Json.Portable.csproj` to add the ErrorLog property to the top level property group: `&lt;ErrorLog&gt;ErrorLog.json&lt;/ErrorLog&gt;`
3. Open this project in VS
4. Build the project

**Expected Behavior**:
Valid URI strings in the error log file.

**Actual Behavior**:
URI strings in the emitted ErrorLog.json file seem to have `\/` character sequence, seems like escaping is broken. For example:

```
"uri": "file:\/\/\/C:\/Newtonsoft.Json\/Newtonsoft.Json\/Bson\/BsonReader.cs",
```

I switched to using the 1.1.1 compiler toolset for building and file path with correct escape character seems to be emitted `C:\\Newtonsoft.Json\\Newtonsoft.Json\\Bson\\BsonReader.cs`.
</Description>
    <CreatedDate>05/04/2016</CreatedDate>
    <ClosedDate>05/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10319</IssueID>
    <Title>Definite assignment versus StructLayout(LayoutKind.Explicit)</Title>
    <Description>**Version Used**: Visual Studio Community 2015. Just the regular download, not a preview.

**Steps to Reproduce**:

Compile the following code:

``` C#
public struct Vector2
{
    public float X;
    public float Y;
}

[StructLayout(LayoutKind.Explicit)]
public struct Vector3
{
    [FieldOffset(0)]
    public float X;
    [FieldOffset(sizeof(float))]
    public float Y;
    [FieldOffset(sizeof(float) * 2)]
    public float Z;

    [FieldOffset(0)]
    public Vector2 Xy;

    public Vector3(float x, float y, float z)
    {
        this.X = x;
        this.Y = y;
        this.Z = z;
    }
}
```

It will fail with the following error:

```
error CS0171: Field 'Vector3.Xy' must be fully assigned before control is returned to the caller
```

**Expected Behavior**:

Due to the explicit struct layout, all fields are assigned. Despite being not actually required, I suspect that doing a double assignment could affect performance in a slightly negative direction. Maybe the compiler could take a look at the explicit struct layouts and data types in order to deduce that the struct has been fully assigned?

**Actual Behavior**:

See the error above.

---

This is probably not a bug, but expected behavior - yet I think that it might be a neat thing if an explicit struct layout would be considered by the compiler to allow performance optimizations like the above. 

The following alternative compiles, but probably isn't as efficient and doesn't have the benefit of direct access to data:

``` C#
public struct Vector3
{
    public float X;
    public float Y;
    public float Z;

    public Vector2 Xy
    {
        get { return new Vector2(this.X, this.Y); }
        set { this.X = value.X; this.Y = value.Y; }
    }

    public Vector3(float x, float y, float z)
    {
        this.X = x;
        this.Y = y;
        this.Z = z;
    }
}
```
</Description>
    <CreatedDate>04/04/2016</CreatedDate>
    <ClosedDate>11/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10310</IssueID>
    <Title>[Proposal] Compiler switch for non-nullable reference types</Title>
    <Description>I know that I'm a little late to the party. But this whole opt-in/compatibility approach seems awfully verbose to me. Wouldn't it be possible to just make a compiler switch? That way we'd have a non verbose way to go forward - and legacy projects can just flip a switch to turn off all the null-checking by the compiler.

Think about it: If you think non-nullable reference types are good thing (that includes me), you'll use them everywhere. If not, you don't use them at all. Now the first kind would need to spam ! everywhere, and that's just ugly, tedious and error prone. So why not just a compiler switch on the project? On means we treat string as a non-nullable reference type (or string!) and off is the way we have it now. Off just disables all null checking when compiling.

The only problem with the compiler switch that I can think of is the compatibility between libraries. But if a library was compiled with the nullable flag off, a method that returns a `string` would be treated as a method that returns a `string?`. The other way round, we would still have to rely on ArgumentNullExceptions, but that is consistent with the way that we live now (in a nullable = off world).

Is that a realistic alternative to the ! spamfest?
</Description>
    <CreatedDate>04/04/2016</CreatedDate>
    <ClosedDate>04/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10285</IssueID>
    <Title>Code Style: Have the ability to share and enforce a common formatting scheme</Title>
    <Description>Filed on behalf of a customer from interviews.

Would be interesting to see if multiple customers want to separate formatting rulesets from naming/etc.
</Description>
    <CreatedDate>01/04/2016</CreatedDate>
    <ClosedDate>08/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10264</IssueID>
    <Title>Allow if-def inside /// code summaries </Title>
    <Description>**Version Used**: 6 / VS2015.1

**Steps to Reproduce**:
1. Create the following property with doc in a class:

``` csharp
        /// &lt;summary&gt;
        /// Turns the GPS on or off
        /// &lt;/summary&gt;
        /// &lt;remarks&gt;
        /// &lt;para&gt;Will turn on the system location service.&lt;/para&gt;
#if NETFX_CORE
        /// &lt;para&gt;Make sure you have enabled the location capability in your appx manifest.
        /// See https://msdn.microsoft.com/en-us/library/windows/apps/br211423.aspx
        /// for more information
        /// &lt;/para&gt;
#elif __ANDROID__
        /// &lt;para&gt;
        /// Make sure you have enabled location in your app manifest. 
        /// See http://developer.android.com/guide/topics/manifest/manifest-intro.html 
        /// for more information.
        /// &lt;/para&gt;
#endif
        /// &lt;/remarks&gt;
        public bool IsGpsEnabled { get; set; }
```
1. Enable XML documentation generation 
2. Build

**Expected Behavior**:
No build warnings. XML is generated with platform specific remarks. This allows me to add a couple of platform specific remarks. Currently you have to if-def the entire code summary section, causing a lot of documentation to be duplicated. 

**Actual Behavior**:
Several build warnings

```
warning CS1570: XML comment has badly formed XML -- 'Expected an end tag for element 'remarks'.'
1&gt;\Class1.cs(25,13,25,14): warning CS1570: XML comment has badly formed XML -- 'End tag was not expected at this location.'
1&gt;\Class1.cs(9,18,9,24): warning CS1591: Missing XML comment for publicly visible type or member 'Class1'
1&gt;\Class1.cs(11,9,11,10): warning CS1587: XML comment is not placed on a valid language element
```

And the generated XML:

``` xml
&lt;?xml version="1.0"?&gt;
&lt;doc&gt;
    &lt;assembly&gt;
        &lt;name&gt;ClassLibrary1&lt;/name&gt;
    &lt;/assembly&gt;
    &lt;members&gt;
        &lt;!-- Badly formed XML comment ignored for member "P:ClassLibrary1.Class1.IsGpsEnabled" --&gt;
    &lt;/members&gt;
&lt;/doc&gt;
```
</Description>
    <CreatedDate>01/04/2016</CreatedDate>
    <ClosedDate>21/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10252</IssueID>
    <Title>Microsoft.CodeAnalysis.VisualBasic.Symbols.BaseTypeAnalysis.GetDependenceChain crash in Visual Studio Update 1</Title>
    <Description>**Version Used**: 
Visual Studio 14.0.24720.00

**Steps to Reproduce**:
1. Open Visual Studio
2. Open Compilers.sln from the Roslyn repository

**Expected Behavior**:

Roslyn.sln should open

**Actual Behavior**:

```
System.Transactions Critical: 0 : &lt;TraceRecord xmlns="http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord" Severity="Critical"&gt;&lt;TraceIdentifier&gt;http://msdn.microsoft.com/TraceCodes/System/ActivityTracing/2004/07/Reliability/Exception/Unhandled&lt;/TraceIdentifier&gt;&lt;Description&gt;Unhandled exception&lt;/Description&gt;&lt;AppDomain&gt;DefaultDomain&lt;/AppDomain&gt;&lt;Exception&gt;&lt;ExceptionType&gt;
System.IndexOutOfRangeException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/ExceptionType&gt;&lt;Message&gt;Index was outside the bounds of the array.&lt;/Message&gt;&lt;StackTrace&gt;   
at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.DetectTypeCircularity_ShouldStepIntoType(NamedTypeSymbol typeToTest)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.BaseTypeAnalysis.GetDependenceChain(HashSet`1 visited, SourceNamedTypeSymbol root, TypeSymbol current)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.BaseTypeAnalysis.GetDependenceChain(HashSet`1 visited, SourceNamedTypeSymbol root, TypeSymbol current)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.BaseTypeAnalysis.GetDependenceDiagnosticForBase(SourceNamedTypeSymbol this, TypeSymbol base)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.MakeAcyclicBaseType(DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol.get_BaseTypeNoUseSiteDiagnostics()
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.GetDirectBaseTypeNoUseSiteDiagnostics(ConsList`1 basesBeingResolved)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol.GetDirectBaseTypeWithDefinitionUseSiteDiagnostics(ConsList`1 basesBeingResolved, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.MemberLookup.LookupInClass(LookupResult result, TypeSymbol container, String name, Int32 arity, LookupOptions options, TypeSymbol accessThroughType, Binder binder, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.MemberLookup.Lookup(LookupResult lookupResult, TypeSymbol type, String name, Int32 arity, LookupOptions options, Binder binder, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.LookupMember(LookupResult lookupResult, TypeSymbol container, String name, Int32 arity, LookupOptions options, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.NamedTypeBinder.LookupInSingleBinder(LookupResult lookupResult, String name, Int32 arity, LookupOptions options, Binder originalBinder, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.Lookup(LookupResult lookupResult, String name, Int32 arity, LookupOptions options, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.TypeBinder.LookupBasicName(LookupResult lookupResult, IdentifierNameSyntax basicNameSyntax, Binder binder, DiagnosticBag diagBag, Boolean&amp;amp;amp; reportedAnError)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.TypeBinder.LookupTypeOrNamespaceSyntax(LookupResult lookupResult, TypeSyntax typeSyntax, Binder binder, DiagnosticBag diagBag, Boolean&amp;amp;amp; reportedAnError, Boolean unwrapAliases, Boolean suppressUseSiteError, Boolean inGetTypeContext, Boolean resolvingBaseType)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.TypeBinder.BindTypeOrAliasSyntax(TypeSyntax typeSyntax, Binder binder, DiagnosticBag diagBag, Boolean suppressUseSiteError, Boolean inGetTypeContext, Boolean resolvingBaseType)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.ComputeFieldType(ModifiedIdentifierSyntax modifiedIdentifierSyntax, Binder binder, DiagnosticBag diagnostics, Boolean isConst, Boolean isWithEvents, Boolean ignoreTypeSyntaxDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.GetDeclaredType(DiagnosticBag diagBag)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.ComputeType(DiagnosticBag diagBag)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.get_Type()
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceFieldSymbol.GenerateDeclarationErrors(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GenerateAllDeclarationErrorsImpl(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.GenerateAllDeclarationErrorsImpl(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GenerateDeclarationErrors(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol._Closure$__78-0._Lambda$__1(NamespaceOrTypeSymbol typeOrNamespace)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.VisitTypesAndNamespacesWithin(NamespaceOrTypeSymbol ns, Action`1 visitor, ConcurrentStack`1 tasks, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.GetAllDeclarationErrors(CancellationToken cancellationToken, Boolean&amp;amp;amp; hasExtensionMethods)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceAssemblySymbol.GetAllDeclarationErrors(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CompileImpl(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Compile(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, EmitStreamProvider xmlDocumentationStreamProvider, EmitStreamProvider win32ResourcesStreamProvider, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.MetadataOnlyImage.Create(ITemporaryStorageService service, Compilation compilation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.MetadataOnlyReference.GetOrBuildReference(Solution solution, ProjectReference projectReference, Compilation finalCompilation, VersionStamp version, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Solution.CompilationTracker.&amp;amp;lt;GetMetadataOnlyImageReferenceAsync&amp;amp;gt;d__31.MoveNext()&lt;/StackTrace&gt;&lt;ExceptionString&gt;System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.DetectTypeCircularity_ShouldStepIntoType(NamedTypeSymbol typeToTest)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.BaseTypeAnalysis.GetDependenceChain(HashSet`1 visited, SourceNamedTypeSymbol root, TypeSymbol current)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.BaseTypeAnalysis.GetDependenceChain(HashSet`1 visited, SourceNamedTypeSymbol root, TypeSymbol current)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.BaseTypeAnalysis.GetDependenceDiagnosticForBase(SourceNamedTypeSymbol this, TypeSymbol base)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.MakeAcyclicBaseType(DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol.get_BaseTypeNoUseSiteDiagnostics()
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.GetDirectBaseTypeNoUseSiteDiagnostics(ConsList`1 basesBeingResolved)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol.GetDirectBaseTypeWithDefinitionUseSiteDiagnostics(ConsList`1 basesBeingResolved, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.MemberLookup.LookupInClass(LookupResult result, TypeSymbol container, String name, Int32 arity, LookupOptions options, TypeSymbol accessThroughType, Binder binder, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.MemberLookup.Lookup(LookupResult lookupResult, TypeSymbol type, String name, Int32 arity, LookupOptions options, Binder binder, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.LookupMember(LookupResult lookupResult, TypeSymbol container, String name, Int32 arity, LookupOptions options, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.NamedTypeBinder.LookupInSingleBinder(LookupResult lookupResult, String name, Int32 arity, LookupOptions options, Binder originalBinder, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.Lookup(LookupResult lookupResult, String name, Int32 arity, LookupOptions options, HashSet`1&amp;amp;amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.TypeBinder.LookupBasicName(LookupResult lookupResult, IdentifierNameSyntax basicNameSyntax, Binder binder, DiagnosticBag diagBag, Boolean&amp;amp;amp; reportedAnError)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.TypeBinder.LookupTypeOrNamespaceSyntax(LookupResult lookupResult, TypeSyntax typeSyntax, Binder binder, DiagnosticBag diagBag, Boolean&amp;amp;amp; reportedAnError, Boolean unwrapAliases, Boolean suppressUseSiteError, Boolean inGetTypeContext, Boolean resolvingBaseType)
   at Microsoft.CodeAnalysis.VisualBasic.Binder.TypeBinder.BindTypeOrAliasSyntax(TypeSyntax typeSyntax, Binder binder, DiagnosticBag diagBag, Boolean suppressUseSiteError, Boolean inGetTypeContext, Boolean resolvingBaseType)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.ComputeFieldType(ModifiedIdentifierSyntax modifiedIdentifierSyntax, Binder binder, DiagnosticBag diagnostics, Boolean isConst, Boolean isWithEvents, Boolean ignoreTypeSyntaxDiagnostics)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.GetDeclaredType(DiagnosticBag diagBag)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.ComputeType(DiagnosticBag diagBag)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberFieldSymbol.get_Type()
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceFieldSymbol.GenerateDeclarationErrors(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GenerateAllDeclarationErrorsImpl(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.GenerateAllDeclarationErrorsImpl(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GenerateDeclarationErrors(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol._Closure$__78-0._Lambda$__1(NamespaceOrTypeSymbol typeOrNamespace)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.VisitTypesAndNamespacesWithin(NamespaceOrTypeSymbol ns, Action`1 visitor, ConcurrentStack`1 tasks, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.GetAllDeclarationErrors(CancellationToken cancellationToken, Boolean&amp;amp;amp; hasExtensionMethods)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceAssemblySymbol.GetAllDeclarationErrors(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CompileImpl(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Compile(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, EmitStreamProvider xmlDocumentationStreamProvider, EmitStreamProvider win32ResourcesStreamProvider, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.MetadataOnlyImage.Create(ITemporaryStorageService service, Compilation compilation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.MetadataOnlyReference.GetOrBuildReference(Solution solution, ProjectReference projectReference, Compilation finalCompilation, VersionStamp version, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Solution.CompilationTracker.&amp;amp;lt;GetMetadataOnlyImageReferenceAsync&amp;amp;gt;d__31.MoveNext()&lt;/ExceptionString&gt;&lt;/Exception&gt;&lt;/TraceRecord&gt;
```
</Description>
    <CreatedDate>01/04/2016</CreatedDate>
    <ClosedDate>04/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10234</IssueID>
    <Title>Quick Info word wrap expands to span entire screen</Title>
    <Description>![image](https://cloud.githubusercontent.com/assets/1402694/14190026/630b167a-f745-11e5-93a6-9bc13398a254.png)

It's less readable when it spans my whole screen...would be great to wrap at the end of the signature
</Description>
    <CreatedDate>31/03/2016</CreatedDate>
    <ClosedDate>02/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10212</IssueID>
    <Title>Test failure: Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests.TestRefKindRef_FromReference</Title>
    <Description>Log [here](http://dotnet-ci.cloudapp.net/job/roslyn_master_win_rel_unit64/1045/testReport/junit/Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences/FindReferencesTests/TestRefKindRef_FromReference/)

```
MESSAGE:
Assert.Equal() Failure\r\nExpected: OrderedEnumerable&lt;String, String&gt; ["Lib: Test1.cs"]\r\nActual: OrderedEnumerable&lt;String, String&gt; []
+++++++++++++++++++
STACK TRACE:
at Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests.VB$StateMachine_476_TestAsync.MoveNext() in q:\roslyn\src\EditorFeatures\Test2\FindReferences\FindReferencesTests.vb:line 57
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
at Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests.VB$StateMachine_397_TestRefKindRef_FromReference.MoveNext() in q:\roslyn\src\EditorFeatures\Test2\FindReferences\FindReferencesTests.OrdinaryMethodSymbols.vb:line 2806 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```
</Description>
    <CreatedDate>30/03/2016</CreatedDate>
    <ClosedDate>26/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10142</IssueID>
    <Title>REQUEST:  Allow generic parameter types to participate in overload resolution</Title>
    <Description>**Version Used**: 
Visual Studio 2015 Update 1

**Steps to Reproduce**:
Create a new console project with the following code:

```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Collections;

namespace ConsoleApplication14 {
    class Program {
        public static T Foo&lt;T&gt;() where T : ICollection {
            return default(T);
        }

        public static T Foo&lt;T&gt;() where T : IDictionary {
            return default(T);
        }


        static void Main(string[] args) {
        }
    }
}
```

**Expected Behavior**:
The program should compile because the two Foo's are differentiated by T.

**Actual Behavior**:
I get the error:
Type 'Program' already defines a member called 'Foo' with the same type parameters.
</Description>
    <CreatedDate>28/03/2016</CreatedDate>
    <ClosedDate>29/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>10098</IssueID>
    <Title>[Concept] abstract enums</Title>
    <Description>## abstract enums

``` C#
abstract enum E : int
{
  None = 0;
}

abstract enum E' : E
{
  None = 0, // Error: Already defined
  One  = 1
}

sealed enum E'' : E
{
  None = 2, // Error: Already defined
  One  = 1, // Error: Already defined
  Two  = 2
}
```

**Inherting from a `sealed enum`**

``` c#
sealed enum F : E'' // Error: (E'') is sealed. Hence can not be inherited
{
 ...
} 
```

**Generic Constraints**
The CLR does allow constrained generics based on enums, just that it isn't (yet) expressible in C# or VB. 

``` c#
Foo &lt;T : {enum, E} &gt;( T e )
{

}
```

**Existing `enum` construct**

``` C#
enum Foo { ... }
```

 would be equivalent to

``` C#
sealed enum Foo { ... }
```

**Casts**
All casting between `abstract enum` and a inherited enum,or vis-versa, must be explicit.
</Description>
    <CreatedDate>25/03/2016</CreatedDate>
    <ClosedDate>29/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9936</IssueID>
    <Title>Nullable reference types: homogenizing them and nullable value types.</Title>
    <Description>As of now the following four functions have to be implemented to support nullability for both kinds (and the compiler still fails with CS1940):

``` c#
    public static class NullableSS
    {
        public static U? SelectMany&lt;T, U&gt;(this T? source, Func&lt;T, U?&gt; func)
            where T : struct
            where U : struct
        {
            if (source.HasValue) {
                return func(source.GetValueOrDefault());
            } else {
                return null;
            }
        }
    }

    public static class NullableCS
    {
        public static U? SelectMany&lt;T, U&gt;(this T source, Func&lt;T, U?&gt; func)
            where T : class
            where U : struct
        {
            if (!ReferenceEquals(source, null)) {
                return func(source);
            } else {
                return null;
            }
        }
    }

    public static class NullableSC
    {
        public static U SelectMany&lt;T, U&gt;(this T? source, Func&lt;T, U&gt; func)
            where T : struct
            where U : class
        {
            if (source.HasValue) {
                return func(source.GetValueOrDefault());
            } else {
                return null;
            }
        }
    }

    public static class NullableCC
    {
        public static U SelectMany&lt;T, U&gt;(this T source, Func&lt;T, U&gt; func)
            where T : class
            where U : class
        {
            if (!ReferenceEquals(source, null)) {
                return func(source);
            } else {
                return null;
            }
        }
    }
```

With explicitly nullable reference types one single function should be sufficient to support all four cases:

``` c#
    public static class Nullable
    {
        public static U? SelectMany&lt;T, U&gt;(this T? source, Func&lt;T, U?&gt; func)
        {
            if (IsNull(source)) {
                return func(AsNotNull(source));
            } else {
                return null;
            }
        }
    }
```

where `IsNull()` and `AsNotNull()` are some new language features that work the same way for both nullable value and reference types.

I'll test this on the latest working draft and will return with results.
</Description>
    <CreatedDate>21/03/2016</CreatedDate>
    <ClosedDate>21/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9930</IssueID>
    <Title>Nullable reference types: ReferenceEquals(x, null) not considered a null check</Title>
    <Description>I have been playing with nullable reference types, which is already working remarkably great! To try it out, I have [patched up](https://github.com/bkoelman/ResharperCodeContractNullability/tree/staticnull) my analyzer to convert Resharper's `(Item)NotNull/CanBeNullAttribute` annotations to nullable reference types. Then ran that on an [actual annotated codebase](https://github.com/bkoelman/DogAgilityCompetitionManagement). 

During that process I discovered some oddities, which I'll create issues for here.

**Version Used**: Built from source, branch NullableReferenceTypes (commit https://github.com/dotnet/roslyn/commit/8553cdac75c2b0901e8ae401aaa23022f0689935)

**Steps to Reproduce**:
The next block of code raises warning 8202: Possible dereference of a null reference:

``` csharp
    public sealed class DeviceStatus
    {
        public static bool operator ==(DeviceStatus? left, DeviceStatus? right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }
            if (ReferenceEquals(left, null))
            {
                return false;
            }

            return left.Equals(right);   // CS8202 on 'left'
        }
    }
```

**Expected Behavior**: No CS8202 warning, because `ReferenceEquals(left, null)` ensures that `left` cannot be `null` at the `return` statement.

**Actual Behavior**:
CS8202 warning on the `left` variable in the `return` statement.

@AlekseyTs 
</Description>
    <CreatedDate>20/03/2016</CreatedDate>
    <ClosedDate>12/05/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9878</IssueID>
    <Title>Regression: replacing an else-if statement with its body causes parentheses to be aligned incorrectly</Title>
    <Description>**Version Used**: 

Microsoft.CodeAnalysis 1.0, 1.1 &amp; 1.2-rc2

**Steps to Reproduce**:
1. Create a new console app project
2. Paste in the following code:
   
   ``` csharp
   static void Main(string[] args)
   {
       var tree = CSharpSyntaxTree.ParseText(@"
   namespace ConsoleApplication1
   {
       class MyClass
       {
           void Method()
           {
               var potentiallyTrue = true;
               if (potentiallyTrue)
               {
                   var b = true;
                   b = false;
               }
               else if (true)
               {
                   var b = true;
                   b = false;
               }
           }
       }
   }"
   );
   
       var mscorlib = PortableExecutableReference.CreateFromFile(typeof(object).Assembly.Location);
       var compilation = CSharpCompilation.Create("MyCompilation", syntaxTrees: new[] { tree }, references: new[] { mscorlib });
       var root = tree.GetRoot();
   
       var secondIf = root.DescendantNodes().OfType&lt;IfStatementSyntax&gt;().Skip(1).Single();
   
       // Remove the second if
       var newRoot = root.ReplaceNode(secondIf, secondIf.Statement).WithAdditionalAnnotations(Formatter.Annotation);
   
       // Formatting
       var formattedRoot = Formatter.Format(newRoot, Formatter.Annotation, MSBuildWorkspace.Create());
       Console.WriteLine(formattedRoot.ToFullString());
       Console.Read();
   }
   ```
3. Try it out with Microsoft.CodeAnalysis versions 1.0, 1.1 and 1.2-rc2

**Expected Behavior**:

Result looks like this across all versions:

``` csharp
namespace ConsoleApplication1
{
    class MyClass
    {
        void Method()
        {
            var potentiallyTrue = true;
            if (potentiallyTrue)
            {
                var b = true;
                b = false;
            }
            else
            {
                var b = true;
                b = false;
            }
        }
    }
}
```

**Actual Behavior**:

Beforementioned result is only obtained for v1.0. Versions 1.1 and 1.2-rc2 both create this as result:

``` csharp
namespace ConsoleApplication1
{
    class MyClass
    {
        void Method()
        {
            var potentiallyTrue = true;
            if (potentiallyTrue)
            {
                var b = true;
                b = false;
            }
            else {
                var b = true;
                b = false;
            }
        }
    }
}
```

I have created a solution that contains 3 projects with respectively versions 1.0, 1.1 and 1.2-rc2 of Microsoft.CodeAnalysis and its appropriate dependencies that demonstrates the problem. You can download it here (.zip, 140MB): https://mega.nz/#!Vc8gRAQJ
</Description>
    <CreatedDate>18/03/2016</CreatedDate>
    <ClosedDate>21/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9872</IssueID>
    <Title>Compiler crash: base call to state machine method, in state machine method</Title>
    <Description>``` C#
using System.Collections.Generic;

abstract class A
{
    protected virtual IEnumerable&lt;int&gt; GetChildren()
    {
        return null;
    }
}

class B : A
{
    protected override IEnumerable&lt;int&gt; GetChildren()
    {
        yield return 2;
    }
}

class C : B
{
    protected IEnumerable&lt;int&gt; GetChildren2()
    {
        yield return 1;
        base.GetChildren();
    }
}
```

This crashes the `future` compiler, but not the `master` compiler.  We have yet to determine why they behave differently.

Thanks @zooba for the report and @tmat for the reduced repro!

We also have half a dozen Watson hits for this crash.
</Description>
    <CreatedDate>18/03/2016</CreatedDate>
    <ClosedDate>13/09/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9857</IssueID>
    <Title>Proposal: replace single lambda parameter with 'it' or '_'</Title>
    <Description>Pretty sure this was proposed already, but I can't find it.

The proposal is to omit a single parameter declaration in Lambda expressions in favor of a literal `it` (similar to Kotlin) or an underscore (similar to Scala).

This would allow using the syntax like this:

`collection.Where(it.Name == "Bob")`

etc.

Pre-emptive: haven't thought this thru, or considered any of the corner cases at all.
</Description>
    <CreatedDate>17/03/2016</CreatedDate>
    <ClosedDate>18/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9839</IssueID>
    <Title>Local Enums.</Title>
    <Description>As we (Roslyn) are looking at Local Inner Functions. 
When writing a state machine, we have put the state (indicator) enum outside of the function.

``` VB
  Enum State
    Begining
    Middle
    [End]
  End Enum

Function Foo()
  Dim current = state.Begining

End Function

```

**Proposed**
If that state (indicator) enum has no meaning outside of that function, then we could _in theory_ include it inside of the function.

``` VB
Function Foo()
  Enum State
    Begining
    Middle
    [End]
  End Enum

  Dim current = state.Begining

End Function

```
</Description>
    <CreatedDate>17/03/2016</CreatedDate>
    <ClosedDate>18/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9793</IssueID>
    <Title>Elimination of the use of semicolon at the end of every statement in C# 7</Title>
    <Description>**Version Used**: C# 6

**Steps to Reproduce**:
We all have to put the ; at the end of every statement.  The compiler complain if we don't.  Could it be possible to eliminate the need of adding the semicolon?

It is a dramatic request, but I think at this point we can get rid of it.  The compiler knows when we missed it, it give us an error.  Since it knows, could the IDE analyzer add it automatically or better just not expect us to type it anymore. F# do not have it, Swift do not have it. C# can get rid of it :)
1. 
2. 
3. 

**Expected Behavior**:
Love to see this: Console.Write("No more semicolons, yeah!!")
**Actual Behavior**:
Console.Write("Hating the semicolon at the end, yeah!!");
</Description>
    <CreatedDate>16/03/2016</CreatedDate>
    <ClosedDate>17/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9771</IssueID>
    <Title>Property definition C#</Title>
    <Description>**Version Used**: C# 6

**Steps to Reproduce**: When we create a class we need to add the properties and always add {get; set;}

It will be great if we only enter the property access level, type and name and the {get; set;} is only needed when we need to control something in the getter or setter of a property.

Now  we need to do this: **public int BookID { get; set; }**

It will be great if we do this: **public int BookID;**
1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
    <CreatedDate>15/03/2016</CreatedDate>
    <ClosedDate>29/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9734</IssueID>
    <Title>Crash in CLSCompliance checking</Title>
    <Description>Repro code: 

``` vb
&lt;Assembly: CLSCompliant(True)&gt;

Public Class C
    Public Function CreateConversionDelegate(Of TFrom, TTo)(conversion As Func(Of TFrom, TTo)) As Func(Of TFrom, TTo)
        Return Nothing
    End Function
End Class

Module Conversion

End Module
```

Repro Steps: Place the caret before `conversion` and type `something As`.  The result is a crash with the following stack trace:

``` txt
System.InvalidOperationException: Unexpected value 'Module' of type 'Microsoft.CodeAnalysis.TypeKind'
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.ReportNonCompliantTypeArguments(TypeSymbol type, NamedTypeSymbol context, Symbol diagnosticSymbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.CheckParameterCompliance(ImmutableArray`1 parameters, NamedTypeSymbol context)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.VisitMethod(MethodSymbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol.Accept(VisualBasicSymbolVisitor visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolVisitor.Visit(Symbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.VisitNamedType(NamedTypeSymbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol.Accept(VisualBasicSymbolVisitor visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolVisitor.Visit(Symbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.VisitNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamespaceSymbol.Accept(VisualBasicSymbolVisitor visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolVisitor.Visit(Symbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.VisitNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamespaceSymbol.Accept(VisualBasicSymbolVisitor visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolVisitor.Visit(Symbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.VisitNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamespaceSymbol.Accept(VisualBasicSymbolVisitor visitor)
  at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolVisitor.Visit(Symbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.VisitModule(ModuleSymbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.VisitAssembly(AssemblySymbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.AssemblySymbol.Accept(VisualBasicSymbolVisitor visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolVisitor.Visit(Symbol symbol)
   at Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker.CheckCompliance(VisualBasicCompilation compilation, DiagnosticBag diagnostics, CancellationToken cancellationToken, SyntaxTree filterTree, Nullable`1 filterSpanWithinTree)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetClsComplianceDiagnostics(CancellationToken cancellationToken, SyntaxTree filterTree, Nullable`1 filterSpanWithinTree)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CompileImpl(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Compile(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, EmitStreamProvider xmlDocumentationStreamProvider, EmitStreamProvider win32ResourcesStreamProvider, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.MetadataOnlyImage.Create(ITemporaryStorageService service, Compilation compilation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.MetadataOnlyReference.GetOrBuildReference(Solution solution, ProjectReference projectReference, Compilation finalCompilation, VersionStamp version, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Solution.CompilationTracker.&lt;GetMetadataOnlyImageReferenceAsync&gt;d__31.MoveNext()
```
</Description>
    <CreatedDate>14/03/2016</CreatedDate>
    <ClosedDate>31/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9721</IssueID>
    <Title>VS crashes when I paste this into a C# file</Title>
    <Description>**Version Used**: Visual Studio 2015 24720.00 (Update 1)

**Steps to Reproduce**:
1. Copy and paste [the content of this file](https://gist.github.com/AArnott/cb65e7e7718350d268e5) into an empty .cs document open in VS2015.
2. Select [lines 6-13](https://gist.github.com/AArnott/cb65e7e7718350d268e5#file-c-roslyncrashbug-cs-L6-L13) and copy to clipboard.
3. Select [line 19](https://gist.github.com/AArnott/cb65e7e7718350d268e5#file-c-roslyncrashbug-cs-L19) and Paste (thereby replacing this line with the lines copied in the previous step).

**Expected Behavior**:
A block of text is inserted into a C# method (ready for me to fix up to make syntactically correct).

**Actual Behavior**:
VS crashes (for a loose file as described here), or simply suddenly vanishes when [in the context of the full project](https://github.com/AArnott/PCLCrypto/tree/repros/Roslyn9721).
</Description>
    <CreatedDate>14/03/2016</CreatedDate>
    <ClosedDate>21/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9706</IssueID>
    <Title>When analyzer or codefix throws, give file and span that were passed to analyzer or codefix</Title>
    <Description>
    </Description>
    <CreatedDate>11/03/2016</CreatedDate>
    <ClosedDate>19/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9697</IssueID>
    <Title>RemoveByValVb.UnitTests is failing</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn_future-stabilization_win_rel_unit32/22/console
</Description>
    <CreatedDate>11/03/2016</CreatedDate>
    <ClosedDate>12/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9692</IssueID>
    <Title>[Test Failure] Build Timed Out (+1 more) in prtest/win/dbg/unit32 on PR #9687</Title>
    <Description>PR: [#9687](https://github.com/dotnet/roslyn/pull/9687) _Merge stabilization into future-stabilization_ by @vslsnap
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/5126/

**Issue 1: Build Timed Out**
The build timed out, or was forcibly aborted after reaching the maximum length. View the log right before the flagged timeout message to see what was happening.

**Issue 2: One or more test assemblies failed to run**
One or more test assemblies did not produce results, possible causes:

1) The build was aborted out due to a long running or deadlocked test.
2) The test run for this assembly failed due to xUnit crashing (possibly due to a unhandled exception on a background thread or a stack overflow).
3) The test caused an assert dialog to be opened, which blocked the run.

See the Console Log for more information.
</Description>
    <CreatedDate>11/03/2016</CreatedDate>
    <ClosedDate>11/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9690</IssueID>
    <Title>[Test Failure] xUnit returned error code without errors in prtest/win/dbg/unit64 on PR #9685</Title>
    <Description>PR: [#9685](https://github.com/dotnet/roslyn/pull/9685) _Merge master into future_ by @vslsnap
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/5098/

**Issue 1: xUnit returned error code without errors**
xunit produced no error output but had exit code 1
</Description>
    <CreatedDate>11/03/2016</CreatedDate>
    <ClosedDate>11/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9673</IssueID>
    <Title>Editor Crash on Renaming Type Parameter</Title>
    <Description>**Version Used**: 
VS2015 Update 2 RC 14.0.25029

**Steps to Reproduce**:

Given following code fragment:

``` CSharp
public partial class Foo&lt;ObjT&gt; {}
partial class Foo&lt;ObjT&gt; {}
```

Attempting to rename `ObjT` causes a crash
</Description>
    <CreatedDate>10/03/2016</CreatedDate>
    <ClosedDate>10/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9670</IssueID>
    <Title>Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Diagnostics.GenerateTypeTests.GenerateTypeTests.GenerateTypeInExistingEmptyFile_Usings_DefaultNamespace</Title>
    <Description>PR: [#9648](https://github.com/dotnet/roslyn/pull/9648) *\* by @
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/5058/

**1 Test Failures:**
Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Diagnostics.GenerateTypeTests.GenerateTypeTests.GenerateTypeInExistingEmptyFile_Usings_DefaultNamespace

**Issue 1: No identified problem**
No problems were identified. If you know why this problem occurred, please add a suitable Cause for it.
</Description>
    <CreatedDate>10/03/2016</CreatedDate>
    <ClosedDate>15/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9609</IssueID>
    <Title>[Test Failure] Test Failures (+1 more) in prtest/win/dbg/unit64 on PR #9605</Title>
    <Description>PR: [#9605](https://github.com/dotnet/roslyn/pull/9605) _Merge stabilization into future-stabilization_ by @vslsnap
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/4995/

**Issue 1: Test Failures**
There were test failures, see Test Results above.

**Issue 2: xUnit returned error code without errors**
xunit produced no error output but had exit code 1

I am not sure which tests are failed.
</Description>
    <CreatedDate>09/03/2016</CreatedDate>
    <ClosedDate>09/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9572</IssueID>
    <Title>Ordering between GFU and Rename tracking is incorrect</Title>
    <Description>
    </Description>
    <CreatedDate>08/03/2016</CreatedDate>
    <ClosedDate>09/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9559</IssueID>
    <Title>Inline temporary variables doesn't handle anonymous types correctly</Title>
    <Description>**Version Used**: VS2015.1

**Steps to Reproduce**:
1. 

``` csharp
using System.Collections.Generic;
using System.Linq;

namespace InlineBroken
{
    class Program
    {
        static void Main(string[] args)
        {
        }

        private Dictionary&lt;int, int&gt; GetLookup(IEnumerable&lt;TestDto&gt; dtos)
        {
            var test$ = dtos.Select(x =&gt; new { x.Id }).ToDictionary(x =&gt; x.Id, x =&gt; x.Id);
            return test;
        }
    }

    public class TestDto
    {
        public int Id { get; set; }
    }
}
```
1. Place cursor at $
2. Press CTRL + . and choose `Inline temporary variable`

**Expected Behavior**:

``` csharp
private Dictionary&lt;int, int&gt; GetLookup(IEnumerable&lt;TestDto&gt; dtos)
{
    return dtos.Select(x =&gt; new { x.Id }).ToDictionary(x =&gt; x.Id, x =&gt; x.Id);
}
```

**Actual Behavior**:

``` csharp
private Dictionary&lt;int, int&gt; GetLookup(IEnumerable&lt;TestDto&gt; dtos)
{
    var test = dtos.Select(x =&gt; new { x.Id }).ToDictionary(x =&gt; x.Id, x =&gt; x.Id);
    return (Dictionary&lt;int, int&gt;)Enumerable.Select&lt;TestDto, global::&lt;anonymous type: global::System.Int32 Id&gt;&gt;(dtos, x =&gt; new { x.Id }).ToDictionary&lt;global::&lt;anonymous type: global::System.Int32 Id&gt;, int, int&gt;(x =&gt; x.Id, x =&gt; x.Id);
}
```
</Description>
    <CreatedDate>08/03/2016</CreatedDate>
    <ClosedDate>08/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9556</IssueID>
    <Title>[Test Failure] Visual Studio Timed Out Running CSharpSnippets.xml in prtest/win/vsi/p3 on PR #634</Title>
    <Description>PR: [#634](https://github.com/dotnet/roslyn-internal/pull/634) _Only log formatting events in telemetry when they are enacted by the …_ by @jmarolf
Failure: http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_vsi_p3/192/

**Issue 1: Visual Studio Timed Out**
Visual Studio Timed Out

**File1 Before Opening File2**
![image](https://cloud.githubusercontent.com/assets/9797472/13598700/2b7db45c-e4d4-11e5-875c-1950a58b3d40.png)

**After Opening File 2**
![image](https://cloud.githubusercontent.com/assets/9797472/13598733/51d9825c-e4d4-11e5-9fc2-44525569bfea.png)

**VS Times Out**
![image](https://cloud.githubusercontent.com/assets/9797472/13598750/715f765e-e4d4-11e5-99c8-9442671ac043.png)

**Exception System.Exception**
![image](https://cloud.githubusercontent.com/assets/9797472/13598781/961c85e0-e4d4-11e5-8a81-907fcc469674.png)

```
01:27:32 --- RUNNING VISUAL STUDIO INTEGRATION TESTS ---
01:27:32 Please don't use keyboard or mouse while integration tests are running.
01:28:35 Executing test 1 of 28: CSharpNavigateTo.xml passed
01:28:54 Executing test 2 of 28: CSharpNavigationBar.xml passed
01:29:06 Executing test 3 of 28: CSharpOrganizing.xml passed
01:29:24 Executing test 4 of 28: CSharpOutlining.xml passed
01:29:41 Executing test 5 of 28: CSharpProjectCSXSupport.xml passed
01:29:54 Executing test 6 of 28: CSharpQuickInfo.xml passed
01:30:09 Executing test 7 of 28: CSharpReferenceHighlighting.xml passed
01:31:55 Executing test 8 of 28: CSharpRename.xml passed
01:32:09 Executing test 9 of 28: CSharpReplClassification.xml passed
01:32:32 Executing test 10 of 28: CSharpReplIdeFeatures.xml passed
01:32:53 Executing test 11 of 28: CSharpSignatureHelp.xml passed
01:33:14 Executing test 12 of 28: CSharpSmartIndenter.xml passed
01:54:16 Executing test 13 of 28: CSharpSnippets.xml
01:54:16 VS integration tests failed
01:54:16 ================================================================================
01:54:16 Dumping the log file for the last TAO test.  It may or may not include a failure.
01:54:16 ================================================================================
01:54:16 Test: CSharpSnippets started: 3/8/2016 9:33:29 AM
01:54:16    Executing action [3/8/2016 9:33:29 AM] StartTarget
01:54:16 Begin Waiting for Apex Communication
01:54:16    Executing action [3/8/2016 9:33:29 AM] CloseTarget
01:54:16 Closing VS. force Close = True, closeVsToFreeHandles = False
01:54:16    Executing action [3/8/2016 9:33:33 AM] CopyCustomSnippet
01:54:16 Copying custom snippet file from d:\j\workspace\roslyn-intern---3b4b7ba3\Closed\Test\Files\pp_region_dupe.snippet to C:\Users\dotnet-bot\Documents\Visual Studio 2015\Code Snippets\Visual C#\My Code Snippets\pp_region_dupe.snippet.
01:54:16    Executing action [3/8/2016 9:33:33 AM] CopyCustomSnippet
01:54:16 Copying custom snippet file from d:\j\workspace\roslyn-intern---3b4b7ba3\Closed\Test\Files\CSharpNoSnippetType.snippet to C:\Users\dotnet-bot\Documents\Visual Studio 2015\Code Snippets\Visual C#\My Code Snippets\CSharpNoSnippetType.snippet.
01:54:16    Executing action [3/8/2016 9:33:33 AM] StartTarget
01:54:16 Starting New VS. IsVSUp = False, Is Apex VS Host Alive = False, IsApexCommunicationUp = False
01:54:16      Started target with PID 6928. Args: ' /rootsuffix RoslynDev /log'
01:54:16 Populating Assembly Catalog: ApexAssemblyCatalog (attributed with [ProvidesOperationsExtensionAttribute])
01:54:16 Found 68 exported, and 0 unexportable types from assemblies 'Microsoft.Test.Apex.Framework.dll, tao.exe, PresentationCore.dll, WindowsBase.dll, PresentationFramework.dll, Microsoft.VisualStudio.Shell.14.0.dll, Microsoft.VisualStudio.Threading.dll, Microsoft.VisualStudio.Shell.Immutable.10.0.dll, Microsoft.VisualStudio.Utilities.dll, WindowsFormsIntegration.dll, Microsoft.VisualStudio.ProjectAggregator.dll, Microsoft.Test.Apex.OsIntegration.dll'
01:54:16 
01:54:16 Assembly 'd:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\tao.exe' added to 'RoslynVisualStudioHostConfiguration' as 'Single'
01:54:16 Assembly 'd:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\Microsoft.Test.Apex.Framework.dll' added to 'RoslynVisualStudioHostConfiguration' as 'Single'
01:54:16 Assembly 'd:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\Microsoft.Test.Apex.VisualStudio.dll' added to 'RoslynVisualStudioHostConfiguration' as 'Single'
01:54:16 Populating Assembly Catalog: ApexAssemblyCatalog (attributed with [ProvidesHostExtensionAttribute(VisualStudioHost)])
01:54:16 Found 50 exported, and 0 unexportable types from assemblies 'Microsoft.Test.Apex.VisualStudio.dll, Microsoft.Test.Apex.VisualStudio.Hosting.dll, Microsoft.Test.Apex.Framework.dll, tao.exe, Microsoft.VisualStudio.Web.Project.TestServices.dll, Microsoft.VisualStudio.Web.Common.TestServices.dll, Microsoft.Test.Apex.MSTestIntegration.dll, Microsoft.Test.Apex.VisualStudio.Debugger.dll'
01:54:16 
01:54:16 VS main window was brought to foreground.
01:54:16 Started new VS and Apex Initialized
01:54:16 Begin Waiting for Apex Communication
01:54:16    Executing action [3/8/2016 9:33:52 AM] VerifySnippets
01:54:16    Executing action [3/8/2016 9:33:52 AM] AddProject
01:54:16    Executing action [3/8/2016 9:34:08 AM] AddItem
01:54:16  Scenario: Snippets from completion
01:54:16    Executing action [3/8/2016 9:34:08 AM] OpenFile
01:54:16 DEBUG: executed DTE command File.OpenFile.
01:54:16 DEBUG: start polling for code window
01:54:16 DEBUG: polling complete
01:54:16    Executing action [3/8/2016 9:34:08 AM] SetEditorText
01:54:16    Executing action [3/8/2016 9:34:09 AM] WaitForWorkspace
01:54:16    Executing action [3/8/2016 9:34:09 AM] PlaceCursor
01:54:16    Executing action [3/8/2016 9:34:09 AM] SendKeys
01:54:16    Executing action [3/8/2016 9:34:10 AM] WaitForCompletionSet
01:54:16    Executing action [3/8/2016 9:34:16 AM] VerifyCompletionList
01:54:16    Executing action [3/8/2016 9:34:16 AM] SendKeys
01:54:16    Executing action [3/8/2016 9:34:17 AM] WaitForCompletionSet
01:54:16    Executing action [3/8/2016 9:34:22 AM] VerifyCompletionList
01:54:16    Executing action [3/8/2016 9:34:22 AM] ExecuteCommand
01:54:16    Executing action [3/8/2016 9:34:22 AM] ExecuteCommand
01:54:16    Executing action [3/8/2016 9:34:22 AM] VerifyEditorContainsText
01:54:16    Executing action [3/8/2016 9:34:22 AM] VerifySnippets
01:54:16    Executing action [3/8/2016 9:34:22 AM] CloseFile
01:54:16  Scenario: Snippet provider hides items from keyword completion provider
01:54:16    Executing action [3/8/2016 9:34:22 AM] OpenFile
01:54:16 DEBUG: executed DTE command File.OpenFile.
01:54:16 DEBUG: start polling for code window
01:54:16 DEBUG: polling complete
01:54:16    Executing action [3/8/2016 9:34:22 AM] SetEditorText
01:54:16    Executing action [3/8/2016 9:34:22 AM] PlaceCursor
01:54:16    Executing action [3/8/2016 9:34:22 AM] SendKeys
01:54:16    Executing action [3/8/2016 9:34:23 AM] VerifyCompletionList
01:54:16 Saved screenshot: d:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\Screenshots\2016-03-08_09-53-59_59 - VS timed out.png
01:54:16 --------------------------------
01:54:16 
System.Exception: VS 6928 timed out after 20 minutes at 3/8/2016 9:53:59 AM.
01:54:16 ================================
01:54:16 
01:54:16 
01:54:16 Saved screenshot: d:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\Screenshots\2016-03-08_09-53-59_65 - Exception System.Exception.png
01:54:16 Killing VS procid: 6928
01:54:16 
01:54:16 ================================================================================
01:54:16 Dumping logs of all failed TAO tests.
01:54:16 ================================================================================
01:54:16 ================================================================================
01:54:16  Dumping log file d:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\VSIntegrationTestLogs\TaoStartup.txt
01:54:16 Created screenshots folder: d:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\Screenshots
01:54:16 Saved screenshot: d:\j\workspace\roslyn-intern---3b4b7ba3\Open\Binaries\Release\Screenshots\2016-03-08_09-27-47_86 - Verifying Screenshot Reliability.png
01:54:16 
01:54:16 BUILD WARNINGS for d:\j\workspace\roslyn-intern---3b4b7ba3\Closed\Setup\Setup.proj
01:54:16 09:25:59.211    12&gt;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(1819,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [d:\j\workspace\roslyn-intern---3b4b7ba3\Open\src\Tools\Source\SyntaxVisualizer\SyntaxVisualizerControl\SyntaxVisualizerControl.csproj]
01:54:16 09:25:59.642    14&gt;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(1819,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [d:\j\workspace\roslyn-intern---3b4b7ba3\Open\src\Tools\Source\SyntaxVisualizer\SyntaxVisualizerDgmlHelper\SyntaxVisualizerDgmlHelper.vbproj]
01:54:16 09:26:00.934    13&gt;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(1819,5): warning MSB3245: Could not resolve this reference. Could not locate the assembly "System.Collections.Immutable, Version=1.1.36.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [d:\j\workspace\roslyn-intern---3b4b7ba3\Closed\Tools\Source\SyntaxVisualizer\SyntaxVisualizerExtension\SyntaxVisualizerExtension.csproj]
01:54:16 ===============================================
01:54:16 There were failures, see red messages above :-(
01:54:16 ===============================================
01:54:16 
01:54:16 Total Time: 00:36:50.9489933
01:54:16 
```
</Description>
    <CreatedDate>08/03/2016</CreatedDate>
    <ClosedDate>10/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9529</IssueID>
    <Title>Null conditional assignment operator</Title>
    <Description>Please consider this enhancement:

Any version: 

Null conditional assignment:

Would be nice to have an operator to assign a value just when it's null:

```
    // If values is null, execute statement on the right and assign.
    values ?= new List&lt;string&gt;();

    // Instead of:
    if(values == null) values = new List&lt;string&gt;();

    // Or even worse:
    values = values ?? (values = new List&lt;string&gt;());
```
</Description>
    <CreatedDate>07/03/2016</CreatedDate>
    <ClosedDate>11/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9493</IssueID>
    <Title>Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.Diagnostics.RemoveUnnecessaryImports.RemoveUnnecessaryImportsTests.TestFixAllInProject (from Roslyn.Services.Editor.VisualBasic.UnitTests) failure</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn-internal_future-stabilization_win_rel_unit64/5/testReport/junit/Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.Diagnostics.RemoveUnnecessaryImports/RemoveUnnecessaryImportsTests/TestFixAllInProject/

Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.Diagnostics.RemoveUnnecessaryImports.RemoveUnnecessaryImportsTests.TestFixAllInProject (from Roslyn.Services.Editor.VisualBasic.UnitTests)

Failing for the past 1 build (Since Failed#5 )
Took 83 ms.
add description
Stacktrace

MESSAGE:
Expected 0 items but found 1: Found analyzer exception diagnostics\r\nItems:\r\n warning AD0001: Analyzer 'Microsoft.CodeAnalysis.VisualBasic.Diagnostics.RemoveUnnecessaryImports.VisualBasicRemoveUnnecessaryImportsDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Cannot call Enqueue when the queue is already completed.'.\r\nExpected: False\r\nActual: True
+++++++++++++++++++
STACK TRACE:
at Roslyn.Test.Utilities.AssertEx.Empty[T](IEnumerable`1 items, String message) in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\Test\Utilities\Shared\Assert\AssertEx.cs:line 501 at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AbstractDiagnosticProviderBasedUserDiagnosticTest.&lt;GetDiagnosticAndFixesAsync&gt;d__5.MoveNext() in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\EditorFeatures\Test\Diagnostics\AbstractDiagnosticProviderBasedUserDiagnosticTest.cs:line 75 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AbstractUserDiagnosticTest.&lt;GetDiagnosticAndFixAsync&gt;d__3.MoveNext() in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\EditorFeatures\Test\Diagnostics\AbstractUserDiagnosticTest.cs:line 44 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AbstractUserDiagnosticTest.&lt;GetCodeActionsWorkerAsync&gt;d__2.MoveNext() in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\EditorFeatures\Test\Diagnostics\AbstractUserDiagnosticTest.cs:line 37 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;GetCodeActionsAsync&gt;d__7.MoveNext() in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\EditorFeatures\Test\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 96 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestAsync&gt;d__14.MoveNext() in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\EditorFeatures\Test\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 191 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestAsync&gt;d__12.MoveNext() in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\EditorFeatures\Test\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 155 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.Diagnostics.RemoveUnnecessaryImports.RemoveUnnecessaryImportsTests.VB$StateMachine_50_TestFixAllInProject.MoveNext() in d:\j\workspace\roslyn-intern---0cc4523b\Open\src\EditorFeatures\VisualBasicTest\Diagnostics\RemoveUnnecessaryImports\RemoveUnnecessaryImportsTests_FixAllTests.vb:line 146 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
</Description>
    <CreatedDate>04/03/2016</CreatedDate>
    <ClosedDate>07/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9441</IssueID>
    <Title>IDE C# formatter indentation issue after a comment</Title>
    <Description>Say you have this

```
using System;
&lt;-- no indentation on ENTER
/* blah */ or // blah
&lt;-- no indentation on ENTER
    &lt;-- indentation on ENTER
```

VS2015 Update 1
</Description>
    <CreatedDate>03/03/2016</CreatedDate>
    <ClosedDate>03/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9385</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure in prtest/win/vsi/p3 on PR #9378</Title>
    <Description>PR: [#9378](https://github.com/dotnet/roslyn/pull/9378) _Improve the Generate-Variable code-actions menu experience._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p3/391/

**1 Test Failures:**
CSharpReplClassification.1) Verify color of some tokens

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

CSharpReplClassification.xml
</Description>
    <CreatedDate>02/03/2016</CreatedDate>
    <ClosedDate>02/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9372</IssueID>
    <Title>ref extension methods for value types</Title>
    <Description>In VB one can have an extension method whose "receiver" is a ref parameter. It would be nice to make that work in C# as well.
</Description>
    <CreatedDate>01/03/2016</CreatedDate>
    <ClosedDate>01/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9361</IssueID>
    <Title>[Test Failure] Unobserved OperationCancelledException in prtest/win/dbg/eta on PR #616</Title>
    <Description>PR: [#616](https://github.com/dotnet/roslyn-internal/pull/616) _Reference VS MEF Via NuGet_ by @Pilchie
Failure: http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_dbg_eta/677/

```
11:38:05 System.AggregateException: Exceptions found in the exception log ---&gt; Microsoft.Cci.PeWritingException: The operation was canceled. ---&gt; System.OperationCanceledException: The operation was canceled.
11:38:05    at System.Threading.CancellationToken.ThrowOperationCanceledException()
11:38:05    at System.Threading.CancellationToken.ThrowIfCancellationRequested()
11:38:05    at Microsoft.Cci.MetadataWriter.SerializeMetadataAndIL(BlobBuilder metadataWriter, BlobBuilder debugMetadataWriterOpt, PdbWriter nativePdbWriterOpt, BlobBuilder ilWriter, BlobBuilder mappedFieldDataWriter, BlobBuilder managedResourceDataWriter, Int32 methodBodyStreamRva, Func`2 calculateMappedFieldDataStreamRva, Int32&amp; moduleVersionIdOffsetInMetadataStream, Int32&amp; pdbIdOffsetInPortablePdbStream, Int32&amp; entryPointToken, MetadataSizes&amp; metadataSizes) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\MetadataWriter.cs:line 2119
11:38:05    at Microsoft.Cci.PeWriter.WritePeToStream(MetadataWriter mdWriter, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\PeWriter.cs:line 135
11:38:05    at Microsoft.Cci.PeWriter.WritePeToStream(EmitContext context, CommonMessageProvider messageProvider, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt, String pdbPathOpt, Boolean allowMissingMethodBodies, Boolean deterministic, CancellationToken cancellationToken) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\PeWriter.cs:line 97
11:38:05    --- End of inner exception stack trace ---
11:38:05    at Microsoft.Cci.PeWriter.WritePeToStream(EmitContext context, CommonMessageProvider messageProvider, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt, String pdbPathOpt, Boolean allowMissingMethodBodies, Boolean deterministic, CancellationToken cancellationToken) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\PeWriter.cs:line 101
11:38:05    at Microsoft.CodeAnalysis.Compilation.SerializeToPeStream(CommonPEModuleBuilder moduleBeingBuilt, EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, Func`1 testSymWriterFactory, DiagnosticBag diagnostics, Boolean metadataOnly, CancellationToken cancellationToken) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\Compilation\Compilation.cs:line 1869
11:38:05    --- End of inner exception stack trace ---
11:38:05    at Roslyn.Hosting.Test.CloseTargetAction.ExecuteOnUIThread() in d:\j\workspace\roslyn-intern---cd4c5d61\Closed\Hosting\Test\Actions\EditorTestApp\CloseTargetAction.cs:line 16
11:38:05    at Roslyn.Hosting.Test.EditorTestAppAction.&lt;&gt;c__DisplayClass25_0.&lt;ExecuteOnUIThread&gt;b__0() in d:\j\workspace\roslyn-intern---cd4c5d61\Closed\Hosting\Test\Actions\EditorTestApp\EditorTestAppAction.cs:line 165
11:38:05 --- End of stack trace from previous location where exception was thrown ---
11:38:05    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
11:38:05    at Roslyn.Hosting.Test.EditorTestAppAction.ExecuteOnUIThread(Action a) in d:\j\workspace\roslyn-intern---cd4c5d61\Closed\Hosting\Test\Actions\EditorTestApp\EditorTestAppAction.cs:line 178
11:38:05    at Roslyn.Hosting.Test.EditorTestAppAction.Execute(TaoEngine engine) in d:\j\workspace\roslyn-intern---cd4c5d61\Closed\Hosting\Test\Actions\EditorTestApp\EditorTestAppAction.cs:line 147
11:38:05    at Tao.Engine.DebuggableActionExecutor.Execute() in f:\dd\src\Omni\Tao\Tao.Engine\ActionExecutor.cs:line 139
11:38:05    at Tao.Engine.DefaultActionExecutor.Execute() in f:\dd\src\Omni\Tao\Tao.Engine\ActionExecutor.cs:line 36
11:38:05 ---&gt; (Inner Exception #0) Microsoft.Cci.PeWritingException: The operation was canceled. ---&gt; System.OperationCanceledException: The operation was canceled.
11:38:05    at System.Threading.CancellationToken.ThrowOperationCanceledException()
11:38:05    at System.Threading.CancellationToken.ThrowIfCancellationRequested()
11:38:05    at Microsoft.Cci.MetadataWriter.SerializeMetadataAndIL(BlobBuilder metadataWriter, BlobBuilder debugMetadataWriterOpt, PdbWriter nativePdbWriterOpt, BlobBuilder ilWriter, BlobBuilder mappedFieldDataWriter, BlobBuilder managedResourceDataWriter, Int32 methodBodyStreamRva, Func`2 calculateMappedFieldDataStreamRva, Int32&amp; moduleVersionIdOffsetInMetadataStream, Int32&amp; pdbIdOffsetInPortablePdbStream, Int32&amp; entryPointToken, MetadataSizes&amp; metadataSizes) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\MetadataWriter.cs:line 2119
11:38:05    at Microsoft.Cci.PeWriter.WritePeToStream(MetadataWriter mdWriter, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\PeWriter.cs:line 135
11:38:05    at Microsoft.Cci.PeWriter.WritePeToStream(EmitContext context, CommonMessageProvider messageProvider, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt, String pdbPathOpt, Boolean allowMissingMethodBodies, Boolean deterministic, CancellationToken cancellationToken) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\PeWriter.cs:line 97
11:38:05    --- End of inner exception stack trace ---
11:38:05    at Microsoft.Cci.PeWriter.WritePeToStream(EmitContext context, CommonMessageProvider messageProvider, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt, String pdbPathOpt, Boolean allowMissingMethodBodies, Boolean deterministic, CancellationToken cancellationToken) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\PEWriter\PeWriter.cs:line 101
11:38:05    at Microsoft.CodeAnalysis.Compilation.SerializeToPeStream(CommonPEModuleBuilder moduleBeingBuilt, EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, Func`1 testSymWriterFactory, DiagnosticBag diagnostics, Boolean metadataOnly, CancellationToken cancellationToken) in d:\j\workspace\roslyn-intern---cd4c5d61\Open\src\Compilers\Core\Portable\Compilation\Compilation.cs:line 1869&lt;---
```
</Description>
    <CreatedDate>01/03/2016</CreatedDate>
    <ClosedDate>07/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9316</IssueID>
    <Title>Test `AddProjectReferenceBetweenMixedLanguages1` is flaky</Title>
    <Description>```
Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AddMissingReference.AddMissingReferenceTests.AddProjectReferenceBetweenMixedLanguages1 (from Roslyn.Services.Editor.UnitTests2)

Failing for the past 1 build (Since Failed#4562 )
Took 14 ms.
Stacktrace

MESSAGE:
System.NullReferenceException : Object reference not set to an instance of an object.
+++++++++++++++++++
STACK TRACE:
at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AbstractCrossLanguageUserDiagnosticTest.VB$StateMachine_10_TestAddProjectReferenceAsync.MoveNext() in d:\j\workspace\roslyn_prtest---345e02d2\src\EditorFeatures\Test2\Diagnostics\AbstractCrossLanguageUserDiagnosticTest.vb:line 135 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.GetResult() 
at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AddMissingReference.AddMissingReferenceTests.VB$StateMachine_9_AddProjectReferenceBetweenMixedLanguages1.MoveNext() in d:\j\workspace\roslyn_prtest---345e02d2\src\EditorFeatures\Test2\Diagnostics\AddMissingReference\AddMissingReferenceTests.vb:line 71 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```

@dotnet/roslyn-infrastructure 
</Description>
    <CreatedDate>29/02/2016</CreatedDate>
    <ClosedDate>07/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9298</IssueID>
    <Title>[Test Failure] Test Failures in prtest/win/dbg/unit32 on PR #9163</Title>
    <Description>PR: [#9163](https://github.com/dotnet/roslyn/pull/9163) _Mark methods as Obsolete._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/4473/

**1 Test Failures:**
Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameEngineTests.RenameMergedNamespaceAcrossProjects
Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameEngineTests+VisualBasicConflicts.Bug529989_RenameCSharpIdentifierToInvalidVBIdentifier
Microsoft.CodeAnalysis.Editor.UnitTests.FindReferences.FindReferencesTests.TestField_InDependentProject1

**Issue 1: Test Failures**
There were test failures, see Test Results above.
</Description>
    <CreatedDate>29/02/2016</CreatedDate>
    <ClosedDate>01/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9297</IssueID>
    <Title>Proposal: Abstract interface</Title>
    <Description>During discussing #9132 I had the idea to propose `abstract interface`

``` C#
public abstract interface IAnimal {
    void Walk();
    int Legs { get; set; }
}
```

When you use an _abstract interface_ the compiler can check at compile time if the handed class instance implements all of the methods, events and properties of it. You can then pass any class that fits.

``` C#
public class Cat {
    void Walk();
    int Legs { get; set; }
    void Jump();
}

public void Go(IAnimal animal) {
  animal.Walk();
}

public static void Main() {
  var myCat = new Cat(); 
  Go(myCat); // compiler checks if myCat fulfills the IAnimal abstract contract
}
```

In case of a cat that has paws instead of legs I think it would be better to stick with the current standard and define a derived class with an corresponding copy constructor

``` C#
public class CatWithLegs : Cat {
  public CatWithLegs(Cat _originalCat) { /* copy */ }
  public int Legs {
    get =&gt; base.Paws; // 7881
    set =&gt; base.Paws = value;
  }
}
```

It should not be possible to 'derive' from an abstract interface, like with an abstract class definition, just to stay consistent.
</Description>
    <CreatedDate>29/02/2016</CreatedDate>
    <ClosedDate>29/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9276</IssueID>
    <Title>[Test Failure] Test Failures in prtest/win/dbg/unit64 on PR #9259</Title>
    <Description>PR: [#9259](https://github.com/dotnet/roslyn/pull/9259) _Fix devenv /build and devenv /upgrade_ by @jmarolf
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/4444/

**1 Test Failures:**
Microsoft.CodeAnalysis.Editor.UnitTests.Rename.VisualBasic.ImplicitReferenceConflictTests.RenameMoveNextInCSCauseConflictInForEach

**Issue 1: Test Failures**
There were test failures, see Test Results above.

Rename test failure
</Description>
    <CreatedDate>28/02/2016</CreatedDate>
    <ClosedDate>03/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9263</IssueID>
    <Title>GenerateMethodCrossLanguageTests.GenerateMethodUsingTypeConstraint_SingleNamedType test is flaky</Title>
    <Description>See build http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/4411/
</Description>
    <CreatedDate>27/02/2016</CreatedDate>
    <ClosedDate>01/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9212</IssueID>
    <Title>Suggestion: optimize codegen for "simple" string interpolation</Title>
    <Description>String interpolation simplicity and clearness makes it very attractive for formatting text. 
In fact, at my company I've seen it used for things as trivial as `var greeting = $"Hello {name}"`, which admittedly is only slightly nicer than `"Hello " + name`.

The thing is: it doesn't have the same performance characteristics. Currently C# converts an interpolated string into a `string.Format("Hello {0}", name)` call. This has the benefit of being the simplest implementation (from a compiler perspective). But it has quite some overhead: boxing of value type placeholders (such as numbers), parsing of the format string, validation of the parameters, etc.

Most of the time you may not care. But sometimes in hot path code you want to be very careful with those allocations and computations.

I suggest that the compiler could generate more optimized code in at least some (or all?) situations.

It is evident that when you convert to `FormattableString` or `IFormattable` you'd need to generate a specialized class for each template, which may be excessive (or not?).

In the common case of interpolating strings, you could turn the parameters into strings at interpolation site, with specialized code, so that value types don't require boxing.
Concatenation of the results could be done with `string.Concat`, which doesn't require allocating an array for up to 4 parts.

This means that code like `string s = $"x: {x}, y: {y}"`, which is a common use of string interpolation, could generate the IL equivalent of `string s = string.Concat("x: ", x.ToString(), ", y: ", y.ToString())` which is probably the most efficient code you could have to create that string.

If the compiler did that work, we would get both benefits of clean syntax and most efficient specialized code.
</Description>
    <CreatedDate>25/02/2016</CreatedDate>
    <ClosedDate>31/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9195</IssueID>
    <Title>[Test Failure] No identified problem in prtest/win/dbg/eta on PR #9130</Title>
    <Description>PR: [#9130](https://github.com/dotnet/roslyn/pull/9130) _Always use an absolute path for keyfile with public sign_ by @agocke
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_dbg_eta/4337/

It looks like restore is failing?
</Description>
    <CreatedDate>25/02/2016</CreatedDate>
    <ClosedDate>25/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9172</IssueID>
    <Title>[Test Failure] `BasicExpressionEvaluator.Validate Locals Window` is flaky</Title>
    <Description>Encounter this failure in #9034
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p0/333/

```
Test: BasicExpressionEvaluator started: 2/25/2016 6:21:48 AM
    Executing action [2/25/2016 6:21:48 AM] StartTarget
Begin Waiting for Apex Communication
    Executing action [2/25/2016 6:21:48 AM] AddProject
    Executing action [2/25/2016 6:21:48 AM] SetEditorText
 Scenario: Validate Locals Window
    Executing action [2/25/2016 6:21:48 AM] Debug
             [2/25/2016 6:21:48 AM] Disable Diagnostics Hub (Roslyn hive)
             [2/25/2016 6:21:48 AM] Start Debugging
    Executing action [2/25/2016 6:21:50 AM] LocalsWindow
LocalsWindowAction [2/25/2016 6:21:50 AM] Starting base.Execute
LocalsWindowAction [2/25/2016 6:21:50 AM] Done base.Execute
LocalsWindowAction [2/25/2016 6:21:50 AM] Retrieving window service
LocalsWindowAction [2/25/2016 6:21:50 AM] Retrieved window service
LocalsWindowAction [2/25/2016 6:21:50 AM] Showing window
LocalsWindowAction [2/25/2016 6:21:50 AM] Waiting for keyboard focus
LocalsWindowAction [2/25/2016 6:21:50 AM] Stopped waiting for keyboard focus (succeeded)
LocalsWindowAction [2/25/2016 6:21:50 AM] Checking entry count
--------------------------------
System.Exception: Locals Window contains an unexpected number of entries. Expected: 20, Actual 0
```

@dotnet/roslyn-infrastructure 
</Description>
    <CreatedDate>25/02/2016</CreatedDate>
    <ClosedDate>25/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9166</IssueID>
    <Title>Build failed due to sharing violation</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/4276/

error MSB3026:  Could not copy "C:\Users\dotnet-bot.nuget\packages\System.Collections.Immutable\1.1.37\lib\dotnet\System.Collections.Immutable.dll" to "d:\j\workspace\roslyn_prtest---345e02d2\Binaries\Debug\System.Collections.Immutable.dll". Beginning retry 1 in 1000ms. The process cannot access the file 'd:\j\workspace\roslyn_prtest---345e02d2\Binaries\Debug\System.Collections.Immutable.dll' because it is being used by another process. [d:\j\workspace\roslyn_prtest---345e02d2\src\Compilers\CSharp\csc\csc.csproj] -&gt;      9&gt;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(3962,5): 
</Description>
    <CreatedDate>25/02/2016</CreatedDate>
    <ClosedDate>25/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9135</IssueID>
    <Title>Listening to rename events in Code editor</Title>
    <Description>Hi,
I am writing visual studio 2015 extension for a framework. Basic idea is that we have viewmodel in C# that is bound to Html martkup. For example:
**code:**

``` cs
public class MyViewModel {
     public string MyProperty { get; set; }
}  
```

markup:

``` html
@viewmodel MyViewModel 
&lt;div&gt;
{{value: MyProperty}}
&lt;/div&gt;
```

What I need to do is I need to be able to be notified when MyViewModel or MyProperty gets renamed in the code editor. This is essential, because I need to update MyViewModel or MyProperty references in my markup file accordingly. Otherwise users will get errors in the markup.

I found out there is IRefactorNotifyService interface in roslyn that seems to do just what I need. It looks well documented too. The problem is, it's internal. Could you please make it public? 
Or could you advise me on how to get the renaming to work correctly without it?  
</Description>
    <CreatedDate>24/02/2016</CreatedDate>
    <ClosedDate>25/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9074</IssueID>
    <Title>Pattern variable in catch's 'when' clause not offered inside catch block.</Title>
    <Description>``` c#
            object o = null;
            try
            {
            }
            catch (Exception) when (o is int i)
            {
                i    // 'i' not offered here.
            }
```

My understanding is that this variable should be in scope here.  If it is in scope, we should offer it in completion.
</Description>
    <CreatedDate>23/02/2016</CreatedDate>
    <ClosedDate>24/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>9001</IssueID>
    <Title>VB.NET: Async method state machine "losing" locals - Release only (Async/Await + Try/Finally + For)</Title>
    <Description>I've come across a very strange `NullReferenceException` issue which only manifests itself when building in Release configuration (with _Advanced Compile Options -&gt; Enable optimizations_ enabled).

This occurs in `Async` methods (both `Task`-returning and `Async Sub`) which have a `Try/Finally` block where the `Try` contains a `For` loop, which in turn contains an `Await` statement. When a local variable pointing to a reference type instance is declared before such a `Try/Finally` and accessed inside the `Finally`, an "impossible" `NullReferenceException` is thrown.

_Here is a complete Console application demonstrating the issue when built with VS2015 (targeting .NET4.5, Release)_:

```
Module Module1

  Sub Main()
    TestAsync().Wait()
  End Sub

  Async Function TestAsync() As Task
    Dim obj As New Object

    Try
      For i = 0 To 0
        Await Task.Yield()
      Next
    Finally
      obj.GetType() ' Throws System.NullReferenceException
    End Try
  End Function

End Module
```

**Analysis**

Looking at the Release binary with ILDASM, the compiler-generated `VB$StateMachine_1_TestAsync` is missing the following field definition:

```
.field assembly object $VB$ResumableLocal_obj$0
```

Here are the relevant bits of `MoveNext` IL in Debug (works fine):

```
ldarg.0
newobj     instance void [mscorlib]System.Object::.ctor()
call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
stfld      object ConsoleRepro.Module1/VB$StateMachine_1_TestAsync::$VB$ResumableLocal_obj$0
... Await ...
ldarg.0
ldfld      object ConsoleRepro.Module1/VB$StateMachine_1_TestAsync::$VB$ResumableLocal_obj$0
callvirt   instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
```

VS Release (throws):

```
newobj     instance void [mscorlib]System.Object::.ctor()
call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
stloc.1
... Await ...
ldloc.1
callvirt   instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
```

The above works fine if the `Await` completes synchronously, but if not - the local is uninitialized after `Await`, hence the `NullReferenceException`.

**Environment**

The above has been reproduced using:
- Visual Studio 2015 Professional (14.0.24720.00 Update 1)
- Visual Studio 2015 Community (14.0.23107.0)

**Addendum**

If `obj` is `IDisposable`, you can replace `Try/Finally` with a `Using` statement and then the problem is even worse due to the null check auto-inserted by the compiler before the `obj.Dispose` call, meaning that `NullReferenceException` is never thrown - `Dispose` simply doesn't get called, i.e.

```
Async Function TestAsync() As Task
  Using obj As New MyDisposable ' IDisposable
    For i = 0 To 0
      Await Task.Yield()
    Next
  End Using ' obj.Dispose *not* called
End Function
```
</Description>
    <CreatedDate>22/02/2016</CreatedDate>
    <ClosedDate>24/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8973</IssueID>
    <Title>Exception should not be thrown on rename conflict</Title>
    <Description>An `InvalidOperationException` is thrown when a method in a partial class is renamed to the name of a type parameter. This exception causes Visual Studio 2015 to **crash**.

Minimal code to reproduce (Can also be reproduced in Visual Studio using the `SourceText` contents):

``` C#
var sourceText = SourceText.From(@"
  partial class Cls&lt;T&gt; {
      public void Method(T arg) {}
  }
  partial class Cls&lt;T&gt; {}
");

var workspace = new AdhocWorkspace();
var projectId = ProjectId.CreateNewId();
var documents = new[] { DocumentInfo.Create(DocumentId.CreateNewId(projectId), "TestFile.cs", loader: TextLoader.From(sourceText.Container, VersionStamp.Default)) };
var projects = new[] { ProjectInfo.Create(projectId, VersionStamp.Default, "TestProject", "TestProject", LanguageNames.CSharp, documents: documents) };
var solution = workspace.AddSolution(SolutionInfo.Create(SolutionId.CreateNewId(), VersionStamp.Default, null, projects));
var semantic = solution.GetDocument(documents[0].Id).GetSemanticModelAsync().Result;
var childNodes = semantic.SyntaxTree.GetCompilationUnitRoot().ChildNodes();
var method = semantic.SyntaxTree.GetCompilationUnitRoot().ChildNodes().Cast&lt;ClassDeclarationSyntax&gt;().SelectMany(c =&gt; c.Members).Cast&lt;MethodDeclarationSyntax&gt;().First();
var symbol = semantic.GetDeclaredSymbol(method);
var newSolution = Renamer.RenameSymbolAsync(solution, symbol, "T", null).Result;
```

I tracked this `InvalidOperationException` back to `CSharpRenameConflictLanguageService.ComputeDeclarationsAsync`. Here it is assumed that a type parameter only has a single location:

``` C#
foreach (var typeParameter in renamedSymbol.ContainingType.TypeParameters)
{
    if (typeParameter.Name == renamedSymbol.Name)
    {
        var typeParameterToken = typeParameter.Locations.Single().FindToken(cancellationToken);
        conflicts.Add(reverseMappedLocations[typeParameterToken.GetLocation()]);
    }
}
```

_src\Workspaces\CSharp\Portable\Rename\CSharpRenameRewriterLanguageService.cs:894_

I think a conflict should be added for either all type parameter locations or just the one of the class containing the method (But what if a partial method is in a diffrent partial class!).

I'm happy to post a pull request after it is clear how to solve this problem.
</Description>
    <CreatedDate>20/02/2016</CreatedDate>
    <ClosedDate>22/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8952</IssueID>
    <Title>Nameof with open generic types</Title>
    <Description>Currently your code will not compile if you try to use `nameof(TestType&lt;,&gt;)`. Even though the type arguments have absolutely no effect on the name, you are required to choose and type out arguments: `nameof(TestType&lt;object, object&gt;)`.

This is even worse when there are type constraints that `object` does not satisfy. You have to stop and look up how to satisfy them. It's even possible to create type constraints that require you to _create a new type_ to satisfy the constraints (implement two random interfaces), just so you can use `nameof` on the type or a member of the type. While this last scenario is unlikely, it drives home the point that closed generics are a completely orthogonal concern to `nameof` expressions.

The type arguments are irrelevant to the name of the type and of the type's immediate members, and likely to all members accessible anywhere from the type. The only exception is this: an argument could be made that the child members of a child member can't be determined without a closed generic type, but in that convoluted scenario you know the type you're after and you should just use that type directly to access the name of its member.

I request that `nameof` be able to get the name of open generic types. Unfortunately it's too late to ban the use of `nameof` with closed generic types but I believe it should be discouraged.

``` C#
public class SnarkyTestType&lt;X, Y&gt; where X : IRandomInterface1, IRandomInterface2
{
    public void TestMethod&lt;Z&gt;()
    {        
    }
}

nameof(SnarkyTestType&lt;?, object&gt;.TestMethod) // Gotcha. The only classes that satisfy this are internal to a different assembly.


public class TestType&lt;X, Y&gt; where X : IComparer&lt;Y&gt; where Y : struct
{
    public void TestMethod&lt;Z&gt;()
    {
    }
}

nameof(TestType&lt;IComparer&lt;int&gt;, int&gt;.TestMethod) // Gotcha anyway, wasted your time and made you write terrible code
```
</Description>
    <CreatedDate>19/02/2016</CreatedDate>
    <ClosedDate>20/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8946</IssueID>
    <Title>RenameMergedNamespaceAcrossProjects is flaky</Title>
    <Description>Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameEngineTests.RenameMergedNamespaceAcrossProjects 

http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/4061/consoleFull#-865691239f8aae81d-4bec-45a1-8770-9e05a4fee5ca
</Description>
    <CreatedDate>19/02/2016</CreatedDate>
    <ClosedDate>03/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8931</IssueID>
    <Title>Allow fuzzy type matching in Navigate To</Title>
    <Description>Customers in interviews have mentioned that they don't always know the exact name of the type they want to navigate to. Let's see if we can support fuzzily matching their types so that we can help them find what they are looking for faster. 
</Description>
    <CreatedDate>19/02/2016</CreatedDate>
    <ClosedDate>23/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8894</IssueID>
    <Title>Proposal: ??= operator</Title>
    <Description>Null-coalescing assignment operator, or fallback operator.

Allows this:

```
myNullableVariable = myNullableVariable ?? c;
```

To be re-written as this:

```
myNullableVariable ??= c;
```

It would be quite useful for lazy-initialized properties:

```
Person LoveMatch =&gt; mLoveMatchCache ?? mLoveMatchCache = Suitors.First(s =&gt; ComplexMatchingAlgorithm(s));
private Person mLoveMatchCache;
```

To become easier to write and understand:

```
Person LoveMatch =&gt; mLoveMatchCache ??= Suitors.First(s =&gt; ComplexMatchingAlgorithm(s));
private Person mLoveMatchCache;
```

It would also allow for variable fallbacks:

```
Person FindMatch(Person person, IEnumerable&lt;Person&gt; friends = null) {
    friends ??= FindFriends(person);
    // ...
}
```

It would work much like the other assignment operators. Of course, the right-hand side of the operation would only be executed if the left-hand side is null.
</Description>
    <CreatedDate>18/02/2016</CreatedDate>
    <ClosedDate>26/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8893</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure in prtest/win/vsi/p0 on PR #8864</Title>
    <Description>PR: [#8864](https://github.com/dotnet/roslyn/pull/8864) _Update roslyn semantic version from 1.2 to 1.3_ by @jmarolf
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p0/282/

**1 Test Failures:**
BasicExpressionEvaluator.Validate Locals Window

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

BasicExpressionEvaluator.xml
</Description>
    <CreatedDate>18/02/2016</CreatedDate>
    <ClosedDate>20/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8867</IssueID>
    <Title>[Test Failure] CSharpGoToImplementation.Go To Implementation opens in a provisional tab if document wasn't already open</Title>
    <Description>Failure in #8832
Failing Build: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p2/280/
</Description>
    <CreatedDate>18/02/2016</CreatedDate>
    <ClosedDate>25/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8828</IssueID>
    <Title>[Test Failure] Test Failures in prtest/win/dbg/unit64 on PR #8799</Title>
    <Description>PR: [#8799](https://github.com/dotnet/roslyn/pull/8799) *\* by @
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/3930/

**Issue 1: Test Failures**
There were test failures, see Test Results above.
</Description>
    <CreatedDate>17/02/2016</CreatedDate>
    <ClosedDate>17/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8827</IssueID>
    <Title>[Test Failure] Test Failures in prtest/win/dbg/unit32 on PR #8799</Title>
    <Description>PR: [#8799](https://github.com/dotnet/roslyn/pull/8799) *\* by @
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/3958/

**Issue 1: Test Failures**
There were test failures, see Test Results above.
</Description>
    <CreatedDate>17/02/2016</CreatedDate>
    <ClosedDate>17/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8792</IssueID>
    <Title>[nuget add using] add back support for extensions methods when practicable</Title>
    <Description>We removed this metadata from the index for Update 2 as resolving these references has some complexity. It is useful functionality, however.
</Description>
    <CreatedDate>17/02/2016</CreatedDate>
    <ClosedDate>19/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8764</IssueID>
    <Title>Imports Statement breaks compiler</Title>
    <Description>We had a project where a developer used the syntax of "Imports &lt;alias&gt; = &lt;namespace&gt;" in a vb file. The issue was the value for &lt;namespace&gt; was something that didn't exist. The line produced a warning but the project would still compile in 2010. In 2015, building the project it will produce "vbc.exe" exited with code -2146232797 error. If you take out the "&lt;alias&gt; =" in the imports statement, the project will compile in 2015.

I attached a sample project to demonstrate what was going on. 

[ImportsTest.zip](https://github.com/dotnet/roslyn/files/133348/ImportsTest.zip)
</Description>
    <CreatedDate>16/02/2016</CreatedDate>
    <ClosedDate>04/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8748</IssueID>
    <Title>IndexOutOfRangeException at Microsoft.CodeAnalysis.CSharp.BoundCall.DeriveArgument while running Operation analyzers</Title>
    <Description>Message: `Index was outside the bounds of the array.`

Analyzer: `Microsoft.ApiDesignGuidelines.Analyzers.DoNotDirectlyAwaitATaskAnalyzer`

Dump: `\\&lt;%internal_share%&gt;\public\mavasani\OperationAnalyzerDump\BoundCall_DerivedArgument_Crash\`

Repro steps:
1. Clean the RoslynDev hive on your machine
2. Get latest roslyn sources and build
3. Get latest roslyn-analyzer sources and build
4. devenv /rootsuffix RoslynDev
5. Open Analyzers.sln in the VS instance and leave it running for few minutes - you should hit the crash

Call stack:

&gt; &gt; &gt;   Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler) Line 151   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 770   C#
&gt; &gt; &gt;     [Resuming Async Method] 
&gt; &gt; &gt;     [External Code] 
&gt; &gt; &gt;     Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundCall.DeriveArgument(int parameterIndex, int argumentIndex, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt; boundArguments, System.Collections.Immutable.ImmutableArray&lt;string&gt; argumentNames, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.RefKind&gt; argumentRefKinds, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol&gt; parameters, Microsoft.CodeAnalysis.SyntaxNode invocationSyntax) Line 147 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundCall.DeriveArguments(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt; boundArguments, System.Collections.Immutable.ImmutableArray&lt;string&gt; argumentNames, System.Collections.Immutable.ImmutableArray&lt;int&gt; argumentsToParameters, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.RefKind&gt; argumentRefKinds, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol&gt; parameters, Microsoft.CodeAnalysis.SyntaxNode invocationSyntax) Line 115   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundObjectCreationExpression.Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression.ConstructorArguments.get() Line 468    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.VisitObjectCreationExpression(Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression operation) Line 327    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundObjectCreationExpression.Accept(Microsoft.CodeAnalysis.Semantics.OperationVisitor visitor) Line 517    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 34    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 64 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.VisitVariable(Microsoft.CodeAnalysis.Semantics.IVariable operation) Line 55 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.VariableDeclaration.Accept(Microsoft.CodeAnalysis.Semantics.OperationVisitor visitor) Line 31   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 34    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 64 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.VisitArray&lt;Microsoft.CodeAnalysis.Semantics.IVariable&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Semantics.IVariable&gt; list) Line 21    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.VisitVariableDeclarationStatement(Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement operation) Line 50 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration.Accept(Microsoft.CodeAnalysis.Semantics.OperationVisitor visitor) Line 597    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 34    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 64 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.VisitArray&lt;Microsoft.CodeAnalysis.Semantics.IStatement&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Semantics.IStatement&gt; list) Line 21  C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.VisitBlockStatement(Microsoft.CodeAnalysis.Semantics.IBlockStatement operation) Line 45 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.Semantics.OperationVisitor visitor) Line 48    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationWalker.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 34    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector.Visit(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 64 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Semantics.OperationExtensions.DescendantsAndSelf(Microsoft.CodeAnalysis.Semantics.IOperation operation) Line 32   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.GetOperationsToAnalyze(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Semantics.IOperation&gt; operationBlocks) Line 1777   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.ExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference decl, int declarationIndex, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool shouldExecuteSyntaxNodeActions, bool shouldExecuteOperationActions, bool shouldExecuteCodeBlockActions, bool shouldExecuteOperationBlockActions, bool isInGeneratedCode, System.Threading.CancellationToken cancellationToken) Line 1542  C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.ExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCodeSymbol, System.Threading.CancellationToken cancellationToken) Line 1401   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessSymbolDeclared(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 831 C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventCore(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 789  C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEvent(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 778  C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 765   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 700   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool usingPrePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 359    C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 288   C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken) Line 685  C#
&gt; &gt; &gt;     Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Line 575    C#
</Description>
    <CreatedDate>16/02/2016</CreatedDate>
    <ClosedDate>16/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8700</IssueID>
    <Title>Exception from Roslyn analyzer</Title>
    <Description>The following exception caused my Roslyn build (with changes) to fail after a large merge operation.

``` none
  CSC : error AD0001: Analyzer 'Roslyn.Diagnostics.Analyzers.ApiDesign.DeclarePublicAPIAnalyzer' threw an exception of type 'System.ArgumentException' with message 'An item with the same key has already been added.'. [D:\Roslyn-Patterns\src\Compilers\CSharp\Portable\CSharpCodeAnalysis.csproj]
```

THIS IS NOT HELPFUL. There is no obvious way to determine what the problem is.
</Description>
    <CreatedDate>14/02/2016</CreatedDate>
    <ClosedDate>11/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8626</IssueID>
    <Title>Generic Attributes</Title>
    <Description>What about generic attributes?
</Description>
    <CreatedDate>12/02/2016</CreatedDate>
    <ClosedDate>12/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8518</IssueID>
    <Title>potential leak if project forked but nobody ask for compilation</Title>
    <Description>it is first reported by Xamarin. basically, if one create workspace and keep modify a project without calling getcompilation, we will keep add delta to it but never merge those making us to have long list of delta which can be viewed as a leak. 

http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/Solution.CompilationTracker.cs,100

what I wrote above is simplified version, actual one require a bit more state setting to happen, but not very narrow case. and in VS, due to solution crawler, might not actually surface.

for it to happen in real world, there must be the very first GetCompilation call after that, all delta will be accumulated until next GetCompilation call. in Xamarin case, it never happened so triggered as a leak by their tool.
</Description>
    <CreatedDate>10/02/2016</CreatedDate>
    <ClosedDate>11/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8493</IssueID>
    <Title>[Test Failure] Compile Error (+1 more) in prtest/win/dbg/unit32 on PR #8223</Title>
    <Description>PR: [#8223](https://github.com/dotnet/roslyn/pull/8223) *\* by @
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/3539/

**9 Test Failures:**
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBAsyncTests.LocalCapturedInBetweenSuspensionPoints_Debug
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBAsyncTests.LocalNotCapturedInBetweenSuspensionPoints_Release
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBAsyncTests.LocalCapturedInBetweenSuspensionPoints_Release
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBAsyncTests.LocalNotCapturedInBetweenSuspensionPoints_Debug
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBTests.ImportsInAsyncLambda
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBTests.ImportsInAsync
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBIteratorTests.LocalCapturedAndHoisted
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBIteratorTests.LocalHoistedAndNotCapture
Microsoft.CodeAnalysis.VisualBasic.UnitTests.PDB.PDBIteratorTests.IteratorWithLiftedMultipleSameNameLocals

**Issue 1: Compile Error**

**Issue 2: Test Failures**
There were test failures, see Test Results above.
</Description>
    <CreatedDate>09/02/2016</CreatedDate>
    <ClosedDate>09/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8491</IssueID>
    <Title>[Test Failure] xUnit returned error code without errors (+2 more) in prtest/win/dbg/unit32 on PR #8424</Title>
    <Description>PR: [#8424](https://github.com/dotnet/roslyn/pull/8424) _Code Model: Don't crash when adding element, deleting its text and then adding it again_ by @DustinCampbell
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/3530/

**Issue 1: xUnit returned error code without errors**
xunit produced no error output but had exit code 1

**Issue 2: Compile Error**

**Issue 3: Test Failures**
There were test failures, see Test Results above.
</Description>
    <CreatedDate>09/02/2016</CreatedDate>
    <ClosedDate>09/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8480</IssueID>
    <Title>Crash in floating-point parser for 1.0e9999999999</Title>
    <Description>Visual Studio Update 1 crashes with the floating-point literal 1.0e9999999999
</Description>
    <CreatedDate>09/02/2016</CreatedDate>
    <ClosedDate>09/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8450</IssueID>
    <Title>Partial Classes exhibit strange results in Find All References</Title>
    <Description>If you open Find All References on a partial class, it will show identical root nodes for the definitions (without even the filenames), and show all references under the last root.
It doesn't even group references in the same file under that file's node (though I'm not sure if that'd be better).

It should at least show the filenames in the root nodes; I'm not sure if it should show multiple roots at all.
&lt;strike&gt;IIRC, pre-Roslyn VS would show an equivalent listing on F12 (which Roslyn does not do).&lt;/strike&gt;

![image](https://cloud.githubusercontent.com/assets/313894/12870458/c8633018-cd13-11e5-80a5-8d0d2b4758ed.png)
</Description>
    <CreatedDate>07/02/2016</CreatedDate>
    <ClosedDate>08/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8447</IssueID>
    <Title>Dynamic overload resolution does not match compile-time overload resolution</Title>
    <Description>```
using System;
using static S;

class C
{
    static void Main()
    {
        Foo(""); // Prints "Foo(object)"
        Foo((dynamic)""); // Throws RuntimeBinderException: An object reference is required for the non-static field, method, or property 'S.Foo(string)'
    }
}

class S
{
    public static void Foo(object x) =&gt; Console.WriteLine("Foo(object)");
    public void Foo(string x) =&gt; Console.WriteLine("Foo(string)");
}
```
</Description>
    <CreatedDate>06/02/2016</CreatedDate>
    <ClosedDate>08/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8392</IssueID>
    <Title>stackalloc should have a public-facing IOperation representation</Title>
    <Description>There should be a public-facing IOperation node for `stackalloc` expressions.

cc @JohnHamby @genlu 
</Description>
    <CreatedDate>04/02/2016</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8365</IssueID>
    <Title>AD0001 VisualBasicSimplifyTypeNamesDiagnosticAnalyzer threw exception 'Value cannot be null'</Title>
    <Description>When my `Error List` view in Visual Studio 2015 is set to either **Build + IntelliSense** or **IntelliSense Only**, I'm getting this error message:

```
Error   AD0001  Analyzer 'Microsoft.CodeAnalysis.VisualBasic.CodeFixes.SimplifyTypeNames.VisualBasicSimplifyTypeNamesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentNullException' with message 'Value cannot be null.
Parameter name: source'.    01 InOrde.Main      1   Active  Analyzer 'Microsoft.CodeAnalysis.VisualBasic.CodeFixes.SimplifyTypeNames.VisualBasicSimplifyTypeNamesDiagnosticAnalyzer' threw the following exception:
'System.ArgumentNullException: Value cannot be null.
Parameter name: source
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ClassifyConversion(ITypeSymbol source, ITypeSymbol destination)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion(Compilation compilation, ITypeSymbol source, ITypeSymbol destination)
   at Microsoft.CodeAnalysis.VisualBasic.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(ExpressionSyntax originalExpression, ITypeSymbol originalTargetType, ExpressionSyntax newExpression, ITypeSymbol newTargetType)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`8.ReplacementBreaksCompoundAssignment(TExpressionSyntax originalLeft, TExpressionSyntax originalRight, TExpressionSyntax newLeft, TExpressionSyntax newRight)
   at Microsoft.CodeAnalysis.VisualBasic.Utilities.SpeculationAnalyzer.ReplacementChangesSemanticsForNodeLanguageSpecific(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`8.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode previousOriginalNode, TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`8.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`8.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.VisualBasic.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(MemberAccessExpressionSyntax memberAccess, ExpressionSyntax reducedNode, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Extensions.ExpressionSyntaxExtensions.TryReduce(MemberAccessExpressionSyntax memberAccess, SemanticModel semanticModel, ExpressionSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, ExpressionSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, ExpressionSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.CodeFixes.SimplifyTypeNames.VisualBasicSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.CodeFixes.SimplifyTypeNames.VisualBasicSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpressionCore(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.SimplifyTypeNames.SimplifyTypeNamesDiagnosticAnalyzerBase`1.TrySimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, AnalyzerOptions analyzerOptions, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.CodeFixes.SimplifyTypeNames.VisualBasicSimplifyTypeNamesDiagnosticAnalyzer._Closure$__4-0._Lambda$__1(SyntaxNode n)
   at Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack..ctor(SyntaxNode startingNode, Func`2 descendIntoChildren)
   at Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack..ctor(SyntaxNode startingNode, Func`2 descendIntoChildren)
   at Microsoft.CodeAnalysis.SyntaxNode.&lt;DescendantNodesAndTokensIntoTrivia&gt;d__159.MoveNext()
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at Microsoft.CodeAnalysis.VisualBasic.CodeFixes.SimplifyTypeNames.VisualBasicSimplifyTypeNamesDiagnosticAnalyzer.AnalyzeNode(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__DisplayClass38_1`1.&lt;ExecuteSyntaxNodeAction&gt;b__1()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(DiagnosticAnalyzer analyzer, Action analyze)'.
```

When set to **Build Only**, it gives me a clear message that in my Windows Forms project I forgot to call `InitializeComponent()` in the code behind constructor.
</Description>
    <CreatedDate>03/02/2016</CreatedDate>
    <ClosedDate>03/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8347</IssueID>
    <Title>`LambdaExpression` operation missing when a lambda expression is used for delegate creation</Title>
    <Description>For example, in the following code snippet, `(s, e) =&gt; { }` is not recogonized as a `LambdaExpression`:

``` cs
Mumble += new MumbleEventHandler((s, e) =&gt; { });
```

It is mistakenly recognized as a `MethodBindingExpression`.

There's a testscase for this bug:
src\compilers\csharp\test\semantic\diagnostics\operationanalyzertests.cs
</Description>
    <CreatedDate>02/02/2016</CreatedDate>
    <ClosedDate>08/05/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8304</IssueID>
    <Title>PROPOSAL: Constraint Inheritance / Inference</Title>
    <Description>Today in C#, constraints on methods get automatically "inherited" by derived classes and do not need to be redefined.  This is a good thing and helps keep my code clean, concise, and readable, and when you need to refactor a base method, you only have to refactor the base method.

```
    public class BaseClass {
        public virtual string DoSomething&lt;T&gt;(T Item) where T : new() {
            return new T().ToString();
        }
    }


    public class DerivedClass : BaseClass {
        public override string DoSomething&lt;T&gt;(T Item) 
            //where T : new() &lt;- This is not necessary.
            {
            return base.DoSomething&lt;T&gt;(Item);
        }
    }
```

That is all goodwhen you're working with generic methods, but when you're working with Generic classes, you have a different story.  Here is an example:

```
    public class BaseClass&lt;T&gt; where T : new() {
        public virtual string DoSomething(T Item) {
            return new T().ToString();
        }

    }

    public class DerivedClass&lt;T&gt; : BaseClass&lt;T&gt;
        //This line should not be needed but it is.
        where T : new()
        {

    }
```

Today, with a class definition like this, if I refactor `BaseClass&lt;T&gt;` and add a new constraint onto `&lt;T&gt;`, I then have to go find every derived class that extend's `BaseClass&lt;T&gt;` and copy/paste that new constraint into `DerivedClass&lt;T&gt;`'s definition.  This has a couple of problems:
1.  I have to clutter `DerivedClass&lt;T&gt;` with redefinitions of base class stuff.
2.  When refactoring the base class, I am forced to refactor the derived class.

In the example above, `DerivedClass's &lt;T&gt;` should automatically "inherit" the constraints that are placed on it by `BaseClass&lt;T&gt;`.

In order to simplify things and preserve compatibility with existing code, using the `where` clause in a derived class should specify _additional_ constraints that may or may not already be inferred from its usage.
</Description>
    <CreatedDate>02/02/2016</CreatedDate>
    <ClosedDate>20/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8295</IssueID>
    <Title>HTML language service should participate in GoToDef and Rename</Title>
    <Description>Today, things like buttons cannot be renamed across C#/Aspx and GotToDef on a button from C# only takes you to the .aspx page, but not to the correct span. These could be fixed by the html language service participating in IVsHierarchyRefactorNotify and IVsSymbolicNavigationNotify, respectively.
</Description>
    <CreatedDate>02/02/2016</CreatedDate>
    <ClosedDate>14/04/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8293</IssueID>
    <Title>"Hide advanced members" checkbox is disabled for VB with Roslyn installed</Title>
    <Description>The "hide advanced members" checkbox is disabled for the VB node within Tools &gt; Options, Text Editor..
</Description>
    <CreatedDate>01/02/2016</CreatedDate>
    <ClosedDate>03/10/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8248</IssueID>
    <Title>What happened to Visual Basic Scripting?</Title>
    <Description>Today in the [Scripting API Samples](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples) there's only C# Scripting.

When I install the:

``` PowerShell
PM&gt; Install-Package Microsoft.CodeAnalysis.Scripting
```

only the

``` C#
using Microsoft.CodeAnalysis.CSharp.Scripting;
```

comes. Where's the 

``` C#
using Microsoft.CodeAnalysis.VisualBasic.Scripting;
```

?
There are some mentions that indicate that he existed. Example:
["... You can grab the C# scripting package using the following NuGet installation command (there is also a corresponding one for Visual Basic scripting, _Microsoft.CodeAnalysis.Scripting.VisualBasic_): ..."](http://blogs.msdn.com/b/cdndevs/archive/2015/12/01/adding-csharp-scripting-part-1.aspx)
</Description>
    <CreatedDate>29/01/2016</CreatedDate>
    <ClosedDate>03/12/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8245</IssueID>
    <Title>Lazy acquisition paradigm and C# Auto-Initializers</Title>
    <Description>In lots of classes we do something like this:

``` C#
class MyClass
{
       private  OtherClass _otherValue;
       public OtherClass OtherValue
       { 
          get { return _otherValue?? (_otherValue = SomeExpensiveExpression());}
      }
}
```

In other words we have a read-only property with a backing field that we want to only evaluate once and keep in memory (classic lazy acquisition). 

But now that we have Auto-Property Initializers, which automatically create a backing field, couldn't we simply extend this concept to a lazily acquired Auto-Property - in other words, only carry out the initialization when the property is first accessed.

I am not sure about the syntax, but how about something along these lines?

``` C#
      public OtherClass OtherValue { get; } ??= SomeExpensiveExpression(); 
```

It would tidy up lots of classes immensely.
</Description>
    <CreatedDate>29/01/2016</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8244</IssueID>
    <Title>C# use of enum type - should be optional</Title>
    <Description>Something that's been bugging me a long time. Now that C# 6 has come up with `using static` concept, I have decided to bring this up for discussion:

When dealing with enums we have constructs similar to the following:

``` C#
DialogResult result = DialogResult.Ok;
```

Now I fully understand why I have to put the first `DialogResult` in that declaration. But I don't understand why the enum type is required in the assignment part. If I omit it the compiler will complain, telling me that a `DialogResult` is expected. So if it know that we are dealing with `DialogResult` surely  it could look in the `DialogResult` type and allow

``` C#
DialogResult result = Ok;
```

This becomes particularly handy when dealing with `[Flag]` enums. Would your rather type all of this:

``` C#
this.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;
```

or all of this:

``` C#
this.Anchor = Bottom | Left | Right | Top;
```

In the context of the assignment, it is pretty obvious what is meant. No need to guess.

Similarly with switch statement and comparisons:

``` C#
switch(form.DialogResult)
{ 
      case Ok:
           ////
           break;
      case Cancel:
           ////
           break;
}

if (form.DialogResult == Ok)
{
  /// do something
}
```

and, of course, return values:

``` C#
private DialogResult Result 
{      get { return Ok; } }
```

and function calls:

``` C#
private SetResult(DialogResult result);
....
SetResult(Ok);
```

In other words **in all context where an expression of the known type is expected**, you can infer the type.

If there is a conflict you have to resolve the ambiguity explicitly:

``` C#
class MyClass 
{
       int Left { get; set;}
       int Right {get; set;}

      void SetAnchorSide(int margin) {....}

      void SetAnchorSide(AnchorStyles side) { ...}

     void SomeCode()
     {
          // Ambiguous - could refer to either this.Left of AnchorStyles.Left
          SetAnchor(Left); 

         // Use either of the following two
         SetAnchor(AnchorStyles.Left);
         SetAnchor(this.Left);
    }
}

```
</Description>
    <CreatedDate>29/01/2016</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8228</IssueID>
    <Title>Autocomplete forces new line</Title>
    <Description>Forgot to file this separately (#2837)...

Update 1 RTM (24720), relevant settings:
C# &gt; Formatting &gt; Wrapping &gt; Leave block on single line  on  (on by default)
C# &gt; Automatic brace completion  off  (newly on by default)

The following code is expected to stay on the same line.

``` C#
namespace ConsoleApplication1
{
    class Program
    {
        public static bool One { get|

        static void Main(string[] args)
        {
        }
    }
}
```

But instead it turns into:

``` C#
        public static bool One {
            get;
```

The same with:

``` C#
public static void Test() { return|
```

Note that if you cancel the autocomplete suggestions of `get`/`return` it does not happen.
</Description>
    <CreatedDate>28/01/2016</CreatedDate>
    <ClosedDate>28/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8211</IssueID>
    <Title>Please consider BatchFixAllProvider more verbose</Title>
    <Description>Hi.
When I run any changes from code-cracker or any other analyzer via BatchFixAllProvider for the whole solution.. 
First in the last step it is blocking operation on UI thread of VS so it gives me [Not Responding] and Second could there be some more verbosity? Like:
- Searching solution to apply change: {change description} A of N files searched, found B occurences
- Then there is a preview window and after hitting Apply
- Applying changes: C of D changes applied
  It would be so awesome.
  Thanks, regards.
</Description>
    <CreatedDate>27/01/2016</CreatedDate>
    <ClosedDate>28/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8151</IssueID>
    <Title>Automatic backing field generation for properties</Title>
    <Description>Add a special "field" keyword similar to "value" in properties, to auto-generate a backing field of the same type as the property. Only generate the backing field if the keyword is present.

``` csharp
public string SomeProperty = "Hello World"
{
    get { return field; }
    set
    {
        if (value != null) // some custom logic
            field = value;
    }
}
```

instead of :

``` csharp
public string SomeProperty
{
    get { return _SomeProperty; }
    set
    {
        if (value != null)
            _SomeProperty = value;
    }
}

private string _SomeProperty = "Hello World";
```
</Description>
    <CreatedDate>25/01/2016</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8126</IssueID>
    <Title>[Bug?] Rename Incorrectly renames original.</Title>
    <Description>If you copy an existing class (either by copying the file, or cut and pasting) Then rename the copy.
It renames the original and where it is referred.

``` vb.net
Class Example

End Class
Class Example ' &lt;- Rename

End Class
```

**Expected**

``` vb.net
Class Example2 ' &lt;- Incorrectly Renamed also.

End Class
Class Example2 ' &lt;- Renamed

End Class
```

**Actual**

``` vb.net
Class Example

End Class
Class Example2 ' &lt;- Renamed Correctly

End Class
```

**Possible Fix**
Add an option to restrict the renaming to just this object definition..
</Description>
    <CreatedDate>23/01/2016</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8125</IssueID>
    <Title>Proposal: Enable implementing interface interface properties with interface implementer.</Title>
    <Description>### Problem

I have nice third-party (Prism) interface like:

``` C#
public interface IInteractionRequestAware {
    INotification Notification { get; set; }

    Action FinishInteraction { get; set; }
}
```

and I want to implement it with my custom INotification implementing class. I have to do it like this:

``` C#
public abstract class BasePopupWindowViewModel&lt;T&gt; : IInteractionRequestAware
    where T : INotification  {
    protected T Confirmation;

    public Action FinishInteraction { get; set; }

    public INotification Notification {
        get { return Confirmation; }
        set { Confirmation = (T)value; }
    }
}
```

Now it is bug-friendly when I want to bind something from Confirmation

``` xaml
&lt;TextBox Text="{Binding Notification.SomePropertyExistingInMyCustomConfirmation}" /&gt;
```

because xaml cannot resolve property in desing-time, because only INotification properties are visible.

Another way to solve my problem is:

``` C#
public abstract class BasePopupWindowViewModel&lt;T&gt; : IInteractionRequestAware 
    where T : INotification {
    private T _customConfirmation;

    public T CustomConfirmation {
        get { return _customConfirmation; }
        set { _customConfirmation = value; }
    }

    public Action FinishInteraction { get; set; }

    public INotification Notification {
        get { return _customConfirmation; }
        set { _customConfirmation = (T)value; }
    }
}
```

and now I can proper bind T properties:

``` xaml
&lt;TextBox Text="{Binding CustomConfirmation.SomePropertyExistingInMyCustomConfirmation}" /&gt;
```

but I have done it in a way far away from clean.

Some other people having problems with this (years ago):
http://stackoverflow.com/questions/9845620/implementing-interface-properties-in-interfaces
http://stackoverflow.com/questions/14028850/c-sharp-interface-property-implementation
(maybe there are some new problems with this, but it is hard to google "implementing interface interface properties with interface implementer")
### Solution

Enabling implementing interface like:

``` C#
public abstract class BasePopupWindowViewModel : IInteractionRequestAware {
        public Action FinishInteraction { get; set; }

        public INotificationImplementer IInteractionRequestAware.Notification { get; set; }
}
```

or explicitely with generic constraint like:

``` C#
public abstract class BasePopupWindowViewModel&lt;T&gt; : IInteractionRequestAware 
        where T : INotification {
        public Action FinishInteraction { get; set; }

        public T IInteractionRequestAware.Notification { get; set; }
}
```

would be useful (and seems non-breaking for everything else).

I know my problem wouldn't exist if interface IInteractionRequestAware was generic like:

``` C#
public interface IInteractionRequestAware&lt;T&gt; where T : INotification {
        T Notification { get; set; }

        Action FinishInteraction { get; set; }
    }
```

but my problem isn't the only way to benefit from proposed change (good example is in the first link to stackoverflow posted before).

(I hope my proposal isn't a duplicate, because really searching "interface interface" in issues was not easy)
</Description>
    <CreatedDate>23/01/2016</CreatedDate>
    <ClosedDate>25/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8099</IssueID>
    <Title>[Test Failure] Compile Error in prtest/win/dbg/unit32 on PR #8083</Title>
    <Description>PR: [#8083](https://github.com/dotnet/roslyn/pull/8083) _[WIP] readonly locals and parameters_ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/3059/

**Issue 1: Compile Error**
error CS2007: Unrecognized option: '/publicsign+' [d:\j\workspace\roslyn_prtest_win_dbg_unit32\src\Compilers\Core\Portable\CodeAnalysis.csproj]
</Description>
    <CreatedDate>22/01/2016</CreatedDate>
    <ClosedDate>22/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8081</IssueID>
    <Title>[Test Failure] Build Timed Out in prtest/mac/dbg/unit32 on PR #8072</Title>
    <Description>PR: [#8072](https://github.com/dotnet/roslyn/pull/8072) *\* by @
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_mac_dbg_unit32/2880/

**Issue 1: Build Timed Out**
The build timed out, or was forcible aborted after reaching the maximum length. View the log right before the flagged timeout message to see what was happening.
</Description>
    <CreatedDate>21/01/2016</CreatedDate>
    <ClosedDate>21/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8071</IssueID>
    <Title>Removal of Semicolon Requirement</Title>
    <Description>Basically borrow from other languages such as Kotlin and Swift: 

"Unlike many other languages, Swift does not require you to write a semicolon (;) after each statement in your code, although you can do so if you wish. However, semicolons are required if you want to write multiple separate statements on a single line" 

Quote from the swift site demonstrates the functionality desired.
</Description>
    <CreatedDate>21/01/2016</CreatedDate>
    <ClosedDate>21/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8067</IssueID>
    <Title>Default analyzer template does not work reliably</Title>
    <Description>I'm on VS 2015 Update 1 and doing following steps:
- Create a new project based on the analyzer with codefix template
- Remove the test and vsix projects, build the analyzer project
- Create a new WinForms project (in a new VS instance)
- Add the analyzer (by selecting the DLL built in step 2)

I'd expect 4 warnings but only get 3, the warning for the Form1 class is missing.
- Then I close the project and VS instance
- Change the analyzer to report as an error instead of an warning and rebuild
- Open the WinForms project again (in a new VS instance)

I'd expect 4 errors. I get 4 errors in the compile output but only 3 errors in the error list. Again the Form1 class is missing from the error list.

(Might be related to issue #3748 since the Form1 class is partial? But note that Settings and Resources classes are also partial and for these the analyzer works, so I'm not sure if its the same cause.)
</Description>
    <CreatedDate>21/01/2016</CreatedDate>
    <ClosedDate>10/06/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8021</IssueID>
    <Title>Access static members via `static` function. (Shared in VB)</Title>
    <Description>This proposal is for use reuse `static`(c#) and `shared`(vb). So that they can be used a function to access the static / shared members of an object.

``` C#
T Foo&lt;T &gt;() where T is Derived
{
  var tmp = static(T).GetNew()
  return tmp
}
```

``` vb.net
Function Foo(Of T As Derived)() as T
  Dim tmp =  Shared(T).GetNew() 
  Return Tmp
End Function
```
</Description>
    <CreatedDate>19/01/2016</CreatedDate>
    <ClosedDate>14/07/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8007</IssueID>
    <Title>Enum autocomplete list contains inherited members</Title>
    <Description>``` C#
using System;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            Test(ConsoleColor.|
        }

        static ConsoleColor ConsoleColor { get; set; }
        static void Test(ConsoleColor color) { }
    }
}
```

The content of autocomplete list after typing the dot differs on whether the `ConsoleColor` property below is defined. If it is, members like `GetUnderlyingType` are present, if not, only the enum values are present in the list (as expected).
</Description>
    <CreatedDate>16/01/2016</CreatedDate>
    <ClosedDate>19/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>8003</IssueID>
    <Title>Please allow fixed size array be used without unsafe</Title>
    <Description>It isn't really unsafe for fixed size array if we could wrap it with exception like general array
</Description>
    <CreatedDate>16/01/2016</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7991</IssueID>
    <Title>Interactive Window Unit Test Flaky </Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/2751/consoleFull#14857372926baeffce-8504-4013-981e-7f26b5265816

[The PR](https://github.com/dotnet/roslyn/pull/7934#issuecomment-172045526) that kicked off this build made no code changes.
</Description>
    <CreatedDate>15/01/2016</CreatedDate>
    <ClosedDate>16/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7974</IssueID>
    <Title>Closed Samples should be moved to Open or deleted</Title>
    <Description>If these are of any use they should be in the Open.
</Description>
    <CreatedDate>15/01/2016</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7972</IssueID>
    <Title>"Derived Types" in Solution Explorer doesn't show all types</Title>
    <Description>1. Open Roslyn in Roslyn. I was running the Update 1 bits, and was synced to 4f7ee0f0ec0189f91d6ad06e7a090374a5b93216.
2. Find Workspace.cs, and expand the file to see the class in Solution Explorer.
3. Right click on the class, choose Derived Types.

_Expected:_ I should see many types, since we have many derivations.
_Actual:_ I see just this:

![image](https://cloud.githubusercontent.com/assets/201340/12341226/e9c0e47c-bad4-11e5-966e-4c7d087b7b82.png)
</Description>
    <CreatedDate>14/01/2016</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7918</IssueID>
    <Title>System.IO.IOException while rehydrating syntax trees</Title>
    <Description>```
Void WinIOError(Int32, System.String)
System.IO.MemoryMappedFiles.MemoryMappedView CreateView(Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, Int64, Int64)
System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor(Int64, Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
System.IO.Stream CreateReadableStream()
Microsoft.CodeAnalysis.Text.SourceText ReadText(System.Threading.CancellationToken)
Microsoft.CodeAnalysis.Text.SourceText Recover(System.Threading.CancellationToken)
T GetValue(System.Threading.CancellationToken)
T GetValue(System.Threading.CancellationToken)
Microsoft.CodeAnalysis.TextAndVersion GetValue(System.Threading.CancellationToken)
Microsoft.CodeAnalysis.Text.SourceText GetText(System.Threading.CancellationToken)
Boolean OverlapsHiddenPosition(Microsoft.CodeAnalysis.SyntaxTree, Microsoft.CodeAnalysis.Text.TextSpan, System.Threading.CancellationToken)
Boolean TrySimplifyTypeNameExpression(Microsoft.CodeAnalysis...
```

```
Void WinIOError(Int32, System.String)
System.IO.MemoryMappedFiles.MemoryMappedView CreateView(Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, Int64, Int64)
System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor(Int64, Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
System.IO.Stream CreateReadableStream()
System.IO.Stream ReadStream(System.Threading.CancellationToken)
TRoot Recover(System.Threading.CancellationToken)
T GetValue(System.Threading.CancellationToken)
T GetValue(System.Threading.CancellationToken)
Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode GetRoot(System.Threading.CancellationToken)
System.Collections.Generic.IEnumerable`1[Microsoft.CodeAnalysis.Diagnostic] GetDiagnostics(System.Threading.CancellationToken)
System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.Diagnostic] GetDiagnosticsForSyntaxTree(Microsoft.CodeAnalysis.CompilationStage, Microsoft.CodeAnalysis.SyntaxTree, System.Nullable`...
```

```
Void WinIOError(Int32, System.String)
System.IO.MemoryMappedFiles.MemoryMappedView CreateView(Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, Int64, Int64)
System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor(Int64, Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
System.IO.Stream CreateReadableStream()
System.IO.Stream ReadStream(System.Threading.CancellationToken)
TRoot Recover(System.Threading.CancellationToken)
T GetValue(System.Threading.CancellationToken)
T GetValue(System.Threading.CancellationToken)
Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode GetRoot(System.Threading.CancellationToken)
System.Collections.Generic.IEnumerable`1[Microsoft.CodeAnalysis.Diagnostic] GetDiagnostics(System.Threading.CancellationToken)
System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.Diagnostic] GetDiagnosticsForSyntaxTree(Microsoft.CodeAnalysis.CompilationStage, Microsoft.CodeAnalysis.SyntaxTree, System...
```
</Description>
    <CreatedDate>13/01/2016</CreatedDate>
    <ClosedDate>14/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7912</IssueID>
    <Title>Completion word breaking heuristics failing with leading _</Title>
    <Description>``` C#
        void M()
        {
            int _testStuff;

        }
```

On the blank line, type `stuff` and `_testStuff` will be offered. 
Type `_stuff` and it will not be offered. I expect it to be offered.
</Description>
    <CreatedDate>12/01/2016</CreatedDate>
    <ClosedDate>10/04/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7879</IssueID>
    <Title>How to get the Keywords using Roslyn</Title>
    <Description>I need a script editor that provides intellisense and squiggling (something like  DotNetpad )

With Recommender I am not able to get the "keywords" which was possible using ICompletionService which was public in earlier versions of Roslyn (Roslyn.Services.ICompletionProvider).

Can you please let me know whether we have any thing similar to ICompletionService  in the latest Microsoft.CodeAnalysis version or any update on making "ICompletionService" public?
</Description>
    <CreatedDate>11/01/2016</CreatedDate>
    <ClosedDate>11/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7861</IssueID>
    <Title>Incorrect "Cast is redundant" on nullables assigned to dynamic</Title>
    <Description>``` C#
class Test
{
    public int Value;
}

static void Main(string[] args)
{
    dynamic test = new Test();
    int? nullable = 4;

    test.Value = (int)nullable;
}
```

I get the `(int)` marked as unnecessary cast. The suggested removal results in runtime error.

(Update 1 RTM 24720)
</Description>
    <CreatedDate>08/01/2016</CreatedDate>
    <ClosedDate>02/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7835</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure (+1 more) in prtest/win/vsi/p1 on PR #7830</Title>
    <Description>PR: [#7830](https://github.com/dotnet/roslyn/pull/7830) _Cap the amount of time we're willing to search through metadata._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p1/163/

**2 Test Failures:**
BasicWPF.Rename from code behind file
BasicWPF.Find all references from code behind file

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

BasicWPF.xml

**Issue 2: Compile Error**
</Description>
    <CreatedDate>07/01/2016</CreatedDate>
    <ClosedDate>08/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7834</IssueID>
    <Title>[Test Failure] Individual TAO Test Failure (+1 more) in prtest/win/vsi/p3 on PR #7830</Title>
    <Description>PR: [#7830](https://github.com/dotnet/roslyn/pull/7830) _Cap the amount of time we're willing to search through metadata._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p3/161/

**2 Test Failures:**
CSharpWPF.Rename from code behind file and Undo after build
CSharpWPF.Find all references from code behind file

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

CSharpWPF.xml

**Issue 2: Compile Error**
error CS2012: Cannot open 'C:\Users\dotnet-bot\AppData\Local\Temp\2\Closed\Test\Files\CSharpWPFtest\WpfControlLibrary1\obj\Debug\WpfControlLibrary1.dll' for writing -- 'The process cannot access the file 'C:\Users\dotnet-bot\AppData\Local\Temp\2\Closed\Test\Files\CSharpWPFtest\WpfControlLibrary1\obj\Debug\WpfControlLibrary1.dll' because it is being used by another process.'
</Description>
    <CreatedDate>07/01/2016</CreatedDate>
    <ClosedDate>08/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7823</IssueID>
    <Title>Improving async functions</Title>
    <Description>For now async functions are hardcoded to always return Task object. This is enough for most cases, but could be better to be able return Task-derived types or just any type that have specified certain members. These members are obvious now:
- passing action in constructor
- property IsCompleted
- method GetAwaiter

It could be even better to specify another optional method:
 SetCallParams (Parameters As Dictionary (Of String, Object). 
This method may be used to pass arguments provided to calling async function. Alternativelly there may be another keyword (for example AsyncObj), available only in async fynctions, that specify returned object (now Task).

This improvement could be helpful for implementing custom awaiters.
</Description>
    <CreatedDate>07/01/2016</CreatedDate>
    <ClosedDate>07/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7821</IssueID>
    <Title>[Proposal] Generics restriction for operator</Title>
    <Description>Generic restriction is really lake the option for restriction to operators like &lt;&gt; +- or even casting
the generic code can dramatically improved by this restriction, for example writing binary tree without the needs for IComparable 
</Description>
    <CreatedDate>07/01/2016</CreatedDate>
    <ClosedDate>07/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7808</IssueID>
    <Title>Expand new() generic constraint to support constructor parameters</Title>
    <Description>Today, the only way to create an instance of the generic type in a generic class is to constrain the class with a `new()` constraint, which limits us to parameterless constructors only. It would be very useful to extend this to constructors with specific typed parameters.

Here's a contrived example,

``` cs
public class Foo&lt;T&gt; where T : FooBase, new(JObject)
{
  public T FromJson(JObject data)
  {
    return new T(data);
  }
}
```

In this case, as long as T has a constructor that accepts a `JObject` type parameter, code will compile.
</Description>
    <CreatedDate>06/01/2016</CreatedDate>
    <ClosedDate>07/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7807</IssueID>
    <Title>Unit test timeout</Title>
    <Description>http://dotnet-ci.cloudapp.net/view/roslyn/job/roslyn_master_win_dbg_unit32/612/

The log for Roslyn.Services.Editor.VisualBasic.UnitTests.dll is empty, so it's probably the one that timed out.  Most likely, it showed an assert dialog.
</Description>
    <CreatedDate>06/01/2016</CreatedDate>
    <ClosedDate>07/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7796</IssueID>
    <Title>[Test Failure] test output directory can't be deleted because it is locked</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_dbg_unit64/493/

here is copy of output

The test runner has encountered a non-test-related exception.
00:26:41 To be clear, this is a problem with the test runner, not a test.
00:26:41 0a7ba10e-c611-4fb0-aefe-0c2efd6fe413
00:26:41 System.IO.IOException: The process cannot access the file 'd:\j\workspace\roslyn-internal_prtest_win_dbg_unit64\Open\Binaries\Debug\TestResults\xxx2016-01-06 08_10_50\Out' because it is being used by another process.
00:26:41    at System.IO.Directory.DeleteHelper(String fullPath, String userPath, Boolean recursive, Boolean throwOnTopLevelDirectoryNotFound)
00:26:41    at System.IO.Directory.Delete(String fullPath, String userPath, Boolean recursive, Boolean checkHost)
00:26:41    at RoslynBuildAndTest.TestRunner.DeleteTestResultsFile(String resultsFile) 
</Description>
    <CreatedDate>06/01/2016</CreatedDate>
    <ClosedDate>12/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7782</IssueID>
    <Title>NRE when building csc.exe</Title>
    <Description>Here's console output:

```
17:16:46 C:\Users\dotnet-bot\.nuget\packages\Microsoft.Net.Compilers\1.2.0-beta1-20151231-01\tools\Microsoft.CSharp.Core.targets(67,5): error MSB3883: Unexpected exception:  [d:\j\workspace\roslyn_prtest_win_dbg_unit32\src\Compilers\CSharp\csc\csc.csproj]
17:16:47 C:\Users\dotnet-bot\.nuget\packages\Microsoft.Net.Compilers\1.2.0-beta1-20151231-01\tools\Microsoft.CSharp.Core.targets(67,5): error : System.NullReferenceException: Object reference not set to an instance of an object. [d:\j\workspace\roslyn_prtest_win_dbg_unit32\src\Compilers\CSharp\csc\csc.csproj]
17:16:47 C:\Users\dotnet-bot\.nuget\packages\Microsoft.Net.Compilers\1.2.0-beta1-20151231-01\tools\Microsoft.CSharp.Core.targets(67,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [d:\j\workspace\roslyn_prtest_win_dbg_unit32\src\Compilers\CSharp\csc\csc.csproj]
```

The error occurs in http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/2525/
</Description>
    <CreatedDate>05/01/2016</CreatedDate>
    <ClosedDate>06/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7778</IssueID>
    <Title>Put search term in the Find Results title bar</Title>
    <Description>When I do "Find All References" or "Go To Implementation" (where there is more than one implementation), my search term is nowhere in sight. It would be super helpful to place the search term in the title bar of the Find Results window.

This is a pain when I'm navigating a code base that I am unfamiliar with and can't remember the name of the method I am finding the references for (note: this problem doesn't exist for "Go To Definition" where I have only one option). 
</Description>
    <CreatedDate>04/01/2016</CreatedDate>
    <ClosedDate>30/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7771</IssueID>
    <Title>CodeCompletion and internal classes</Title>
    <Description>Hello, guys!
It seems strange to use internal classes in "Microsoft.CodeAnalisys.Completion".
It seems to me that this functionality should be open.
</Description>
    <CreatedDate>04/01/2016</CreatedDate>
    <ClosedDate>11/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7730</IssueID>
    <Title>Public Sign does not work on Roslyn</Title>
    <Description>Consider this branch:
- https://github.com/jaredpar/roslyn/tree/public-sign

This uses the latest toolsets, which have `/publicsign` support, to replace `FakeSign` in the build with `/publicsign`.  I have verified that `/publicsign` is being passed to the compiler via the MSBuild logs but also verified the signed bit is not being set.  No error is produced and `/publicsign` is not actually signing the bits.  
</Description>
    <CreatedDate>29/12/2015</CreatedDate>
    <ClosedDate>19/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7715</IssueID>
    <Title>Proposal: Indirect typing</Title>
    <Description>It would be very useful (especially for MVC/EF projects) to be able to define types as being the same type as something else (eg. a field or property) rather than directly referring to the type by name.  I will give an example: -

In EF, if you have a large number of data model classes, they would typically have primary key ID fields of different types.  They may be byte, int16, int32, int64, guid etc.  When you create a foreign key field or when you create a field in an MVC model class to use data from or search the data model field, you have to look up the correct type.  An even more significant problem is that if you want to change the type, there is no automatic method for updating all the various properties and fields in other classes/structs which should have the same type as the main one.

I would like to propose a new compiler keyword, such as sametypeas (c#) or SameTypeAs (VB.NET) to solve this problem.  An example of this would be (in VB.NET as that is my primary language): -

Class Customer
Public Property ID As Long
...
End Class

Class [Order]
Public Property ID As Long
Public Property CustomerID As SameTypeAs([Customer].[ID])
...
End Class

Ideally the compiler should be capable of using this keyword across assembly boundaries into referenced assemblies - not just within the current assembly.
</Description>
    <CreatedDate>28/12/2015</CreatedDate>
    <ClosedDate>29/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7670</IssueID>
    <Title>[Test Failure] Build Timed Out (+1 more) in prtest/win/dbg/unit32 on PR #7664</Title>
    <Description>PR: [#7664](https://github.com/dotnet/roslyn/pull/7664) _Merge master into future_ by @roslyn-bot
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/2379/

**Issue 1: Build Timed Out**
The build timed out, or was forcible aborted after reaching the maximum length. View the log right before the flagged timeout message to see what was happening.

**Issue 2: One or more test assemblies failed to run**
One or more test assemblies did not produce results, possible causes:

1) The build was aborted out due to a long running or deadlocked test.
2) The test run for this assembly failed due to xUnit crashing (possibly due to a unhandled exception on a background thread or a stack overflow).
3) The test caused an assert dialog to be opened, which blocked the run.

See the Console Log for more information.
</Description>
    <CreatedDate>22/12/2015</CreatedDate>
    <ClosedDate>22/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7666</IssueID>
    <Title>Adding diagnostics in random places from an analyzer causes VS to crash</Title>
    <Description>I created an analyzer with a SymbolAction. In that SymbolAction I iterated over properties and added diagnostics for the types of those properties (by mistake). When my SymbolAction added diagnostics to types in different projects, VS crashed. Hard. First with

```
FatalExecutionEngineError occurred
Message: Managed Debugging Assistant 'FatalExecutionEngineError' has detected a problem in 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe'.
Additional information: The runtime has encountered a fatal error. The address of the error was at 0x17380666, on thread 0x4e0. The error code is 0x80131623. This error may be a bug in the CLR or in the unsafe or non-verifiable portions of user code. Common sources of this bug include user marshaling errors for COM-interop or PInvoke, which may corrupt the stack.

&gt;   Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken)   Unknown
    [Native to Managed Transition]  
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.IsDiagnosticSuppressed(string id, Microsoft.CodeAnalysis.Location location, out Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo info)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.ApplySourceSuppressions(Microsoft.CodeAnalysis.Diagnostic diagnostic, Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.ISymbol symbolOpt) Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSource(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics, Microsoft.CodeAnalysis.Compilation compilation)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalysisResult.StoreAnalysisResult(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Compilation compilation)  Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken)   Unknown
    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__54&gt;(ref Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__54 stateMachine)  Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Unknown
    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.(ref Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;&gt;c__DisplayClass51_2.&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d stateMachine) Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Unknown
    mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;.InnerInvoke() Unknown
    mscorlib.dll!System.Threading.Tasks.Task.Execute()  Unknown
    mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)   Unknown
    mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown
    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown
    mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)    Unknown
    mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution) Unknown
    mscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() Unknown
    mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()    Unknown
    mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() Unknown

```

And after that with

```
An unhandled exception of type 'System.ArgumentException' occurred in Microsoft.CodeAnalysis.dll

Additional information: SyntaxTree '
...
&lt;The entire source file content goes in here&gt;
...
' not found to remove

&gt;   Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken)   Unknown
    [Native to Managed Transition]  
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.IsDiagnosticSuppressed(string id, Microsoft.CodeAnalysis.Location location, out Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo info)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.ApplySourceSuppressions(Microsoft.CodeAnalysis.Diagnostic diagnostic, Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.ISymbol symbolOpt) Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSource(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics, Microsoft.CodeAnalysis.Compilation compilation)    Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalysisResult.StoreAnalysisResult(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Compilation compilation)  Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken)   Unknown
    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__54&gt;(ref Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__54 stateMachine)  Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Unknown
    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.(ref Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;&gt;c__DisplayClass51_2.&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d stateMachine) Unknown
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Unknown
    mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;.InnerInvoke() Unknown
    mscorlib.dll!System.Threading.Tasks.Task.Execute()  Unknown
    mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)   Unknown
    mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown
    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown
    mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)    Unknown
    mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution) Unknown
    mscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() Unknown
    mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()    Unknown
    mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() Unknown

```
</Description>
    <CreatedDate>22/12/2015</CreatedDate>
    <ClosedDate>30/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7661</IssueID>
    <Title>VS2015.1: F12 in the interactive window can produce weird results</Title>
    <Description>I was testing some code in the interactive window and was bugged that i couldn't see any documentation in IntelliSense so i pressed `F12` :smile: but MetadataAsSource wasn't any more helpful :wink:

On the right side you can see the MetadataAsSourceProject opened by pressing F12 in the interactive window, on the left side you see the MetadataAsSourceProject opened by copying the code from InteractiveWindow into my source and pressing F12 there.
![interactivemetadataassource](https://cloud.githubusercontent.com/assets/7110884/11954984/bf6738ae-a8ad-11e5-8a1d-9fac02f4245d.png)
</Description>
    <CreatedDate>22/12/2015</CreatedDate>
    <ClosedDate>05/10/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7630</IssueID>
    <Title>[Feature] Yield return sub-sequence, yield return multiple items, yield SelectMany</Title>
    <Description>It feels intuitive to have a simple construct that will allow yielding a sub-sequence of items rather than one   item at a time. Currently this involves writing a loop manually or using LINQ.

This is something that people were asking for in past: http://stackoverflow.com/questions/3851997/yield-return-many

Typical suggested syntax (copied from link above):

``` csharp
public static IEnumerable&lt;T&gt; PreorderTraversal&lt;T&gt;(this BinaryTree&lt;T&gt; root)
{
    if (root == null) yield break;
    yield return root.Item;
    yield foreach root.Left.PreorderTraversal();
    yield foreach root.Right.PreorderTraversal();
}
```

F# knows this as `yield!` apparently: http://theburningmonk.com/2011/09/fsharp-yield-vs-yield
</Description>
    <CreatedDate>20/12/2015</CreatedDate>
    <ClosedDate>21/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7580</IssueID>
    <Title>Proposal: optimize LINQ code</Title>
    <Description>LINQ (the `Enumerable` flavor) is a huge productivity boost.
Unfortunately it comes with an additional runtime cost: more delegates calls, often lambda captures, more allocations...
This means that on hot paths, LINQ may not be an appropriate choice. Actually, I've read that Roslyn avoids LINQ on hot paths for this very reason.

In many (most?) cases, the compiler could turn the LINQ code into optimized `for` (`foreach`) loops. The proof that this is possible is that [LinqOptimizer from Nessos](http://nessos.github.io/LinqOptimizer/) does just that, at runtime.

I suggest that Roslyn performs the transformation done by LinqOptimizer at compiler-time when it can (i.e. no call to unknown methods, no unsupported construct). If it can't, it bails out to the library-based approach used today.

Benefits: 
- everyone gets a speed boost (15x on some queries) and reduced memory usage for free.
- even people who don't know about LinqOptimizer (i.e. almost everyone).
- this makes LINQ usable again in more situations.
- _transformation happens at compile-time_. Today this can be done with LinqOptimizer, but at the cost of creating Expression trees and compiling them at runtime. :(

Main drawback is certainly that this is a large and complex code transformation to include and support in the compiler. I think that it fits well with the current theme of creating a leaner, more performant language with reduced memory allocations; and I hope you'd think it's worthy of including in the compiler proper.

In the case you don't want to include this in the compiler itself, would there be any way to make the compiler extensible so that such transformation passes could easily be included by projects that want them?
Just as we can use custom Roslyn diagnostics by including Nuget packages, it would be nice to be able to use an AST transform in the same way. Download a nuget package and have all your LINQ code optimized at compilation time. This approach would bring almost all benefits: the LINQ code is optimized but you don't have to support it in the compiler itself. Devs would need to discover it, though.
</Description>
    <CreatedDate>17/12/2015</CreatedDate>
    <ClosedDate>20/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7566</IssueID>
    <Title>"Unexpected null" from extract method</Title>
    <Description>While trying to extract method, got this exception from the rename phase. Dump at rchande\dumps\nulltextbuffer.dmp

```
Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.Contract.ThrowIfNull&lt;System.__Canon&gt;(System.__Canon value, string message)   Unknown
```

&gt;   Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InitializeOpenBuffers(Microsoft.VisualStudio.Text.SnapshotSpan triggerSpan) Line 175    C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InlineRenameSession(Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService renameService, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.VisualStudio.Text.SnapshotSpan triggerSpan, Microsoft.CodeAnalysis.Editor.IInlineRenameInfo renameInfo, Microsoft.CodeAnalysis.Editor.Host.IWaitIndicator waitIndicator, Microsoft.CodeAnalysis.Editor.ITextBufferAssociatedViewService textBufferAssociatedViewService, Microsoft.VisualStudio.Text.ITextBufferFactoryService textBufferFactoryService, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Editor.IRefactorNotifyService&gt; refactorNotifyServices, Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener asyncListener) Line 140 C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService.StartInlineSession(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) Line 62   C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.Execute(Microsoft.VisualStudio.Text.ITextBuffer textBuffer, Microsoft.VisualStudio.Text.Editor.ITextView view, System.Threading.CancellationToken cancellationToken) Line 174  C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.ExecuteCommand.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext) Line 104    C#
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, System.Action&lt;Microsoft.CodeAnalysis.Editor.Host.IWaitContext&gt; action)  Unknown
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs args, System.Action nextHandler) Line 107   C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers&lt;Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs&gt;(System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs&gt;&gt; commandHandlers, Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs args, System.Action lastHandler) Line 104  C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Execute&lt;Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs&gt;(Microsoft.VisualStudio.Utilities.IContentType contentType, Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs args, System.Action lastHandler) Line 71  C#
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteExtractMethod(Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType, System.Action executeNextCommandTarget)  Unknown
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType)    Unknown
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut) Unknown
&gt;     Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)   Unknown
&gt;     Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
&gt;     Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)  Unknown
&gt;     Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)  Unknown
&gt;     Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Unknown
</Description>
    <CreatedDate>17/12/2015</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7521</IssueID>
    <Title>Compilation errors after installing VS2015 Update 1 -  "csc.exe" exited with code -2146232797.</Title>
    <Description>After installing VS2015 update 1(version: 14.0.24720.00), on compilation of our solution we got the error code: "csc.exe" exited with code -2146232797 when compiling some of our unit test projects.  

To replicate the issue:

```
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq.Expressions;

namespace RoslynTesting
{
    [TestClass]
    public class RoslynBug
    {
        [TestMethod]
        public void Method()
        {
            var value = Tester.Is&lt;SomeType&gt;(y =&gt; y.Enum == (SomeEnum?)null);  // fails on this line
        }

        public static class Tester
        {
            public static TValue Is&lt;TValue&gt;(Expression&lt;Func&lt;TValue, bool&gt;&gt; parameterValue)
            {
                return default(TValue);
            }
        }

        public class SomeType
        {
            public SomeEnum? Enum { get; set; }
        }

        public enum SomeEnum { Value1 = 1, Value2 = 2 }
    }
}

```
</Description>
    <CreatedDate>16/12/2015</CreatedDate>
    <ClosedDate>16/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7509</IssueID>
    <Title>Unable to enable experimental language features through project files</Title>
    <Description>As just discussed in the Gitter channel, I want to enable an experimental language feature, and start debugging that in Visual Studio. However, as mentioned by @jasonmalinowski, that's currently not possible.

Steps I've taken (on VS 2015 Update 1):
- checked out the `future` branch, and built that
- started debugging the `VisualStudioSetup` project

When creating a numeric literal with an underscore, I got the following diagnostic:

&gt; Feature 'digit separators' is only available in 'experimental' language version.

I've tried to enable this by adding the following command line argument `/feature:digitSeparators` to `devenv.exe`. However, that only triggered the command line arguments help window of Visual Studio, so that doesn't work.
</Description>
    <CreatedDate>15/12/2015</CreatedDate>
    <ClosedDate>23/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7507</IssueID>
    <Title>Feature Request: Allow method type parameter names to match method names</Title>
    <Description>``` C#
void T&lt;T&gt;() {}
```

There is no reason that this should be illegal, and both Mono and the spec allow it.

&gt; Error CS0694: Type parameter 'T' has the same name as the containing type, or method
</Description>
    <CreatedDate>15/12/2015</CreatedDate>
    <ClosedDate>16/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7488</IssueID>
    <Title>Proposal: Private Parameters</Title>
    <Description>I saw someone asking this on StackOverflow. The basic syntax is this:

``` c#
public void Method(string str, private int x =  0)
{
    // do something
}
```

For anyone calling the function publicly, from outside the class, they get this function:
`public void Method(string str);` and the parameter `x` is completely abstracted from them.

However, anyone inside the class calling `Method()` sees `Method(string str, int x);`

This method will actually compile as this:

``` C#
public void Method(string str)
{
    Method(str, 0)
}
private void method(string str, int x)
{
   // do something
}
```

The other accessors, `public`, `protected`, and `internal` can also be used and work in the same fashion
</Description>
    <CreatedDate>15/12/2015</CreatedDate>
    <ClosedDate>15/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7482</IssueID>
    <Title>Make Compilation.Emit with EmitOptions(metadataOnly: true) tolerate errors</Title>
    <Description>We use `Compilation.Emit` with `EmitOptions(metadataOnly: true)` in the IDE to enable semantic analysis to work across projects and across languages. But currently `Emit` fails unless the program is without errors.

Things would be improved it it were (somewhat) resilient to (some kinds of) errors. How resilient it is and how many different kinds of common errors it is resilient to are quality of implementation issues that can be improved over time.

This issue is to kick off the work, initially in the C# compiler. Part of that work will be creating a mechanism for communicating _error symbols_ through metadata.
</Description>
    <CreatedDate>15/12/2015</CreatedDate>
    <ClosedDate>28/08/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7467</IssueID>
    <Title>Add support for packages containing ICompileModule</Title>
    <Description>_From @anurse on January 14, 2015 23:56_
- Scan dependencies for Preprocess flag
- Load 'em up
- Give them to RoslynCompiler somehow
- :sparkles: Run them :sparkles: 

_Copied from original issue: aspnet/dnx#1072_
</Description>
    <CreatedDate>14/12/2015</CreatedDate>
    <ClosedDate>14/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7439</IssueID>
    <Title>EE: Missing compile error when evaluating base class method</Title>
    <Description>From External Feedback https://vs-feedback/comment/515306:

The CLR doesn't support real func eval of methods without doing virtual dispatch.  The legacy EE shows an error message when a base class method is evaluated.  The new EE shows the wrong value.

**Repro:**
Debug the following code:

``` C#
static class Program
{
    static void Main()
    {
        A a = new A();
        a.DoSomething();
    }
    class B
    {
        public override string ToString() =&gt; "B";
    }
    class A : B
    {
        public override string ToString() =&gt; "A";

        public void DoSomething()
        {
            string s = base.ToString();
            System.Diagnostics.Debugger.Break();
        }
    }
}
```

Evaluate "base.ToString()"

**Expected (Legacy EE behavior):** Error: A call to a virtual method or property through the base keyword will always call the most derived function while debugging.
**Actual:** "A"
</Description>
    <CreatedDate>11/12/2015</CreatedDate>
    <ClosedDate>15/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7435</IssueID>
    <Title>[Test Failure] FileHandle is locked. -  CrossLanguage.xml</Title>
    <Description>http://dotnet-ci.cloudapp.net/view/roslyn-internal/job/roslyn-internal_future_win_vsi_p1/58/

it looks like devenv.exe is the one holding onto the filehandle. and test screenshot (http://dotnet-ci.cloudapp.net/view/roslyn-internal/job/roslyn-internal_future_win_vsi_p1/58/artifact/Open/Binaries/Release/VSIntegrationTestLogs/CrossLanguage.html) shows that VS is still having the project opened in VS. test seems flaky

...
Individual TAO Test Failure

Failing integration tests: CrossLanguage.xml 
Indication 1 

Failed to delete project files after 10 seconds

Failed to create a test project because a previous project with the same name could not be deleted. Check FileHandlesDump.txt to see which process is to blame. This can happen when the build machine is under heavy load. Please notify @dotnet/roslyn-infrastructure and let them re-run this test suite.
Indication 2 
...

Handle v3.42
Copyright (C) 1997-2008 Mark Russinovich
Sysinternals - www.sysinternals.com

devenv.exe         pid: 2536   18C4: C:\Users\dotnet-bot\AppData\Local\Temp\VBProj
devenv.exe         pid: 2536   286C: C:\Users\dotnet-bot\AppData\Local\Temp\VBProj
devenv.exe         pid: 2536   2CA0: C:\Users\dotnet-bot\AppData\Local\Temp\VBProj
</Description>
    <CreatedDate>11/12/2015</CreatedDate>
    <ClosedDate>14/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7427</IssueID>
    <Title>SA1200 (stylecop analyzer rule) not working in live analysis, but works fine for build</Title>
    <Description>See https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/1939#issuecomment-163775747 for repro steps

I wasn't able to repro this for a default C# project - SA1200 works fine for it. The repro is consistent on StyleCop solution.

Implementation of SA1200 registers a SyntaxNode action with SyntaxKind.CompilationUnit, and that doesn't seem to be getting invoked during live analysis for StyleCop solution.
</Description>
    <CreatedDate>11/12/2015</CreatedDate>
    <ClosedDate>16/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7426</IssueID>
    <Title>[Test Failure] Hung processs on target machine in prtest/lin/dbg/unit32 on PR #7414</Title>
    <Description>PR: [#7414](https://github.com/dotnet/roslyn/pull/7414) *\* by @
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_lin_dbg_unit32/1996/

**Issue 1: Hung processs on target machine**
A process is hung on the target machine and preventing it from cleaning up the workspace

Console log shows several IO related errors on the machine.
</Description>
    <CreatedDate>11/12/2015</CreatedDate>
    <ClosedDate>11/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7421</IssueID>
    <Title>Formatting, New Lines not works for "else"</Title>
    <Description>Bug in Update 1. Before all was fine.

I have all check boxes checked under Options/Text Editor/C#/Formatting/New Lines

But when I try a reformat next code:

``` cs
if(1 &gt; 2) {
} else {
}
```

it formatted as:

``` cs
if(1 &gt; 2)
{
}
else { // &lt;-- this should be on the new line
}
```
</Description>
    <CreatedDate>11/12/2015</CreatedDate>
    <ClosedDate>11/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7329</IssueID>
    <Title>[Test Failure] CSharpGoToImplementation reports "The symbol has no implementations."</Title>
    <Description>PR: [#7290](https://github.com/dotnet/roslyn/pull/7290) _Weed out flaky VSI tests_ by @davkean
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_vsi_p2/88/

**1 Test Failures:**
CSharpGoToImplementation.Go To Implementation opens in a provisional tab if document wasn't already open

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

CSharpGoToImplementation.xml

Screenshot:

![image](https://cloud.githubusercontent.com/assets/1103906/11665742/cccac1ca-9d9d-11e5-87e2-c18a8b3eae5b.png)
</Description>
    <CreatedDate>08/12/2015</CreatedDate>
    <ClosedDate>15/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7322</IssueID>
    <Title>with statement</Title>
    <Description>Recently I pretty often start seeing patterns like:

``` csharp
class MyClass
{
  public Type1 Field1 { get; set; }
  public Type2 Field2 { get; set; }
  // ...
  public MyClass WithField1(Type1 field1)
  {
    Field1 = field1;
    return this;
  }
  // ...
}
```

This seems pretty weird to repeat yourself million times

Should we provide pascal like operator for this?

``` csharp
class MyClass
{
  public Type1 Field1 { get; set; }
  public Type2 Field2 { get; set; }
}

// somewhere in the code (we do have initializer for the constructor but what later?):
MyClass c = new MyClass();
with (c)
{
   .Field1 = something1;
   .Field2 = something2;
   // ...
}
```
</Description>
    <CreatedDate>08/12/2015</CreatedDate>
    <ClosedDate>20/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7284</IssueID>
    <Title>[Test Failure] "BasicExpressionEvaluator.Evaluate simple expressions" Test Failure in prtest/win/vsi/p0 on PR #426</Title>
    <Description>PR: [#426](https://github.com/dotnet/roslyn-internal/pull/426) _Introduce a throwing version of ScreenshotExceptionLogger.SaveScreen_ by @davkean
Failure: http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_vsi_p0/68/

**1 Test Failures:**
BasicExpressionEvaluator.Evaluate simple expressions (DTEE)

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

BasicExpressionEvaluator.xml
</Description>
    <CreatedDate>07/12/2015</CreatedDate>
    <ClosedDate>11/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7283</IssueID>
    <Title>[Test Failure] "CrossLanguage.Test cross-language goto definition" Test Failure in prtest/win/vsi/p1 on PR #426</Title>
    <Description>PR: [#426](https://github.com/dotnet/roslyn-internal/pull/426) _Introduce a throwing version of ScreenshotExceptionLogger.SaveScreen_ by @davkean
Failure: http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_vsi_p1/68/

**1 Test Failures:**
CrossLanguage.Test cross-language goto definition

**Issue 1: Individual TAO Test Failure**
Failing integration tests: 

CrossLanguage.xml
</Description>
    <CreatedDate>07/12/2015</CreatedDate>
    <ClosedDate>07/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7274</IssueID>
    <Title>Relax CS0841 for the nameof operator.</Title>
    <Description>I'm currently working on some code that generates some expression trees and it would be useful when declaring parameter expressions to give them the names of the local variables that they are being assigned to for debugging purposes.
Currently the following code fails:

``` csharp
var keys = Expression.Parameter(typeof(string[]), nameof(keys));
//
Error   CS0841  Cannot use local variable 'keys' before it is declared
```

A workaround is to do the following:

```
ParameterExpression keys;
keys = Expression.Parameter(typeof(string[]), nameof(keys));
```

But that's verbose and ugly. I'd prefer if I could just `nameof` on the same line as I declare the variable.
</Description>
    <CreatedDate>07/12/2015</CreatedDate>
    <ClosedDate>07/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7235</IssueID>
    <Title>C# Interactive should support stdin e.g. Console.ReadLine()</Title>
    <Description>In C# interactive, type:

``` C#
Console.ReadLine()
```

and press Enter. C# interactive is now 'hung'. I understand why. The interactive host process is waiting for input on stdin. You can 'escape' by clicking on the toolbar to reset the session..

However, would it be possible to support this by piping input from the interactive window during evaluation?
</Description>
    <CreatedDate>04/12/2015</CreatedDate>
    <ClosedDate>23/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7194</IssueID>
    <Title>[Test Failure] Build Timed Out in prtest/mac/dbg/unit32 on PR #6983</Title>
    <Description>this is timeout on mono.

...

PR: [#6983](https://github.com/dotnet/roslyn/pull/6983) *\* by @
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_mac_dbg_unit32/1605/

**Issue 1: Build Timed Out**
The build timed out, or was forcible aborted after reaching the maximum length. View the log right before the flagged timeout message to see what was happening.
</Description>
    <CreatedDate>02/12/2015</CreatedDate>
    <ClosedDate>02/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7162</IssueID>
    <Title>CSharpRazor fails with MissingMethodException</Title>
    <Description>In the WebUtilities action:

```
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.MissingMethodException: Method not found: 'Microsoft.Html.Editor.Document.HtmlEditorDocument Microsoft.Html.Editor.Document.HtmlEditorDocument.FromTextView(Microsoft.VisualStudio.Text.Editor.ITextView)'.
    at Microsoft.VisualStudio.Web.Common.TestServices.Services.HtmlParseTreeService.&lt;&gt;c.&lt;IsReady&gt;b__0_0()
    --- End of inner exception stack trace ---
    at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
    at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
    at System.Delegate.DynamicInvokeImpl(Object[] args)
    at System.Delegate.DynamicInvoke(Object[] args)
    at Microsoft.Test.Apex.Hosts.Services.UIThreadInvokerHelper.InvokeByFunc(Object[] values) in f:\dd\src\Omni\Apex\Framework\Hosts\Services\UIThreadInvoker\UIThreadInvokerHelper.cs:line 129
    at Microsoft.Test.Apex.VisualStudio.Services.Remote.VsUIThreadInvokerService.DispatcherInvocationWrapper(RemoteAction action, Object[] arguments) in f:\dd\src\Omni\Apex\HostIntegration\VisualStudio\Services\Remote\VsUIThreadInvokerService.cs:line 87
    --- End of inner exception stack trace ---

 Server stack trace: 
    at Microsoft.Test.Apex.Hosts.Services.UIThreadInvokerHelper.InvokeOn(RemoteInvoker invoker, RemoteAction action, Object[] arguments) in f:\dd\src\Omni\Apex\Framework\Hosts\Services\UIThreadInvoker\UIThreadInvokerHelper.cs:line 105
    at Microsoft.Test.Apex.Hosts.Services.UIThreadInvokerHelper.InvokeOn(IRemoteUIThreadInvokerService invoker, RemoteAction action, Object[] arguments) in f:\dd\src\Omni\Apex\Framework\Hosts\Services\UIThreadInvoker\UIThreadInvokerHelper.cs:line 78
    at Microsoft.Test.Apex.Hosts.Services.UIThreadInvokerHelper.InvokeOn[T](IRemoteUIThreadInvokerService invoker, Func`1 func) in f:\dd\src\Omni\Apex\Framework\Hosts\Services\UIThreadInvoker\UIThreadInvokerHelper.cs:line 39
    at Microsoft.Test.Apex.Hosts.MarshallableApexObject.UIInvoke[T](Func`1 func) in f:\dd\src\Omni\Apex\Framework\Hosts\MarshallableApexObject.cs:line 416
    at Microsoft.VisualStudio.Web.Common.TestServices.Services.HtmlParseTreeService.IsReady() in C:\dd2\WTE\Main\test\Common\TestServices\Services\HtmlParseTreeService.cs:line 23
    at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
    at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

 Exception rethrown at [0]: 
    at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
    at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
    at Microsoft.VisualStudio.Web.Common.TestServices.Services.HtmlParseTreeService.IsReady()
    at Microsoft.VisualStudio.Web.Common.TestServices.Utilities.WebUtility.&lt;&gt;c__DisplayClass19_0.&lt;WaitForParseTreeReady&gt;b__0() in C:\dd2\WTE\Main\test\Common\TestServices\Utilities\WebUtility.cs:line 299
    at Omni.Common.WaitFor.TryIsTrue(Func`1 predicate, TimeSpan timeout, Nullable`1 interval) in f:\dd\src\Omni\Common\WaitFor.cs:line 68
    at Microsoft.VisualStudio.Web.Common.TestServices.Utilities.WebUtility.WaitForParseTreeReady(Int32 timeout) in C:\dd2\WTE\Main\test\Common\TestServices\Utilities\WebUtility.cs:line 297
    at Microsoft.VisualStudio.Web.Common.TestServices.Utilities.WebUtility.WaitForCodeReady() in C:\dd2\WTE\Main\test\Common\TestServices\Utilities\WebUtility.cs:line 316
    at Roslyn.VSHosting.Test.WebUtilitiesAction.WaitForCodeReady() in c:\src\roslyn-internal\Closed\Hosting\Test\Actions\VisualStudio\WebUtilitiesAction.cs:line 20

```
</Description>
    <CreatedDate>01/12/2015</CreatedDate>
    <ClosedDate>08/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>7141</IssueID>
    <Title>Infrastructure for shipping language features in updates</Title>
    <Description>There is interest in seeing if we can ship small, but impactful, language features in updates.  In order to do this the following work will need to be done:
- Introduce the concept of minor versions to the language: i.e. 6.1, 6.2 
- Ensure minor language versions were opted into explicitly.  Can't use C# 6.1 in VS 2015 Update 2 unless the project file specifically opted into it.  This is important because it prevents silent dependencies on VS updates which could break the build in a team environment. 

Note: at this point this is an **exploratory** item.  
</Description>
    <CreatedDate>01/12/2015</CreatedDate>
    <ClosedDate>08/03/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6932</IssueID>
    <Title>Squiggles.ErrorTagGeneratedForSimpleError failing</Title>
    <Description>Similar to https://github.com/dotnet/roslyn/issues/6866. Has not yet been skipped as I'm at home:

```
Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.Squiggles.ErrorSquiggleProducerTests.ErrorTagGeneratedForSimpleError (from Roslyn.Services.Editor.VisualBasic.UnitTests)

Failing for the past 1 build (Since Failed#1392 )
Took 0.22 sec.
Stacktrace

MESSAGE:
Assert.Equal() Failure\r\nExpected: 1\r\nActual: 0
+++++++++++++++++++
STACK TRACE:
at Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.Squiggles.ErrorSquiggleProducerTests.VB$StateMachine_3_ErrorTagGeneratedForSimpleError.MoveNext() in d:\j\workspace\roslyn_prtest_win_dbg_unit32\src\EditorFeatures\VisualBasicTest\Squiggles\ErrorSquiggleProducerTests.vb:line 34 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.AsyncMethodBuilderCore.&lt;&gt;c__DisplayClass2.&lt;ThrowAsync&gt;b__3(Object state)
```
</Description>
    <CreatedDate>20/11/2015</CreatedDate>
    <ClosedDate>20/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6863</IssueID>
    <Title>[Test Failure] CSharpGotoDefinition "Cannot navigate to the symbol under the caret"</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn-internal_master_win_vsi_p2/414/consoleFull#-70887886987b2fba6-0f8e-4a04-a3ae-ceac18a86066
</Description>
    <CreatedDate>19/11/2015</CreatedDate>
    <ClosedDate>18/03/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6855</IssueID>
    <Title>CSharpInteractiveCommands is Flaky</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn-internal_master_win_vsi_p2/409/consoleFull#-70887886987b2fba6-0f8e-4a04-a3ae-ceac18a86066
</Description>
    <CreatedDate>18/11/2015</CreatedDate>
    <ClosedDate>19/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6852</IssueID>
    <Title>OptionPagesDTE VS integration test is Flaky</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_vsi_p3/47/consoleFull#-70887886987b2fba6-0f8e-4a04-a3ae-ceac18a86066

I've disabled the test in roslyn-internals
</Description>
    <CreatedDate>18/11/2015</CreatedDate>
    <ClosedDate>19/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6850</IssueID>
    <Title>VS Integration tests should check for unexpected image loads...</Title>
    <Description>We shouldn't have to wait for RPS to find out we're loading extra dlls in scenarios where we shouldn't.  Specifically, we should ensure that we have coverage for:
- Roslyn loading before a solution is opened
- VB is not loaded in C# projects and vice versa
- Interactive is not loaded if Interactive is not opened
</Description>
    <CreatedDate>18/11/2015</CreatedDate>
    <ClosedDate>01/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6840</IssueID>
    <Title>NuGet build task pollutes .NET Framework/portable builds with a warning "The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute but not found"</Title>
    <Description>Build any .NET Framework/portable build, get lots of:

```
         Building solution configuration "Debug|Mixed Platforms".
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
       The target "BeforeGenerateProjectPriFile" listed in a BeforeTargets attribute at "C:\Program Files (x86)\MSBuild\Microsoft\NuGet\Microsoft.NuGet.targets (156,61)" does not exist in the project, and will be ignored.
     2&gt;Project "c:\roslyn\Roslyn.sln" (2) is building "c:\roslyn\src\Compilers\Core\CodeAnalysisTest\CodeAnalysisTest.csproj" (3) on node 1 (default targets).
```
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6838</IssueID>
    <Title>Flaky CsharpCodeActions test</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_dbg_eta/252/consoleFull#70755144648b422d4-e1dd-42d0-bad1-ef3579de49b9
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>19/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6837</IssueID>
    <Title>Flaky CrossLanguage VS integration test</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_vsi_p1/35/consoleFull#-70887886987b2fba6-0f8e-4a04-a3ae-ceac18a86066
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>19/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6814</IssueID>
    <Title>Proposal - Ternary Operator should resolve types that are of the same base type</Title>
    <Description>If you have

```
class Animal {}
class Dog : Animal {}
class Cat : Animal {}
```

You should be able to write `return likesCats ? new Cat() : new Dog();` which would return an object of type `Animal`. 

This should fall under the better betterness category where the compiler can figure out what the author clearly meant to do, and a cast to a base type is a safe implict cast that isn't introducing any side effects. It's also simply fixing code which was not allowed before, so it is backwards compatible (this rule of determining the type should run last, in case the types can already be implicitly converted)

This should be restricted to the case where the two expressions share a common base class, and it should choose the highest base class applicable (ie `Animal` not `Object` should be chosen). This avoids situations where the expressions could both be converted to multiple interfaces (ie if they both derived from a class that defined `IDisposable` then they could be casted to an `IDisposable` but this would be a less useful type and cause conflicts). 

Potential points of discussion: 
- Should `object` base type be excluded from this? Everything derives from `object` which would make every ternary operator valid but returning a less than useful type most of the time. Most likely the user didn't want to do this, but had an error like calling the wrong method or something. The potential error of the invalid cast would likely be caught at the very next level when it tries to return or assign it but this may not always be the case. If the result of this expression went into a `var` and then was used to call a generic method or instantiate a generic class then this may go pretty far in the program before producing a compile time error, and may not introduce one at all.
- If object is a special case should there be more special cases? Or is it worth having if there are special cases and hence added complexity?
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>31/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6783</IssueID>
    <Title>Implement interface creates members in undesired way</Title>
    <Description>When I execute Implement interface I expect it to add all the members at the end of class.

What I want is to put all the members in some region to group them by implemented interface.
Instead members are generated in some "smart" way which breaks my scenario and I have to find this members in some other regions.

In a perfect scenario if there are regions in a class it have to ask me where to put this generated members.
At least current behavior must me configurable so I can disable it and has all the members generated at the end of class.
</Description>
    <CreatedDate>14/11/2015</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6779</IssueID>
    <Title>IntelliSense errors in Visual Basic projects when opening Roslyn, even though builds clean</Title>
    <Description>Workspace Info: `\\[internalserver]\public\davkean\RoslynWorkspaceInfo.xml`

This is master, I'm sync'd to 6881111661c521688bfdd17740fee1cc7cc94f39.

I've got `36,000 errors.
</Description>
    <CreatedDate>14/11/2015</CreatedDate>
    <ClosedDate>16/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6771</IssueID>
    <Title>Prevent projects from copying the same references, project references and nuget impls to the output</Title>
    <Description>By default, non-framework binary references, project references and NuGet implementations are copied to the output directory. This is problematic, because this results in build races where projects are copying the same binaries into the same locations.

I've [turned this off](https://github.com/davkean/roslyn/commit/55e54b7b8be71a13c4ce016ac3a3f8957fa218e1) for CPS, however, we should turn this off by default everywhere.
- [ ] Turn off copying binary and project references to the build
- [ ] Turn off copying NuGet implementations
</Description>
    <CreatedDate>13/11/2015</CreatedDate>
    <ClosedDate>26/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6750</IssueID>
    <Title>Breaking change in overload resolution in VS2015 RTM</Title>
    <Description>The following compiles in versions preceding VS2015, but not in VS2015. In other words this appears to be broken by Roslyn.

``` cs
using System;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        RunNoThrow(GetSlowlog);
    }

    static void GetSlowlog() { }

    public static bool RunNoThrow(Action a)
    {
        throw null;
    }
    static async public Task RunNoThrow(Func&lt;Task&gt; action, Func&lt;Exception, bool&gt; IsFatal = null)
    {
        throw await (Task&lt;Exception&gt;)null;
    }
}
```

In earlier versions it selected the `RunNoThrow(Action a)` overload. In VS2015 it selects the `RunNoThrow(Func&lt;Task&gt; action, Func&lt;Exception, bool&gt; IsFatal = null)` overload and complains that the return type of `GetSlowlog` is wrong.

I suspect Roslyn has the overload resolution tiebreaker rules in the wrong order.
</Description>
    <CreatedDate>13/11/2015</CreatedDate>
    <ClosedDate>13/01/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6733</IssueID>
    <Title>declaring new variable in out statements opening the code block</Title>
    <Description>Little syntactic sugar which would save time on many occasions:

``` csharp
if (int.TryParse("123", out int value))
{
  value *= 2;
} 
```
</Description>
    <CreatedDate>12/11/2015</CreatedDate>
    <ClosedDate>12/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6691</IssueID>
    <Title>Add Using doesn't work for attributes in the interactive window</Title>
    <Description>```
. #r "C:\roslyn-internal\open\binaries\debug\xunit.assert.dll"
. #r "C:\roslyn-internal\open\binaries\debug\xunit.core.dll"
. 
&gt; class C
. {
.     [Fact]
.     void foo()
.     {
.     }
. }
```

Can't add using on Fact, qualifying it as "Xunit.Fact" manually results in no errors.
</Description>
    <CreatedDate>10/11/2015</CreatedDate>
    <ClosedDate>10/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6672</IssueID>
    <Title>Typed anonymous classes support</Title>
    <Description>For now just immutable structures are allowed for anonymous classes.
But i think that JAVA typed anonymous can be usefull.
Something like this

```
public interface IWorker{
    void Init(...);
    void Execute(...);
}
public class WorkerExecutor{
     public void DoWork(IWorker worker);
}
...

var x =1;
new WorkerExecutor().DoWork(new {
       void Init(...){...}
       void DoWork(...){...if(x==1){...}} // should "see" scope
}) // should inference anonymous by usage and behind the scene create anonymous implementing 
IWorker interface
```

It can be as temporal state object. 
</Description>
    <CreatedDate>10/11/2015</CreatedDate>
    <ClosedDate>10/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6660</IssueID>
    <Title>[Test Failure] CompilerServerUnitTests.ServerWithSamePipeNameExits in prtest/win/dbg/unit64 on PR #6658</Title>
    <Description>PR: [#6658](https://github.com/dotnet/roslyn/pull/6658) _Revert "Syntactically classify buffers without a workspace"_ by @dpoeschl
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/991/

**1 Test Failures:**
Microsoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerUnitTests.ServerWithSamePipeNameExits

**Issue 1: Test Failures**
There were test failures, see Test Results above.
</Description>
    <CreatedDate>09/11/2015</CreatedDate>
    <ClosedDate>20/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6653</IssueID>
    <Title>Enable retrieving unit test crash dumps from Jenkins</Title>
    <Description>
    </Description>
    <CreatedDate>09/11/2015</CreatedDate>
    <ClosedDate>09/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6638</IssueID>
    <Title>[Proposal] defined some "sort of interfaces" not implemented by the type</Title>
    <Description>If you think about Roslyn SyntaxNode (as an example), we have 9 types of SyntaxNode with the OperatorToken property without any common type.
Instead of writing a visitor that have 9 specific Visit (VisitBinaryExpression, VisitPrefixUnaryExpression, VisitPostfixUnaryExpression, etc) to be able to use the OperatorToken, I would love to be able to write something like this:

```
template SyntaxNodeWithToken
{
   SyntaxToken OperatorToken { get; }
}
```

Then in my visitor, I could just use the Visit:

```
public override void Visit(SyntaxNode node)
{
    var n = node as SyntaxNodeWithToken;
    if (n != null)
        Foo(n.OperatorToken);
}
```

template is maybe not the best name but I think you got the idea
</Description>
    <CreatedDate>07/11/2015</CreatedDate>
    <ClosedDate>21/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6620</IssueID>
    <Title>Cleanup reference arrays in ReferenceManager</Title>
    <Description>Simplify implementation of Compilation.References.

There is some unnecessary duplication and the order of references in ExplicitReferences isn't ideal.

``` C#
 ImmutableArray&lt;MetadataReference&gt; ExplicitReferences;
 ImmutableArray&lt;MetadataReference&gt; ImplicitReferences;
```
</Description>
    <CreatedDate>06/11/2015</CreatedDate>
    <ClosedDate>14/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6551</IssueID>
    <Title>even better operator[]</Title>
    <Description>I can't explain it simpler than this:

``` csharp
class MySortedArray
{
  public int this[int index] { get { /* ... */ } }
  public int OriginalIndicesOfElements[int index] { get { /* ... */ } }
  // this might be an overkill but worth considering
  public T As&lt;T&gt;[int index] { get { unsafe { int x = this[index]; return *(T*)(&amp;x); } } }
  // ...
}
// usage:
MySortedArray a = /* ... */;
for (int i =0; i &lt; a.Length; i++)
{
  Console.WriteLine("a[{0}]=a'[{1}]={2}   (long)a'[{1}]={3}",
      a.OriginalIndicesOfElements[i], i, a[i], a.As&lt;long&gt;[i]);
}
```

I'm not even gonna mention NativeBufferWrapper and Casting an array
</Description>
    <CreatedDate>04/11/2015</CreatedDate>
    <ClosedDate>21/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6537</IssueID>
    <Title>Investigate build failure where fakesign failed with error code 1</Title>
    <Description>Example: http://dotnet-ci.cloudapp.net/job/roslyn-internal_master_win_vsi_p1/309/

This was worked around in pull request #6528 but that shouldn't have been necessary in the first place.
</Description>
    <CreatedDate>03/11/2015</CreatedDate>
    <ClosedDate>03/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6484</IssueID>
    <Title>Linux builds can timeout when running VBErrorFactsGenerator.exe</Title>
    <Description>For details see the build [here](http://dotnet-ci.cloudapp.net/job/roslyn_prtest_lin_dbg_unit32/759/)

or the full console output is here:

```
GitHub pull request #6475 of commit 47b27dc37e673159c3dc07450892baa0c21c79e9, no merge conflicts.
Setting status of 47b27dc37e673159c3dc07450892baa0c21c79e9 to PENDING with url http://dotnet-ci.cloudapp.net/job/roslyn_prtest_lin_dbg_unit32/759/ and message: 'Build started sha1 is merged.'
Using context: prtest/lin/dbg/unit32
[EnvInject] - Loading node environment variables.
Building remotely on dci-ub-bld-13 (ubuntu-fast ubuntu-cross ubuntu) in workspace /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32
selected Git installation does not exists. Using Default
Wiping out workspace first.
Cloning the remote Git repository
Using shallow clone
Cloning repository https://github.com/dotnet/roslyn.git
 &gt; git init /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32 # timeout=10
Fetching upstream changes from https://github.com/dotnet/roslyn.git
 &gt; git --version # timeout=10
 &gt; git -c core.askpass=true fetch --tags --progress https://github.com/dotnet/roslyn.git +refs/heads/*:refs/remotes/origin/* --depth=1
 &gt; git config remote.origin.url https://github.com/dotnet/roslyn.git # timeout=10
 &gt; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git config remote.origin.url https://github.com/dotnet/roslyn.git # timeout=10
Fetching upstream changes from https://github.com/dotnet/roslyn.git
 &gt; git -c core.askpass=true fetch --tags --progress https://github.com/dotnet/roslyn.git +refs/pull/*:refs/remotes/origin/pr/*
 &gt; git rev-parse refs/remotes/origin/pr/6475/merge^{commit} # timeout=10
 &gt; git rev-parse refs/remotes/origin/origin/pr/6475/merge^{commit} # timeout=10
Checking out Revision 5c9a61e4d3ff736c28a49785a45110cdbd87eca0 (refs/remotes/origin/pr/6475/merge)
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f 5c9a61e4d3ff736c28a49785a45110cdbd87eca0
 &gt; git rev-list 846e4933241f1fdec8ea3a27b82ca87963ca3165 # timeout=10
First time build. Skipping changelog.
[roslyn_prtest_lin_dbg_unit32] $ /bin/sh -xe /tmp/hudson5096956533488863787.sh
+ ./cibuild.sh --nocache --debug
Clean out the enlistment
Installing NuGet Packages /tmp/nuget.28.zip
/tmp /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
 16  299M   16 50.3M    0     0  47.2M      0  0:00:06  0:00:01  0:00:05 47.2M
 37  299M   37  111M    0     0  53.9M      0  0:00:05  0:00:02  0:00:03 53.9M
 57  299M   57  170M    0     0  55.7M      0  0:00:05  0:00:03  0:00:02 55.8M
 77  299M   77  232M    0     0  57.0M      0  0:00:05  0:00:04  0:00:01 57.0M
 98  299M   98  294M    0     0  58.2M      0  0:00:05  0:00:05 --:--:-- 60.9M
100  299M  100  299M    0     0  58.5M      0  0:00:05  0:00:05 --:--:-- 61.4M
/mnt/j/workspace/roslyn_prtest_lin_dbg_unit32
Installing Mono toolset mono.linux.4
/tmp /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
 27  117M   27 32.0M    0     0  37.4M      0  0:00:03 --:--:--  0:00:03 37.4M
 75  117M   75 88.6M    0     0  47.8M      0  0:00:02  0:00:01  0:00:01 47.8M
100  117M  100  117M    0     0  50.2M      0  0:00:02  0:00:02 --:--:-- 50.2M
/mnt/j/workspace/roslyn_prtest_lin_dbg_unit32
/tmp/mono.linux.4/bin/mono
Compiling the toolset compilers
Compiling the C# compiler
Microsoft (R) Build Engine version 14.1.0.0
Copyright (C) Microsoft Corporation. All rights reserved.

  CodeAnalysis -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/Microsoft.CodeAnalysis.dll
  CSharpSyntaxGenerator -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/CSharpSyntaxGenerator.exe
  CompilersBoundTreeGenerator -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/BoundTreeGenerator.exe
  CSharpErrorFactsGenerator -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/CSharpErrorFactsGenerator.exe
  Wrote /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Obj/CSharpCodeAnalysis/Debug/Syntax.xml.Generated.cs
  CSharpCodeAnalysis -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/Microsoft.CodeAnalysis.CSharp.dll
  CscCore -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/core-clr/csc.exe
Compiling the VB compiler
Microsoft (R) Build Engine version 14.1.0.0
Copyright (C) Microsoft Corporation. All rights reserved.

  CodeAnalysis -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/Microsoft.CodeAnalysis.dll
  VisualBasicSyntaxGenerator -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/VBSyntaxGenerator.exe
  CompilersBoundTreeGenerator -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/BoundTreeGenerator.exe
  VisualBasicErrorFactsGenerator -&gt; /mnt/j/workspace/roslyn_prtest_lin_dbg_unit32/Binaries/Debug/VBErrorFactsGenerator.exe
  Reading input file "Syntax/Syntax.xml"...
  291 node structures, 2 enumerations, 639 node kinds
Build timed out (after 120 minutes). Marking the build as aborted.
Build was aborted
[xUnit] [INFO] - Starting to record.
[xUnit] [INFO] - Processing xUnit.Net-v2 (default)
[xUnit] [INFO] - [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern '**/xUnitResults/*.xml' relative to '/mnt/j/workspace/roslyn_prtest_lin_dbg_unit32' for the testing framework 'xUnit.Net-v2 (default)'.  Did you enter a pattern relative to the correct directory?  Did you generate the result report(s) for 'xUnit.Net-v2 (default)'?
[xUnit] [ERROR] - No test reports found for the metric 'xUnit.Net' with the resolved pattern '**/xUnitResults/*.xml'. Configuration error?.
[xUnit] [INFO] - Failing BUILD.
[xUnit] [INFO] - There are errors when processing test results.
[xUnit] [INFO] - Skipping tests recording.
[xUnit] [INFO] - Stop build.
Archiving artifacts
[BFA] Scanning build for known causes...
[BFA] Found failure cause(s):
[BFA] Build Timed Out from category Timeout
[BFA] Done. 0s
Setting status of 47b27dc37e673159c3dc07450892baa0c21c79e9 to FAILURE with url http://dotnet-ci.cloudapp.net/job/roslyn_prtest_lin_dbg_unit32/759/ and message: 'Build finished. No test results found.'
Using context: prtest/lin/dbg/unit32
Finished: ABORTED
```
</Description>
    <CreatedDate>31/10/2015</CreatedDate>
    <ClosedDate>31/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6464</IssueID>
    <Title>Bitwise operator used on sign-extended operand (short after bitshift), redundant casting</Title>
    <Description>I've just discovered that Visual Studio has an issue when you are using a bitwise-or on two `short` values, where one of them has had a bit-shift on it:

When you don't have any casting, the IDE complains about:

&gt; Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first

Example: `return Width &lt;&lt; 16 | Height;` where `Width` and `Height` are of `short` types.

This will create the warning above, but `return Width &lt;&lt; 16 | (ushort)Height;` will not. If you put the explicit cast in there, then it states that the cast is redundant.

It appears that the IDE cannot make up it's mind.

Full examples:

```
public short Width = 17;
public short Height = 94;

public int ShiftAndOr1()
{
    // This will cause the "Bitwise-or operator ..." message
    return Width &lt;&lt; 16 | Height;
}
public int ShiftAndOr2()
{
    // This will cause the "redundant cast" message
    return Width &lt;&lt; 16 | (ushort)Height;
}
```

However, this only seems to happen on `short` types, at least as far as I've seen. I don't get the message on my `byte` types that I do the same operations on (except I shift by 8 instead of 16).

```
public byte Width = 17;
public byte Height = 94;

public int ShiftAndOr()
{
    // This will not give either message
    return Width &lt;&lt; 8 | Height;
}
```
</Description>
    <CreatedDate>30/10/2015</CreatedDate>
    <ClosedDate>30/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6449</IssueID>
    <Title>Flaky test: CompilerServerUnitTests.ServerWithSamePipeNameExits</Title>
    <Description>Server took more than 5 seconds to exit.

http://dotnet-ci.cloudapp.net/job/roslyn-internal_stabil_win_dbg_unit64/103/testReport/junit/Microsoft.CodeAnalysis.CompilerServer.UnitTests/CompilerServerUnitTests/ServerWithSamePipeNameExits/
</Description>
    <CreatedDate>30/10/2015</CreatedDate>
    <ClosedDate>30/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6419</IssueID>
    <Title>LocalRewriter.TransformCompoundAssignmentLHS assert dialog in Immediate Window on "int x; x++;"</Title>
    <Description>1. Create a new console application and press F11 to start a new debugging session.
2. In the Immediate Window, type `int x = 7;` and hit enter.
3. In the Immediate Window, type `x++;` and hit enter.

Assert dialog: 

```
---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
Unexpected value 'PseudoVariable' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind'



   at Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(Object o)

   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.TransformCompoundAssignmentLHS(BoundExpression originalLHS, ArrayBuilder`1 stores, ArrayBuilder`1 temps, Boolean isDynamicAssignment)

   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitIncrementOperator(BoundIncrementOperator node)

   at Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator.Accept(BoundTreeVisitor visitor)

   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)

   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)

   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)

   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)

   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewr......

&lt;truncated&gt;
---------------------------
Abort   Retry   Ignore   
---------------------------
```
</Description>
    <CreatedDate>29/10/2015</CreatedDate>
    <ClosedDate>29/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6415</IssueID>
    <Title>[Bug] Redundant line break before { in property getter with attribute applied</Title>
    <Description>I have a code below in my .cs file:

``` cs
class Program
{
    public int Property
    {
        get { return 0; }
    }
}
```

After inserting a [DebuggerStepThrough] to the getter and formatting document (Menu Edit, Advanced, Format Document) I have

``` cs
class Program
{
    public int Property
    {
        [System.Diagnostics.DebuggerStepThrough]
        get
        { return 0; }
    }
}
```
</Description>
    <CreatedDate>29/10/2015</CreatedDate>
    <ClosedDate>29/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6388</IssueID>
    <Title>PR Test Failure: "Deterministic" parameter not supported by "Csc" task on unrelated IDE change.</Title>
    <Description>_PR: https://github.com/dotnet/roslyn/pull/6382_
_Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/612/_
**Issue 1: MSBuild Error**
error MSB4064: The "Deterministic" parameter is not supported by the "Csc" task. Verify the parameter exists on the task, and it is a settable public instance property. [d:\j\workspace\roslyn_prtest_win_dbg_unit64\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\CSharpSyntaxGenerator.csproj]
</Description>
    <CreatedDate>28/10/2015</CreatedDate>
    <ClosedDate>28/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6354</IssueID>
    <Title>[PR test failure] Roslyn.Compilers.VisualBasic.Semantic.UnitTests timed-out</Title>
    <Description>See http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/575/ for more details.

Here's the PR: https://github.com/dotnet/roslyn/pull/6345

```
18:57:31     1 running, 0 queued, 39 completed
20:11:54 
Build timed out (after 120 minutes). Marking the build as aborted.
20:11:54 
...
...
...
[xUnit] [ERROR] - The result file 'd:\j\workspace\roslyn_prtest_win_dbg_unit32\Binaries\Debug\xUnitResults\Roslyn.Compilers.VisualBasic.Semantic.UnitTests.dll.xml' for the metric 'xUnit.Net' is empty. The result file has been skipped.
```

/cc: @davkean 
</Description>
    <CreatedDate>27/10/2015</CreatedDate>
    <ClosedDate>27/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6342</IssueID>
    <Title>interactive test failures</Title>
    <Description>Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.InteractiveSessionTests.HostObjectAssemblyReference3
Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.InteractiveSessionTests.HostObjectAssemblyReference2

http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/551/
</Description>
    <CreatedDate>26/10/2015</CreatedDate>
    <ClosedDate>26/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6319</IssueID>
    <Title>HostObjectAssemblyReference3 and HostObjectAssemblyReference2 are broken in master</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/495/#showFailuresLink
</Description>
    <CreatedDate>26/10/2015</CreatedDate>
    <ClosedDate>26/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6300</IssueID>
    <Title>Scanner(peep  xml)</Title>
    <Description>Extends usage of Peep into `ScannerXML.vb`
</Description>
    <CreatedDate>24/10/2015</CreatedDate>
    <ClosedDate>25/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6295</IssueID>
    <Title>[Compiler VB Scanner] Peep functionality.</Title>
    <Description>This adds peep functionality into the scanner, which is combination of CanGet and Peek. It does not alter the existing content of the out parameter (ch) when CanGet is false.

NOTE: This is different mechinism to TryParse methods, this is deliberate so that existing value can be used in subsequent conditions.

Usage as been implement into ScannerInterpolatedString
</Description>
    <CreatedDate>24/10/2015</CreatedDate>
    <ClosedDate>25/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6178</IssueID>
    <Title>[Flaky Test] Roslyn.InteractiveWindow.UnitTests failing with race in Stabilization</Title>
    <Description>http://dotnet-ci.cloudapp.net/job/roslyn_stabil_win_dbg_unit32/33/

```
23:21:27   xUnit.net Console Runner (32-bit .NET 4.0.30319.42000)
23:21:27     Discovering: Roslyn.InteractiveWindow.UnitTests
23:21:27     Discovered:  Roslyn.InteractiveWindow.UnitTests
23:21:27     Starting:    Roslyn.InteractiveWindow.UnitTests
23:21:27     Finished:    Roslyn.InteractiveWindow.UnitTests
23:21:27   System.InvalidOperationException: Collection was modified; enumeration operation may not execute.
23:21:27      at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
23:21:27      at System.Collections.Generic.List`1.Enumerator.MoveNextRare()
23:21:27      at System.Collections.Generic.List`1.Enumerator.MoveNext()
```
</Description>
    <CreatedDate>20/10/2015</CreatedDate>
    <ClosedDate>02/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6173</IssueID>
    <Title>Diff'ing a VB file crashes Visual Studio</Title>
    <Description>**Repro:**
1. Sync https://github.com/davkean/roslyn/tree/dev/davkean/donotdelete_Bug6173 locally
2. In Team Explorer, right-click on branch, and choose **View History**
3. Double-click the most recent commit, **e9730e79**
4. Right-click on **MiscDiagnosticUpdateSourceTests.vb** and choose **Compare with Previous**

**Expected:** Diff to show
**Actual:** Diff shows, but ~4 or 5 seconds later VS crashes with below

Stack:

```
An unhandled exception of type 'System.ArgumentException' occurred in Microsoft.VisualStudio.Platform.VSEditor.dll

Additional information: The point does not belong to a source snapshot of the projection snapshot
&gt;   Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionSnapshot.MapFromSourceSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint sourcePoint, Microsoft.VisualStudio.Text.PositionAffinity affinity)   Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager&lt;Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.LineSeparatorTag&gt;.UpdateSpans_CallOnlyOnUIThread(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection changedSpanCollection, bool removeOldTags) Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager&lt;Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.LineSeparatorTag&gt;.UpdateInvalidSpans()   Unknown
    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager&lt;Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.LineSeparatorTag&gt;.OnTagsChanged.AnonymousMethod__0() Unknown
    WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)  Unknown
    WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source = {System.Windows.Threading.Dispatcher}, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler = null)  Unknown
    WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeImpl()   Unknown
    WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)  Unknown
    mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown
    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown
    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Unknown
    WindowsBase.dll!System.Windows.Threading.DispatcherOperation.Invoke()   Unknown
    WindowsBase.dll!System.Windows.Threading.Dispatcher.ProcessQueue()  Unknown
    WindowsBase.dll!System.Windows.Threading.Dispatcher.WndProcHook(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)  Unknown
    WindowsBase.dll!MS.Win32.HwndWrapper.WndProc(System.IntPtr hwnd = {System.IntPtr}, int msg = 49648, System.IntPtr wParam = {System.IntPtr}, System.IntPtr lParam = {System.IntPtr}, ref bool handled = false)   Unknown
    WindowsBase.dll!MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o) Unknown
    WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)  Unknown
    WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source = {System.Windows.Threading.Dispatcher}, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler = null)  Unknown
    WindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)   Unknown
    WindowsBase.dll!MS.Win32.HwndSubclass.SubclassWndProc(System.IntPtr hwnd = {System.IntPtr}, int msg = 49648, System.IntPtr wParam = {System.IntPtr}, System.IntPtr lParam = {System.IntPtr})    Unknown
```
</Description>
    <CreatedDate>20/10/2015</CreatedDate>
    <ClosedDate>22/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6142</IssueID>
    <Title>Cast is redundant (IDE0004) analyzer bug</Title>
    <Description>There is a bug at IDE0004 Analyzer.

In following code snippet it proposes to remove 'enum to int' cast even though it changes runtime behaviour.

``` c#
class Program
{
    static void Main()
    {
        Console.WriteLine($"{(int)MyEnum.EnumValue}");  //writes '0'
        Console.WriteLine($"{MyEnum.EnumValue}");       //writes 'EnumValue'
    }

    enum MyEnum
    {
        EnumValue
    }
}
```
</Description>
    <CreatedDate>19/10/2015</CreatedDate>
    <ClosedDate>19/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6074</IssueID>
    <Title>VS crashes (AV) in MemberRangeMap.UpdateMemberRange_NoLock</Title>
    <Description>Crash dump at 

%internal_share%\public\tomat\Bugs\6074

There is something strange going on - the callstack points to a method that doesn't have any dereferences, so it might be deeper issue than what can be seen in the source (bad IL, CLR JIT bug, memory corruption, etc.). Also, it wasn't straightforward to capture this dump. VS just disappeared. It was necessary to attach a debugger, stop at the exception and then save the memory dump.

```
   at Microsoft.CodeAnalysis.Text.TextSpan..ctor(Int32 start, Int32 length) in F:\Builds\5437\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\Compilers\Core\Portable\Text\TextSpan.cs:line 30
   at Microsoft.CodeAnalysis.Diagnostics.EngineV1.MemberRangeMap.UpdateMemberRange_NoLock(DictionaryData data, Document document, VersionStamp newVersion, Int32 memberId, TextSpan currentSpan, VersionStamp oldVersion) in F:\Builds\5437\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\Features\Core\Portable\Diagnostics\EngineV1\MemberRangeMap.cs:line 160
   at Microsoft.CodeAnalysis.Diagnostics.EngineV1.MemberRangeMap.UpdateMemberRange(DiagnosticAnalyzer analyzer, Document document, VersionStamp newVersion, Int32 memberId, TextSpan span, MemberRanges oldRanges) in F:\Builds\5437\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\Features\Core\Portable\Diagnostics\EngineV1\MemberRangeMap.cs:line 54
   at Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.&lt;AnalyzeBodyDocumentAsync&gt;d__52.MoveNext() in F:\Builds\5437\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\Features\Core\Portable\Diagnostics\EngineV1\DiagnosticIncrementalAnalyzer.cs:line 240
```
</Description>
    <CreatedDate>16/10/2015</CreatedDate>
    <ClosedDate>16/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6072</IssueID>
    <Title>InteractiveWindow.ProcessPendingSubmissions only processes one pending submission</Title>
    <Description>See [`ProcessPendingSubmissions`](https://github.com/dotnet/roslyn/blob/7fb8879dd8f42f344f91509fe2af1bcd0a1532f0/src/InteractiveWindow/Editor/InteractiveWindow.UIThreadOnly.cs#L729):

``` csharp
private void ProcessPendingSubmissions() 
{ 
    // Snipped early exit code for when queue is empty

    var submission = _pendingSubmissions.Dequeue(); 
    SetActiveCode(submission.Input); 
    Debug.Assert(submission.Task == null, "Someone set PendingSubmission.Task before it was dequeued."); 
    submission.Task = SubmitAsync(); 
    if (submission.Completion != null) 
    { 
        // ContinueWith is safe since TaskCompletionSource.SetResult should not throw. 
        // Therefore, we don't need to await the task (which we would normally do to 
        // propagate any exceptions it might throw).  We also don't need an NFW 
        // exception filter around the continuation. 
        submission.Task.ContinueWith(_ =&gt; submission.Completion.SetResult(null), TaskScheduler.Current); 
    } 
}
```

This is important because [`IInteractiveWindow.SubmitAsync`](https://github.com/dotnet/roslyn/blob/7fb8879dd8f42f344f91509fe2af1bcd0a1532f0/src/InteractiveWindow/Editor/InteractiveWindow.cs#L195) (as implemented on `InteractiveWindow`, _not_ the one referenced in the code snippet above) is public API that pends all the inputs and then waits for them all to be processed. Because only the first is processed, the task returned by `SubmitAsync` never completes.

I'd expect this function to look more like this: (sample code/untested/etc.)

``` csharp
private async Task ProcessPendingSubmissions() {
    while (_pendingSubmissions.Any()) {
        var submission = _pendingSubmissions.Dequeue(); 
        SetActiveCode(submission.Input); 
        await SubmitAsync(); 
        submission.Completion?.SetResult(null);
    }
}
```
</Description>
    <CreatedDate>16/10/2015</CreatedDate>
    <ClosedDate>16/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6068</IssueID>
    <Title>Status/plan for support of NuGet packages (project.json) in Workspace API</Title>
    <Description>Hi,
can you please tell me what is the current status/future plans for support of parsing project.json files by Workspace API ? Are NuGet dependencies stored in project.json file resolved ? Is the API capable to tell which *.dlls are effectively referenced by a project through NuGet dependencies ?

Thanks
</Description>
    <CreatedDate>16/10/2015</CreatedDate>
    <ClosedDate>22/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>6035</IssueID>
    <Title>Inside Visual Studio, VbiCore fails to build</Title>
    <Description>Opening Visual Studio, you might see errors like so:

```
Severity    Code    Description Project Line    Suppression State
Error   BC30560 'Path' is ambiguous in the namespace 'System.IO'.   VbiCore 14  Active
Message AD0001  Analyzer 'Roslyn.Diagnostics.Analyzers.ApiDesign.DeclarePublicAPIAnalyzer' threw an exception of type 'System.ArgumentException' with message 'An item with the same key has already been added.'.  CodeAnalysis    1   Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 6   Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 6   Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 16  Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 17  Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 18  Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 19  Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 20  Active
Error   BC30002 Type 'System.Void' is not defined.  VbiCore 9   Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 10  Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 10  Active
Error   BC30002 Type 'System.String' is not defined.    VbiCore 12  Active
Error   BC30002 Type 'System.Int32' is not defined. VbiCore 12  Active
Error   BC30002 Type 'System.Object' is not defined.    VbiCore 14  Active
Error   BC30002 Type 'System.Object' is not defined.    VbiCore 16  Active
Error   BC30002 Type 'System.Object' is not defined.    VbiCore 22  Active
Error   BC30002 Type 'System.Int32' is not defined. VbiCore 31  Active
Error   BC30560 'TargetFrameworkAttribute' is ambiguous in the namespace 'System.Runtime.Versioning'.   VbiCore 6   Active
Error   BC30560 'AssemblyCompanyAttribute' is ambiguous in the namespace 'System.Reflection'.   VbiCore 16  Active
Error   BC30560 'AssemblyCopyrightAttribute' is ambiguous in the namespace 'System.Reflection'. VbiCore 17  Active
Error   BC30560 'AssemblyVersionAttribute' is ambiguous in the namespace 'System.Reflection'.   VbiCore 18  Active
Error   BC30560 'AssemblyFileVersionAttribute' is ambiguous in the namespace 'System.Reflection'.   VbiCore 19  Active
Error   BC30560 'AssemblyInformationalVersionAttribute' is ambiguous in the namespace 'System.Reflection'.  VbiCore 20  Active
Error   BC30560 'AppContext' is ambiguous in the namespace 'System'.    VbiCore 14  Active
Error   BC30560 'AppContext' is ambiguous in the namespace 'System'.    VbiCore 18  Active
Error   BC30560 'Exception' is ambiguous in the namespace 'System'. VbiCore 29  Active
Error   BC30560 'Console' is ambiguous in the namespace 'System'.   VbiCore 30  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 9   Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 14  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 14  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Void'. Add one to your project.    VbiCore 16  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 16  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 18  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Void'. Add one to your project.    VbiCore 20  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 20  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Void'. Add one to your project.    VbiCore 22  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 22  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 23  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 25  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 26  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Integer'. Add one to your project. VbiCore 28  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 29  Active
Error   BC30652 Reference required to assembly '&lt;Missing Core Assembly&gt;, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'Object'. Add one to your project.  VbiCore 30  Active
Error   BC30661 Field or property 'FrameworkDisplayName' is not found.  VbiCore 6   Active

```

This is known, and caused by the project system unable to correctly initialize the compiler. 

For now, you can ignore them, they do not block the real build.
To hide them, unload the project or switch the Error List to only show errors from Build.
</Description>
    <CreatedDate>15/10/2015</CreatedDate>
    <ClosedDate>16/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5977</IssueID>
    <Title>Analyzer package doesnt work with Roslyn</Title>
    <Description>CSC : warning CS8032: An instance of analyzer Roslyn.Diagnostics.Analyzers.ApiDesign.DeclarePublicAPIAnalyzer cannot be created from C:\ Users\jaredpar.nuget\packages\Microsoft.Net.RoslynDiagnostics\1.1.1-beta1-20150818-01\tools\Roslyn.Diagnostics.Analyzers.dll : Could no t load file or assembly 'Microsoft.CodeAnalysis, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its depend encies. The system cannot find the file specified.. [E:\dd\roslyn\src\Compilers\core\Portable\CodeAnalysis.csproj]
</Description>
    <CreatedDate>14/10/2015</CreatedDate>
    <ClosedDate>14/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5974</IssueID>
    <Title>AnalyzerTelemetry should not be a public type</Title>
    <Description>This API should be make internal.  
</Description>
    <CreatedDate>14/10/2015</CreatedDate>
    <ClosedDate>21/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5967</IssueID>
    <Title>Interactive should provide ScriptPath property that provides the path to the running script</Title>
    <Description>A ScriptRoot property that also contains the directory the running script lives in is also a good idea.
</Description>
    <CreatedDate>14/10/2015</CreatedDate>
    <ClosedDate>16/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5962</IssueID>
    <Title>AnalyzerDriver is asserting during bootstrap build</Title>
    <Description>The AnalyzerDriver type is asserting during a bootstrap build on the [following line](https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs#L605):

``` csharp
catch (TaskCanceledException) when (!prePopulatedEventQueue)
{
    // When the queue is completed with a pending DequeueAsync return then a 
    // TaskCanceledException will be thrown.  This just signals the queue is 
    // complete and we should finish processing it.

    // *** this line *** 
    Debug.Assert(CompilationEventQueue.IsCompleted, "DequeueAsync should never throw unless the AsyncQueue&lt;T&gt; is completed.");
    break;
}
```

This assert is firing a bit randomly.  But if you run the bootstrap build locally 5-6 times you will see it.  The assert is being commented out for now in order to fix Jenkins. 
</Description>
    <CreatedDate>14/10/2015</CreatedDate>
    <ClosedDate>14/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5960</IssueID>
    <Title>Support unbound generic types in nameof</Title>
    <Description>I think the following code should be valid for nameof:

```
nameof(IGenericInterface&lt;&gt;.Method)
```

As it does not matter what is in the generic part when getting the name of something. It would also make this more consistent with typeof.
</Description>
    <CreatedDate>14/10/2015</CreatedDate>
    <ClosedDate>14/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5925</IssueID>
    <Title>null exception in compilation - Microsoft.CodeAnalysis.CSharp.UnitTests.InteractiveUsingTests.AliasHiding</Title>
    <Description>test found another null exception.

http://dotnet-ci.cloudapp.net/job/roslyn_prtest_lin_dbg_unit32/445/testReport/junit/Microsoft.CodeAnalysis.CSharp.UnitTests/InteractiveUsingTests/AliasHiding/
</Description>
    <CreatedDate>13/10/2015</CreatedDate>
    <ClosedDate>22/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5924</IssueID>
    <Title>null exception in compilation - Microsoft.CodeAnalysis.CSharp.UnitTests.InteractiveUsingTests.ConsumePreviousSubmissionUsings_Valid</Title>
    <Description>look at the below log.

http://dotnet-ci.cloudapp.net/job/roslyn_prtest_lin_dbg_unit32/443/
</Description>
    <CreatedDate>13/10/2015</CreatedDate>
    <ClosedDate>22/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5876</IssueID>
    <Title>Roslyn.sln builds successfully, but IntelliSense reports 313884 errors</Title>
    <Description>If I open Roslyn.sln and do a full rebuild, the build succeeds, but over the course of the next 10 minutes or thereabouts, the Error List window slowly fills up with over 300000 intelligence errors. Opening random files shows that syntax highlighting for types is fairly hit-or-miss.  
![intellisense_errors](https://cloud.githubusercontent.com/assets/13181165/10419859/72ce58d8-707c-11e5-9795-55a5e50aa972.png)  
This isn't new, I'm running the Update 1 CTP (14.0.24606.01) now, but I saw similar behaviour in the RTM release.  I haven't seen anything like this in any other solution I've tried, but they're all orders of magnitude smaller than Roslyn.  
I know this isn't much to go on - I'm willing to collect logs, or anything that isn't _too_ destructive.  
Also, anything that involves resizing the Error List window is ... sluggish, but I guess that's to be expected :)
</Description>
    <CreatedDate>12/10/2015</CreatedDate>
    <ClosedDate>16/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5843</IssueID>
    <Title>Can't type after add using</Title>
    <Description>I'm using Add Using on one of our most dogfooding builds. After add using, the caret disappears from the editor, and I can no longer type characters. However, tab and shift-tab will still insert and remove tabs.

I have a video on our share under public\rchande\lightbulb.MOV. I apologize for the video in lieu of a gif, but the bug doesn't repro under screen to gif.
</Description>
    <CreatedDate>09/10/2015</CreatedDate>
    <ClosedDate>14/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5814</IssueID>
    <Title>Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Symbols.TypeSubstitutedLocalSymbol' to type 'Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedLocal'</Title>
    <Description>C# Compiler crashes when trying to compile following code:

``` c#
public Task&lt;T&gt; GetAsync&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; asyncFunc, string action, object key)
   where T : class
{

    Func&lt;Task&lt;CacheWrapper&lt;T&gt;&gt;&gt; wrapperFunc = async () =&gt;
        {
            return new CacheWrapper&lt;T&gt; { Instance = await asyncFunc() };
        };

    return null;
}

private class CacheWrapper&lt;T&gt;
{
    public T Instance
    {
        get;
        set;
    }
}
```

Can reproduce the bug in VS 2015. The code can be compiled in VS 2013.

Compiler version: Microsoft (R) Visual C# Compiler version 1.0.0.50618

VS reports following error:

C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.CSharp.Core.targets(67,5): error MSB6006: "csc.exe" exited with code -2146232797.

When I run csc.exe from command line, I can attach debugger and see exception like this: 

An unhandled exception of type 'System.InvalidCastException' occurred in Microsoft.CodeAnalysis.dll
Additional information: Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Symbols.TypeSubstitutedLocalSymbol' to type 'Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedLocal'.

The workaround is very simple:

``` C#
Func&lt;Task&lt;CacheWrapper&lt;T&gt;&gt;&gt; wrapperFunc = async () =&gt;
    {
        var instance = await asyncFunc();
        return new CacheWrapper&lt;T&gt; { Instance = instance };
    };
```
</Description>
    <CreatedDate>09/10/2015</CreatedDate>
    <ClosedDate>09/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5720</IssueID>
    <Title>Crash when extracting method</Title>
    <Description>```
CLR: Managed code called FailFast, saying "System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: index
   at Microsoft.VisualStudio.Text.Utilities.FrugalList`1.get_Item(Int32 index)
   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionSnapshot.MapToSourceSnapshot(Int32 position)
   at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToInsertionPoint(SnapshotPoint position, PointTrackingMode trackingMode, Predicate`1 match)
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.IBufferGraphExtensions.MapUpOrDownToBuffer(IBufferGraph bufferGraph, SnapshotPoint point, ITextBuffer targetBuffer)
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetCaretPoint(ITextView textView, ITextBuffer subjectBuffer)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetCaretPoint(ITextView textViewOpt, ITextBuffer subjectBuffer)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.RecomputeTagsForeground()
   at Microsoft.CodeAnalysis.Editor.Implementation.ForegroundNotification.ForegroundNotificationService.NotifyOnForegroundWorker()
   at Microsoft.CodeAnalysis.Editor.Implementation.ForegroundNotification.ForegroundNotificationService.NotifyOnForeground()
   at Roslyn.Utilities.TaskFactoryExtensions.&lt;&gt;c__DisplayClass1_0.&lt;SafeStartNew&gt;b__0()"
```
</Description>
    <CreatedDate>06/10/2015</CreatedDate>
    <ClosedDate>08/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5701</IssueID>
    <Title>Unexpected obsolete diagnostics on the constraint type</Title>
    <Description>Compile the following code:

```
    [System.Obsolete]
    public static class Crash&lt;T&gt; 
        where T: Crash&lt;T&gt;.AbstractClass 
    { 
        public abstract class AbstractClass 
        { 
            public int Id { get; set; } 
        } 
    } 
```

Unexpected:

```
(3,18): warning CS0612: 'Crash&lt;T&gt;' is obsolete
```
</Description>
    <CreatedDate>05/10/2015</CreatedDate>
    <ClosedDate>08/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5676</IssueID>
    <Title>Proposal: "with" expressions for mutable objects</Title>
    <Description>This has been concluded in #5365 but I thought it deserves a separate ticket. Also it can be considered as an extension to #5172 for using `with` expressions on other types.

It basically provides a `With...End With`-like syntax for C# but as an _expression_.

```
var car = with carFactory.CreateCar() {
    Brand = "Ferrari",
    Model = "Enzo"
};
```

-&gt;

```
var car = carFactory.CreateCar();
car.Brand = "Ferrari";
car.Model = "Enzo";
```

However, you can ignore the returned value if you don't need it e.g. after `with car { ... };` you can continue to use the existing variable.
</Description>
    <CreatedDate>04/10/2015</CreatedDate>
    <ClosedDate>05/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5627</IssueID>
    <Title>[Proposal] default(T) override</Title>
    <Description>In generic code I often use default(T) for comparing or initalize a value. But in some code I not want to use the default(T) value as generated by the compiler. For example for default(double) I want to use double.NaN in some cases and not the 0.0. Or if the class have a singleton representation for Empty I want to use that singleton instead of the null Value. 

It would be nice that I can set the default(T) value in the declartion of such generic type 

&lt;code&gt;
class Abc &lt;T&gt; defaults T : double to double.NaN,  default T : Money to Money.Empty 
&lt;/code&gt;
</Description>
    <CreatedDate>01/10/2015</CreatedDate>
    <ClosedDate>05/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5610</IssueID>
    <Title>Need a way to get stack traces from info bar exception notifications</Title>
    <Description>While working, I randomly got this infobar about some fixer that crashed. There's nothing in the activity log (for reasons @dpoeschl explained to me). Can we add a Roslyn-specific log or get these errors back in the VS ActivityLog?

![infobar](https://cloud.githubusercontent.com/assets/3751401/10227314/74590a08-6821-11e5-839e-2c513b7e1833.png)
</Description>
    <CreatedDate>01/10/2015</CreatedDate>
    <ClosedDate>02/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5549</IssueID>
    <Title>CSharpReplIdeFeatures fails in standalone runs</Title>
    <Description>There are two failures here in the standalone runs:
- `Missing quick info tag for String. (Scenario 5)
  ExpectedQuickInfo: classâ€Ž Systemâ€Ž.String
  Represents text as a series of Unicode characters.To browse the .NET Framework source code for this type, see the Reference Source.
  ActualQuickInfo: classâ€Ž Systemâ€Ž.String`
- `Missing Correct Signature Help (Scenario 7)
  System.Exception: Actual and expected items don't match:
  Expected: void Console.WriteLine(bool value)
  Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.`
  
  ```value (The value to write.)
  value (The value to write.)
  Actual: void Console.WriteLine(bool value)
  
  value ()
  value ()```

I will be disabling this test in the standalone runs
</Description>
    <CreatedDate>29/09/2015</CreatedDate>
    <ClosedDate>07/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5522</IssueID>
    <Title>VS2015, uncomment action: bug if single-line commented text contains /* and */</Title>
    <Description>**Steps to reproduce**:
- Insert the following code:

``` c#
namespace UncommentTest
{
    class Program
    {
        static void Main(string[] args)
        {
            //Client.Headers.Add(HttpRequestHeader.Accept, @"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
            //    values["something"] = answers.Single(a =&gt; string.Equals(a.Key.Trim(), question.Trim(), StringComparison.InvariantCultureIgnoreCase)).Value; // (2)
            //    Client.Headers.Add(HttpRequestHeader.Accept, @"text/javascript, text/html, application/xml, text/xml, */*");
        }
    }
}
```
- Place the cursor at the start of the second comment (the line marked with "// (2)")
- Click the "Uncomment the selected lines" toolbar button (or same from menu, or Ctrl-E, CTRL-U etc)

**Actual result:**
Visual Studio removes the `/*` and `*/` from comment lines 1 and 3, the text between them become selected. Actual comment out symbols (`//`) are left untouched

**Expected behavior:**
IDE uncomments the second line of the comment.
</Description>
    <CreatedDate>29/09/2015</CreatedDate>
    <ClosedDate>29/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5491</IssueID>
    <Title>VS crashes typing in lambda</Title>
    <Description>**Repro machine configuration**
VS 2015 Update 1
VSUVSCore 23318.00

**Repro steps**
1. Create a new Visual C# file (this does not have to be in the context of a C# project)
2. Replace the contents of the file with the code shown below.
3. In the second `AddRange` statement, type `p =&gt;` in as the argument to the `Select` extension method.
4. By the time you press the spacebar as part of the lambda, VS crashes.

``` csharp
using System;
using System.Collections.Generic;
using System.Linq;

public class Class1
{
    public static object[][] TestCases
    {
        get
        {
            string[] projects = new[]
            {
                "Basic40",
                "Basic452",
                "Basic46",
                "Basic50Portable",
                "BasicProfile143",
                "BasicProfile151",
            };
            var testCases = new List&lt;object[]&gt;();
            testCases.AddRange(projects.Select(p =&gt; new object[] { p, true }));
            testCases.AddRange(projects.Select());
            return testCases.ToArray();
        }
    }
}
```
</Description>
    <CreatedDate>28/09/2015</CreatedDate>
    <ClosedDate>29/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5484</IssueID>
    <Title>Interactive window doesn't work with Toolbox window</Title>
    <Description>Items pasted into the Toolbox window don't appear until an editor tab is open.  Double-clicking on a clipboard item in the Toolbox pastes it into the most recent editor tab - even if the Interactive window has focus.
</Description>
    <CreatedDate>28/09/2015</CreatedDate>
    <ClosedDate>02/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5481</IssueID>
    <Title>MetadataReferences return empty list for MonoAndroid and MonoTouch projects</Title>
    <Description>I created solution with 3 projects:
1. Windows Console Application
2. Xamarin Android Application
3. Xamarin iOS Application.

Only in first project, project.MetadataReferences returns not empty list. (project is Microsoft.CodeAnalysis.Project)
iOS and Android projects has references. And all projects have at least one same reference to my portable assembly.
</Description>
    <CreatedDate>28/09/2015</CreatedDate>
    <ClosedDate>23/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5443</IssueID>
    <Title>using static and instance method ambiguity</Title>
    <Description>In the code below, while the IntelliSence shows the `BitConverter.ToString` method and `Object.ToString` is not even a static method and also they accept different parameters, compiler produces the following error, which doesn't make sense.

``` C#
using static System.BitConverter;
class Program {
    static void Main(string[] args) {
        ToString(new byte[0]);  // CS1501
    }
}
```

Even if there was a static member method with the same name in the scope, I would suggest the `::` operator to disambiguate it. 

``` C#
using static System.Console;
class Program {
    static void WriteLine(string input) =&gt; ::WriteLine($"--{input}"); // Console.WriteLine
    static void Main(string[] args) =&gt; WriteLine("Log"); // Program.WriteLine
}
```
</Description>
    <CreatedDate>25/09/2015</CreatedDate>
    <ClosedDate>25/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5403</IssueID>
    <Title>[Proposal] Custom literals for string-based objects.</Title>
    <Description>A string literal or a raw string literal can be prepended by an identifier:

``` c#
var element = xml@"&lt;foo&gt;
    &lt;bar/&gt;
&lt;/foo&gt;";
var pattern = r"^[[:alpha:]]+$";
```

This is automatically rewritten to a class constructor or a static function invocation that has a matching attribute:

``` c#
[StringLiteral("r")]
public class Regex
{
    public Regex(string pattern) //A constructor that can accept a single string argument is required.
    { ... }

    [StringLiteral("ri")] [EditorBrowsable(EditorBrowsableState.Never)]
    public static Regex CreateIgnoreCase(string pattern)
    { ... }
}
```

If there are two `StringLiteral` attributes with the same parameter in scope, it is a compilation error.

Potential use cases: simplifying the syntax for regexes, constant byte arrays or UTF-8 encoded strings. If compile-time metaprogramming is ever implemented in C#, the same syntax can be reused for safe XML literals, like in VB.
</Description>
    <CreatedDate>23/09/2015</CreatedDate>
    <ClosedDate>24/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5348</IssueID>
    <Title>.NET compiler (csc.exe) ends compilation with code -2146232797 (COR_E_FAILFAST) in Release configuration</Title>
    <Description>.NET compiler (`csc.exe`) ends compilation with code `-2146232797` / `0x80131623` in `Release` configuration. 

Compiler: Microsoft (R) Visual C# version 1.0.0.50618

Microsoft Visual Studio Enterprise 2015
Version 14.0.23107.0 D14REL
Microsoft .NET Framework
Version 4.6.00079
Windows 10 Pro v10.0.10525

`-2146232797` error code equals to `COR_E_FAILFAST` according to [this article](http://blogs.msdn.com/b/eldar/archive/2007/04/03/a-lot-of-hresult-codes.aspx)

Project compiled normally as `Debug` but in `Release` configuration I got `COR_E_FAILFAST` error. There is noticeable delay before this error appears. `Debug` built in `5.5` sec, Release failed in `15.5` sec according to `MSBuild` stats.

I have made a few experiments searching for any relation to configuration and found that:
- `Optimize code` can be in any state;
- Enabling `Define DEBUG constant` leads to this error.

We use `DEBUG` constant to [conditional compile](https://msdn.microsoft.com/en-us/library/system.diagnostics.conditionalattribute%28v=vs.110%29.aspx) (via `Conditional` attribute) our extensive logging: fully logged with `DEBUG` and partially without it. 

**I think this conditional compilation seems leads to `COR_E_FAILFAST` error.**

Maybe such construction in code (conditional compilation + null-conditional operator) is a problem:
`st.Log?.Logger.ConditionalTrace("New packet: [{0}]", packet.ToString());`

**I compiled project successfully after surrounded all such constructions with `#if #endif`**

I've tried to gather any additional details via various combination of debugging compiler options: `/reportanalyzer`,  `/errorlog`, `/errorreport` and `/bugreport` but have no success since compiler always failed without any debug output.

Command line used to compile (full source file list is omitted):

&gt; "C:\Program Files (x86)\MSBuild\14.0\bin\csc.exe" /noconfig /unsafe+ /nowarn:1701,1702 /nostdlib+ /platform:AnyCPU /errorreport:prompt /warn:4 /define:TRACE /highentropyva+ /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.6\mscorlib.dll" /reference:"W:\Work\packages\NLog.4.1.1\lib\net45\NLog.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.6\System.Core.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.6\System.dll" /debug:pdbonly /filealign:512 /optimize+ /out:obj\Release\Assembly.dll /ruleset:"W:\Dev\VS2015\Team Tools\Static Analysis Tools\Rule Sets\MinimumRecommendedRules.ruleset" /subsystemversion:6.00 /target:library /utf8output Properties\AssemblyInfo.cs  "W:\Temp\AppData\Local\Temp.NETFramework,Version=v4.6.AssemblyAttributes.cs"

**Error stack trace from compiler obtained by running compiler under `WinDbg`**:

&gt; CLR: Managed code called FailFast, saying "System.NullReferenceException: Object reference not set to an instance of an object.
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteConditionalAccess(BoundConditionalAccess node, Boolean used, BoundExpression rewrittenWhenNull)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitExpressionStatement(BoundExpressionStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(BoundBlock node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitStatement(BoundStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitIfStatement(BoundIfStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(BoundBlock node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitStatement(BoundStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitIfStatement(BoundIfStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(BoundBlock node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitStatement(BoundStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitIfStatement(BoundIfStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(BoundBlock node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitStatement(BoundStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitIfStatement(BoundIfStatement node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(BoundBlock node)
&gt;    in Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawAwaitInExceptionHandler)
&gt;    in Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt)
&gt;    in Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
&gt;    in Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol symbol)
&gt;    in Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()"
&gt; ntdll!ZwTerminateProcess+0x14:
</Description>
    <CreatedDate>18/09/2015</CreatedDate>
    <ClosedDate>22/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5340</IssueID>
    <Title>Spaces missing in single-line dictionary initializers</Title>
    <Description>When Visual Studio auto-formats indexer-style C# dictionary initializers with multiple pairs on the same line, it fails to insert a space after the opening brace and separating commas.

For example, type:

```
var a = new Dictionary&lt;int,int&gt;{[1]=2,[3]=4};
```

Auto-format the document. The result is:

```
var a = new Dictionary&lt;int, int&gt; {[1] = 2,[3] = 4 };
```

The result should be:

```
var a = new Dictionary&lt;int, int&gt; { [1] = 2, [3] = 4 };
```
</Description>
    <CreatedDate>18/09/2015</CreatedDate>
    <ClosedDate>21/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5324</IssueID>
    <Title>how to emit only metadata?</Title>
    <Description>Is it possible to emit only metadata? Will it be cheaper if somehow possible? In a scenario I have I only care about metadata and not really the code.

Is it even possible? By that I mean is type-checking the only pre requisite for metadata?
</Description>
    <CreatedDate>18/09/2015</CreatedDate>
    <ClosedDate>07/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5291</IssueID>
    <Title>"CSharp.UseAutoProperty.UseAutoPropertyAnalyer" exceptions</Title>
    <Description>These appeared in my error list so I don't have a dump:

``` C#
Severity    Code    Description Project File    Line    Detail Description
Message AD0001  Analyzer 'Microsoft.CodeAnalysis.Editor.CSharp.UseAutoProperty.UseAutoPropertyAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.    CodeAnalysis        1   Analyzer 'Microsoft.CodeAnalysis.Editor.CSharp.UseAutoProperty.UseAutoPropertyAnalyzer' threw the following exception:
'System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Editor.CSharp.UseAutoProperty.UseAutoPropertyAnalyzer.GetGetterExpression(IMethodSymbol getMethod, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.UseAutoProperty.AbstractUseAutoPropertyAnalyzer`4.AnalyzeProperty(ConcurrentBag`1 analysisResults, SymbolAnalysisContext symbolContext)
   at Microsoft.CodeAnalysis.UseAutoProperty.AbstractUseAutoPropertyAnalyzer`4.&lt;&gt;c__DisplayClass13_0.&lt;Initialize&gt;b__1(SymbolAnalysisContext sac)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__DisplayClass33_0.&lt;ExecuteSymbolActionsCore&gt;b__0()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(DiagnosticAnalyzer analyzer, Action analyze)'.
```

``` C3
Severity    Code    Description Project File    Line    Detail Description
Message AD0001  Analyzer 'Microsoft.CodeAnalysis.Editor.CSharp.UseAutoProperty.UseAutoPropertyAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Sequence contains more than one element'.   CodeAnalysis        1   Analyzer 'Microsoft.CodeAnalysis.Editor.CSharp.UseAutoProperty.UseAutoPropertyAnalyzer' threw the following exception:
'System.InvalidOperationException: Sequence contains more than one element
   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.Editor.CSharp.UseAutoProperty.UseAutoPropertyAnalyzer.GetGetterExpression(IMethodSymbol getMethod, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.UseAutoProperty.AbstractUseAutoPropertyAnalyzer`4.AnalyzeProperty(ConcurrentBag`1 analysisResults, SymbolAnalysisContext symbolContext)
   at Microsoft.CodeAnalysis.UseAutoProperty.AbstractUseAutoPropertyAnalyzer`4.&lt;&gt;c__DisplayClass13_0.&lt;Initialize&gt;b__1(SymbolAnalysisContext sac)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__DisplayClass33_0.&lt;ExecuteSymbolActionsCore&gt;b__0()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(DiagnosticAnalyzer analyzer, Action analyze)'.
```
</Description>
    <CreatedDate>16/09/2015</CreatedDate>
    <ClosedDate>23/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5254</IssueID>
    <Title>ResGen doesn't recognize ".NETPortable,Version=v5.0" TFM and generates non-portable code</Title>
    <Description>Repro:
1) Add a new resource string to ScriptingResources.resx in project Scripting and build

```
src\Scripting\Core\ScriptingResources.Designer.cs(42,196,42,204): error CS1061: 'Type' does not contain a definition for 'Assembly' and no extension method 'Assembly' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)
```

2) Open ScriptingResources.resx designer:
"Could not resolve mscorlib for target framework '.NETPortable,Version=v5.0'.  This can happen if the target framework is not installed or if the framework moniker is incorrectly formatted"
</Description>
    <CreatedDate>15/09/2015</CreatedDate>
    <ClosedDate>16/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5252</IssueID>
    <Title>Feature request: expose C# project default namespace to analyzers</Title>
    <Description>Unlike VB, the C# compiler doesn't have the concept of a default namespace. There _is_ a default namespace _project_ setting, but this doesn't affect the compiler at all. It's simply used by Visual Studio to determine how to generate new files from templates.

This feature request is to expose the default namespace, when available, to analyzers. See https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/1481 for why this would be valuable.
</Description>
    <CreatedDate>15/09/2015</CreatedDate>
    <ClosedDate>21/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5194</IssueID>
    <Title>[Proposal] foreach with index, isLast, implicit locally scoped item typing</Title>
    <Description>This would be nice...

```
foreach ((item, idx) in someEnumerable) {
    ...
}
```

or

```
foreach ((item, idx, isLast) in someEnumerable) {
    ...
}
```

isFirst, isOdd, isEven, etc could still be figured out using idx.  I think this would get rid of just about every situations where I need to use a regular for loop.  

_The alternatives_
The foreach loop with a counter syntax forces me to stick the counter variable in the outer scope.  

```
var idx = 0; /* The scope on this is annoying */
foreach (var item in someEnumerable) {
  // Do something with item
  var isFirst = (idx == 0);
  var isLast = /* Impossible to figure out without iterating or converting to array? */
  idx++;
}
```

The for loop with an indexer lookup is boilerplate and maybe has a performance penalty?

```
for (var idx = 0; idx &lt; someArray.Length; idx++) {
    var item = someArray[idx]; /* This is annoying */
    var isFirst = (idx == 0);
    var isLast = (idx == someArray.Length - 1);
}
```

I realize that figuring out IsLast on an IEnumerable might be tricky/impossible unless you could somehow ToArray() on the fly.  I can live without it (or maybe restrict it to arrays and ILists)... but the indexer would be a huge time saver.
</Description>
    <CreatedDate>12/09/2015</CreatedDate>
    <ClosedDate>12/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5185</IssueID>
    <Title>"Unreachable" Exception binding file paths (something that looks like a label folowed by garbage)</Title>
    <Description>![capture](https://cloud.githubusercontent.com/assets/6464209/9828510/474f813c-58a3-11e5-8e24-4e4072c96820.PNG)

**RESULTS:**

```
&gt;   Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Watson.WatsonErrorReport.CheckThrottledSubmission(string componentName) Line 420 C#
    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Watson.WatsonErrorReport.ReportIfNecessary() Line 190    C#
    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.WatsonReporter.Report(System.Exception exception) Line 19    C#
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler) Line 151 C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.OnAnalyzerException_NoTelemetryLogging(System.Exception ex, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.Diagnostic diagnostic, Microsoft.CodeAnalysis.Diagnostics.AbstractHostDiagnosticUpdateSource hostDiagnosticUpdateSource, Microsoft.CodeAnalysis.ProjectId projectIdOpt) Line 77    C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.GetOnAnalyzerException.AnonymousMethod__0(System.Exception ex, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.Diagnostic diagnostic) Line 237  C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.Initialize.AnonymousMethod__0(System.Exception ex, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.Diagnostic diagnostic) Line 153  C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action analyze) Line 770   C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action analyze) Line 736  C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteSyntaxTreeActionsCore(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction&gt; syntaxTreeActions, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.SyntaxTree tree, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData analyzerStateOpt) Line 421   C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteSyntaxTreeActions(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction&gt; syntaxTreeActions, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.SyntaxTree tree, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt) Line 396 C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecuteSyntaxTreeActions(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 307 C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 527   C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool usingPrePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 266    C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 195   C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken) Line 686  C#
    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Line 565    C#
```
</Description>
    <CreatedDate>11/09/2015</CreatedDate>
    <ClosedDate>16/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5101</IssueID>
    <Title>IDE ignores documentation hrefs</Title>
    <Description>``` C#
namespace ClassLibrary1
{
    /// &lt;summary&gt; Follow this link:
    /// &lt;see href="https://microsoft.com"/&gt;
    /// &lt;/summary&gt;
    public class Class1
    {
    }
}
```

QuickInfo, SigHelp/MAS for Class1 don't display the link, though it is included in the documentation file generated by the compiler.
</Description>
    <CreatedDate>09/09/2015</CreatedDate>
    <ClosedDate>09/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5055</IssueID>
    <Title>REQUEST:  LINQify foreach</Title>
    <Description>Hi All,
I would like to suggest that the ForEach statement be enhanced to support syntax similar to the following:

foreach(var item in collection where item != null &amp;&amp; item &lt; 10 orderby item.Index desc) {
//Body of loop
}

this would be the same as writing:

foreach (var item in (from item in collection where item != null &amp;&amp; item &lt; 10 orderby item.Index desc select item)){
//Body of loop
}
</Description>
    <CreatedDate>07/09/2015</CreatedDate>
    <ClosedDate>18/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5037</IssueID>
    <Title>[Proposal] Void returning Func&lt;T&gt;</Title>
    <Description>`Func&lt;T&gt;` is a function that returns a `T` is fairly simple to understand, but is has the caveat that the `T` can not be `Void`. If `T` could be `Void` then `Action&lt;&gt;` would the equivalent to a `Func&lt;Void&gt;`

This would allow us to conceptually consider the proposed match expression (#5016) as a `Func&lt;...,T&gt;`. Permitting it to also used a statement.

``` c#
...
match ( ... )
{
  |: ... =&gt; foo();
  |: ... =&gt; bar();
  |: ... =&gt; baz();
  |: =&gt; meh();  
}();
...
```

One could write `return void;`, or it could be implicitly inferred.

``` c#
  =&gt; void;
  =&gt; { return void };
  =&gt; { ...;
       return void
     };
  =&gt; { ... }
```
</Description>
    <CreatedDate>05/09/2015</CreatedDate>
    <ClosedDate>06/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5025</IssueID>
    <Title>Nullables with Switch case showing strange behavior</Title>
    <Description>In Visual studio 2015 using a Nullable type in switch case having only two cases; case "null" and default ; debugger always jumps to null. As an expected behavior it must go to default. Tried using Console.Write() and running without debugging shown the same behavior. 

Steps to reproduce - 

```
       int? a = 1;
        switch (a)
        {
            case null:
                break; //even though value is 1, code runs here
            default:
                break;
        }
```

More details: http://stackoverflow.com/questions/32407191/switch-on-nullable-boolean-case-goes-to-null-when-value-is-true
</Description>
    <CreatedDate>04/09/2015</CreatedDate>
    <ClosedDate>04/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5018</IssueID>
    <Title>Proposal: Returning flat enumerables within an IEnumerable&lt;T&gt; function.</Title>
    <Description>I've personally done something like this in several cases:

``` C#
public IEnumerable&lt;string&gt; SayHello(string[] names)
{
    yield return "Hello everyone!";
    yield return "Welcome to: "
    foreach (var n in names)
    {
        yield return names;
    }
}
```

While it's a contrived example, my point is having a `foreach` whose sole purpose is to flatten the return of an enumerable. I propose something like:

``` C#
yield returnall names;
```
</Description>
    <CreatedDate>04/09/2015</CreatedDate>
    <ClosedDate>06/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>5016</IssueID>
    <Title>[Discussion]: match construct for pattern matching</Title>
    <Description>It's been mentioned several times in the different pattern matching threads (#206, #2136, #4781, #4944) so I thought I'd at least get the ball rolling with a proposal to introduce a `match` construct which would be specifically suited for pattern matching.  I more or less yoinked this syntax out of a hat and I am not married to it so feel free to suggest alternatives.  I chose to follow the lambda syntax fairly closely as I think that most C# developers should be fairly familiar with the rules of writing lambda expressions and anonymous function bodies so the behavior of encountering a `return` within the body should not be confusing.
### Syntax:

The syntax would be as follows:

&gt; match-expression:
&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;match ( `expression` ) `match-block`
&gt; 
&gt; match-block:
&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`match-sections`_&lt;sub&gt;opt&lt;/sub&gt;_
&gt; 
&gt; match-sections:
&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`match-section`
&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`match-sections`, `match-section`
&gt; 
&gt; match-section:
&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`pattern` `guard-block`&lt;sub&gt;opt&lt;/sub&gt; =&gt; `anonymous-function-body`
&gt; 
&gt; guard-block:
&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;when ( `expr` )

I've attempted to adopt this grammar from the `switch` syntax in §8.7.2 of the C# 5.0 specification, feel free to correct.

The `match` statement can be used as both a statement and an expression.  In the case of being used as an expression the inferred result type of each of the `anonymous-function-body`s within each `match-section` must be inferred to the same type which is the result type of the `match` expression itself.

The `match` statement must be complete meaning that all possible patterns must be checked otherwise it will result in a compile-time error.

Differences between `switch` and `match` in statement form:
- Identifier scope is limited to within each `match-section`.  This applies to both identifiers use with `var` patterns as well as variables defined within the `anonymous-function-body`.
- Each `match-section` is self-contained and there is no automatic fall-through.  In short, it is not necessary to `break` out of a section.
- It is not possible to return out of the method enclosing the `match` statement.  The `return` statement instead acts as a way to break out of the current `match-section`.
### Examples:
##### `match` as an expression:

When using `match` in an expression the result type of each of the expressions or anonymous function bodies must be inferred to the same type.  That type cannot be `void`.

``` cs
var area = match (shape) {
    Point(*, *) =&gt; 0,
    Line(Point(*, *), Point(*, *)) =&gt; 0,
    Square(var width) =&gt; Rectangle(width, width),
    Rectangle(var width, var height) =&gt; width * height,
    Circle(var radius) =&gt; {
        double pi = Math.PI;
        return (radius * radius * pi);
    },
    * =&gt; throw new InvalidOperationException("Unrecognized shape!")
};
```
##### `match` as a statement:

When using `match` in a statement the result type of each of the expressions or anonymous function bodies must be inferred to return `void`.

``` cs
match (shape) {
    Point(var x, var y) =&gt; Console.WriteLine($"Shape is a point at ({x}, {y})."),
    Line(Point(var x, var y), Point(var x2, var y2)) =&gt;
        Console.WriteLine($"Shape is a line from ({x}, {y}) to ({x2}, {y2})."),
    Square(var width) =&gt;
        Console.WriteLine($"Shape is a square where each side is {width}."),
    Rectangle(var width, var height) =&gt;
        Console.WriteLine($"Shape is a rectangle of {width} by {height}."),
    Circle(var radius) =&gt; {
        if (radius &lt;= 0) {
            return; // breaks out of the match expression
        }
        Console.WriteLine($"Shape is a circle with a radius of {radius}.")
    },
    Hexagon(*) =&gt; throw new InvalidOperationException("I don't like hexagons."),
    * =&gt; Console.WriteLine("I don't know what kind of shape this is!")
};
```

In the case of a simple `expression` the inferred result type can be anything but will be discarded, similarly to how you can assign a lambda that calls a function that returns a value to an `Action` delegate.

``` cs
StringBuilder builder = ...;

 // legal, the return type of AppendLine is discarded
Action action = () =&gt; builder.AppendLine("foo");

match (shape) {
    // legal, the return type of AppendLine is discarded 
    Point(var x, var y) =&gt; builder.AppendLine($"Point ({x}, {y})"),

    // not legal, the body cannot explicitly return a value
    Line(Point(var x, var y), Point(var x2, var y2)) =&gt; {
        return builder.AppendLine("");
    },
    * =&gt; { } // do nothing, for completeness
};
```

This is the equivalent `switch` statement:

``` cs
switch (shape) {
    case Point(var x, var y):
        Console.WriteLine($"Shape is a point at ({x}, {y}).");
        break; // must explicitly deal with fall-through
    case Line(Point(var x1, var y1), Point(var x2, var y2)): // cannot reuse identifiers
        Console.WriteLine($"Shape is a line from ({x}, {y}) to ({x2}, {y2}).");
        break;
    case Square(var width):
        Console.WriteLine($"Shape is a square where each side is {width}.");
        break;
    case Rectangle(var width2, var height2):
        Console.WriteLine($"Shape is a rectangle of {width} by {height}.");
        break;
    case Circle(var radius):
        if (radius &lt;= 0) {
            break;
        }
        Console.WriteLine($"Shape is a circle with a radius of {radius}.");
        break;
    case Hexagon(*):
        throw new InvalidOperationException("I don't like hexagons.");
    default:
        Console.WriteLine("I don't know what kind of shape this is!");
        break;
};
```
</Description>
    <CreatedDate>04/09/2015</CreatedDate>
    <ClosedDate>11/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4980</IssueID>
    <Title>[Proposal] Compile time inheritance aka includes for reducing code duplication</Title>
    <Description>Very often we have the same properties for entity on multiple application layers so we have to copy them here and there or break layering and access underlying entities directly. What if we could specify a single source for such cases?

I would like to have a possibility to keep members in one place. And the same for structs!

Example:

```
class UserDataMinReadOnly
{
    public virtual int Id { get; protected set; }

    public virtual string Nickname { get; protected set; }
}

class UserDataMin
    includes UserDataMinReadOnly
{
    // protected to public change!
    public virtual int Id { get; set; }

    public virtual string Nickname { get; set; }
}

class UserDataExtension
{
    public virtual string GameCenterId { get; set; }

    public virtual long? FacebookId { get; set; }

    public virtual int TotalPlayTimeS { get; set; }

    public virtual int HighestDamageDealt { get; set; }

    public string Country { get; set; }
}

class UserDbEntity // should not have nested objects except relational references
    includes UserDataMin, UserDataExtension
{
}

class UserShortInfoDbEntity // should not have nested objects except relational references
    includes UserDataMin
{
    public virtual int Score { get; set; }
}

class UserLogicLayer // we don't want to allow users write directly to db entities
    //includes UserDataMinReadOnly
{
    void Initialize()
    {
        // Id = ...
    }

    void RegisterFacebook(long facebookId)
    {
        // ...
    }
}

[NetworkEvent] // what if nested objects can't be serialized?
class NetworkUserDataEvent : NetworkEvent
    includes UserDataMinReadOnly
{
     public override byte EventCode =&gt; 0;
}
```

When compiling included members should be statically copied to their destination classes.

So, what do you think?
</Description>
    <CreatedDate>03/09/2015</CreatedDate>
    <ClosedDate>03/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4957</IssueID>
    <Title>C# compiler fails with exit code: -2146232797</Title>
    <Description>**Steps to Reproduce**
1. Copy code below into VS2015
2. Build code

``` csharp
using System;
using System.Threading.Tasks;

namespace RoslynCompilerIssue
{
    class MyClass
    {
        private int _field = 0;

        public async Task A()
        {
            object user;
            var x = (_field == null || (user = await B()) == null);
        }

        Task&lt;object&gt; B()
        {
            return null;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("It works.");
        }
    }
}

```

**Expected**
Builds successfully

**Actual**
Error with message `"csc.exe" exited with code -2146232797.`
</Description>
    <CreatedDate>02/09/2015</CreatedDate>
    <ClosedDate>15/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4918</IssueID>
    <Title>No intellisense after using typeof(T) in a Select statement</Title>
    <Description>**Steps to reproduce**
1. Copy code below:
2. Expected that the next line intellisense's suggests more LINQ operations, it does not happen in VS 2015.
3. Pressing F12 on GetValue crashes VS too.

``` C#
using System.Linq;
using System.Text;

public static class LazyToStringExtension
{
    public static string LazyToString&lt;T&gt;(this T obj) where T : class
    {
        StringBuilder sb = new StringBuilder();
        typeof(T)
            .GetProperties(System.Reflection.BindingFlags.Public)
            .Select(x =&gt; x.GetValue(obj))
            .
    }
}
```

Internal bug: 1207218

_Comment in Bug_

&gt; It seems that there is some problem inferring the type of the Select after a typeof.  Hovering over GetValue doesn't show anything, select doesn't have it's return type inferred, etc.
&gt; If I extract a local for the typeof(T), then this works as expected.
</Description>
    <CreatedDate>01/09/2015</CreatedDate>
    <ClosedDate>11/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4888</IssueID>
    <Title>IDE0004 - Incorrect "Redundant cast" when not casting would cause sign extension</Title>
    <Description>You have to stop warning on "Redundant cast" for operations that can change number sign.

There are conditions for filter this warning:
1. If casting type use the same number of bytes or less.
2. If casting type change form from unsigned to signed and vice versa.

You really stop displaying warning in such that case:

``` csharp
ulong somenumber = Math.Pow(2^63);
double factor = (long)somenumber; // Cast number to signed and store in double for future use as a factor
factor /= long.MaxValue;
```

Really do I need to write this?

``` csharp
ulong somenumber = Math.Pow(2^63);
long temp = (long)somenumber;
double factor = temp;
factor /= long.MaxValue;
```
</Description>
    <CreatedDate>30/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4884</IssueID>
    <Title>Proposal: Improved type aliases </Title>
    <Description>Currently we can define type aliases as follow
`using Cache = System.Collections.Generic.Dictionary&lt;string, string&gt;;`
but it does not support generic types and needs to be written with full namespaces
`using Cache&lt;T&gt; = Dictionary&lt;string, T&gt;;`
and also it is only in the file scope.

In the context of DDD, it would be a useful feature to have generic and universal type aliases so we can write methods and extension methods for specific yet simple types like
`using EmailAddress = string;`
</Description>
    <CreatedDate>29/08/2015</CreatedDate>
    <ClosedDate>08/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4843</IssueID>
    <Title>Proposal: A bottom type for C#</Title>
    <Description>With the introduction of Generic covariance and contravariance in C#, it is clearer that the language would benefit from having a [bottom type](https://en.wikipedia.org/wiki/Bottom_type)--a type which is a subtype of all types.

This would be similar to `undefined` in Haskell, `Nothing` in Scala, `!` in Rust, 
### Benefits of a bottom-type

Collections, optional types, and type unions commonly use bottom types to make a language more expressive, but also reduce duplication/allocations, etc.

``` cs
/// Empty IEnumerable
/// right now we use Enumerable.Empty&lt;T&gt;() and Array&lt;T&gt;.Empty, which
/// allocates an empty array for each type T. But Enumerable is covariant,
/// thus IEnuemrable&lt;bottom-type&gt; could be a valid "empty" enum:
public static class Enumerable {
    public static readonly IEnumerable&lt;undefined&gt; None = new EmptyEnumerable();

    public static IEnumerable&lt;T&gt; Empty&lt;T&gt;() { // backwards compat
        return None;
    }

    private static EmptyEnumerable : IEnumerable&lt;undefined&gt;, IEnumerator&lt;undefined&gt; {
        undefined Current =&gt; throw new NotSupportedException();
        bool MoveNext() =&gt; false;

        object IEnumerable.Current =&gt; Current

        IEnumerator&lt;undefined&gt; GetEnumerator() =&gt; this;
    }
}

// since C# arrays are covariant, and empty arrays are immutable, we can
// actually do this for empty arrays as well:
public static class Array {
    public static readonly undefined[] Empty = new undefined[0];
}
public class Array&lt;T&gt; {
    public static readonly Empty = Array.Empty;
}
```

``` cs
interface List&lt;out T&gt; {
    T Head { get; }
    List&lt;T&gt; Tail { get; }
}

public static class List {
    private static class EmptyList : List&lt;undefined&gt; {
        undefined Head =&gt; throw new NotSupportedException();
        List&lt;undefined&gt; Tail =&gt; throw new NotSupportedException();
    }
    private static class NonEmpty&lt;T&gt; : List&lt;T&gt; {
        private readonly T _head;
        private readonly List&lt;T&gt; _tail;

        public T Head =&gt; _head;
        public List&lt;T&gt; Tail =&gt; _tail;

        public NonEmpty(T head, List&lt;T&gt; tail) { _head = head; _tail = tail; }
    }

    public static readonly List&lt;undefined&gt; None = new EmptyList();
    public static List&lt;T&gt; Single&lt;T&gt;(T item) =&gt; new NonEmpty&lt;T&gt;(item, None);
    public static List&lt;T&gt; Cons&lt;T&gt;(T item, List&lt;T&gt; rest) =&gt; new NonEmpty&lt;T&gt;(item, rest);
}
```
### What a bottom-type could look like in C

Bottom types are usually ''unoccupied'' types, meaning that there is no valid value that represents the bottom types. Some languages have ''occupied'' bottom types (think `undefined` in JavaScript), where a value exists which satisfies the property of being a sub-type of all possible types.

If there were no value types in C#, then `typeof(null)` would have been a great candidate for an occupied bottom type.

We can do better. We can have a value type that is never assignable, which would make code a lot cleaner. My main proposal: the type of the expression that always throws is the bottom type.
#### Proposal: `undefined`/`throwing`/`bottom`

I propose that C#'s bottom type (whatever it is called) should be the **type of the expression that always throws**.

I think this extends the language cleanly and makes the most sense. Check the implementation of `EmptyList` above to see how it works naturally. Accessing a value in an empty array would also always throw an out-of-range exception. Attempt to access `Current` of an empty enumerable will always throw. etc.

This is also useful for delegates, etc.:

``` cs
Func&lt;int, string&gt; f1 = (_) { throw new NotSupportedException(); };
Func&lt;int, bool&gt; f2 = (_) { throw new NotSupportedException(); };
Func&lt;int, object&gt; f3 = (_) { throw new NotSupportedException(); };
Func&lt;int, Point&gt; f4 = (_) { throw new NotSupportedException(); };

// can have:
Func&lt;int, undefined&gt; throwing = (_) =&gt; throw new NotSupportedException();
// now an expression =&gt; throw ...; will actually resolve to type undefined instead
// of complaining about not being able to infer the return type.
f1 = throwing;
f2 = throwing;
f3 = throwing;
f4 = throwing;
```
#### Non-Proposal: `void`

A strawman proposal is to use `void` as the bottom type. I want to call that out as a bad option. We currently do not have `void` declarations (compile error), and cannot use void-returning functions in expressions.
</Description>
    <CreatedDate>27/08/2015</CreatedDate>
    <ClosedDate>27/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4810</IssueID>
    <Title>IDE0004 - Incorrect "Redundant cast" when not casting would cause sign extension</Title>
    <Description>Microsoft Visual Studio Enterprise 2015
Version 14.0.23107.0 D14REL
Microsoft .NET Framework
Version 4.6.00079
Installed Version: Enterprise
Language: C#

Quick action suggests the cast to uint is redundant in the following function, except not having the cast to uint will cause the int to be sign-extended to long instead of zero-extended.

```
    public static long ToLong(int high, int low)
    {
        return (((long)high) &lt;&lt; 32) | (uint)low;
    }
```

![vs ide0004 bug](https://cloud.githubusercontent.com/assets/8552197/9500205/1d892b54-4bf2-11e5-9943-dfd3f130fc05.png)
</Description>
    <CreatedDate>26/08/2015</CreatedDate>
    <ClosedDate>26/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4748</IssueID>
    <Title>ArgumentException when manually invoking tests for specific DLL</Title>
    <Description>I followed the instructions on the contribution guide in building tests:

```
msbuild /v:m /m BuildAndTest.proj /p:PublicBuild=true /p:DeployExtension=false
```

And at some point I also decide re-build a more specific project

```
msbuild /v:m /m src\EditorFeatures\CSharpTest\CSharpEditorServicesTest.csproj /p:PublicBuild=true /p:DeployExtension=false
```

(which actually ended up deploying the rest of the DLLs)

And invoked xunit directly on the DLL I am interested in testing:

```
packages\xunit.runners.2.0.0-alpha-build2576\tools\xunit.console.x86.exe Binaries\Debug\Roslyn.Services.Editor.CSharp.UnitTests.dll -noshadow
```

```
xUnit.net console test runner (32-bit .NET 4.0.30319.42000)
Copyright (C) 2014 Outercurve Foundation.

Starting: Roslyn.Services.Editor.CSharp.UnitTests.dll
.... lots of skips ....

   System.ArgumentException [FATAL]
      Ambiguous method named TestEquivalenceKey in type Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Diagnostics.GenerateMethod.GenerateMethodTests+GenerateConversionTest
      Stack Trace:
            at Xunit.Sdk.Executor.RunTests..ctor(Executor executor, String _type, List`1 _methods, Object _handler)
Finished: Roslyn.Services.Editor.CSharp.UnitTests.dll

=== TEST EXECUTION SUMMARY ===
   Roslyn.Services.Editor.CSharp.UnitTests.dll  Total: 11580, Failed: 0, Skipped: 43
```

The `ArgumentException` is not being reported in the test summary. Its also unclear if this error always happens but is failed to be reported in the `BuildAndTest` target, or if it only happens when targeting a specific DLL.
</Description>
    <CreatedDate>24/08/2015</CreatedDate>
    <ClosedDate>22/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4737</IssueID>
    <Title>Goto and labels don't work in interactive/scripts</Title>
    <Description>``` C#
Label: ; 
goto Label;
```

```
error CS0159: No such label 'Label' within the scope of the goto statement
```

See test `TopLevelLabel`.

Related internal bug: 522569
- Labels should be scoped to the containing script/submission (i.e. cross-submission and cross-file gotos are not allowed).
- Goto should work just like it works in method bodies.
- Principle: Copy &amp; paste from regular C# method should work.
</Description>
    <CreatedDate>22/08/2015</CreatedDate>
    <ClosedDate>06/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4736</IssueID>
    <Title>Stepping through Roslyn while Debugging VSIX</Title>
    <Description>Now that I am able to build Roslyn, I am trying to figure out how to step through my application as it calls Roslyn. I have tried disabling "Just My Code", pointing Symbol Server at ..\Roslyn\Binaries\debug. Then from one instance of Visual Studio I start debugging, a second instance of Visual Studio opens, I open a test application that uses my refactoring. In the original VS instance I set breakpoint to a line where I call into Roslyn (specifically Project.AddDocument). When I hit the breakpoint, I select "step into" and VS happily does a step over. If I set a function Breakpoint at AddDocument, I break with a screen as shown below, it does not show what breakpoint was hit, what source is not available and there is no option to browse to source. 
![capture](https://cloud.githubusercontent.com/assets/12789369/9423164/d88c6e30-486d-11e5-8393-c87173dede00.JPG)

If I am going about this completely wrong, please point to correct instructions.
</Description>
    <CreatedDate>22/08/2015</CreatedDate>
    <ClosedDate>22/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4670</IssueID>
    <Title>[Feture Request] Auto Cast</Title>
    <Description>Add ability to call to concreate type if I know that object is of that type:

if( someObj is IGraphics )
    someObj.Render(); //Bo beed to additionally write cast operation because we already check someObj for IGraphick interface.
</Description>
    <CreatedDate>20/08/2015</CreatedDate>
    <ClosedDate>21/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4653</IssueID>
    <Title>Outline collapse with "# region xyzzy" shows "n xyzzy" instead of "xyzzy"</Title>
    <Description>Load the following code in VS and collapse the region. It shows "n xyzzy".

``` cs
namespace Whatever
{
    class Program
    {
        # region xyzzy
        static void MainXX(string[] args)
        {
        }
        #endregion
    }
}
```
</Description>
    <CreatedDate>19/08/2015</CreatedDate>
    <ClosedDate>19/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4646</IssueID>
    <Title>Invalid 'Cast is redundant' Inspection Inside Format String</Title>
    <Description>The following test case will pass in Visual Studio 2015:

```
var colourString = $"Colour value: {(int) ConsoleColor.Red}";

Assert.Equal("Colour value: 12", colourString);
```

However I get an invalid Roslyn inspection come up on the cast to int:

![invalidinspection](https://cloud.githubusercontent.com/assets/345796/9354902/2fb91e5a-466c-11e5-80aa-96d1ddf7ca8b.png)

If I go ahead with that inspection and remove the cast then my code will break as the `ConsoleColor.Red.ToString()` will be used instead, giving `colourString` the value `"Colour value: Red"` instead.
</Description>
    <CreatedDate>19/08/2015</CreatedDate>
    <ClosedDate>19/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4635</IssueID>
    <Title>ArgumentOutOfRangeException during extract method </Title>
    <Description>Crash dump:

```
%internal_share%\public\tomat\Bugs\4635
```

Stack trace

```
"Specified argument was out of the range of valid values.\r\nParameter name: index"

   at Microsoft.VisualStudio.Text.Utilities.FrugalList`1.get_Item(Int32 index) in f:\dd\src\Platform\Text\Util\TextDataUtil\FrugalList.cs:line 254
   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionSnapshot.MapToSourceSnapshot(Int32 position) in f:\dd\src\Platform\Text\Impl\TextModel\Projection\ProjectionSnapshot.cs:line 483
   at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToInsertionPoint(SnapshotPoint position, PointTrackingMode trackingMode, Predicate`1 match) in f:\dd\src\Platform\Text\Impl\TextModel\Projection\BufferGraph.cs:line 168
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.IBufferGraphExtensions.MapUpOrDownToBuffer(IBufferGraph bufferGraph, SnapshotPoint point, ITextBuffer targetBuffer) in F:\Builds\5433\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\EditorFeatures\Core\Shared\Extensions\IBufferGraphExtensions.cs:line 66
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetCaretPoint(ITextView textView, ITextBuffer subjectBuffer) in F:\Builds\5433\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\EditorFeatures\Core\Shared\Extensions\ITextViewExtensions.cs:line 34
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetCaretPoint(ITextView textViewOpt, ITextBuffer subjectBuffer) in F:\Builds\5433\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\EditorFeatures\Core\Tagging\AbstractAsynchronousTaggerProvider.cs:line 153
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.RecomputeTagsForeground() in F:\Builds\5433\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\EditorFeatures\Core\Tagging\AbstractAsynchronousTaggerProvider.TagSource_ProduceTags.cs:line 288
   at Microsoft.CodeAnalysis.Editor.Implementation.ForegroundNotification.ForegroundNotificationService.NotifyOnForegroundWorker() in F:\Builds\5433\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\EditorFeatures\Core\Implementation\ForegroundNotification\ForegroundNotificationService.cs:line 116
   at Microsoft.CodeAnalysis.Editor.Implementation.ForegroundNotification.ForegroundNotificationService.NotifyOnForeground() in F:\Builds\5433\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\EditorFeatures\Core\Implementation\ForegroundNotification\ForegroundNotificationService.cs:line 90
   at Roslyn.Utilities.TaskFactoryExtensions.&lt;&gt;c__DisplayClass1_0.&lt;SafeStartNew&gt;b__0() in F:\Builds\5433\DevDiv\Roslyn-Master-Signed-Release\src\Open\src\Workspaces\Core\Portable\Utilities\TaskFactoryExtensions.cs:line 30
```
</Description>
    <CreatedDate>18/08/2015</CreatedDate>
    <ClosedDate>18/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4592</IssueID>
    <Title>FxCop CA2235 is unaware of primitive types, such as strings, ints or enums</Title>
    <Description>Hi,

I'm using Microsoft.CodeAnalysis.FxCopAnalyzers v1.0.1.

I have a field (auto property) which is of type string (or an int, or an enum...).
However, I get a false positive violation of CA2235:

```
    public string MyProperty { get; }
```

Best regards,
Ralf
</Description>
    <CreatedDate>17/08/2015</CreatedDate>
    <ClosedDate>29/02/2016</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4507</IssueID>
    <Title>Definite assignment not identified after dynamic call</Title>
    <Description>Simplified from [this](http://stackoverflow.com/q/31961411/215380) StackOverflow question.

Given the following code

```
decimal a, b;
var q = decimal.TryParse((dynamic)"10", out a) &amp;&amp; decimal.TryParse("15", out b) &amp;&amp; a &lt;= b;
```

VS2015 fails to build with error CS0165: "Use of unassigned local variable 'b'".

If you remove the `dynamic` cast, the project builds.

This reportedly built in VS2013, but does not for me on a system with both 2013 and 2015 installed.
</Description>
    <CreatedDate>12/08/2015</CreatedDate>
    <ClosedDate>12/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4503</IssueID>
    <Title>Reset command should always restore the environment to the same state ..</Title>
    <Description>as it was after the last reset command. Currently it brings it back to the default reset state and does not honor the reset that user had explicitly done. We need to create new smart reset command for C# and VB interactive.
</Description>
    <CreatedDate>12/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4484</IssueID>
    <Title>Incorrect redundant cast diagnostic</Title>
    <Description>This cast is not redundant:

``` C#
str.Select(ch =&gt; $"\\u{(int)ch:x4}");
```
</Description>
    <CreatedDate>11/08/2015</CreatedDate>
    <ClosedDate>11/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4413</IssueID>
    <Title>C# feature idea: Using 'new' without the type name to call constructors</Title>
    <Description>Taken from: https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/9216582-using-new-without-the-type-name-to-call-construc

Similarly how the `var` keyword makes it simpler to declare an object in C#, the `new` keyword could also imply the type/constructor to be used to initialize an object.

For example:

``` C#
// instead of writing:
Dictionary&lt;string, List&lt;Tuple&lt;int, int&gt;&gt;&gt; data = new Dictionary&lt;string, List&lt;Tuple&lt;int, int&gt;&gt;&gt;();
// one could write simply: 
Dictionary&lt;string, List&lt;Tuple&lt;int, int&gt;&gt;&gt; data = new();
```

The compiler would be able to match constructor overloads as well, so potentially you could do the following:

``` C#
// instead of writing:
StringBuilder data = new StringBuilder("test data", 1000);
// one could write:
StringBuilder data = new("test data", 1000);
```

This feature might be useful in list initializers too, e.g.: 

``` C#
List&lt;StringBuilder&gt; builders = new() 
{ 
  new("builder1-data", 100), 
  new("builder2-data", 100), 
  new() 
};
```

And contrary to `var` it could be used in class member initialization.
</Description>
    <CreatedDate>07/08/2015</CreatedDate>
    <ClosedDate>13/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4410</IssueID>
    <Title>Non-unicode source code with Cyrillic symbols in identifiers leads either to unexpected results, or compilation errors</Title>
    <Description>Hi.
Consider this code:

```
using System;

class Program
{
    enum Цвета
    {
        Красный,
        Желтый,
        Зеленый
    }

    public static void Main()
    {
        Console.WriteLine(Цвета.Красный);
    }
}
```

Identifiers here (particularly, `enum`) contain Cyrillic symbols. If this code will be saved to the cs file, using WIN-1251 code page, it will be compiled, but the output will be "E?aniue" instead of "Красный".

The "old" compiler (from "%Windir%\Microsoft.NET...") compiles this code correctly, the program output is "Красный". Saving source to UTF-8 also helps.

Using Rolsyn from VS 2015 with this bug leads to compilation errors in output window, while IntelliSense works fine.
</Description>
    <CreatedDate>07/08/2015</CreatedDate>
    <ClosedDate>13/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4373</IssueID>
    <Title>Visual Basic IntelliSense Problem</Title>
    <Description>Visual Basic .Net - Visual Studio 2015 Issues
1) Non-Shared Members are listed while pressing dot after class name
![i1](https://cloud.githubusercontent.com/assets/11090613/9108037/06cbd590-3c45-11e5-93f6-8457beccdac7.png)
2) Pressing Ctrl+S moves cursor to next line at first instead of keeping it there (if file is not saved)
3) Sometimes pressing Enter moves cursor to next to next line
![i1](https://cloud.githubusercontent.com/assets/11090613/9108201/e2138940-3c45-11e5-976e-669d5ca1bd9d.png)
4) There are other very little experience issues as compared to VB.net of VS 2013
</Description>
    <CreatedDate>06/08/2015</CreatedDate>
    <ClosedDate>07/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4342</IssueID>
    <Title>Does Roslyn change the way of compiling an expression that uses Nullable enum?</Title>
    <Description>The following code prints different results between VS2015 and VS2013:

```
namespace ConsoleApplication1
{
    enum YesNo
    {
        Yes,
        No
    }

    class MyType
    {
        public string Name { get; set; }
        public YesNo? YesNo { get; set; }        
    }

    class Program
    {
        static void Main(string[] args)
        {

            Expression&lt;Func&lt;MyType, bool&gt;&gt; expr = (MyType x) =&gt; x.YesNo == YesNo.Yes;
            Console.WriteLine(expr.ToString());

            Console.ReadLine();
        }
    }

}
```

The result from VS2013 (without VS2015 installed) is:

```
x =&gt; (Convert(x.YesNo) == Convert(Yes))
```

However the result from VS2015 is:

```
x =&gt; (Convert(x.YesNo) == Convert(Convert(Yes)))
```

This difference is currently causing an issue for us. Also a Telerik customer [found the same issue](http://www.telerik.com/forums/net-4-6-enum-in-where-expression)

We are using BLToolkit for data access, the current issue we have is that:

Originally (purely on VS2013), the 

```
People.Where(i=&gt;i.YesNo == Yes.Yes)
```

will be converted into

```
x =&gt; (Convert(x.YesNo) == Convert(Yes))
```

and then is converted into

```
x =&gt; x.YesNo == Y
```

and then eventually is translated into SQL (BLToolKit do the SQL convert)

```
select * from Person p
where p.YesNo = 'Y'
```

which is a correct result.

However, now, the same query (expression) is translated into

```
x =&gt; (Convert(x.YesNo) == Convert(Convert(Yes)))
```

which is converted into 

```
x =&gt; x.YesNo == Convert(Y)
then
x =&gt; x.YesNo == 1
```

then this is translated into SQL (BLToolKit do the SQL convert)

```
select * from Person p
where p.YesNo = '1'
```

which is unexpected to us.

Is this difference caused by design or is this a bug?

Is this issue caused by .NET Roslyn compiler or .NET 4.6 ?
</Description>
    <CreatedDate>05/08/2015</CreatedDate>
    <ClosedDate>07/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4302</IssueID>
    <Title>Static method resolution in a non-ambiguous context fails to compile</Title>
    <Description>When I have a class that has overloaded method signatures with default values, trying to access a method in a static context versus an object context, the compiler seems to take issue with trying to access the static method. Here's an example:

https://dotnetfiddle.net/TuBjZl

``` csharp
using System;

public class Program
{
    public static void Main()
    {
        Foo.Bar();
    }
}

public class Foo
{
    public void Bar() {
    }

    public static void Bar(string arg1 = "", int arg2 = 0) {
    }
}
```

Compiler returns error:  `Compilation error (line 7, col 3): An object reference is required for the non-static field, method, or property 'Foo.Bar()'`

It's very clear in this situation that I'm trying to access the static method, but the instance-level method is preventing that from happening. This is easily worked around by simply calling `Foo.Bar("")`, but I don't feel that this should be necessary.
</Description>
    <CreatedDate>03/08/2015</CreatedDate>
    <ClosedDate>07/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4298</IssueID>
    <Title>windows-1251 Cyrillic variable names problem</Title>
    <Description>I have a problem when compiling source files encoded in windows-1251 with variable names in Cyrillic. The compiler begins issuing an error message: **error BC30037: the Character is not valid**.

As I found out when the encoding of the source file is not UTF8, the compiler tries to read the file using encoding windows-1252. Because of this a compile-time error occurs.

src\Compilers\Core\Portable\ EncodedStringText.cs:

```
/// &lt;summary&gt;
/// Encoding to use when UTF-8 fails. If available, we use CodePage 1252. If not, we use Latin1.
/// &lt;/summary&gt;
private static readonly Encoding s_defaultEncoding = GetDefaultEncoding();

private static Encoding GetDefaultEncoding()
{
    try
    {
        return PortableShim.Encoding.GetEncoding(1252);
    }
    catch (NotSupportedException)
    {
        return Encoding.GetEncoding(name: "Latin1");
    }
}
```
</Description>
    <CreatedDate>03/08/2015</CreatedDate>
    <ClosedDate>03/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4271</IssueID>
    <Title>Incorrect "Cast is redundant" suggestion</Title>
    <Description>In interpolated strings, VS2015 is suggesting that casting enums to ints is redundant.

```
public enum Foo
{
    One,
    Two
}

$"{(int)Foo.One}, {Foo.One}"
```

Output should be "0, One", but the suggestion would change it to "One, One". 
</Description>
    <CreatedDate>31/07/2015</CreatedDate>
    <ClosedDate>31/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4227</IssueID>
    <Title>VS crash in microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.Classification.AbstractClassificationService+_AddSemanticClassificationsAsync_d__5.MoveNext</Title>
    <Description>Repro:

1) type something like:

protected override void DisposeManagedResources()
{
  this.themeService?.ThemeChange // type this line

  base.DisposeManagedResources();
}

Result:

http://watson/BucketDetails?iBucket=128882364743&amp;EventType=122

2453ca50 02f29ef6 microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.FailFast.OnFatalException+0x26
2453ca5c 02f26b0d microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report+0x45
2453ca70 5fb728cc microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled+0x32cebc
2453ca78 5f855b9f microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.Classification.AbstractClassificationService+_AddSemanticClassificationsAsync_d__5.MoveNext+0x15f
2453dbe8 5e649b87 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.GetEventSymbol+0x50c20f
2453dbfc 5e13d8b3 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.CheckEventValueKind+0x23
2453dc28 5e012669 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.CheckValueKind+0xc9
2453dc40 5e01235e microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.CheckValue+0x4e
2453dcbc 1264b5cd microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindConditionalAccessExpression+0x8d
2453dcf8 5e606d4c microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal+0x5f545c
2453dd44 5e0118c0 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression+0x20
2453dd64 5e1379ad microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindCompoundAssignment+0x5d
2453dfe8 5e011ae9 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal+0x1f9
2453e034 5e0118c0 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression+0x20
2453e054 5e0356b0 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement+0x20
2453e080 5e0327d5 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.Binder.BindStatement+0x65
2453e094 5e0e99bc microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement+0x3c
2453e0a8 5e0e53f0 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind+0x40
2453e0c4 5e0e9976 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind+0x26
2453e0d8 5e0e457c microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes+0x14c
2453e13c 5e0e440a microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode+0xa
2453e144 5e0e3f37 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes+0x47
2453e168 5e0e1554 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker+0x34
2453e194 5e0e0a42 microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker+0x52
2453e200 5e0dfd2b microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo+0x4b
2453e21c 5dfe254c microsoft_codeanalysis_csharp_ni!Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo+0x2c
2453e230 615d5afa microsoft_codeanalysis_csharp_workspaces_ni!Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax+0x3a
2453e258 615d5aa9 microsoft_codeanalysis_csharp_workspaces_ni!Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyNode+0x29
2453e268 5f8568ea microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.Classification.AbstractClassificationService+Worker.ClassifyNode+0xba
2453e2b8 5f856724 microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.Classification.AbstractClassificationService+Worker.ProcessNodes+0x134
2453e368 5f856541 microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.Classification.AbstractClassificationService+Worker.Classify+0xf1
2453e3d0 5f855b34 microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.Classification.AbstractClassificationService+_AddSemanticClassificationsAsync_d__5.MoveNext+0xf4
2453e430 1fa78b2a mscorlib_ni!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractClassificationService+_AddSemanticClassificationsAsync_d__5,_Microsoft.CodeAnalysis.Workspaces]]+0x42
2453e484 5f82d239 microsoft_codeanalysis_workspaces_ni!Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync+0x89
2453e4fc 5f3b8ea9 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Implementation.Classification.AbstractEditorClassificationService.AddSemanticClassificationsAsync+0xc9
2453e544 5f3b8c13 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationTaggerProvider+TagProducer+_ProduceTagsAsync_d__3.MoveNext+0x243
2453e5a8 5f3b8991 mscorlib_ni!System.Runtime.CompilerServices.AsyncTaskMethodBuilder_1[[System.__Canon,_mscorlib]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationTaggerProvider+TagProducer+_ProduceTagsAsync_d__3,_Microsoft.CodeAnalysis.EditorFeatures]]+0x3d
2453e600 5f3b893b microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationTaggerProvider+TagProducer.ProduceTagsAsync+0x7b
2453e678 5f3ad0a6 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractSingleDocumentTagProducer_1[[System.__Canon,_mscorlib]].ProduceTagsAsync+0xa6
2453e6c4 5f3b4b09 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource_1+_RecomputeTagsAsync_d__32[[System.__Canon,_mscorlib]].MoveNext+0xb9
2453e718 5f3b4a13 mscorlib_ni!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource_1+_RecomputeTagsAsync_d__32[[System.__Canon,_mscorlib]],_Microsoft.CodeAnalysis.EditorFeatures]]+0x5f
2453e774 5f3b49a0 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource_1[[System.__Canon,_mscorlib]].RecomputeTagsAsync+0x90
2453e800 5f3c83d8 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.SemanticBufferTagSource_1[[System.__Canon,_mscorlib]].__n__0+0x28
2453e828 5f3b82ab microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.SemanticBufferTagSource_1+_RecomputeTagsAsync_d__5[[System.__Canon,_mscorlib]].MoveNext+0x34b
2453e974 5f3b7f27 mscorlib_ni!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.SemanticBufferTagSource_1+_RecomputeTagsAsync_d__5[[System.__Canon,_mscorlib]],_Microsoft.CodeAnalysis.EditorFeatures]]+0x5f
2453e9d0 5f3b7eb5 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.SemanticBufferTagSource_1[[System.__Canon,_mscorlib]].RecomputeTagsAsync+0xc5
2453eaac 5f3b7a7d microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.SemanticBufferTagSource_1+_RecomputeTagsAsync_d__4[[System.__Canon,_mscorlib]].MoveNext+0x20d
2453eb84 5f3b782f mscorlib_ni!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.SemanticBufferTagSource_1+_RecomputeTagsAsync_d__4[[System.__Canon,_mscorlib]],_Microsoft.CodeAnalysis.EditorFeatures]]+0x5f
2453ebe0 5f3b77bc microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.SemanticBufferTagSource_1[[System.__Canon,_mscorlib]].RecomputeTagsAsync+0xac
2453ec94 5f3b4903 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource_1+__c__DisplayClass25_0[[System.__Canon,_mscorlib]]._RecomputeTagsForeground_b__0+0x33
2453eca4 5f3a9447 microsoft_codeanalysis_editorfeatures_ni!Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue+__c__DisplayClass11_0._EnqueueBackgroundTask_b__0+0x17
2453eca8 7159272e mscorlib_ni!System.Threading.Tasks.ContinuationResultTaskFromTask_1[[System.__Canon,_mscorlib]].InnerInvoke+0x4e
2453ecbc 715a2570 mscorlib_ni!System.Threading.Tasks.Task.Execute+0x30
2453ece0 715a29ba mscorlib_ni!System.Threading.Tasks.Task.ExecutionContextCallback+0x1a
2453ece4 7151a3e4 mscorlib_ni!System.Threading.ExecutionContext.RunInternal+0xb4
2453ed50 7151a326 mscorlib_ni!System.Threading.ExecutionContext.Run+0x16
2453ed64 715a2838 mscorlib_ni!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0xd8
2453edc8 715a2724 mscorlib_ni!System.Threading.Tasks.Task.ExecuteEntry+0xb4
2453edd8 715a266c mscorlib_ni!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem+0xc
2453eddc 7155f953 mscorlib_ni!System.Threading.ThreadPoolWorkQueue.Dispatch+0x153
2453ee2c 7155f7fa mscorlib_ni!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback+0xa
</Description>
    <CreatedDate>30/07/2015</CreatedDate>
    <ClosedDate>31/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4164</IssueID>
    <Title>See/Seealso tag completion should not insert &gt; into attributes</Title>
    <Description>Consider the following code, $$ means the caret

``` C#
/// &lt;summary&gt;
/// $$
/// &lt;/summary&gt;
static void Main( string[] args )
{
}
```

Type `&lt;see&gt;` results `&lt;see cref="&gt;$$"/&gt;`, but I expect `&lt;see cref="$$"/&gt;` 
</Description>
    <CreatedDate>28/07/2015</CreatedDate>
    <ClosedDate>30/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4162</IssueID>
    <Title>Live analyser generates warning message</Title>
    <Description>I have created a nuget package for live code analysis utilizing the new extensibility template provided with visual studio 2015RTM. I have no issue with live analysis.

When I click on Run Code Analysis or building the application after enabling the code analysis on build, I am getting a warning message
CA0064: No analysis was performed because the specified rule set could not be loaded or did not contain any managed code analysis rule.
</Description>
    <CreatedDate>28/07/2015</CreatedDate>
    <ClosedDate>29/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4123</IssueID>
    <Title>Metaprogramming example(again)</Title>
    <Description>Take a look at SData(https://github.com/knat/SData), which uses compile-time attributes as instructions in code generation.
</Description>
    <CreatedDate>26/07/2015</CreatedDate>
    <ClosedDate>13/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4122</IssueID>
    <Title>Trying build Roslyn [Master, VS2015 Enterprise]</Title>
    <Description>```
Severity    Code    Description Project File    Line
Warning     The "PrereleaseResolveNuGetPackageAssets" task failed unexpectedly.
Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Path '', line 0, position 0.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader)
   at Microsoft.NuGet.Build.Tasks.PrereleaseResolveNuGetPackageAssets.Execute()
   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()
   at Microsoft.Build.BackEnd.TaskBuilder.&lt;ExecuteInstantiatedTask&gt;d__26.MoveNext() VbcCore     
Error   CS0103  The name 'MockComWrapperFactory' does not exist in the current context  CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeModelTestHelpers.cs    33
Warning     The referenced component 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\mscorlib.dll' could not be found.  VisualBasicErrorFactsGenerator      
Warning     The referenced component 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\mscorlib.dll' could not be found.  VisualBasicSyntaxGenerator      
Warning     The referenced component 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6\mscorlib.dll' could not be found.  BasicVisualStudioRepl       
Warning     The referenced component 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable\v4.5\Profile\Profile7\mscorlib.dll' could not be found.  BasicCodeAnalysis       
Warning     The referenced component 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable\v4.5\Profile\Profile7\mscorlib.dll' could not be found.  VbcCore     
Warning     The referenced component 'System.Collections' could not be found.   VisualStudioInteractiveServices     
Error   CS0246  The type or namespace name 'MockComponentModel' could not be found (are you missing a using directive or an assembly reference?)    CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\Options\OptionViewModelTests.cs  21
Error   CS0246  The type or namespace name 'MockComponentModel' could not be found (are you missing a using directive or an assembly reference?)    CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeModelTestHelpers.cs    31
Error   CS0246  The type or namespace name 'MockComponentModel' could not be found (are you missing a using directive or an assembly reference?)    CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\Options\OptionViewModelTests.cs  25
Error   CS0246  The type or namespace name 'MockServiceProvider' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeModelTestHelpers.cs    32
Error   CS0246  The type or namespace name 'MockTextPoint' could not be found (are you missing a using directive or an assembly reference?) CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeFunctionTests.cs   537
Error   CS0246  The type or namespace name 'MockTextPoint' could not be found (are you missing a using directive or an assembly reference?) CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeFunctionTests.cs   552
Error   CS0246  The type or namespace name 'MockVisualStudioWorkspace' could not be found (are you missing a using directive or an assembly reference?) CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeModelTestHelpers.cs    35
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpHelpers.cs   17
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  47
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  78
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  114
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  144
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  166
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  197
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  238
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpCompilerOptionsTests.cs  26
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpCompilerOptionsTests.cs  44
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpCompilerOptionsTests.cs  61
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpCompilerOptionsTests.cs  98
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpReferencesTests.cs   27
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpReferencesTests.cs   49
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpReferencesTests.cs   74
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpReferencesTests.cs   94
Error   CS0246  The type or namespace name 'TestEnvironment' could not be found (are you missing a using directive or an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\SourceFileHandlingTests.cs 17
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeFunctionTests.cs   7
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeModelTestHelpers.cs    9
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\CodeModel\FileCodeModelTestHelpers.cs    10
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\Options\OptionViewModelTests.cs  11
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\AnalyzersTests.cs  9
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpCompilerOptionsTests.cs  13
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpHelpers.cs   10
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\CSharpReferencesTests.cs   13
Error   CS0234  The type or namespace name 'UnitTests' does not exist in the namespace 'Microsoft.VisualStudio.LanguageServices' (are you missing an assembly reference?)   CSharpVisualStudioTest  C:\Users\Adam\Documents\GitHub\roslyn-AdamSpeight2008\src\VisualStudio\CSharp\Test\ProjectSystemShim\SourceFileHandlingTests.cs 4
Message AD0001  The User Diagnostic Analyzer 'Roslyn.Diagnostics.Analyzers.ApiDesign.DeclarePublicAPIAnalyzer' threw an exception of type 'System.ArgumentException' with message 'Reported diagnostic with ID 'RS0022' is not supported by the analyzer.
Parameter name: diagnostic'.    CodeAnalysis        1
Message AD0001  The User Diagnostic Analyzer 'Roslyn.Diagnostics.Analyzers.ApiDesign.DeclarePublicAPIAnalyzer' threw an exception of type 'System.ArgumentException' with message 'Reported diagnostic with ID 'RS0022' is not supported by the analyzer.
Parameter name: diagnostic'.    CodeAnalysis        1
Message AD0001  The User Diagnostic Analyzer 'Roslyn.Diagnostics.Analyzers.ApiDesign.DeclarePublicAPIAnalyzer' threw an exception of type 'System.ArgumentException' with message 'Reported diagnostic with ID 'RS0022' is not supported by the analyzer.
Parameter name: diagnostic'.    BasicCodeAnalysis       1
Message AD0001  The User Diagnostic Analyzer 'Roslyn.Diagnostics.Analyzers.ApiDesign.DeclarePublicAPIAnalyzer' threw an exception of type 'System.ArgumentException' with message 'Reported diagnostic with ID 'RS0022' is not supported by the analyzer.
Parameter name: diagnostic'.    BasicCodeAnalysis       1
Error       There was a problem uninstalling the extension with a VSIX identifier of "0b5e8ddb-f12d-4131-a71d-77acc26a798f". You need to use the Programs and Features pane in the Windows Control Panel to remove Roslyn Language Services.    VisualStudioSetup       
Error       There was a problem uninstalling the extension with a VSIX identifier of "1F42C6D0-F876-4AF0-8185-1BEB0A325BB2". You need to use the Programs and Features pane in the Windows Control Panel to remove VisualStudio Interactive Components. VisualStudioInteractiveWindow       
Error       There was a problem uninstalling the extension with a VSIX identifier of "21BAC26D-2935-4D0D-A282-AD647E2592B5". You need to use the Programs and Features pane in the Windows Control Panel to remove Roslyn Expression Evaluators.    ExpressionEvaluatorPackage      

```
</Description>
    <CreatedDate>26/07/2015</CreatedDate>
    <ClosedDate>06/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4093</IssueID>
    <Title>[VB Compiler ScannerBuffer + Scanner] Peep</Title>
    <Description>Modifies the VB Scanner to utilise Peep, which reduce the number of occurances of the pattern.

```
If CanGet(Here) Then
  Dim ch = Peek( Here )
End If
```

By combining some of the internals of `Peek` into a 'Try' form of `CanGet`. Note is doesn't follow the guidance of other Try methods by not allows return a value, instead it maintains the existing value.

This enable us to keep a record of the character, thus reducing subsequent usage of `Peek` for the same index. It also allows us to tighten some of the loops. 

Minor side affect, sometime the scoping of variable reference in the "value" parameter is made slightly wider. Since the usage case is all in function and non are externally visible, this should matter.
</Description>
    <CreatedDate>24/07/2015</CreatedDate>
    <ClosedDate>12/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4072</IssueID>
    <Title>Scanner(peek string interpolated)</Title>
    <Description>Converting the Scanner to use Peek / Peep and String Interpolation.
</Description>
    <CreatedDate>23/07/2015</CreatedDate>
    <ClosedDate>24/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4034</IssueID>
    <Title>When XML doc generation is off, namespaces used by crefs are treated as unused</Title>
    <Description>When XML doc generation is off, namespaces used by crefs are greyed out indicating that are they are unused:
![image](https://cloud.githubusercontent.com/assets/1103906/8812139/336f55ce-2faf-11e5-8982-d8f0d1bf3999.png)

I'm also offered to remove `using System` despite it actually being used by the cref.

I'm not sure if this by design or not (or rather a fallout of how this was designed), but this seems incorrect, especially as the colorizer appears to be processing them (if we're not processing them, why we run the colorizer over them?).
</Description>
    <CreatedDate>21/07/2015</CreatedDate>
    <ClosedDate>31/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>4033</IssueID>
    <Title>cref's to public members become ambiguous when an internal member is also in scope</Title>
    <Description>This is related to #77, and was raised here: https://stackoverflow.com/questions/31541390/visual-studio-2015-c-sharp-6-cant-compile-xml-comments-in-pcl-project.

Basically, cref's to public types are now ambiguous if there is an internal type in scope, resulting in a build warning for projects upgrading to C# 6.

 The case in the stack overflow question can be repro'd by building against C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETPortable\v4.0\Profile\Profile47\mscorlib.dll, and writing the following (there's an internal class called "Type" in System.Reflection which is now ambiguous with the one in System):

``` C#
using System;
using System.Reflection;

/// &lt;summary&gt;
///     &lt;see cref="Type"/&gt;
/// &lt;/summary&gt;
public class Class1
{
}

```

Which warns with (note filed #4031 for lack of namespace qualification in the warning):

```
CS0419  Ambiguous reference in cref attribute: 'Type'. Assuming 'Type', but could have also matched other overloads including 'Type'
```

I believe there were deliberate architectural decisions that resulted in this, but just wanted to get a bug filed to track the change in behavior.

&lt;!---
@huboard:{"order":610.9687497615814,"milestone_order":4033,"custom_state":""}
--&gt;
</Description>
    <CreatedDate>21/07/2015</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3977</IssueID>
    <Title>Rewrite Find Symbol Results tool window for better result presentation UX</Title>
    <Description>The current Find Symbol Results window is written in native code and uses window messages and other obsolete constructs. It's also severely limiting to how we can present results to the user.

If we rewrite this window in WPF, we could gain these benefits:
1. Asynchonous population
2. Hierarchical presentation (group by symbol and its references)
3. Visual separation of derived types, interface implementations, variable reads/writes, etc.
4. Multiple result sets (via tabs or multi-instance tool window or "result history list")
</Description>
    <CreatedDate>16/07/2015</CreatedDate>
    <ClosedDate>16/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3940</IssueID>
    <Title>Excluding a file from the Roslyn analyzers</Title>
    <Description>It would be nice if there was a built-in way to exclude auto-generated files from DiagnosticAnalyzer's.
</Description>
    <CreatedDate>14/07/2015</CreatedDate>
    <ClosedDate>30/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3899</IssueID>
    <Title>Constrain params arguments.</Title>
    <Description>I'm thinking something like:

```
public void Foo(params int[] args) where params : NotNullOrEmpty
{
    ...
}
```

What do you think?
Perhaps a new keyword is cleaner idk:

```
public void Foo(paramlist int[] args)
{
    ...
}
```
</Description>
    <CreatedDate>10/07/2015</CreatedDate>
    <ClosedDate>21/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3877</IssueID>
    <Title>Cannot open solution.</Title>
    <Description>I've being trying to port Nancy to dnx and VS will no longer open and jusr crashes.

Here's some crash dumps - https://gist.github.com/jchannon/c69d10f58e59bc832d25
</Description>
    <CreatedDate>09/07/2015</CreatedDate>
    <ClosedDate>29/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3815</IssueID>
    <Title>Async method with no awaits does not require a state machine class</Title>
    <Description>An async method with no awaits can be emitted as return Task.Completed; or return Task.FromResult(expr); rather than generating a state machine class.
</Description>
    <CreatedDate>02/07/2015</CreatedDate>
    <ClosedDate>07/08/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3786</IssueID>
    <Title>Symbols from previous submissions are squiggled in the Interactive Window</Title>
    <Description>![interactivewindow](https://cloud.githubusercontent.com/assets/10508071/8463620/ba1b15dc-1ff0-11e5-9e80-916bed37e725.png)

They bind, but they're not available via Completion and they're squiggled.  They're probably not available through the SemanticModel.
</Description>
    <CreatedDate>01/07/2015</CreatedDate>
    <ClosedDate>02/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3778</IssueID>
    <Title>make available to add custom languages </Title>
    <Description>make available to add custom languages  to use codefixes
</Description>
    <CreatedDate>01/07/2015</CreatedDate>
    <ClosedDate>21/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3728</IssueID>
    <Title>GetRecommendedSymbolsAtPosition returns now 'value__' in Visual Basic</Title>
    <Description>The call Recommender.GetRecommendedSymbolsAtPosition returns now the symbol 'value__' if it provides the enum values (e.g. 'ConsoleColor.').

This symbol was not returned in RC2 but it comes know in RC3. And it comes only in Visual Basic - for C# the symbol is not returned.

_How to reproduce:_
- Download source of http://dotnetpad.codeplex.com/
- Run the app and create a new VB File
- Enter ConsoleColor. and see that auto-completion shows the value 'value__'

Note:
- Enter ConsoleColor. shows 'value__'
- Enter System.ConsoleColor. does not show 'value__'
</Description>
    <CreatedDate>29/06/2015</CreatedDate>
    <ClosedDate>30/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3722</IssueID>
    <Title>Scanner(peek string interpolated)</Title>
    <Description>Converting the Scanner to use Peek / Peep and String Interpolation.
</Description>
    <CreatedDate>28/06/2015</CreatedDate>
    <ClosedDate>23/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3671</IssueID>
    <Title>[Proposal] Cached results with auto implemented backing field</Title>
    <Description>![picture3](https://cloud.githubusercontent.com/assets/13038027/8338493/3656238e-1a66-11e5-858b-4707c1651944.gif)

compiler can generate a backing field for method and return value from backing field if backing field is null
</Description>
    <CreatedDate>24/06/2015</CreatedDate>
    <ClosedDate>21/07/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3618</IssueID>
    <Title>[VB Compiler ScannerBuffer + Scanner] Peep</Title>
    <Description>Peep
Act in similar way to TryParse with one except of not always passing back a value, this is to ensure the existing value is preserved if the result is false. The passed back value is only change on true.

The usage of these methods permit a local caching of the value to reduce the number of lookup for the same indexed value.
</Description>
    <CreatedDate>22/06/2015</CreatedDate>
    <ClosedDate>29/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3614</IssueID>
    <Title>EE - Incorrect evaluation of expression involving struct with enum property</Title>
    <Description>Please see http://screencast.com/t/PmT2RUaFzf
`IsF1Set(...)` call is evaluated in Watch window to false - it should be evaluated to true.
Calling `(s.Flags &amp; F.F1) == F.F1` gives proper results. Switching `S` to be class also fixes issue. I am using RC bits.

Here is relevant repro code:

```
using System;

namespace IncorrectEvaluation 
{
    class Program 
    {
        static void Main(string[] args) 
        {
            var s = new S() { Flags = F.F1 };
            if(IsF1Set(s)) 
            {

            }
        }

        private static bool IsF1Set(S s) 
        {
            return (s.Flags &amp; F.F1) == F.F1;
        }
    }

    [Flags]
    enum F 
    {
        None = 0,
        F1 = 1,
        F2 = 2,
    }

    struct S 
    {
        public F Flags { get; set; }
    }
}
```
</Description>
    <CreatedDate>22/06/2015</CreatedDate>
    <ClosedDate>07/10/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3611</IssueID>
    <Title>[VB Compiler ScannerBuffer + Scanner] Peep</Title>
    <Description>**Peep**
Act in similar way to `TryParse` with one except of not always passing back a value, this is to ensure the existing value is preserved if the result is false.  The passed back value is only change on true.

The usage of these methods permit a local caching of the value to reduce the number of lookup for the same indexed value.
</Description>
    <CreatedDate>21/06/2015</CreatedDate>
    <ClosedDate>22/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3550</IssueID>
    <Title>BuckStopsHere binding failure when adding braces to an expression-bodied function with a ctor call</Title>
    <Description>Source:

``` C#
class C {
    C M() =&gt; new C();
}
```

Type `{}` before `=&gt;`.  VS will crash, from 

```
    Microsoft.CodeAnalysis.CSharp.BuckStopsHereBinder.Locals.get()  Unknown
    Microsoft.CodeAnalysis.CSharp.Binder.Locals.get()   Unknown
    Microsoft.CodeAnalysis.CSharp.Binder.Locals.get()   Unknown
    Microsoft.CodeAnalysis.CSharp.Binder.Locals.get()   Unknown
    Microsoft.CodeAnalysis.CSharp.Binder.Locals.get()   Unknown
    Microsoft.CodeAnalysis.CSharp.Binder.Locals.get()   Unknown
    Microsoft.CodeAnalysis.CSharp.Binder.Locals.get()   Unknown
    Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionBodyAsBlock(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)   Unknown
    Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)  Unknown
    Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node)    Unknown
    Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node)    Unknown
    Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, out Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode bindableNode, out Microsoft.CodeAnalysis.CSharp.BoundNode lowestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode highestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode boundParent)   Unknown
    Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions options, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions options, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode syntax, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode syntax)   Unknown
    Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.ProcessNodes()   Unknown
    Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.Classify(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt; list, System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getNodeClassifiers, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getTokenClassifiers, System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getNodeClassifiers, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt; getTokenClassifiers, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt; result, System.Threading.CancellationToken cancellationToken)    Unknown
```
</Description>
    <CreatedDate>16/06/2015</CreatedDate>
    <ClosedDate>17/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3549</IssueID>
    <Title>Unlocalized string in src/Compilers/VisualBasic/Portable/Parser/Parser.vb</Title>
    <Description>See #3526. We need to introduce a resource string for the feature name "interpolated string".

/cc @jaredpar 
</Description>
    <CreatedDate>16/06/2015</CreatedDate>
    <ClosedDate>16/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3508</IssueID>
    <Title>"After-the-fact" ctrl+dot rename fails silently rather than avoiding conflicts</Title>
    <Description>Watch this video:
![postofactofailure](https://cloud.githubusercontent.com/assets/3316258/8169510/ed275a1a-135e-11e5-9304-46b6c3d8d0ae.gif)

I prefer to edit identifiers and then use the "dotted border after-the-fact rename refactoring" (rather than using ctrl+R ctrl+R).

In this repro, the first "after-the-fact" rename works fine. But the second one fails silently to do any renaming. (what causes the silent failure is that it would need to do some conflict-resolution here).

For convenience, here's the full code:

``` vb
Module Module1
    Sub Main()
    End Sub

    Sub f(c As Integer)
        Dim x = CCC.p
    End Sub
End Module

Class CCC
    Public Shared p As Integer
End Class
```
</Description>
    <CreatedDate>15/06/2015</CreatedDate>
    <ClosedDate>16/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3505</IssueID>
    <Title>Format on semicolon for expression bodied properties</Title>
    <Description>I noticed today that expression bodied members don't get formatted the same way as normal expressions.

I think it'd be nice if the formatting were consistent and both formatted properly when semicolons were added.

![image](http://i.gyazo.com/3a00c5b7a24ce2aa11153ca2db38fbf1.gif)
</Description>
    <CreatedDate>15/06/2015</CreatedDate>
    <ClosedDate>15/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3499</IssueID>
    <Title>"Width/width": VB painful regression in case-sensitivity of intellisense</Title>
    <Description>I often am in a class (such as Winforms, or XAML) with a property `Me.Width` which I want to pass as argument to a function which takes a parameter of name `width`, e.g. `Dim x As New Rect(0,0,Width,Height)`.

In VS2013 this worked fine. I'd just write "width" as the argument (all lowercase) and rely on intellisense to pick the correct case:
![vs2013-case](https://cloud.githubusercontent.com/assets/3316258/8165016/ddea124e-1341-11e5-9ee2-7729baa171b7.png)

But in VS2015 it doesn't work. When I write "width" lowercase argument, intellisense thinks I'm trying to name the parameter.
![vs2015-case](https://cloud.githubusercontent.com/assets/3316258/8165036/01c7ce90-1342-11e5-8ef5-e81ec8c0a14d.png)

As soon as I hit "comma" or close-parent then it commits it as `width:=`, which is never what I want:
![vs2015b](https://cloud.githubusercontent.com/assets/3316258/8165084/53b28cf4-1342-11e5-9bdb-cc8d2de28f9e.png)
</Description>
    <CreatedDate>15/06/2015</CreatedDate>
    <ClosedDate>15/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3446</IssueID>
    <Title>Remove usings when needed inside a #if block</Title>
    <Description>If you have the following and then use the remove all usings from solution option when the current configuration is set to release, it will remove the using System even though its needed for debug.

```
using System;

public class Foo
{
  public statis int Bar(int x, int y)
  {
    int sum = x + y;
# if DEBUG


Console.WriteLine(sum);

# endif


return sum;


  }
}
```</Description>
    <CreatedDate>11/06/2015</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3443</IssueID>
    <Title>strange errors opening  wpf application</Title>
    <Description>Hi, I just opened a wpf .net 4.5 application using 2015 rc and opening the source classes I find these errors 

![untitled](https://cloud.githubusercontent.com/assets/127777/8110259/8ba7f728-105b-11e5-866f-03634b434e4e.png)

It's a editor problem, because application compiles with both vs 2013 and 2015
</Description>
    <CreatedDate>11/06/2015</CreatedDate>
    <ClosedDate>11/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3397</IssueID>
    <Title>Make XmlDocumentationProvider public</Title>
    <Description>Please make XmlDocumentationProvider or any other service exposing xml documentation provider public. It is usefull in scenarios like making code editors based on Roslyn (intellisense-like).
</Description>
    <CreatedDate>09/06/2015</CreatedDate>
    <ClosedDate>10/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3362</IssueID>
    <Title>VS2015 adds /references to the build which are not referenced, causing build breaks</Title>
    <Description>I've made a console application to play with test EF7 with SQLite but i've noticed that while it compiles fine in VS2013, it prints "csc2.exe exited with error code 1" to the error list in VS2015. In the output window i could see:

```
1&gt;  Fehler CS1703: Mehrere Assemblys mit äquivalenter Identität wurden importiert: "C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Threading.Tasks.4.0.10-beta-22516\lib\net45\System.Threading.Tasks.dll" und "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Threading.Tasks.dll". Entfernen Sie einen der doppelten Verweise. (Aufgaben-ID: 28)
1&gt;  Fehler CS1703: Mehrere Assemblys mit äquivalenter Identität wurden importiert: "C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Text.Encoding.4.0.10-beta-22516\lib\net45\System.Text.Encoding.dll" und "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Text.Encoding.dll". Entfernen Sie einen der doppelten Verweise. (Aufgaben-ID: 28)
1&gt;  Fehler CS1703: Mehrere Assemblys mit äquivalenter Identität wurden importiert: "C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.IO.4.0.10-beta-22516\lib\net45\System.IO.dll" und "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.IO.dll". Entfernen Sie einen der doppelten Verweise. (Aufgaben-ID: 28)
```

(Translates to `CS1703: An assembly with the same identity [...] has already been imported. Try removing one of the duplicate references`).

Which is weird since i'm not referencing any of them twice and the same project works in 2013:

``` xml
  &lt;ItemGroup&gt;
    &lt;Reference Include="EntityFramework.Core, Version=7.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\EntityFramework.Core.7.0.0-beta6-13356\lib\net45\EntityFramework.Core.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="EntityFramework.Relational, Version=7.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\EntityFramework.Relational.7.0.0-beta6-13356\lib\net45\EntityFramework.Relational.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="EntityFramework.Sqlite, Version=7.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\EntityFramework.Sqlite.7.0.0-beta6-13356\lib\net45\EntityFramework.Sqlite.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Data.Sqlite, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Data.Sqlite.1.0.0-beta6-10770\lib\net45\Microsoft.Data.Sqlite.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.Caching.Abstractions, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.Caching.Abstractions.1.0.0-beta6-11436\lib\net45\Microsoft.Framework.Caching.Abstractions.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.Caching.Memory, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.Caching.Memory.1.0.0-beta6-11436\lib\net45\Microsoft.Framework.Caching.Memory.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.Configuration, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.Configuration.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.Configuration.Abstractions, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.Configuration.Abstractions.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.Abstractions.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.Configuration.Binder, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.Configuration.Binder.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.Binder.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.DependencyInjection, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.DependencyInjection.1.0.0-beta6-11437\lib\net45\Microsoft.Framework.DependencyInjection.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.DependencyInjection.Abstractions, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.DependencyInjection.Abstractions.1.0.0-beta6-11437\lib\net45\Microsoft.Framework.DependencyInjection.Abstractions.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.Logging, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.Logging.1.0.0-beta6-11429\lib\net45\Microsoft.Framework.Logging.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.Logging.Abstractions, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.Logging.Abstractions.1.0.0-beta6-11429\lib\net45\Microsoft.Framework.Logging.Abstractions.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Microsoft.Framework.OptionsModel, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Microsoft.Framework.OptionsModel.1.0.0-beta6-11406\lib\net45\Microsoft.Framework.OptionsModel.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Remotion.Linq, Version=2.0.0.0, Culture=neutral, PublicKeyToken=fee00910d6e5f53b, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Remotion.Linq.2.0.0-alpha-002\lib\portable-net45+win+wpa81+wp80\Remotion.Linq.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System" /&gt;
    &lt;Reference Include="System.Collections.Concurrent" /&gt;
    &lt;Reference Include="System.Collections.Immutable, Version=1.1.36.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\System.Collections.Immutable.1.1.36\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System.ComponentModel.DataAnnotations" /&gt;
    &lt;Reference Include="System.Core" /&gt;
    &lt;Reference Include="System.Data.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\System.Data.Common.4.0.0-beta-22913\lib\net45\System.Data.Common.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System.Interactive.Async, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt;
      &lt;HintPath&gt;..\packages\Ix-Async.1.2.3\lib\net45\System.Interactive.Async.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System.IO"&gt;
      &lt;HintPath&gt;..\packages\System.IO.4.0.10-beta-22516\lib\net45\System.IO.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" /&gt;
    &lt;Reference Include="System.Text.Encoding"&gt;
      &lt;HintPath&gt;..\packages\System.Text.Encoding.4.0.10-beta-22516\lib\net45\System.Text.Encoding.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System.Threading.Tasks"&gt;
      &lt;HintPath&gt;..\packages\System.Threading.Tasks.4.0.10-beta-22516\lib\net45\System.Threading.Tasks.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System.Transactions" /&gt;
    &lt;Reference Include="System.Xml.Linq" /&gt;
    &lt;Reference Include="System.Data.DataSetExtensions" /&gt;
    &lt;Reference Include="Microsoft.CSharp" /&gt;
    &lt;Reference Include="System.Data" /&gt;
    &lt;Reference Include="System.Xml" /&gt;
  &lt;/ItemGroup&gt;
```

After comparing the commandline i've could see that VS2015 added way more references which are not listed in the csproj.

VS2013:

```
1&gt;  C:\Program Files (x86)\MSBuild\12.0\bin\Csc.exe
 /noconfig
 /nowarn:1701,1702,2008
 /nostdlib+
 /platform:anycpu32bitpreferred
 /errorreport:prompt
 /warn:4
 /define:DEBUG;TRACE
 /errorendlocation
 /preferreduilang:de-DE
 /highentropyva+
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\EntityFramework.Core.7.0.0-beta6-13356\lib\net45\EntityFramework.Core.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\EntityFramework.Relational.7.0.0-beta6-13356\lib\net45\EntityFramework.Relational.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\EntityFramework.Sqlite.7.0.0-beta6-13356\lib\net45\EntityFramework.Sqlite.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Microsoft.CSharp.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Data.Sqlite.1.0.0-beta6-10770\lib\net45\Microsoft.Data.Sqlite.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Caching.Abstractions.1.0.0-beta6-11436\lib\net45\Microsoft.Framework.Caching.Abstractions.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Caching.Memory.1.0.0-beta6-11436\lib\net45\Microsoft.Framework.Caching.Memory.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Configuration.Abstractions.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.Abstractions.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Configuration.Binder.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.Binder.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Configuration.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.DependencyInjection.Abstractions.1.0.0-beta6-11437\lib\net45\Microsoft.Framework.DependencyInjection.Abstractions.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.DependencyInjection.1.0.0-beta6-11437\lib\net45\Microsoft.Framework.DependencyInjection.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Logging.Abstractions.1.0.0-beta6-11429\lib\net45\Microsoft.Framework.Logging.Abstractions.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Logging.1.0.0-beta6-11429\lib\net45\Microsoft.Framework.Logging.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.OptionsModel.1.0.0-beta6-11406\lib\net45\Microsoft.Framework.OptionsModel.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\mscorlib.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Remotion.Linq.2.0.0-alpha-002\lib\portable-net45+win+wpa81+wp80\Remotion.Linq.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Collections.Concurrent.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\System.Collections.Immutable.1.1.36\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.ComponentModel.DataAnnotations.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Core.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\System.Data.Common.4.0.0-beta-22913\lib\net45\System.Data.Common.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Data.DataSetExtensions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Data.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\Ix-Async.1.2.3\lib\net45\System.Interactive.Async.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\System.IO.4.0.10-beta-22516\lib\net45\System.IO.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\System.Text.Encoding.4.0.10-beta-22516\lib\net45\System.Text.Encoding.dll"
 /reference:"C:\Users\Robin\documents\visual studio 2013\Projects\EFLiteTest\packages\System.Threading.Tasks.4.0.10-beta-22516\lib\net45\System.Threading.Tasks.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Transactions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Xml.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Xml.Linq.dll"
 /debug+
 /debug:full
 /filealign:512
 /optimize-
 /out:obj\Debug\EFLiteTest.exe
 /subsystemversion:6.00
 /target:exe
 /utf8output
 Program.cs
 "C:\Users\Robin\AppData\Local\Temp\.NETFramework,Version=v4.5.2.AssemblyAttributes.cs"
 obj\Debug\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs
 obj\Debug\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs
 obj\Debug\\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs
 (Aufgaben-ID: 26)
1&gt;  Microsoft (R) Visual C# Compiler version 12.0.31101.0 (Aufgaben-ID: 26)
1&gt;   (Aufgaben-ID: 26)
1&gt;  for C# 5 (Aufgaben-ID: 26)
1&gt;  Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten. (Aufgaben-ID: 26)
1&gt;   (Aufgaben-ID: 26)
1&gt;Ausführen der Csc-Aufgabe beendet. (Aufgaben-ID: 26)
```

VS2015:

```
1&gt;  C:\Program Files (x86)\MSBuild\14.0\bin\csc2.exe
 /noconfig
 /nowarn:1701,1702,2008
 /nostdlib+
 /platform:anycpu32bitpreferred
 /errorreport:prompt
 /warn:4
 /define:DEBUG;TRACE
 /errorendlocation
 /preferreduilang:de-DE
 /highentropyva+
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\EntityFramework.Core.7.0.0-beta6-13356\lib\net45\EntityFramework.Core.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\EntityFramework.Relational.7.0.0-beta6-13356\lib\net45\EntityFramework.Relational.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\EntityFramework.Sqlite.7.0.0-beta6-13356\lib\net45\EntityFramework.Sqlite.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Microsoft.CSharp.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Data.Sqlite.1.0.0-beta6-10770\lib\net45\Microsoft.Data.Sqlite.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Caching.Abstractions.1.0.0-beta6-11436\lib\net45\Microsoft.Framework.Caching.Abstractions.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Caching.Memory.1.0.0-beta6-11436\lib\net45\Microsoft.Framework.Caching.Memory.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Configuration.Abstractions.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.Abstractions.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Configuration.Binder.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.Binder.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Configuration.1.0.0-beta6-11408\lib\net45\Microsoft.Framework.Configuration.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.DependencyInjection.Abstractions.1.0.0-beta6-11437\lib\net45\Microsoft.Framework.DependencyInjection.Abstractions.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.DependencyInjection.1.0.0-beta6-11437\lib\net45\Microsoft.Framework.DependencyInjection.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Logging.Abstractions.1.0.0-beta6-11429\lib\net45\Microsoft.Framework.Logging.Abstractions.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.Logging.1.0.0-beta6-11429\lib\net45\Microsoft.Framework.Logging.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Microsoft.Framework.OptionsModel.1.0.0-beta6-11406\lib\net45\Microsoft.Framework.OptionsModel.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\mscorlib.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Remotion.Linq.2.0.0-alpha-002\lib\portable-net45+win+wpa81+wp80\Remotion.Linq.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Collections.Immutable.1.1.36\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.ComponentModel.DataAnnotations.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Core.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Data.Common.4.0.0-beta-22913\lib\net45\System.Data.Common.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Data.DataSetExtensions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Data.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\Ix-Async.1.2.3\lib\net45\System.Interactive.Async.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.IO.4.0.10-beta-22516\lib\net45\System.IO.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Text.Encoding.4.0.10-beta-22516\lib\net45\System.Text.Encoding.dll"
 /reference:"C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Threading.Tasks.4.0.10-beta-22516\lib\net45\System.Threading.Tasks.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Transactions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Xml.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Xml.Linq.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Collections.Concurrent.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Collections.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ComponentModel.Annotations.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ComponentModel.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ComponentModel.EventBasedAsync.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Diagnostics.Contracts.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Diagnostics.Debug.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Diagnostics.Tools.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Diagnostics.Tracing.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Dynamic.Runtime.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Globalization.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.IO.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Linq.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Linq.Expressions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Linq.Parallel.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Linq.Queryable.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Net.NetworkInformation.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Net.Primitives.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Net.Requests.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ObjectModel.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Reflection.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Reflection.Emit.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Reflection.Emit.ILGeneration.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Reflection.Emit.Lightweight.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Reflection.Extensions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Reflection.Primitives.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Resources.ResourceManager.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.Extensions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.InteropServices.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.InteropServices.WindowsRuntime.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.Numerics.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.Serialization.Json.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.Serialization.Primitives.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Runtime.Serialization.Xml.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Security.Principal.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ServiceModel.Duplex.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ServiceModel.Http.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ServiceModel.NetTcp.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ServiceModel.Primitives.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.ServiceModel.Security.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Text.Encoding.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Text.Encoding.Extensions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Text.RegularExpressions.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Threading.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Threading.Tasks.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Threading.Tasks.Parallel.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Threading.Timer.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Xml.ReaderWriter.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Xml.XDocument.dll"
 /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Xml.XmlSerializer.dll"
 /debug+
 /debug:full
 /filealign:512
 /optimize-
 /out:obj\Debug\EFLiteTest.exe
 /ruleset:"C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset"
 /subsystemversion:6.00
 /target:exe
 /utf8output
 Program.cs
 "C:\Users\Robin\AppData\Local\Temp\.NETFramework,Version=v4.5.2.AssemblyAttributes.cs"
 obj\Debug\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs
 obj\Debug\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs
 obj\Debug\\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs
 (Aufgaben-ID: 28)
1&gt;  Microsoft (R) Visual C# Compiler, Version 1.0.0.50411 (Aufgaben-ID: 28)
1&gt;  Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten. (Aufgaben-ID: 28)
1&gt;   (Aufgaben-ID: 28)
1&gt;  Fehler CS1703: Mehrere Assemblys mit äquivalenter Identität wurden importiert: "C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Threading.Tasks.4.0.10-beta-22516\lib\net45\System.Threading.Tasks.dll" und "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Threading.Tasks.dll". Entfernen Sie einen der doppelten Verweise. (Aufgaben-ID: 28)
1&gt;  Fehler CS1703: Mehrere Assemblys mit äquivalenter Identität wurden importiert: "C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.Text.Encoding.4.0.10-beta-22516\lib\net45\System.Text.Encoding.dll" und "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.Text.Encoding.dll". Entfernen Sie einen der doppelten Verweise. (Aufgaben-ID: 28)
1&gt;  Fehler CS1703: Mehrere Assemblys mit äquivalenter Identität wurden importiert: "C:\Users\Robin\Documents\Visual Studio 2013\Projects\EFLiteTest\packages\System.IO.4.0.10-beta-22516\lib\net45\System.IO.dll" und "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Facades\System.IO.dll". Entfernen Sie einen der doppelten Verweise. (Aufgaben-ID: 28)
1&gt;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.CSharp.CurrentVersion.targets(384,9): error MSB6006: "csc2.exe" wurde mit dem Code 1 beendet.
1&gt;Die Ausführung der Csc-Aufgabe ist abgeschlossen -- FEHLER. (Aufgaben-ID: 28)
```
</Description>
    <CreatedDate>06/06/2015</CreatedDate>
    <ClosedDate>09/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3352</IssueID>
    <Title>Rename session abruptly terminated (broken code, shared project)</Title>
    <Description>1. Sync to https://github.com/amcasey/roslyn/commit/abbca4925361489c1418a25102372f330e537081
2. Open roslyn.sln
3. Open ExpressionEvaluator\Core\Source\ResultProvider\Formatter.TypeNames.cs in the ResultProviderTestUtilities head
4. On line 305 (`sawInvalidIdentifier = !IsIdentifier(identifier);`), invoke rename on `IsIdentifier`.  New name is `IsValidIdentifier`.

After either the "I" or the "s", Rename starts reporting unresolvable conflicts and the green highlight around the identifier disappears.  The next keystroke cancels the rename session since it is not in one of the highlighted regions.

Possibly related to #3351 
</Description>
    <CreatedDate>05/06/2015</CreatedDate>
    <ClosedDate>10/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3312</IssueID>
    <Title>Request: don't show so many built-in esoteric code actions</Title>
    <Description>Look at this picture.
![toomanyactions](https://cloud.githubusercontent.com/assets/3316258/7991910/7e6827e6-0ab0-11e5-8206-0a82ec3b6fa0.jpg)
I have just a simple problem (copied+pasted the method from one file to another, which is lacking the necessary Imports statement). But it gives me EIGHTEEN quick actions to choose from! One of them (the first) is obviously correct. The others are just noise, pretty esoteric, and overwhelming.

Can we simplify it down please? Maybe relegate the esoteric actions to a sub-menu?
</Description>
    <CreatedDate>04/06/2015</CreatedDate>
    <ClosedDate>11/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3270</IssueID>
    <Title>CompilationOptions.Features is unintentionally part of the "public" API</Title>
    <Description>See https://github.com/dotnet/roslyn/blob/stabilization/src/Compilers/Core/Portable/Compilation/CompilationOptions.cs#L190

The property `CompilationOptions.Features` is part of the "public" API because it is `protected internal`, even though there is no supported way to use or extend it outside Roslyn. We discovered recently that it has the "wrong" type for its internal uses.

Please remove this from the "public" API by making it `internal`.
</Description>
    <CreatedDate>02/06/2015</CreatedDate>
    <ClosedDate>03/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3258</IssueID>
    <Title>[Proposal] Generic Constraint: enum</Title>
    <Description>It would be ideal if generics could be written as the following (use-case provided):

```
public static void DefinedEnum&lt;T&gt;(T value, string name)
    where T: enum
{
    if (!Enum.Defined(typeof(T), value))
        throw new ArgumentException("Value is undefined", name);
}
```
</Description>
    <CreatedDate>02/06/2015</CreatedDate>
    <ClosedDate>04/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3252</IssueID>
    <Title>csc2.exe ends with NRE ArgumentNullException. Possible file sharing violation?</Title>
    <Description>Out of nowhere, my every attempt to compile a specific .NET project ended with following exception. However, Debug configuration still worked and this was happening only to Release. I also tried to change the output path to avoid possible sharing violation but it didn't help. 
In the end, the thing that helped was to close another instance of VS 2012RC that had a dump open 
referencing this project's source files (however, all its release PDBs in output directory were already deleted at this point. They remained only in obj\Release - could that have been loaded by the dump debugger?).

```
Application: csc2.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.ArgumentNullException
Stack:
   at System.IO.Stream.CopyTo(System.IO.Stream)
   at Microsoft.CodeAnalysis.Compilation.SerializeToPeStream(Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder, EmitStreamProvider, Microsoft.Cci.PdbOutputInfo, System.Func`1&lt;System.Object&gt;, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider, Microsoft.Cci.PdbOutputInfo, EmitStreamProvider, EmitStreamProvider, System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.ResourceDescription&gt;, Microsoft.CodeAnalysis.Emit.EmitOptions, Microsoft.CodeAnalysis.CodeGen.CompilationTestData, System.Func`1&lt;System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.RunCore(System.IO.TextWriter, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.Run(System.IO.TextWriter, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompiler.Run(System.IO.TextWriter, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(System.String[])
   at Microsoft.CodeAnalysis.BuildTasks.BuildClient.RunWithConsoleOutput(System.String[], RequestLanguage, System.Func`2&lt;System.String[],Int32&gt;)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(System.String[])
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc2.Main(System.String[])
```
</Description>
    <CreatedDate>02/06/2015</CreatedDate>
    <ClosedDate>03/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3248</IssueID>
    <Title>Proposal: Compiler Plugins (with working implementation)</Title>
    <Description>Hi everyone, I've been working on an experiment with Roslyn that I'd like to share.  I've always thought that Roslyn would be great for compile-time metaprogramming, but it generally seems to be pretty far down on the priority list.  I'd like to try to change that.  Using ideas from ASP.NET DNX's `ICompileModule`, I have created a way to write compiler plugins that transform `Compilation` objects (including their syntax trees) as part of the Roslyn compilation process.  It's designed to be as simple and flexible as possible, and users can easily activate plugins for a project by adding an assembly reference to the plugin and applying its assembly attribute.

My fork is located at https://github.com/russpowers/roslyn.  The relevant commit is [here](https://github.com/russpowers/roslyn/commit/04aa4eb6c917b7d2f02b4c4610b648976861f1ae).  Please see [this readme](https://github.com/russpowers/roslyn/blob/master/PLUGIN_README.md) for a more in-depth explanation of how things work.

I have also implemented a basic attribute-based macro system which uses the new compiler plugin architecture at https://github.com/russpowers/MacroSharp.  It is working with the Visual Studio RC, just follow the instructions in the readme to get it set up.

[MacroCompiler.cs](https://github.com/russpowers/MacroSharp/blob/master/MacroSharp/MacroCompiler.cs) and [MacroPluginAttribute.cs](https://github.com/russpowers/MacroSharp/blob/master/MacroSharp/MacroPluginAttribute.cs) are the files that directly hook in to Roslyn as a plugin.  An example of the `MacroPlugin` getting loaded using an assembly attribute is [here](https://github.com/russpowers/MacroSharp/blob/master/MacroSharp.Examples/Program.cs). There is a single example right now that automatically implements `INotifyPropertyChanged` using an attribute macro [here](https://github.com/russpowers/MacroSharp/blob/master/MacroSharp.ExampleMacros/NotifyPropertyChanged.cs). It's rough, but it works to demonstrate the idea.

This all currently works in Visual Studio RC for compilation using a modified `CscToolPath`, but intellisense and refactoring use the original untransformed syntax.  Debugging mostly works, but locations get messed up if the syntax trees are changed too much.  Once OpenSourceDebug is all sync'd up again, I will try it out with Visual Studio intellisense (although I anticipate there may be some issues).

I have not submitted a pull request for this, since I'm not exactly an expert on Roslyn, and I'm sure I've made some mistakes or invalid assumptions.  Please take a look at my code and let me know if you have any questions or feedback.  Hopefully we can use this as a starting point for getting some compile-time metaprogramming support into Roslyn.
</Description>
    <CreatedDate>02/06/2015</CreatedDate>
    <ClosedDate>15/12/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3220</IssueID>
    <Title>Roslyn compiler still doesn't recognize extension methods from libraries written in C++/CLI</Title>
    <Description>#365

This is NOT fixed. Any extension method defined in C++/CLI, with or without assembly-level extension attribute, will not be found by Roslyn. Both C# and VB.NET is affected.

Tested using VS 2015 RC.

Test case: http://treesoft.dk/temp/MethodExtensionBug.zip
</Description>
    <CreatedDate>01/06/2015</CreatedDate>
    <ClosedDate>02/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3204</IssueID>
    <Title>Crash when pasting multiple tokens into a namespace rename</Title>
    <Description>Source:

``` C#
namespace A { }
```

Enter rename for `A`, then paste `A.B`.

'Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax'.

```
&gt;   Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.RenameToken(Microsoft.CodeAnalysis.SyntaxToken oldToken, Microsoft.CodeAnalysis.SyntaxToken newToken, string prefix, string suffix)    Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.RenameAndAnnotateAsync(Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.SyntaxToken newToken, bool isRenameLocation, bool isOldText)   Unknown
    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;.Start&lt;Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.&lt;RenameAndAnnotateAsync&gt;d__36&gt;(ref Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.&lt;RenameAndAnnotateAsync&gt;d__36 stateMachine)    Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.RenameAndAnnotateAsync(Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.SyntaxToken newToken, bool isRenameLocation, bool isOldText)   Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.VisitToken(Microsoft.CodeAnalysis.SyntaxToken token)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax node)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor)   Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;.Visit(Microsoft.CodeAnalysis.SyntaxNode node)    Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax node)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;.Visit(Microsoft.CodeAnalysis.SyntaxNode node)    Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax node)    Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor) Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;.Visit(Microsoft.CodeAnalysis.SyntaxNode node)    Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax node)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;(Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; list)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax node)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept&lt;System.__Canon&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.__Canon&gt; visitor)  Unknown
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;.Visit(Microsoft.CodeAnalysis.SyntaxNode node)    Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node)  Unknown
    Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.AnnotateAndRename(Microsoft.CodeAnalysis.Rename.RenameRewriterParameters parameters)  Unknown
```
</Description>
    <CreatedDate>31/05/2015</CreatedDate>
    <ClosedDate>31/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3193</IssueID>
    <Title>No Intellisense inside nameof when working with generics</Title>
    <Description>Noticed this today in RC.

Repro:
1. New ConsoleApplication 
2. Replace Main with following

``` CSharp
public static void Main()
{
    var myList = new List&lt;int&gt;() { 1 };
    var first = myList.First();
    var test = nameof(first.); //&lt;- No Intellisense on this dot
}
```
1. Observe no Intellisense on `first.` inside of `nameof`

Also occurs in `foreach` loops. (Where I first noticed it)
</Description>
    <CreatedDate>30/05/2015</CreatedDate>
    <ClosedDate>31/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3161</IssueID>
    <Title>VB quickfix "insert missing cast" doesn't work and lacks preview - regression from VS2013</Title>
    <Description>Here's a screenshot. There is a quickfix offering to "Insert Missing Cast". However performing the quickfix doesn't make any fixes to my file. Additionally, there is no inline preview of what the fix will look like, and clicking on the "Preview Changes" link shows no changes.
![fails-to-cast](https://cloud.githubusercontent.com/assets/3316258/7873440/3e137e24-0557-11e5-8685-c53a677b9ab7.png)
Note that if I manually fix up my code, with CType(red,Color), then it compiles correctly.

Here's full source code for the repro.

``` vb
Option Strict On

Module Module1

    Sub Main()
        Dim red = ColorF.FromArgb(255, 255, 0, 0)
        Dim c As Color = red
    End Sub

End Module

Public Structure ColorF
    Public A, R, G, B As Single
    Public Shared Function FromArgb(a As Double, r As Double, g As Double, b As Double) As ColorF
        Return New ColorF With {.A = CSng(a), .R = CSng(r), .G = CSng(g), .B = CSng(b)}
    End Function
    Public Shared Widening Operator CType(x As Color) As ColorF
        Return ColorF.FromArgb(x.A / 255, x.R / 255, x.G / 255, x.B / 255)
    End Operator
    Public Shared Narrowing Operator CType(x As ColorF) As Color
        Return Color.FromArgb(CByte(x.A * 255), CByte(x.R * 255), CByte(x.G * 255), CByte(x.B * 255))
    End Operator
End Structure

Public Structure Color
    Public A, R, G, B As Byte
    Public Shared Function FromArgb(a As Byte, r As Byte, g As Byte, b As Byte) As Color
        Return New Color With {.A = a, .R = r, .G = g, .B = b}
    End Function
End Structure
```
</Description>
    <CreatedDate>28/05/2015</CreatedDate>
    <ClosedDate>03/06/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>3071</IssueID>
    <Title>Remove namespace</Title>
    <Description>New feature : Add Project wise namespace no need add namespace in each file.
</Description>
    <CreatedDate>25/05/2015</CreatedDate>
    <ClosedDate>26/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2989</IssueID>
    <Title>Proposal: Member scoped to property (and event)</Title>
    <Description>Sometimes I find myself in a position where I want to guard against the use of a backing field from a property, even from the same class. I therefore propose a feature to scope a member to a property (or event) definition. E.g:

```
class C {
    public int P {
        int _p;
        get { return _p; }
        set { ValidateNewP(value); _p = value; }
    }

    public void M() {
        _p = 10; // error
        P = 20; // (of course) OK
    }
}
```
</Description>
    <CreatedDate>21/05/2015</CreatedDate>
    <ClosedDate>10/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2972</IssueID>
    <Title>Error: "csc2.exe" exited with code -1073741819</Title>
    <Description>Hi,

I'm getting following error during compilation: "csc2.exe" exited with code -1073741819

Just trying to compile RavenDB.VS2015.sln from here https://github.com/ppekrol/ravendb/tree/dnxcore50

Event log:

Application: csc2.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.NullReferenceException
Stack:

```
   at Microsoft.Cci.PdbWriter.GetAssemblyReferenceAlias(Microsoft.Cci.IAssemblyReference, System.Collections.Generic.HashSet`1&lt;System.String&gt;)
   at Microsoft.Cci.PdbWriter.TryEncodeImport(Microsoft.Cci.UsedNamespaceOrType, System.Collections.Generic.HashSet`1&lt;System.String&gt;, Boolean)
   at Microsoft.Cci.PdbWriter.DefineNamespaceScopes(Microsoft.Cci.IMethodBody)
   at Microsoft.Cci.PdbWriter.SerializeDebugInfo(Microsoft.Cci.IMethodBody, UInt32, Microsoft.Cci.CustomDebugInfoWriter)
   at Microsoft.Cci.MetadataWriter.SerializeMethodBodies(Microsoft.Cci.BinaryWriter, Microsoft.Cci.PdbWriter)
   at Microsoft.Cci.MetadataWriter.SerializeMetadataAndIL(Microsoft.Cci.PdbWriter, Microsoft.Cci.BinaryWriter, Microsoft.Cci.BinaryWriter, Microsoft.Cci.BinaryWriter, Microsoft.Cci.BinaryWriter, System.Func`2&lt;Microsoft.Cci.MetadataSizes,Int32&gt;, System.Func`2&lt;Microsoft.Cci.MetadataSizes,Int32&gt;, UInt32 ByRef, UInt32 ByRef, Microsoft.Cci.MetadataSizes ByRef)
   at Microsoft.Cci.PeWriter.WritePeToStream(Microsoft.Cci.MetadataWriter, System.Func`1&lt;System.IO.Stream&gt;, Microsoft.Cci.PdbWriter, UInt32 ByRef)
   at Microsoft.Cci.PeWriter.WritePeToStream(Microsoft.CodeAnalysis.Emit.EmitContext, Microsoft.CodeAnalysis.CommonMessageProvider, System.Func`1&lt;System.IO.Stream&gt;, Microsoft.Cci.PdbWriter, Boolean, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Compilation.SerializeToPeStream(Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder, EmitStreamProvider, Microsoft.Cci.PdbOutputInfo, System.Func`1&lt;System.Object&gt;, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider, Microsoft.Cci.PdbOutputInfo, EmitStreamProvider, EmitStreamProvider, System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.ResourceDescription&gt;, Microsoft.CodeAnalysis.Emit.EmitOptions, Microsoft.CodeAnalysis.CodeGen.CompilationTestData, System.Func`1&lt;System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.RunCore(System.IO.TextWriter, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.Run(System.IO.TextWriter, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompiler.Run(System.IO.TextWriter, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(System.String[])
   at Microsoft.CodeAnalysis.BuildTasks.BuildClient.RunWithConsoleOutput(System.String[], RequestLanguage, System.Func`2&lt;System.String[],Int32&gt;)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(System.String[])
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc2.Main(System.String[])
```

Thanks for help in advance
</Description>
    <CreatedDate>21/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2968</IssueID>
    <Title>RuntimeBinderException occurred with CSharpScript and DynamicObject.</Title>
    <Description>Sorry poor english...
- I tested CSharpScript and DynamicObject. RuntimeBinderException occurred, but I don't know the cause.
- Used:
  - "Microsoft.CodeAnalysis.CSharp 1.0.0-rc2"
  - "Microsoft.CodeAnalysis.Scripting.CSharp 1.0.0-rc2"

```
using System;
using System.Dynamic;
using System.Linq;

using Microsoft.CodeAnalysis.Scripting;
using Microsoft.CodeAnalysis.Scripting.CSharp;

namespace Test
{
    public sealed class TargetObject : DynamicObject
    {
        public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
        {
            if (binder.Name == "CreateValues")
            {
                var count = (int)args[0];
                var r = new Random();
                result = string.Join(",", Enumerable.Range(0, count).Select(index =&gt; r.Next()));
                return true;
            }

            return base.TryInvokeMember(binder, args, out result);
        }
    }

    public sealed class HostObject
    {
        public HostObject()
        {
            this.Target = new TargetObject();
        }

        public dynamic Target
        {
            get;
            private set;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var scriptOptions = ScriptOptions.Default.WithReferences(
                typeof(object).Assembly,
                typeof(Uri).Assembly,
                typeof(Enumerable).Assembly,
                typeof(Microsoft.CSharp.RuntimeBinder.Binder).Assembly);

            var host = new HostObject();

            var script = CSharpScript.Create(
                "Console.WriteLine(Target.CreateValues(10));",
                scriptOptions);

            // Raise RuntimeBinderException : Cannot implicitly convert type 'void'  to 'object'
            script.Run(host);
        }
    }
}
```

Any idea?
Thanks.
</Description>
    <CreatedDate>21/05/2015</CreatedDate>
    <ClosedDate>25/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2809</IssueID>
    <Title>Allow unit test compilation to be configured</Title>
    <Description>The compilation object used by the unit test base class DiagnosticVerifier creates a compilation object under that covers that includes a small set of references. So for example, if I have an analyzer that checks to see if a class derives from System.Xml.XmlDocument, the test will fail (even though the analyzer actually works) because the compilation used in the unit test does not have a reference to System.XmlDocument.

I can work around that by adding an additional MetadataReference in DiagnosticVerifier.Helper.cs. But it would be nice if this -- and similar configuration of the compilation object -- were exposed as an API from the DiagnosticVerifier base class. So, for example, I could say:

```
AddMetadataReference(typeof(XmlDocument));
```

You might expose some sort of scaffolding object on which options like this could be set, or expose the option setters directly as APIs on the base class, as above.
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2757</IssueID>
    <Title>Code fix for CS0305 is not helpful</Title>
    <Description>Given the following code:

``` C#
using System.Collections.Generic;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            HashSet&lt;&gt; // CS0305 Using the generic type 'HashSet&lt;T&gt;' requires 1 type arguments   
        }
    }
}
```

The light bulb fix for CS0305 above offers to prefix the HashSet&lt;&gt; with "System.Collections.Generic" to turn the code into:

``` C#
using System.Collections.Generic;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            System.Collections.Generic.HashSet&lt;&gt; // CS0305 Using the generic type 'HashSet&lt;T&gt;' requires 1 type arguments    
        }
    }
}
```

Which is not useful and does get us any closer to fixing the actual issue.
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2752</IssueID>
    <Title>"Open active rule set " missing newly added nugget package rules</Title>
    <Description>I installed the nugget package for 
Microsoft.CodeAnalysis.Analyzers &amp; Microsoft.codeanalysis.csharp.Analyzers ,when I right click the Analyzers “ Open active rule set” this doesn’t show in the list 
![nugetpackagebug](https://cloud.githubusercontent.com/assets/12449387/7639502/51fddcc6-fa31-11e4-8b8f-76853fdfbdce.png)

As soon I play with “Set Rule set severity “ it shows up in the “active rule set” …is that the expected behavior ? 
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2749</IssueID>
    <Title>crash in Pdb generation</Title>
    <Description>We’re seeing a (Watson... _don't tell_... tracked as DevDiv 1167556) crash in PDB generation in code that was added recently.

The method is at https://github.com/dotnet/roslyn/blob/2151da1a32a1d27e4d9cdc09d58172a141c1caa4/src/Compilers/Core/Portable/NativePdbWriter/PdbWriter.cs#L625-L650

``` cs
        private string GetAssemblyReferenceAlias(IAssemblyReference assembly, HashSet&lt;string&gt; declaredExternAliases)
        {
            var allAliases = _metadataWriter.Context.Module.GetAssemblyReferenceAliases(_metadataWriter.Context);
            foreach (AssemblyReferenceAlias alias in allAliases)
            {
                // Multiple aliases may be given to an assembly reference.
                // We find one that is in scope (was imported via extern alias directive).
                // If multiple are in scope then use the first one.

                // NOTE: Dev12 uses the one that appeared in source, whereas we use
                // the first one that COULD have appeared in source.  (DevDiv #913022)
                // The reason we're not just using the alias from the syntax is that
                // it is non-trivial to locate.  In particular, since "." may be used in
                // place of "::", determining whether the first identifier in the name is
                // the alias requires binding.  For example, "using A.B;" could refer to
                // either "A::B" or "global::A.B".

                if (assembly == alias.Assembly &amp;&amp; declaredExternAliases.Contains(alias.Name))
                {
                    return alias.Name;
                }
            }

            // no alias defined in scope for given assembly -&gt; error in compiler
            throw ExceptionUtilities.Unreachable;
        }
```

The callsites are at https://github.com/dotnet/roslyn/blob/2151da1a32a1d27e4d9cdc09d58172a141c1caa4/src/Compilers/Core/Portable/NativePdbWriter/PdbWriter.cs#L521-L533

``` cs
                if (import.AliasOpt != null)
                {
                    return (import.TargetAssemblyOpt != null) ?
                        "A" + import.AliasOpt + " E" + namespaceName + " " + GetAssemblyReferenceAlias(import.TargetAssemblyOpt, declaredExternAliasesOpt) :
                        "A" + import.AliasOpt + " U" + namespaceName;
                }
                else
                {
                    return (import.TargetAssemblyOpt != null) ?
                        "E" + namespaceName + " " + GetAssemblyReferenceAlias(import.TargetAssemblyOpt, declaredExternAliasesOpt) :
                        "U" + namespaceName;
                }
```

The callsites can pass `null` for `declaredExternAliases`, but the method fails if that is the case.

&lt;!---
@huboard:{"order":2749.0,"milestone_order":2749,"custom_state":""}
--&gt;
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2744</IssueID>
    <Title>Greatest Common SubType Inference + Array Literal</Title>
    <Description>If you look at the object graph below you can see that `TextRule` inherits `RuleDef`
![ruledef](https://cloud.githubusercontent.com/assets/900107/7631242/5c6b1006-fa37-11e4-8cef-4303d42fa617.jpg)

So it would be logical sense the when using on in an array literal with other `RuleDef`'s that the inferred type of the array should be `RuleDef()` but on examination the declared type is `Object()`.

![ruledef02](https://cloud.githubusercontent.com/assets/900107/7631248/64902d98-fa37-11e4-8a36-cebd10b07b60.jpg)

WIth `Option Strict On` we get the warning message.
`Cannot infer an element type, and Option Strict On does not allow 'Object' to be assumed. Specifying the type of the array might correct this error.`

The extension method on the type `string` just create instances of the `RuleDef`

``` vb
   &lt;Extension&gt;
    Public Function AsRef(s As String) As Rules.RuleRef
        Return New RuleRef(New RuleName(s))
    End Function
    &lt;Extension&gt;
    Public Function AsText(s As String) As Rules.TextRule
        Return New Rules.TextRule(s)
    End Function
    &lt;Extension&gt;
    Public Function AsAlt(a() As Rules.RuleDefinition) As Alternatives
        Return New Alternatives(a)
    End Function

```

But if I use a the exact same form of the array literal being used as the first argument of the exact same function. Except that in one we use is as as extension method the other not. 

```
        Dim a0 = ({"IL_Header".AsRef, "HEX_4".AsRef, ": ".AsText }).AsAlt
        Dim a1 = RuleDef_Exts.AsAlt({"IL_Header".AsRef, "HEX_4".AsRef, ": ".AsText})
```

The first has an error, the second does not.
My expectation is for both to mean the same.

So this behaviour suggest that type-inference isn't correctly inferring the greatest common subtype for the array literal. In which the exampe would be `RuleDef`, Same behaviour exists with VS2013 version of VB.net. I shouldn't have to specify the type when it could be be inferred.
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>10/09/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2700</IssueID>
    <Title>VS2015 RC: IntelliSense randomly breaks, complaining about missing references</Title>
    <Description>In VS 2015 RC (did also happen in CTP 6, not sure if it started in CTP 6 or in the previous one) IntelliSense breaks apparently randomly, telling me that i must add references to system assemblies. This doesn't seem to affect nuget packages or my own libraries. Compiling still works fine but i get a ton of:

```
Error CS0012: The type "Attribute" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "Dictionary&lt;,&gt;" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Collections, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "Enum" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "Expression&lt;&gt;" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Linq.Expressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "HttpStatusCode" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Net.Primitives, Version=3.9.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "IDisposable" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "IEnumerable" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "IEnumerable&lt;&gt;" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "IOrderedEnumerable&lt;&gt;" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "MulticastDelegate" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "Object" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "Stream" is defined in an assembly that is not referenced. You must add a reference to assembly "System.IO, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "Task&lt;&gt;" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Threading.Tasks, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS0012: The type "Uri" is defined in an assembly that is not referenced. You must add a reference to assembly "System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". 
Error CS1579: foreach statement cannot operate on variables of type "System.Collections.Generic.Dictionary" because "System.Collections.Generic.Dictionary" does not contain a public definition for 'GetEnumerator' 
Error CS1579: foreach statement cannot operate on variables of type "System.Collections.Generic.IEnumerable" because "System.Collections.Generic.IEnumerable" does not contain a public definition for 'GetEnumerator' 
Error CS1660: Cannot convert lambda expression to type 'TraceListener' because it is not a delegate type.
```

While i can't remember having gotten any error notification in CTP 6, VS 2015 RC told me that a plugin crashed, ActivityLog.xml shows:

```
System.IndexOutOfRangeException: Index was outside the bounds of the array.
 at Microsoft.CodeAnalysis.CSharp.CodeFixes.AddMissingReference.AddMissingReferenceCodeFixProvider.&lt;RegisterCodeFixesAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
 at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.&lt;PerformActionAsync&gt;d__2.MoveNext()
```

The messagebox, accompanied by broken IntelliSense happened while i've switched a tab from XAML(WPF) to a CS file after VS spent some time being minimized.
The only way to restore IntelliSense is to restart VS, closing all tabs and reopening them doesn't help.
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2596</IssueID>
    <Title>Intellisense does not work in nameof expressions</Title>
    <Description>``` csharp
class Program
{
    static void Main(string[] args)
    {
        Foo foo = new Foo();
        Console.WriteLine(nameof(foo));
    }
}

class Foo
{
    public int Bar { get; set; }
}
```

When I type dot after foo in nameof expression, intellisense doesn't show any suggestions. Intellisense should suggest `Bar` property.
</Description>
    <CreatedDate>08/05/2015</CreatedDate>
    <ClosedDate>08/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2450</IssueID>
    <Title>Go to definition in VB source goes to metadata view even though corresponding C# project is part of the same solution</Title>
    <Description>In Roslyn solution, go to the following line in src\Compilers\VisualBasic\Portable\Symbols\Source\SourceAssemblySymbol.vb

```
If Not AssemblyIdentity.TryParseDisplayName(displayName, identity, parts) Then
```

Go to definition on **AssemblyIdentity** - two partial definitions in source files are found as expected.
Go to definition on **TryParseDisplayName** - goes to metadata view of AssemblyIdentity type, expected to go to definition is source.
</Description>
    <CreatedDate>01/05/2015</CreatedDate>
    <ClosedDate>01/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2429</IssueID>
    <Title>Type of `-(2147483648)`</Title>
    <Description>The type of `-(2147483648)` differs between VS2013 and VS2015:

When compiled with VS2013 / csc, the following program prints `System.Int64`.
When compiled with VS2015RC, it prints `System.Int32`.

``` c#
using System;

class Program
{
  static void X(object i)
  {
   Console.WriteLine(i.GetType());
  }

  public static void Main(string[] args)
  {
   X(-(2147483648));
  }
}
```

This Issue was found when compiling the [NRefactory unit tests](https://github.com/icsharpcode/NRefactory/blob/99189662c7a4a59771df56163fc9d7300f7e6a14/ICSharpCode.NRefactory.Tests/CSharp/Resolver/UnaryOperatorTests.cs#L236) with Roslyn.

The spec is kind of ambiguous in this situation, but the comment in `Binder.BindIntegralMinValConstants` seems to interpret the spec in the same way as csc and NRefactory: the special case does not apply when the integer literal is in parentheses, so the type should be `long`.
</Description>
    <CreatedDate>01/05/2015</CreatedDate>
    <ClosedDate>01/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2404</IssueID>
    <Title>Proposal : parametrized "new" constraints</Title>
    <Description>I'd like to be able to have constraint type parameters with specific constructor structure, like this : 

``` csharp
    T FOO&lt;T&gt; () where T : new (string, string,int)
    {
         return new T("a1", "a2", 255);
    }
```

In some cases it would be useful, like above.
</Description>
    <CreatedDate>30/04/2015</CreatedDate>
    <ClosedDate>30/04/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2278</IssueID>
    <Title>Fix indenter so it doesn't indent inside of Interpolation Strings.</Title>
    <Description>I think this correct area of the source for this based of C#'s #921
If it is then it fixes #2231
</Description>
    <CreatedDate>26/04/2015</CreatedDate>
    <ClosedDate>28/04/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2271</IssueID>
    <Title>Warning CS0219 isn't given for interpolated strings</Title>
    <Description>In this code

``` cs
var x = "hello";
var y = $"hello";
```

then I get a warning CS0219 "The variable 'x' is assigned but its value is never used". However I don't get the warning on 'y'. I guess that's technically related to the fact that string interpolation is shorthand for a function-call to String.Format. But it rubs me the wrong way. Glancing at this code, I really think it should give me the warning on 'y'.

![unused](https://cloud.githubusercontent.com/assets/3316258/7335499/8ea9ae3c-eb79-11e4-99fb-9e2f09b4510d.png)
</Description>
    <CreatedDate>26/04/2015</CreatedDate>
    <ClosedDate>26/04/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2202</IssueID>
    <Title>Common Language Runtime detected an invalid program</Title>
    <Description>When running the 1.0.0-rc1 on our build machines (installed from the Microsoft.Net.Compilers nuget package) we're getting errors from the csc2.exe  &amp; csc.exe.

```
D:\replaced\.build\packages\Microsoft.Net.Compilers.1.0.0-rc1\tools\csc.exe /noconfig /nowarn:1701,1702 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE /highentropyva+ /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\Microsoft.CSharp.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\mscorlib.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Core.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Data.DataSetExtensions.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Data.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Xml.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Xml.Linq.dll" /debug:pdbonly /filealign:512 /optimize+ /out:obj\Release\replaced.dll /subsystemversion:6.00 /target:library /utf8output Properties\AssemblyInfo.cs "C:\Users\replaced\AppData\Local\Temp\.NETFramework,Version=v4.5.AssemblyAttributes.cs"

  Unhandled Exception: System.InvalidProgramException: Common Language Runtime detected an invalid program.
     at System.Collections.Immutable.SecurePooledObject`1.Use[TCaller](TCaller&amp; caller)
     at System.Collections.Immutable.SortedInt32KeyNode`1.Enumerator.PushLeft(SortedInt32KeyNode`1 node)
     at System.Collections.Immutable.SortedInt32KeyNode`1.Enumerator..ctor(SortedInt32KeyNode`1 root)
     at System.Collections.Immutable.ImmutableDictionary`2.Enumerator..ctor(SortedInt32KeyNode`1 root, Builder builder)
     at System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator()
     at System.Collections.Immutable.ImmutableDictionary`2.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(KeyValuePair`2[] array, Int32 arrayIndex)
     at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
     at System.Linq.OrderedEnumerable`1.&lt;GetEnumerator&gt;d__0.MoveNext()
     at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
     at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
     at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
     at System.Collections.Immutable.ImmutableArray.CreateRange[T](IEnumerable`1 items)
     at Microsoft.CodeAnalysis.CSharp.DeclarationTable.Cache.&lt;&gt;c__DisplayClass0.&lt;_ctor&gt;b__1()
     at System.Lazy`1.CreateValue()
     at System.Lazy`1.LazyInitValue()
     at Microsoft.CodeAnalysis.CSharp.DeclarationTable.Cache.&lt;_ctor&gt;b__4()
     at System.Lazy`1.CreateValue()
     at System.Lazy`1.LazyInitValue()
     at System.Lazy`1.get_Value()
     at Microsoft.CodeAnalysis.CSharp.DeclarationTable.GetMergedReferenceDirectives()
     at System.Lazy`1.CreateValue()
     at System.Lazy`1.LazyInitValue()
     at Microsoft.CodeAnalysis.CSharp.DeclarationTable.get_ReferenceDirectives()
     at Microsoft.CodeAnalysis.CommonReferenceManager`2.GetCompilationReferences(TCompilation compilation, DiagnosticBag diagnostics, ImmutableArray`1&amp; references, IDictionary`2&amp; boundReferenceDirectives, ImmutableArray`1&amp; referenceDirectiveLocations)
     at Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolveMetadataReferences(TCompilation compilation, ImmutableArray`1&amp; references, IDictionary`2&amp; boundReferenceDirectiveMap, ImmutableArray`1&amp; boundReferenceDirectives, ImmutableArray`1&amp; assemblies, ImmutableArray`1&amp; modules, DiagnosticBag diagnostics)
     at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation)
     at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateSourceAssemblyForCompilation(CSharpCompilation compilation)
     at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetBoundReferenceManager()
     at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
     at Microsoft.CodeAnalysis.CommonCompiler.RunCore(TextWriter consoleOutput, CancellationToken cancellationToken)
     at Microsoft.CodeAnalysis.CommonCompiler.Run(TextWriter consoleOutput, CancellationToken cancellationToken)
     at Microsoft.CodeAnalysis.CSharp.CSharpCompiler.Run(TextWriter consoleOutput, CancellationToken cancellationToken)
     at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(String[] args)
     at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(String[] args)
C:\windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.CSharp.targets(316,9): error MSB6006: "csc.exe" exited with code 255. 
```

with csc2.exe we're getting 
`error MSB6006: "csc2.exe" exited with code -1073741568.`

this doesn't look like the same issue as #969. Any ideas?
</Description>
    <CreatedDate>23/04/2015</CreatedDate>
    <ClosedDate>06/05/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2117</IssueID>
    <Title>Support conditional access expression in expression tree lambdas</Title>
    <Description>I can't do this:

```
var list = new List&lt;object&gt;();
Expression&lt;Func&lt;int?&gt;&gt; foo = () =&gt; list?.Count;
```

But I would like to.
</Description>
    <CreatedDate>20/04/2015</CreatedDate>
    <ClosedDate>20/04/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2105</IssueID>
    <Title>Keyword completion for Recommender.GetRecommendedSymbolsAtPosition</Title>
    <Description>Please provide keyword completion for C# and VB when using the public API Recommender.GetRecommendedSymbolsAtPosition.

We use GetRecommendedSymbolsAtPosition to provide auto-completion for our "Script" editor. This works really great and it helps much writing script code. If this method would provide the recommended keywords as well then the auto-completion would be nearly perfect :-).

You might have a look at http://dotnetpad.codeplex.com to see how we use Roslyn. I have created this open-source project to evaluate Roslyn.
</Description>
    <CreatedDate>20/04/2015</CreatedDate>
    <ClosedDate>05/11/2015</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>2103</IssueID>
    <Title>[C# Feature Request] Static extension methods</Title>
    <Description>_(I expected to see this already requested, but could not find it - apologies if it's a duplicate)_

http://stackoverflow.com/questions/249222/can-i-add-extension-methods-to-an-existing-static-class

Example (from SO):

``` csharp
Console.WriteBlueLine("This text is blue");
```

``` csharp
public static class Helpers
{
    public static void WriteBlueLine(this Console c, string text)
    {
        Console.ForegroundColor = ConsoleColor.Blue;
        Console.WriteLine(text);
        Console.ResetColor();
    }
}
```

As far as I understand F# already supports it, which kind of proves it is possible and might be useful:

http://codebetter.com/matthewpodwysocki/2008/09/10/object-oriented-f-extension-everything

&gt; Are there any downsides?  Well, at the moment, when we create these extensions to our given classes in F#, they are only available to F#.  That means you cannot access these from C#, VB or any other language at the moment.  That cuts a little bit into the value proposition, but I think still very valuable to the language at this point. 

http://stackoverflow.com/questions/671420/static-extension-methods-on-seq-module
</Description>
    <CreatedDate>20/04/2015</CreatedDate>
    <ClosedDate>20/04/2015</ClosedDate>
  </Issue>
</Issues>