<PullRequests>
  <PullRequest>
    <IssueID>6299</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Use current element for SimpleQueueCacheCursor.Element</Title>
    <Description>Fixes #6298 
Fixes #6281

For brevity I am `using SQC = SimpleQueueCache; using SQCC = SimpleQueueCacheCursor;`, within this post.

The whole idea of this change is to change SQCC so that its `Element` value always points to the cursors current element, rather than its next value. This change is remarkably small, especially if you do not count the comment changes.

Specifically it has the invariant that: whenever a method is not currently executing, if `current` is not null, then it always equals `Element.Value.Batch`. (Note: Invariant does not need to hold at end of re-entrant calls while some other `SQCC` method is running.) I will informally prove that invariant holds a little further below. I will also informally argue as to why this change is safe.

While there are further changes or refactorings that could be made, I've tried to keep this a minimal change, viewing this as a bug-fix rather than a substantial refactoring.

While I have tried to be thorough in my analysis of the impact of this, it is possible I am overlooking something. If you see (or think you see) any scenarios where this change would break things, please let me know. 

## Why this is safe
`PersistentStreamPullingAgent` will not notice any difference between this version of the code, and the previous one, except as a side effect of any tiny changes in the execution time of the code in question. All calls to `SQC` or `SQCC` will return the same values. They won't always have exactly the same effect, but there is no observable difference from the pulling agent's perspective.

From `SQC`'s perspective, not much changes. It sees one fewer call to `TryGetNextMessage(...)` per cursor, but that would have been the call when `SQCC.current` was not null, but `SQC.Element` is null, so that would be a call that does an early return anyway. It also returns a different value from the `TryGetNextMessage(...)` call, but that does not really impact the rest of the class in any meaningful way.

The real difference to `SQC` is the timing of the remaining calls to `TryGetNextMessage(...)`, which occur one cursor `MoveNext()` cycle later than they previously did, ensuring that that the cursor's `Element` value always contains the current batch being processed, so that batch does not get cleaned up while it is processing. 

For `SQCC`, the semantics of the `Element` property change substantially, to become the current value the cursor is pointing at, rather than the next value. Since `SQC` was already treating the value of `Element` as the current element this is desirable. There are two other minor differences: If `MoveNext()` returns false, the value of `current` is changed to null, rather than remaining the same. This is not an issue since the Enumerator pattern on which the cursors are based already says that the current value is undefined after `MoveNext()` returns false. Similarly upon calling `Dispose()`, the value of `current` is also set to null, which is needed to maintain the invariant, and accessing a cursor after disposing it would be a bug already anyway.

## Proof that the invariant holds
&lt;details&gt;&lt;summary&gt;Proof collapsed by default. Click to Expand&lt;/summary&gt;
Inductive base case: When the `SQCC` class is constructed both values are null, so the invariant holds.

Inductive recursive state: Our goal here is to show that any changes made to the object that impact the fields in question will preserve the invariant, assuming it already holds at the start. 

In all cases where `current` changes it is either being set to `Element.Value.Batch`, or `Element` is also changing at the same time and `current` gets set to the same value. This happens in two places: `SQCC.Dispose(...)` ends up setting both values to null, while `SQCC.MoveNext()` sets `current` to `Element.Value.Batch` if `current` is null, and `Element`. Otherwise it calls `SQC.TryGetNextMessage(...)`, one or many times, and will end up setting `current` to the value it output. `SQC.TryGetNextMessage(...)` will output null if `Element` was already null. In all other cases it will update `Element`, and return `Element.Value.Batch`.

Therefore we can conclude that `current` will never change in a way that will break the invariant. So the invariant can only be broken if `Element` changes while `current` is not null (unless current changes to match). (Note: I am ignoring somebody setting `Element.Value` or `Element.Value.Batch`, since no code actually does that).

So when does `Element` change? It changes when `SQCC.Set(...)` or `SQCC.UnSet(...)` are called. Analyzing these:
* `SQCC.Set(...)` called by:
    * `SQC.AdvanceCursor(...)` which is only called by:
        * `SQC.TryGetNextMessage(...)` which is only called by `SQCC.MoveNext()`, which also changes `current` to match.
    * `SQC.SetCursor(...)` which is only called by:
        * `SQC.InitializeCursor(...)` which is called by:
            * `SQC.GetCacheCursor(...)`, which calls it immediately after constructing `SQCC`, so both `current` and `Element` are null.
            * `SQC.RefreshCursor(...)` which is called by `SQC.Refresh(...)`, but only if `Element` is null. In that case, either `current` is either also null, per the invariant, or something else has already broken the invariant..
* `SQCC.Unset(...)` called by:
    * `SQC.UnsetCursor(...)` which is called by:
        * `SQCC.Dispose(...)` which also sets `current` to match.
        * `SQC.InitializeCursor(...)` which was analyzed above.
        * `SQC.TryGetNextMessage(...)` which was analyzed above.

Thus I have shown that the the invariant holds when constructed, and no method calls modify the the members in question in a way that breaks the invariant, unless the invariant is already broken. Therefore by induction, I have shown that the invariant always holds.
&lt;/details&gt;</Description>
    <CreatedDate>12/02/2020</CreatedDate>
    <ClosedDate>18/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>6299</PullRequestID>
        <IssueID>6298</IssueID>
        <Title>Fix Design time builds to not fail before restoring nuget packages an…</Title>
        <Description>…d building
</Description>
        <CreatedDate>24/10/2015</CreatedDate>
        <ClosedDate>28/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>6299</PullRequestID>
        <IssueID>6281</IssueID>
        <Title>Log low VM telemetry at most once per session</Title>
        <Description>Fixes #6279 

@heejaechang @Pilchie 

This is the simplest fix for Update 1.

Note: The shell will keep broadcasting VSM_VIRTUALMEMORYLOW/CRITICAL once a minute while the low VM situation persists. There is no corresponding message indicating "VM is back to normal".

Another approach might be to do some rate limiting on the telemetry. i.e. note the time of the last notification and log telemetry only if it's been more than some interval (say 30 minutes or an hour). Thoughts?
</Description>
        <CreatedDate>23/10/2015</CreatedDate>
        <ClosedDate>24/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>6299</PullRequestID>
      <File>src/EditorFeatures/CSharpTest/CSharpGoToAdjacentMemberTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/ChangeSignature/RemoveParametersTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EncapsulateField/EncapsulateFieldCommandHandlerTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EncapsulateField/EncapsulateFieldTestState.cs</File>
      <File>src/EditorFeatures/CSharpTest/ExtractInterface/ExtractInterfaceTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/ExtractMethod/ExtractMethodTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Organizing/OrganizeTypeDeclarationTests.cs</File>
      <File>src/EditorFeatures/Core/CommandHandlers/GoToAdjacentMemberCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/Commands/GoToAdjacentMemberCommandArgs.cs</File>
      <File>src/EditorFeatures/Core/EditorFeaturesResources.Designer.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/Commands/PredefinedCommandHandlerNames.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ChangeSignature/AbstractChangeSignatureCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/Implementation/EncapsulateField/AbstractEncapsulateFieldCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ExtractInterface/AbstractExtractInterfaceCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ExtractMethod/AbstractExtractMethodCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/CommandHandlers/RenameCommandHandler_RenameHandler.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/InlineRenameSession.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Organizing/OrganizeDocumentCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Suggestions/SuggestedActionsSourceProvider.cs</File>
      <File>src/EditorFeatures/Core/Shared/DefaultDocumentSupportsSuggestionService.cs</File>
      <File>src/EditorFeatures/Core/Shared/IDocumentSupportsSuggestionService.cs</File>
      <File>src/EditorFeatures/TestUtilities/Traits.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Implementation/Interactive/InteractiveDocumentSupportsSuggestionService.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/AbstractOleCommandTarget.Execute.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/AbstractOleCommandTarget.Query.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/VisualStudioDocumentSupportsSuggestionService.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5998</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Propagate message [de]serialization exceptions to callers</Title>
    <Description>Currently when deserialization fails for a response message we do not propagate that deserialization exception to the caller. This PR adds behavior to propate such exceptions back to the original caller.

Fixes #4748

Fixes #5397

xref #5978</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5998</PullRequestID>
        <IssueID>4748</IssueID>
        <Title>ArgumentException when manually invoking tests for specific DLL</Title>
        <Description>I followed the instructions on the contribution guide in building tests:

```
msbuild /v:m /m BuildAndTest.proj /p:PublicBuild=true /p:DeployExtension=false
```

And at some point I also decide re-build a more specific project

```
msbuild /v:m /m src\EditorFeatures\CSharpTest\CSharpEditorServicesTest.csproj /p:PublicBuild=true /p:DeployExtension=false
```

(which actually ended up deploying the rest of the DLLs)

And invoked xunit directly on the DLL I am interested in testing:

```
packages\xunit.runners.2.0.0-alpha-build2576\tools\xunit.console.x86.exe Binaries\Debug\Roslyn.Services.Editor.CSharp.UnitTests.dll -noshadow
```

```
xUnit.net console test runner (32-bit .NET 4.0.30319.42000)
Copyright (C) 2014 Outercurve Foundation.

Starting: Roslyn.Services.Editor.CSharp.UnitTests.dll
.... lots of skips ....

   System.ArgumentException [FATAL]
      Ambiguous method named TestEquivalenceKey in type Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Diagnostics.GenerateMethod.GenerateMethodTests+GenerateConversionTest
      Stack Trace:
            at Xunit.Sdk.Executor.RunTests..ctor(Executor executor, String _type, List`1 _methods, Object _handler)
Finished: Roslyn.Services.Editor.CSharp.UnitTests.dll

=== TEST EXECUTION SUMMARY ===
   Roslyn.Services.Editor.CSharp.UnitTests.dll  Total: 11580, Failed: 0, Skipped: 43
```

The `ArgumentException` is not being reported in the test summary. Its also unclear if this error always happens but is failed to be reported in the `BuildAndTest` target, or if it only happens when targeting a specific DLL.
</Description>
        <CreatedDate>24/08/2015</CreatedDate>
        <ClosedDate>22/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5998</PullRequestID>
        <IssueID>5397</IssueID>
        <Title>Feature request - Embed source in PDB</Title>
        <Description>The PDB format has long had the capability to include the full text of source files, but most compilers have not made use of it. I would like to add an optional command line argument to the compiler to use this PDB feature.

Including the source gives the developer a way to transmit his code to anyone debugging it without requiring auxiliary mechanisms such as source control servers or saving source files on known file shares. Although it makes the PDB larger, in some cases this size gain might be preferable to overhead configuring those alternate mechanisms. Here are a few cases I imagine it might be useful:
1) During the build, source code is auto-generated and then compiled. This auto-generated source does not exist on source control server and is often not preserved as a build artifact. Even if it is preserved, it can't be indexed on a symbol server making acquisition difficult at debug time. (This is my particular case)
2) A company is OK from an IP standpoint to release source for some of their projects, but their source control system is behind a firewall. Their IT security policies prevent giving any external access to the source control system, which prevents typical usage of source server. They already provide PDBs to customers, and by including source in the PDBs the customer's debugging experience improves with minimal additional work.
3) An Open Source project is doing all their development on GitHub and they current use source server to distribute source, but they don't like additional configuration necessary in VS to enable it. By distributing the source in the PDB they eliminate this additional configuration.

From my quick experiments, the work to enable such a feature is not very much. This is a simple prototype I've been working on to get a quick idea of the scope:
https://github.com/noahfalk/roslyn/commit/e4e20bfe08d11e378998e1346af376bb0c8f782e

To the best of my knowledge Visual Studio Debugger doesn't currently automatically use source embedded in PDBs, but I would collaborate with both teams to enable the debugging experience together with the compiler experience.

Please let me know what are the useful next steps. Thanks!
</Description>
        <CreatedDate>22/09/2015</CreatedDate>
        <ClosedDate>09/09/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5998</PullRequestID>
        <IssueID>5978</IssueID>
        <Title>Move to toolset with csc and vbc binding redirects</Title>
        <Description>Both csc.exe and vbc.exe need to be shipped with binding redirects.  Right now only VBCSCompiler.exe has a config file that does redirects.  
</Description>
        <CreatedDate>14/10/2015</CreatedDate>
        <ClosedDate>16/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5998</PullRequestID>
      <File>src/Compilers/Core/Portable/Emit/CommonPEModuleBuilder.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Organizing/OrganizeDocumentCommandHandler.cs</File>
      <File>src/Features/CSharp/Portable/CodeFixes/RemoveUnnecessaryUsings/RemoveUnnecessaryUsingsCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/RemoveUnnecessaryImports/CSharpRemoveUnnecessaryImportsService.cs</File>
      <File>src/Features/Core/Portable/RemoveUnnecessaryImports/AbstractRemoveUnnecessaryImportsService.cs</File>
      <File>src/Features/Core/Portable/RemoveUnnecessaryImports/IRemoveUnnecessaryImportsService.cs</File>
      <File>src/Features/Core/Portable/RemoveUnnecessaryImports/RemoveUnnecessaryImportsService.cs</File>
      <File>src/Features/Core/Portable/Shared/Extensions/DocumentExtensions.cs</File>
      <File>src/Tools/Source/RunTests/Program.cs</File>
      <File>src/Tools/Source/RunTests/TestRunner.cs</File>
      <File>src/VisualStudio/CSharp/Impl/CodeModel/CSharpCodeModelService.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine_MapCreation.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/Finders/ILanguageServiceReferenceFinder.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/Finders/NamedTypeSymbolReferenceFinder.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5988</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Add additional internal health checks for membership</Title>
    <Description>Fixes #5847 (see also #5987)</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5988</PullRequestID>
        <IssueID>5847</IssueID>
        <Title>Add `#help` command to csi/vbi</Title>
        <Description>![csi](https://cloud.githubusercontent.com/assets/788783/10407616/73386376-6ea2-11e5-862f-2ae28e209816.png)
Fix https://github.com/dotnet/roslyn/issues/5321. Didn't use MEF as @amcasey suggested.

@dotnet/interactive 
</Description>
        <CreatedDate>09/10/2015</CreatedDate>
        <ClosedDate>10/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5988</PullRequestID>
        <IssueID>5987</IssueID>
        <Title>Fixes crash in InteractiveEvaluator when the CWD changes</Title>
        <Description>Fixes https://github.com/dotnet/roslyn/issues/5984
</Description>
        <CreatedDate>15/10/2015</CreatedDate>
        <ClosedDate>16/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5988</PullRequestID>
      <File>src/Interactive/EditorFeatures/CSharp/Interactive/CSharpInteractiveEvaluator.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/CSharpVBInteractiveCommandContentTypes.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveCommandHandler.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveEvaluator.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveLanguageNames.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5987</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Remove unused IMembershipOracle interface</Title>
    <Description>Fixes #5985

See #5847</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5987</PullRequestID>
        <IssueID>5985</IssueID>
        <Title>Proposal: Eval feature for scripts</Title>
        <Description>It should be easy to evaluate dynamically created source code from within a script (without explicitly using the Scripting APIs):

my_script.csx:

``` C#
var result = await Eval("1+1");
var result = await Eval("X+Y", new C { X = 1, Y = 2});
```

Where Eval is a method defined on a globals object provided by the host.

The provided capabilities would be similar to the Scripting APIs.

Some questions:
- Can we pass in info from the enclosing scope (such as usings)?

``` C#
using static System.Math;
var f = "Sqrt";
var result = await Eval($"{f}(x)", new { x = 1 });
```

  Using CallerFileName and CallerLineNumber attributes the host, which implements the Eval method, can get the exact line in the source code of the Eval call. From there it can infer the usings in scope, if it has the compilation still available. If the script was executed via CreateDelegate the compilation might not be available anymore (by design, to free up resources). That can be ok, we might just not support evals in this scenario and throw an exception.
</Description>
        <CreatedDate>15/10/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5987</PullRequestID>
        <IssueID>5847</IssueID>
        <Title>Add `#help` command to csi/vbi</Title>
        <Description>![csi](https://cloud.githubusercontent.com/assets/788783/10407616/73386376-6ea2-11e5-862f-2ae28e209816.png)
Fix https://github.com/dotnet/roslyn/issues/5321. Didn't use MEF as @amcasey suggested.

@dotnet/interactive 
</Description>
        <CreatedDate>09/10/2015</CreatedDate>
        <ClosedDate>10/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5987</PullRequestID>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveEvaluator.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5864</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Resubmit #5862 (Cherry-pick #5859 and #5863 for 2.4.1)</Title>
    <Description>Log options on silo and client startup (#5859)
Handle the case where the clustering provider does not support TableVersion (#5863)</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5864</PullRequestID>
        <IssueID>5859</IssueID>
        <Title>build: Fixes unzip option</Title>
        <Description>`u` and `o` are contradictory options. `unzip` utility on FreeBSD considers this mistake as an error:

&gt; unzip: -n, -o and -u are contradictory
##### Rationale:

&gt; -n means "never overwrite"
&gt; -o means "always overwrite"
&gt; -u means "sometimes overwrite"

from: http://svn-src-head.freebsd.narkive.com/TzP7fphF/svn-commit-r200068-head-usr-bin.

/cc: @jaredpar, @agocke
</Description>
        <CreatedDate>10/10/2015</CreatedDate>
        <ClosedDate>21/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5864</PullRequestID>
        <IssueID>5863</IssueID>
        <Title>Improve highlighting for interpolated strings containing hyperlinks</Title>
        <Description>![2015-10-11_01-34-32](https://cloud.githubusercontent.com/assets/7110884/10413813/5a59515a-6fb8-11e5-892a-75a04c18548c.png)
When you have a string with a hyperlink in it, the blue will override all regular highlighting colors as it appears to.
</Description>
        <CreatedDate>10/10/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5864</PullRequestID>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AbstractKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AddKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AliasKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AsKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AscendingKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AssemblyKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AsyncKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/AwaitKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/BaseKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/BoolKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/BreakKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ByKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ByteKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/CaseKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/CatchKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/CharKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/CheckedKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ChecksumKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ClassKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ConstKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ContinueKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DecimalKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DefaultKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DefineKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DelegateKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DescendingKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DisableKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DoKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DoubleKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/DynamicKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ElifKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ElseKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/EndIfKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/EndRegionKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/EnumKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/EqualsKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ErrorKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/EventKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ExplicitKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ExternKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/FalseKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/FieldKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/FinallyKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/FixedKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/FloatKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ForEachKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ForKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/FromKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/GetKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/GlobalKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/GotoKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/GroupKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/HiddenKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/IfKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ImplicitKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/InKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/IntKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/InterfaceKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/InternalKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/IntoKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/IsKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/JoinKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/KeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/LetKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/LineKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/LockKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/LongKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/MethodKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ModuleKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/NameOfKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/NamespaceKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/NewKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/NullKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ObjectKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/OnKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/OperatorKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/OrderByKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/OutKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/OverrideKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ParamKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ParamsKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/PartialKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/PragmaKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/PrivateKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/PropertyKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ProtectedKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/PublicKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ReadOnlyKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/RecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/RefKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ReferenceKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/RegionKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/RemoveKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/RestoreKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ReturnKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/SByteKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/SealedKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/SelectKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/SetKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ShortKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/SizeOfKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/StackAllocKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/StaticKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/StringKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/StructKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/SwitchKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ThisKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ThrowKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/TrueKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/TryKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/TypeKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/TypeOfKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/TypeVarKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/UIntKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/ULongKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/UShortKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/UncheckedKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/UndefKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/UnsafeKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/UsingKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/VarKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/VirtualKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/VoidKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/VolatileKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/WarningKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/WhenKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/WhereKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/WhileKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest2/Recommendations/YieldKeywordRecommenderTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5862</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Cherry-pick #5859 and #5863 for 2.4.1</Title>
    <Description>Log options on silo and client startup (#5859)
Handle the case where the clustering provider does not support TableVersion (#5863)</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5862</PullRequestID>
        <IssueID>5859</IssueID>
        <Title>build: Fixes unzip option</Title>
        <Description>`u` and `o` are contradictory options. `unzip` utility on FreeBSD considers this mistake as an error:

&gt; unzip: -n, -o and -u are contradictory
##### Rationale:

&gt; -n means "never overwrite"
&gt; -o means "always overwrite"
&gt; -u means "sometimes overwrite"

from: http://svn-src-head.freebsd.narkive.com/TzP7fphF/svn-commit-r200068-head-usr-bin.

/cc: @jaredpar, @agocke
</Description>
        <CreatedDate>10/10/2015</CreatedDate>
        <ClosedDate>21/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5862</PullRequestID>
        <IssueID>5863</IssueID>
        <Title>Improve highlighting for interpolated strings containing hyperlinks</Title>
        <Description>![2015-10-11_01-34-32](https://cloud.githubusercontent.com/assets/7110884/10413813/5a59515a-6fb8-11e5-892a-75a04c18548c.png)
When you have a string with a hyperlink in it, the blue will override all regular highlighting colors as it appears to.
</Description>
        <CreatedDate>10/10/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5862</PullRequestID>
      <File>src/EditorFeatures/CSharpTest/Classification/SyntacticTaggerTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SyntacticClassificationTaggerProvider.TagComputer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SyntacticClassificationTaggerProvider.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5744</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Revert recent directory changes</Title>
    <Description>This is a near-total revert of #5701 &amp; #5731 since they destabilized master

I will attempt to stabilize those changes and re-introduce them if successful</Description>
    <CreatedDate>09/07/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5744</PullRequestID>
        <IssueID>5701</IssueID>
        <Title>Unexpected obsolete diagnostics on the constraint type</Title>
        <Description>Compile the following code:

```
    [System.Obsolete]
    public static class Crash&lt;T&gt; 
        where T: Crash&lt;T&gt;.AbstractClass 
    { 
        public abstract class AbstractClass 
        { 
            public int Id { get; set; } 
        } 
    } 
```

Unexpected:

```
(3,18): warning CS0612: 'Crash&lt;T&gt;' is obsolete
```
</Description>
        <CreatedDate>05/10/2015</CreatedDate>
        <ClosedDate>08/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5744</PullRequestID>
        <IssueID>5731</IssueID>
        <Title>Ported fix for #5530 to VB</Title>
        <Description>
        </Description>
        <CreatedDate>06/10/2015</CreatedDate>
        <ClosedDate>08/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5744</PullRequestID>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/ActiveStatementTests.cs</File>
      <File>src/Features/CSharp/Portable/EditAndContinue/CSharpEditAndContinueAnalyzer.cs</File>
      <File>src/Features/Core/Portable/EditAndContinue/AbstractEditAndContinueAnalyzer.cs</File>
      <File>src/Features/Core/Portable/EditAndContinue/EditSession.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/VsENCRebuildableProjectImpl.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5242</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Cherry-pick post 2.2.0-rc1 fixes for 2.2.0 final #2</Title>
    <Description>Update ZooKeeperNetEx package to 3.4.12.1 (#5236)
Include exception in TryForwardRequest info log (#5238)
Improve logging of stream delivery errors. (#5230)
Support ProxyGatewayEndpoint from legacy configuration (#5214)</Description>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>11/12/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5242</PullRequestID>
        <IssueID>5236</IssueID>
        <Title>Mapping each IL instruction to source</Title>
        <Description>I'm working on SourceMap support for sq/JSIL#76. It is CIL-&gt;JavaScript translator.
We are able read mapping of each statement (line) of source code to IL operator from PDB, but for better user experience it would be good if we have some option to map each IL operator to symbols in source code.
So, in other word I'm looking on something similar to `CodeGenerator.EmitSequencePoint` after each IL instruction - or create something similar not in PDB, but in some additional file.
Is it possible to implement using existing Roslyn extensions point and where should I start for it?
</Description>
        <CreatedDate>15/09/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5242</PullRequestID>
        <IssueID>5238</IssueID>
        <Title>[Bug report] Passing in a combination of flags directly as method parameter causes PEVerify to fail</Title>
        <Description>I am not yet sure what the impact is of this invalid IL and if it might be PEVerify being wrong. By default I run PEVerify for all libraries created (I use Fody for this, but you can also run PEVerify manually). It seems that the libraries had errors while being verified.

To use PEVerify, use the following steps:
1. Go to _C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6 Tools_
2. Shift + right click on the directory =&gt; _Open command window here_
3. Use the following command:

```
PEverify “[path to assembly]”
```
## Problem description

To reproduce, use the following steps:
1. Create a new blank universal windows store app
2. Add this method to _MainPage.xaml.cs_

```
public void InvalidIlMethod()
{
    var field = typeof(MainPage).GetField("_testingField", BindingFlags.Instance | BindingFlags.Public);
}
```
1. When verifying the generated IL by the compiler, this error shows up:

```
[IL]: Error: [C:\Source\Research\UniversalBindingFlags\UniversalBindingFlags\bin\Debug\UniversalBindingFlags.dll: BindingFlagsPoC.MainPage::InvalidIlMethod][offset 0x00000012] Unable to resolve token.
```
## Possible workaround

To fix this, replace the generated method by this one:

```
public void ValidIlMethod()
{
    var bindingFlags = BindingFlags.Instance | BindingFlags.Public;
    var field = typeof(MainPage).GetField("_testingField", bindingFlags);
}
```

Now PEVerify will correctly verify the assembly.
</Description>
        <CreatedDate>15/09/2015</CreatedDate>
        <ClosedDate>08/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5242</PullRequestID>
        <IssueID>5230</IssueID>
        <Title>Fix a little more REPL initialization</Title>
        <Description>
        </Description>
        <CreatedDate>15/09/2015</CreatedDate>
        <ClosedDate>15/09/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5242</PullRequestID>
        <IssueID>5214</IssueID>
        <Title>Update the csi basic command-line REPL</Title>
        <Description>
        </Description>
        <CreatedDate>14/09/2015</CreatedDate>
        <ClosedDate>04/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5242</PullRequestID>
      <File>src/Compilers/CSharp/Portable/CodeGen/Optimizer.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AwaitExpressionSpiller.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/LocalSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceLocalSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedLocal.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/TypeSubstitutedLocalSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EELocalSymbolBase.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5228</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Cherry-pick post 2.2.0-rc1 fixes for 2.2.0 final</Title>
    <Description>Fix AzureSilo startup (#5213)
Remove added type to fix backward compatibility (#5225)</Description>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5228</PullRequestID>
        <IssueID>5213</IssueID>
        <Title>Figure out how to make MSBuild happy with the DNXCore 5.0 target</Title>
        <Description>We're currently using DNXCore 5.0 as the target runtime for our Core CLR projects. MSBuild is unhappy with this since DNXCore,v5.0 doesn't have a set of framework reference assemblies:

```
       "c:\Users\angocke\code\roslyn\Open\Compilers.sln" (default target) (1) -&gt;
       "c:\Users\angocke\code\roslyn\Open\src\Compilers\VisualBasic\VbcCore\VbcCore.csproj" (default target) (35) -&gt;
       (GetReferenceAssemblyPaths target) -&gt;
         C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(1097,5): warning MSB3644: The reference assemblies for frame
       work "DNXCore,Version=v5.0" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your app
       lication to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the
       Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the f
       ramework you intend. [c:\Users\angocke\code\roslyn\Open\src\Compilers\VisualBasic\VbcCore\VbcCore.csproj]


       "c:\Users\angocke\code\roslyn\Open\Compilers.sln" (default target) (1) -&gt;
       "c:\Users\angocke\code\roslyn\Open\src\Compilers\CSharp\CscCore\CscCore.csproj" (default target) (36) -&gt;
         C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(1097,5): warning MSB3644: The reference assemblies for frame
       work "DNXCore,Version=v5.0" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your app
       lication to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the
       Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the f
       ramework you intend. [c:\Users\angocke\code\roslyn\Open\src\Compilers\CSharp\CscCore\CscCore.csproj]
```

We should figure out if this is the right target and we want to fix up MSBuild in some way, or whether there's a more appropriate TFM.
</Description>
        <CreatedDate>14/09/2015</CreatedDate>
        <ClosedDate>22/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5228</PullRequestID>
        <IssueID>5225</IssueID>
        <Title>Script test wait</Title>
        <Description>
        </Description>
        <CreatedDate>14/09/2015</CreatedDate>
        <ClosedDate>15/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5228</PullRequestID>
      <File>src/EditorFeatures/CSharp/Completion/FileSystem/ReferenceDirectiveCompletionProvider.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/Completion/SnippetCompletionProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/Completion/CompletionProviders/AbstractMemberInsertingCompletionProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/Completion/CompletionProviders/AbstractOverrideCompletionProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/Completion/CompletionProviders/AbstractPartialCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/AttributeNamedParameterCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/CrefCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/EnumAndCompletionListTagCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/ExplicitInterfaceCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/ExternAliasCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/KeywordCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/NamedParameterCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/ObjectInitializerCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/SnippetCompletionProvider.cs</File>
      <File>src/Features/CSharp/Portable/Completion/CompletionProviders/SpeculativeTCompletionProvider.cs</File>
      <File>src/Features/Core/Portable/Completion/Providers/AbstractCompletionProvider.UnionCompletionitemComparer.cs</File>
      <File>src/Features/Core/Portable/Completion/Providers/AbstractCompletionProvider.cs</File>
      <File>src/Features/Core/Portable/Completion/Providers/AbstractKeywordCompletionProvider.cs</File>
      <File>src/Features/Core/Portable/Completion/Providers/AbstractObjectInitializerCompletionProvider.cs</File>
      <File>src/Features/Core/Portable/Completion/Providers/UnionCompletionItemComparer.cs</File>
      <File>src/Features/Core/Portable/Shared/Extensions/DocumentExtensions.cs</File>
      <File>src/Interactive/EditorFeatures/CSharp/Completion/CompletionProviders/ReplCommandCompletionProvider.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5225</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Remove RequestInvocationHistorySummary to fix backward compatibility</Title>
    <Description>#5145 was a breaking change (my bad)

Removing the added type `RequestInvocationHistorySummary` and using the previous `RequestInvocationHistory` implementation fix the bc issue while keeping the fix from #5145 </Description>
    <CreatedDate>05/12/2018</CreatedDate>
    <ClosedDate>05/12/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5225</PullRequestID>
        <IssueID>5145</IssueID>
        <Title>Respect noconfig in InteractiveEvaluator</Title>
        <Description>Don't consume the response file when re-initializing after `#reset
noconfig`.  The host already handles this correctly.

Fixes #4397.

Integration test to follow.
</Description>
        <CreatedDate>10/09/2015</CreatedDate>
        <ClosedDate>11/09/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5225</PullRequestID>
        <IssueID>5145</IssueID>
        <Title>Respect noconfig in InteractiveEvaluator</Title>
        <Description>Don't consume the response file when re-initializing after `#reset
noconfig`.  The host already handles this correctly.

Fixes #4397.

Integration test to follow.
</Description>
        <CreatedDate>10/09/2015</CreatedDate>
        <ClosedDate>11/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5225</PullRequestID>
      <File>src/Scripting/CSharpTest/InteractiveSessionTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5086</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Revert "Don't enforce reentrancy for one way requests" #4382</Title>
    <Description>It seems that #4382 introduced some regressions (see #5080, #5059, maybe other weird behavior).

I propose we revert it, to be able to quickly publish a new 2.1 version. We can then work to bring it back in 2.2.0 once the issue is fixed.</Description>
    <CreatedDate>09/10/2018</CreatedDate>
    <ClosedDate>10/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5086</PullRequestID>
        <IssueID>4382</IssueID>
        <Title>Report diagnostics for exceptions within the analyzer driver.</Title>
        <Description>We execute the analyzer driver's initialization and core analysis tasks on a background thread. Any exceptions from the driver itself (not the analyzer callbacks, we already report diagnostics for those) were getting swallowed and analyzer execution also skipped silently. See https://github.com/dotnet/roslyn/issues/2980#issuecomment-104433576 for an example.

We now report an exception diagnostic for analyzer driver crash (with the complete exception trace), so that the user knows what happened and we can diagnose the bug when the issue is reported.

Fixes #3005
</Description>
        <CreatedDate>06/08/2015</CreatedDate>
        <ClosedDate>06/08/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5086</PullRequestID>
        <IssueID>5080</IssueID>
        <Title>Consider if it is appropriate to use Enumerable.Repeat to implement DefaultLowerBounds function in src/Compilers/CSharp/Portable/Emitter/Model/ArrayTypeSymbolAdapter.cs</Title>
        <Description>In code review for PR #5060 @gafter asked if we should use `Enumerable.Repeat` to implement DefaultLowerBounds, which is currently implemented as follows:

```
private static IEnumerable&lt;int&gt; DefaultLowerBounds(int rank)
{
    for (int i = 0; i &lt; rank; ++i)
        yield return 0;
}
```
</Description>
        <CreatedDate>08/09/2015</CreatedDate>
        <ClosedDate>15/01/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5086</PullRequestID>
        <IssueID>5059</IssueID>
        <Title>Enhanced Debugging Support</Title>
        <Description>Oftentimes, I find myself needing to check the values returned in methods with signatures like `GetFoo()`.  Would it be possible to allow us to manually activate such methods (essentially, any non-void method without a parameter) and view the result, similar to the way we can manually run other threads to view updated list results, etc.?
</Description>
        <CreatedDate>07/09/2015</CreatedDate>
        <ClosedDate>08/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5086</PullRequestID>
      <File>src/InteractiveWindow/VisualStudio/InteractiveWindowPackage.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5082</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Allow placement strategies to specify deterministic activation ids</Title>
    <Description>When grains are placed using the (upcoming) Service Fabric Stateful Service strategy, there is no grain directory involvement and hence we need a mechanism to determine which activation id to use when routing messages.

This PR enables that functionality but keeps it *`internal`* so that it will only be exposed to the SF library for now. The reasoning here is that it's unlikely anyone else will need it and if someone stumbles upon this they may opt-in to it for their placement strategy without understanding the consequences.

If `PlacementStrategy.IsDeterministicActivationId` is `true`, then all activations for a particular grain will have an `ActivationId` whose `Key` is equal to the grain's `GrainId.Key`. If `false`, then no behavior changes and `ActivationId` is randomly generated.

Without this PR, initial calls to already-activated grains placed using `StatefulServicePlacement` will round-trip to the target silo using the incorrect generated `ActivationId` and the silo will need to forward those calls to the correct activation. The response message will invalidate the caller's routing cache, but will not specify the activation's new address, so the caller will continue to call using incorrect `ActivationId`s. This is *benign* but unpleasant and inefficient. Users would almost certainly complain about warnings and other garbage in their logs. It is also slower. This PR enables the first and subsequent call to succeed without any round-trips for routing info.

See #5073 under part 4:
&gt; Changes to support activations which have a deterministic `ActivationId` (related to the above) so that a grain which is placed using `StatefulServicePlacement` has a fixed `ActivationId` which can be computed from its `GrainId` (i.e, 1:1 relationship). It's possible that this will be contentious, since previously an `ActivationId` was ephemeral. This change is important, though, because it lets us route calls without needing to learn the `ActivationId` from another source (the grain directory). This is implemented by adding an `IsDeterministicActivationId` property to `PlacementStrategy`, which is then used in `PlacementDirectorsManager.AddActivation`. (PR #5082)</Description>
    <CreatedDate>09/10/2018</CreatedDate>
    <ClosedDate>11/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5082</PullRequestID>
        <IssueID>5073</IssueID>
        <Title>Expose Smart-Up-Down on an option page</Title>
        <Description>As in Python.
</Description>
        <CreatedDate>08/09/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5082</PullRequestID>
        <IssueID>5082</IssueID>
        <Title>Add a new analyzer and code-fix to detect and recommend when people can use the auto-property pattern.</Title>
        <Description>i.e. if you have:

``` c#
class C {
  int i;
  int P { get { return i; } set { i = value; } }
}
```

It will fade out `int i;` and offer to fix the code into:

``` c#
class C {
  int P { get; set; }
}
```

TODO: Still need to find all references to the field being replaced, and update them to access the property instead.
</Description>
        <CreatedDate>08/09/2015</CreatedDate>
        <ClosedDate>10/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5082</PullRequestID>
      <File>src/EditorFeatures/CSharp/CSharpEditorResources.Designer.cs</File>
      <File>src/EditorFeatures/CSharp/UseAutoProperty/UseAutoPropertyAnalyzer.cs</File>
      <File>src/EditorFeatures/CSharp/UseAutoProperty/UseAutoPropertyCodeFixProvider.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/UseAutoProperty/UseAutoPropertyTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/AbstractEditorInlineRenameService.InlineRenameLocationSet.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/AbstractEditorInlineRenameService.SymbolRenameInfo.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/AbstractEditorInlineRenameService.cs</File>
      <File>src/EditorFeatures/Test/CodeFixes/ExtensionOrderingTests.cs</File>
      <File>src/EditorFeatures/TestUtilities/Traits.cs</File>
      <File>src/Features/Core/Portable/EncapsulateField/AbstractEncapsulateFieldService.cs</File>
      <File>src/Features/Core/Portable/FeaturesResources.Designer.cs</File>
      <File>src/Features/Core/Portable/UseAutoProperty/AbstractUseAutoPropertyAnalyzer.cs</File>
      <File>src/Features/Core/Portable/UseAutoProperty/AbstractUseAutoPropertyCodeFixProvider.cs</File>
      <File>src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs</File>
      <File>src/Workspaces/CSharp/Portable/Rename/CSharpRenameRewriterLanguageService.cs</File>
      <File>src/Workspaces/Core/Portable/Editing/SyntaxEditor.cs</File>
      <File>src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/ConflictEngine/ConflictResolver.Session.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/ConflictEngine/ConflictResolver.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameLocation.ReferenceProcessing.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameLocation.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameLocations.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/Renamer.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/SymbolInfoExtensions.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>4784</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Adds additional dependencies for Grain.Impl and Grain.Interface projects</Title>
    <Description>- Fixes #4783
- May be beneficial to make `Microsoft.Orleans.OrleansCodeGenerator.Build` depend on `Microsoft.Orleans.Core.Abstractions` as to not require it as a separate package installation.

- Changes as per #4783 and discussion on gitter starting at https://gitter.im/dotnet/orleans?at=5b51f88bf9ffc4664bef9663</Description>
    <CreatedDate>20/07/2018</CreatedDate>
    <ClosedDate>20/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>4784</PullRequestID>
        <IssueID>4783</IssueID>
        <Title>Add version of Microsoft.CodeAnalysis.Analyzers to targets</Title>
        <Description>This is part of the fix of issue https://github.com/dotnet/roslyn/issues/4774

@jaredpar @tmeschter @srivatsn @agocke 
</Description>
        <CreatedDate>25/08/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>4784</PullRequestID>
        <IssueID>4783</IssueID>
        <Title>Add version of Microsoft.CodeAnalysis.Analyzers to targets</Title>
        <Description>This is part of the fix of issue https://github.com/dotnet/roslyn/issues/4774

@jaredpar @tmeschter @srivatsn @agocke 
</Description>
        <CreatedDate>25/08/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>4784</PullRequestID>
      <File>src/Compilers/CSharp/Test/Syntax/Diagnostics/DiagnosticTest.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticInfo.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>4258</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Conditionally include @(Compile) cache file</Title>
    <Description>Fixes #4189 again

Un-reverts #4256 

The differences between this and #4224 are:
* Only includes the .CoreCompileInputs.cache file if it exists (which was a problem during Pack)
* Fixes the codegen target between ResolveReferences &amp; AssignTargetPaths instead of ResolveReferences &amp; CoreCompile

I'll add a comment when load tests have finished, since they consume the NuGet packages and are what tipped us off last time.</Description>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>21/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>4258</PullRequestID>
        <IssueID>4189</IssueID>
        <Title>Roslyn build/projects should not attempt to install/uninstall extensions by default</Title>
        <Description>The Roslyn build attempts to install/uninstall extensions by default, resulting in the following both in the IDE build and command-line build:

```
Error       There was a problem uninstalling the extension with a VSIX identifier of "0b5e8ddb-f12d-4131-a71d-77acc26a798f". You need to use the Programs and Features pane in the Windows Control Panel to remove Roslyn Language Services.    VisualStudioSetup       
Error       There was a problem uninstalling the extension with a VSIX identifier of "21BAC26D-2935-4D0D-A282-AD647E2592B5". You need to use the Programs and Features pane in the Windows Control Panel to remove Roslyn Expression Evaluators.    ExpressionEvaluatorPackage      
Error       There was a problem uninstalling the extension with a VSIX identifier of "1F42C6D0-F876-4AF0-8185-1BEB0A325BB2". You need to use the Programs and Features pane in the Windows Control Panel to remove VisualStudio Interactive Components. VisualStudioInteractiveWindow   
```

This doesn't work for those are not using the internal tools for updating the product and should be off by default, and turned on for internal use.
</Description>
        <CreatedDate>28/07/2015</CreatedDate>
        <ClosedDate>06/08/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>4258</PullRequestID>
        <IssueID>4256</IssueID>
        <Title>Fixing the versioning and hint paths to be configuration/version independent.</Title>
        <Description>
        </Description>
        <CreatedDate>31/07/2015</CreatedDate>
        <ClosedDate>31/07/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>4258</PullRequestID>
        <IssueID>4224</IssueID>
        <Title>Support Code Definition Window</Title>
        <Description>Based on telemetry numbers showing extremely low usage and the introduction of Peek Definition in VS2013, we never implemented support for the Code Definition Window as part of Roslyn.

We should consider re-adding support to update the window.
</Description>
        <CreatedDate>30/07/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>4258</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Compilation/CSharpSemanticModel.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/SyntaxEquivalence.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/BindingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SyntaxEquivalenceTests.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/HashAlgorithms.cs</File>
      <File>src/Compilers/Core/Portable/PortableShim.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/CSharp/Security/DoNotCatchCorruptedStateExceptionsAnalyzer.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/CSharp/Shared/SyntaxNodeHelper.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Core/DesktopAnalyzersResources.Designer.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Core/Security/CompilationSecurityTypes.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Core/Security/DoNotCatchCorruptedStateExceptionsAnalyzer.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Core/Security/SecurityTypes.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Core/Shared/DiagnosticCategory.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Core/Shared/DiagnosticHelpers.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Core/Shared/SyntaxNodeHelper.cs</File>
      <File>src/Diagnostics/FxCop/Desktop.Analyzers/Test/Security/DoNotCatchCorruptedStateExceptionsTests.cs</File>
      <File>src/EditorFeatures/CSharp/AutomaticCompletion/Sessions/CurlyBraceCompletionSession.cs</File>
      <File>src/EditorFeatures/CSharpTest/AutomaticCompletion/AutomaticBraceCompletionTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/BraceHighlighting/BraceHighlightingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/BraceMatching/BraceHighlightingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Classification/SemanticClassifierTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/CodeActions/InlineTemporary/InlineTemporaryTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Completion/CompletionProviders/SymbolCompletionProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/RudeEditStatementTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Formatting/Indentation/SmartIndenterTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Interactive/BraceMatching/InteractiveBraceHighlightingTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/BraceMatching/BraceHighlightingTagProducer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/BraceMatching/BraceHighlightingViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/ClassificationUtilities.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SemanticClassificationTaggerProvider.TagProducer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SemanticClassificationTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SyntacticClassificationTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractAggregatedDiagnosticsTagSource.DiagnosticsTagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractAggregatedDiagnosticsTagSource.InteractiveMode.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractAggregatedDiagnosticsTagSource.ReadOnlyMode.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractAggregatedDiagnosticsTagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractDiagnosticsTaggerProvider.AggregatingTagger.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractDiagnosticsTaggerProvider.TaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractDiagnosticsTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/DiagnosticsClassificationTaggerProvider.TagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/DiagnosticsClassificationTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/DiagnosticsSquiggleTaggerProvider.TagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/DiagnosticsSquiggleTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/KeywordHighlighting/HighlighterTagProducer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/KeywordHighlighting/HighlighterViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/KeywordHighlighting/HighlightingTagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/KeywordHighlighting/KeywordHighlightTag.cs</File>
      <File>src/EditorFeatures/Core/Implementation/LineSeparators/LineSeparatorTaggerProvider.TagProducer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/LineSeparators/LineSeparatorTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Outlining/OutliningTaggerProvider.Tag.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Outlining/OutliningTaggerProvider.TagProducer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Outlining/OutliningTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ReferenceHighlighting/DefinitionHighlightTag.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ReferenceHighlighting/NagivateToHighlightReferenceCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ReferenceHighlighting/ReferenceHighlightTag.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ReferenceHighlighting/ReferenceHighlightingTagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ReferenceHighlighting/ReferenceHighlightingViewTaggerProvider.TagProducer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ReferenceHighlighting/ReferenceHighlightingViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/ReferenceHighlighting/WrittenReferenceHighlightTag.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/AsynchronousTagger.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/AbstractTaggerEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/PredefinedChangedEventKinds.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerConstants.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.CaretPositionChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.CompletionClosedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.CompositionEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.DiagnosticsChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.DocumentActiveContextChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.OptionChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.ParseOptionChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.ReadOnlyRegionsChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.SelectionChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.SemanticChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.TextChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.WorkspaceRegistrationChangedEventSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/EventSources/TaggerEventSources.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagProducers/AbstractSingleDocumentTagProducer.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagProviders/AbstractAsynchronousBufferTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagProviders/AbstractAsynchronousTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagProviders/AbstractAsynchronousViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/BufferTagSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/ProducerPopulatedTagSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/SemanticBufferTagSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/TagSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/TagSource_ReferenceCounting.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/TagsChangedForBufferEventArgs.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/ViewTagSource.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/Tags/NavigableHighlightTag.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/Utilities/BatchChangeNotifier.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/Utilities/ITagSpanIntervalTree.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/Utilities/TagSpanComparer.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/Utilities/TagSpanIntervalTree.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.BatchChangeNotifier.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.TagSource.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.TagSource_ProduceTags.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.TagSource_ReferenceCounting.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.TagSpanComparer.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.Tagger.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AsynchronousTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AsynchronousViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Tagging/IAsynchronousTaggerDataSource.cs</File>
      <File>src/EditorFeatures/Core/Tagging/ITagProducer.cs</File>
      <File>src/EditorFeatures/Core/Tagging/ITaggerEventSource.cs</File>
      <File>src/EditorFeatures/Core/Tagging/TaggerCaretChangeBehavior.cs</File>
      <File>src/EditorFeatures/Core/Tagging/TaggerContext.cs</File>
      <File>src/EditorFeatures/Core/Tagging/TaggerDelay.cs</File>
      <File>src/EditorFeatures/Core/Tagging/TaggerEventArgs.cs</File>
      <File>src/EditorFeatures/Core/Tagging/TaggerTextChangeBehavior.cs</File>
      <File>src/EditorFeatures/Test/BraceHighlighting/AbstractBraceHighlightingTests.cs</File>
      <File>src/EditorFeatures/Test/Diagnostics/DiagnosticTagSourceTests.cs</File>
      <File>src/EditorFeatures/Test/Outlining/OutliningTaggerTests.cs</File>
      <File>src/EditorFeatures/Test/Preview/PreviewWorkspaceTests.cs</File>
      <File>src/EditorFeatures/Test/Squiggles/AbstractSquiggleProducerTests.cs</File>
      <File>src/EditorFeatures/Test/Tagging/AsynchronousTaggerTests.cs</File>
      <File>src/Features/Core/Diagnostics/DiagnosticService.cs</File>
      <File>src/Features/Core/Shared/TestHooks/AsynchronousOperationListener.cs</File>
      <File>src/Features/Core/Shared/Utilities/LinkedFilesSymbolEquivalenceComparer.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Implementation/Interactive/Commands/LoadCommand.cs</File>
      <File>src/InteractiveWindow/Editor/Commands/InteractiveWindowCommand.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindow_UIThread.cs</File>
      <File>src/InteractiveWindow/EditorTest/InteractiveWindowTests.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/AbstractEditorFactory.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/LanguageService/AbstractLanguageService`3.cs</File>
      <File>src/VisualStudio/InteractiveServices/Interactive/VsInteractiveWindowProvider.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/Engine/Trivia/TriviaDataFactory.ComplexTrivia.cs</File>
      <File>src/Workspaces/CSharpTest/Formatting/FormattingTriviaTests.cs</File>
      <File>src/Workspaces/Core/Portable/Formatting/Rules/BaseIndentationFormattingRule.cs</File>
      <File>src/Workspaces/Core/Portable/LanguageServices/SyntaxFactsService/ISyntaxFactsService.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>4257</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Client typemap refresh</Title>
    <Description>Fix for #4096 and #4028 

Right now, clients get the grain type map only once when they first connect to the cluster. If there is any change in this map during the lifetime of the client, it will not be propagated.

With this fix, client will get an updated typemap every `TypeManagementOptions.TypeMapRefreshInterval` (by default 1 minute). It should help developer who are using in-place updgrade that cannot ensure that new clients do not start before new silos.
</Description>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>21/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>4257</PullRequestID>
        <IssueID>4096</IssueID>
        <Title>This extension is already installed to all applicable products</Title>
        <Description>When I try to install `Roslyn SDK.vsix` I get the error 

&gt; This extension is already installed to all applicable products

Yet it doesn't show up in Visual Studio 2015.

I previously installed the extension on a Visual Studio 2015 beta, perhaps that's why the extension thinks  it's already installed. 
</Description>
        <CreatedDate>24/07/2015</CreatedDate>
        <ClosedDate>22/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>4257</PullRequestID>
        <IssueID>4028</IssueID>
        <Title>Binder.GetEventSymbol doesn't handle MemberBindingExpression</Title>
        <Description>Bind `receiver?.event`.

```
&gt;   Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.GetEventSymbol(Microsoft.CodeAnalysis.CSharp.BoundExpression expr, out Microsoft.CodeAnalysis.CSharp.BoundExpression receiver, out Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode eventSyntax) Line 1563 C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.CheckEventValueKind(Microsoft.CodeAnalysis.CSharp.BoundEventAccess boundEvent, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind valueKind, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 1703 C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.CheckValueKind(Microsoft.CodeAnalysis.CSharp.BoundExpression expr, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind valueKind, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 1667 C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.CheckValue(Microsoft.CodeAnalysis.CSharp.BoundExpression expr, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind valueKind, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 1641 C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 6300 C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed) Line 454    C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed) Line 353    C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax syntax, bool allowsAnyExpression, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 418  C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 411  C#
    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 46   C#
```
</Description>
        <CreatedDate>21/07/2015</CreatedDate>
        <ClosedDate>04/08/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>4257</PullRequestID>
      <File>src/Workspaces/Core/Portable/LanguageServices/SyntaxFactsService/ISyntaxFactsService.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>3781</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Revert Executor abstraction and related PRs</Title>
    <Description>* Revert "Move queuing logic from AsynchQueueAgent into Executor (#3683)"
  * This reverts commit 545296609a855e003b4fb353a969ecd8db230e53.
* Revert "Fix null reference exceptions on non started AsynchQueueAgent usage attempt (#3732)"
  * This reverts commit 54c4d02352a13c6b024f5d0fcf2a36d5213ce4ea.
* Revert "Add throw on disposed AsynchAgent usage attempt (#3745)"
  * This reverts commit bc84740dda1d5f6f12314df26f4fef7f7e3d36bd.</Description>
    <CreatedDate>12/12/2017</CreatedDate>
    <ClosedDate>12/12/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>3781</PullRequestID>
        <IssueID>3683</IssueID>
        <Title>.csx and .vbx files use default icons in Windows and Solution Explorer</Title>
        <Description>We should figure out how to register an icon with the Windows shell for .csx and .vbx in VS setup...

![icon](https://cloud.githubusercontent.com/assets/6464209/8342656/a28d84cc-1a82-11e5-988c-72f1af426df3.png)
</Description>
        <CreatedDate>24/06/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3781</PullRequestID>
        <IssueID>3732</IssueID>
        <Title>Value of variable declared in EE displays 'System.InvalidCastException' after EnC...</Title>
        <Description>1.  Create a new C# Windows Forms Application
2.  Add a Form1_Load event handler, and set a breakpoint on the open brace
3.  When the breakpoint is hit, insert a line:  `int x = 42;`
4.  Step (F10)
5.  Refresh value of Locals

**RESULTS:**
![capture](https://cloud.githubusercontent.com/assets/6464209/8414099/787e4dda-1e4a-11e5-84bf-a21738c867f3.PNG)
</Description>
        <CreatedDate>29/06/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3781</PullRequestID>
        <IssueID>3745</IssueID>
        <Title>Sync with master</Title>
        <Description>Remove unnecessary differences between portable-pdb and master branches.
</Description>
        <CreatedDate>30/06/2015</CreatedDate>
        <ClosedDate>01/07/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>3781</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncExceptionHandlerRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/IteratorRewriter/IteratorMethodToStateMachineRewriter.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/MetadataReferences/AssemblyIdentityExtensions.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/MetadataReferences/FusionAssemblyIdentityTests.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/ILBuilder.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/EmitResult.cs</File>
      <File>src/Compilers/Core/Portable/CorLightup.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilerDiagnosticAnalyzer.CompilationAnalyzer.cs</File>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinue/EmitDifferenceResult.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/AssemblyLocationLightUp.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReference/MetadataReference.cs</File>
      <File>src/Compilers/Core/Portable/NativePdbWriter/PdbWriter.cs</File>
      <File>src/Compilers/Helpers/GlobalAssemblyCacheHelpers/FusionAssemblyIdentity.cs</File>
      <File>src/Compilers/Helpers/GlobalAssemblyCacheHelpers/GlobalAssemblyCache.cs</File>
      <File>src/EditorFeatures/Test/Workspaces/NoCompilationDocumentDiagnosticAnalyzer.cs</File>
      <File>src/EditorFeatures/Test/Workspaces/NoCompilationLanguageServiceFactory.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/DkmUtilities.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.StateManager.HostStates.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer_GetLatestDiagnosticsForSpan.cs</File>
      <File>src/Features/Core/EditAndContinue/EditSession.cs</File>
      <File>src/Features/Core/SolutionCrawler/InternalSolutionCrawlerOptions.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.RemoteService.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.Service.cs</File>
      <File>src/Interactive/Features/Interactive/Core/SerializableAssemblyLoadResult.cs</File>
      <File>src/Interactive/HostTest/InteractiveHostTests.cs</File>
      <File>src/Interactive/csi/Csi.cs</File>
      <File>src/Interactive/csi/NotImplementedAnalyzerLoader.cs</File>
      <File>src/Scripting/CSharp/CSharpObjectFormatter.cs</File>
      <File>src/Scripting/CSharp/CSharpScriptingResources.Designer.cs</File>
      <File>src/Scripting/CSharpTest/CSharpScriptEngine.cs</File>
      <File>src/Scripting/CSharpTest/InteractiveSessionTests.cs</File>
      <File>src/Scripting/CSharpTest/ObjectFormatterTests.cs</File>
      <File>src/Scripting/CSharpTest/ScriptTests.cs</File>
      <File>src/Scripting/Core/AssemblyLoadResult.cs</File>
      <File>src/Scripting/Core/AssemblyLoader.cs</File>
      <File>src/Scripting/Core/Emit/CommonCompilationExtensions.cs</File>
      <File>src/Scripting/Core/InteractiveAssemblyLoader.cs</File>
      <File>src/Scripting/Core/MetadataShadowCopyProvider.cs</File>
      <File>src/Scripting/Core/ObjectFormatter.Formatter.cs</File>
      <File>src/Scripting/Core/ObjectFormatter.cs</File>
      <File>src/Scripting/Core/Script.cs</File>
      <File>src/Scripting/Core/ScriptBuilder.cs</File>
      <File>src/Scripting/Core/ScriptCompilerUtil.cs</File>
      <File>src/Scripting/Core/ScriptOptions.cs</File>
      <File>src/Scripting/Core/ScriptState.cs</File>
      <File>src/Scripting/Core/ScriptVariable.cs</File>
      <File>src/Scripting/Core/ScriptVariables.cs</File>
      <File>src/Scripting/Core/ScriptingResources.Designer.cs</File>
      <File>src/Scripting/Test/AssemblyLoader.cs</File>
      <File>src/Scripting/Test/MetadataShadowCopyProviderTests.cs</File>
      <File>src/Scripting/Test/ObjectFormatterTestBase.cs</File>
      <File>src/Scripting/Test/ObjectFormatterTests.Fixtures.cs</File>
      <File>src/Scripting/Test/ScriptEngine.cs</File>
      <File>src/Workspaces/Core/Desktop/Workspace/MSBuild/ProjectFile/ProjectFile.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>3721</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Add MaxSocketAge to OrleansConfiguration.xsd</Title>
    <Description>- [It's possible to specify `MaxSocketAge`](https://github.com/dotnet/orleans/blob/2c8e524a23d0f97fdb4476cab4716f70bac04270/src/Orleans.Core/Configuration/MessagingConfiguration.cs#L222-L226) in the `Messaging` element of `OrleansConfiguration.xml`. However this was missing from the xsd file. This PR just adds that element and [it's documentation](https://github.com/dotnet/orleans/blob/2c8e524a23d0f97fdb4476cab4716f70bac04270/src/Orleans.Core/Configuration/MessagingConfiguration.cs#L33-L36) to the xsd file.

- Using something like `&lt;Messaging MaxSocketAge="230s"/&gt;` in `OrleansConfiguration.xml`/`Globals` (silo) and in `ClientConfiguration.xml`/`ClientConfiguration` (client) might be a way to workaround a problem of a router or firewall dropping an Orleans TCP connection without notification (no RST is sent and the connection just hangs around, Azure routers/firewalls are reported to behave in this way). There was a related issue #1545 which was never resolved. Perhaps enabling TCP keepalive for the sockets would be a better way to resolve #1545 than using the `MaxSocketAge` workaround?</Description>
    <CreatedDate>28/11/2017</CreatedDate>
    <ClosedDate>28/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>3721</PullRequestID>
        <IssueID>1545</IssueID>
        <Title>DataFlowAnalysis.Captured should be separated into CapturedInside and CapturedOutside</Title>
        <Description>The type `DataFlowAnalysis`, which results from `SemanticModel.AnalyzeDataFlow`, currently ignores the region and computes the capture set for the entire enclosing method. It should be region-sensitive like the other methods in `DataFlowAnalysis`, and be separated into `CapturedInside` and `CapturedOutside`.

/cc @heejaechang @AnthonyDGreen @tmat @VSadov @AlekseyTs 

&lt;!---
@huboard:{"order":79.6875,"milestone_order":1545.0,"custom_state":""}
--&gt;
</Description>
        <CreatedDate>24/03/2015</CreatedDate>
        <ClosedDate>30/12/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3721</PullRequestID>
        <IssueID>1545</IssueID>
        <Title>DataFlowAnalysis.Captured should be separated into CapturedInside and CapturedOutside</Title>
        <Description>The type `DataFlowAnalysis`, which results from `SemanticModel.AnalyzeDataFlow`, currently ignores the region and computes the capture set for the entire enclosing method. It should be region-sensitive like the other methods in `DataFlowAnalysis`, and be separated into `CapturedInside` and `CapturedOutside`.

/cc @heejaechang @AnthonyDGreen @tmat @VSadov @AlekseyTs 

&lt;!---
@huboard:{"order":79.6875,"milestone_order":1545.0,"custom_state":""}
--&gt;
</Description>
        <CreatedDate>24/03/2015</CreatedDate>
        <ClosedDate>30/12/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>3721</PullRequestID>
      <File>src/Compilers/Core/CodeAnalysisTest/MetadataReferences/AssemblyIdentityExtensions.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/MetadataReferences/FusionAssemblyIdentityTests.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/EmitResult.cs</File>
      <File>src/Compilers/Core/Portable/CorLightup.cs</File>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinue/EmitDifferenceResult.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/AssemblyLocationLightUp.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReference/MetadataReference.cs</File>
      <File>src/Compilers/Helpers/GlobalAssemblyCacheHelpers/FusionAssemblyIdentity.cs</File>
      <File>src/Compilers/Helpers/GlobalAssemblyCacheHelpers/GlobalAssemblyCache.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.RemoteService.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.Service.cs</File>
      <File>src/Interactive/Features/Interactive/Core/SerializableAssemblyLoadResult.cs</File>
      <File>src/Interactive/HostTest/InteractiveHostTests.cs</File>
      <File>src/Interactive/csi/Csi.cs</File>
      <File>src/Interactive/csi/NotImplementedAnalyzerLoader.cs</File>
      <File>src/Scripting/CSharp/CSharpObjectFormatter.cs</File>
      <File>src/Scripting/CSharp/CSharpScriptingResources.Designer.cs</File>
      <File>src/Scripting/CSharpTest/CSharpScriptEngine.cs</File>
      <File>src/Scripting/CSharpTest/InteractiveSessionTests.cs</File>
      <File>src/Scripting/CSharpTest/ObjectFormatterTests.cs</File>
      <File>src/Scripting/CSharpTest/ScriptTests.cs</File>
      <File>src/Scripting/Core/AssemblyLoadResult.cs</File>
      <File>src/Scripting/Core/AssemblyLoader.cs</File>
      <File>src/Scripting/Core/Emit/CommonCompilationExtensions.cs</File>
      <File>src/Scripting/Core/InteractiveAssemblyLoader.cs</File>
      <File>src/Scripting/Core/MetadataShadowCopyProvider.cs</File>
      <File>src/Scripting/Core/ObjectFormatter.Formatter.cs</File>
      <File>src/Scripting/Core/ObjectFormatter.cs</File>
      <File>src/Scripting/Core/Script.cs</File>
      <File>src/Scripting/Core/ScriptBuilder.cs</File>
      <File>src/Scripting/Core/ScriptCompilerUtil.cs</File>
      <File>src/Scripting/Core/ScriptOptions.cs</File>
      <File>src/Scripting/Core/ScriptState.cs</File>
      <File>src/Scripting/Core/ScriptVariable.cs</File>
      <File>src/Scripting/Core/ScriptVariables.cs</File>
      <File>src/Scripting/Core/ScriptingResources.Designer.cs</File>
      <File>src/Scripting/Test/AssemblyLoader.cs</File>
      <File>src/Scripting/Test/MetadataShadowCopyProviderTests.cs</File>
      <File>src/Scripting/Test/ObjectFormatterTestBase.cs</File>
      <File>src/Scripting/Test/ObjectFormatterTests.Fixtures.cs</File>
      <File>src/Scripting/Test/ScriptEngine.cs</File>
      <File>src/Workspaces/Core/Desktop/Workspace/MSBuild/ProjectFile/ProjectFile.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>3348</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Add code generation to OrleansServiceBus</Title>
    <Description>Port of #3344 from 1.5.1 to master
Fixes #3347
</Description>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>28/08/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>3348</PullRequestID>
        <IssueID>3344</IssueID>
        <Title>Make MetadataReference.CreateFromAssembly obsolete</Title>
        <Description>
        </Description>
        <CreatedDate>05/06/2015</CreatedDate>
        <ClosedDate>05/06/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3348</PullRequestID>
        <IssueID>3347</IssueID>
        <Title>Roslyn changed how Analyzer assemblies are loaded.  TypeScript analyzers no longer loading.</Title>
        <Description>PR https://github.com/dotnet/roslyn/pull/2882 switched the code for loading Analyzer assemblies from:

``` c#
                    var type = analyzerAssembly.GetType(typeName);
                    if (DerivesFromDiagnosticAnalyzer(type))
                    {
                        analyzer = (DiagnosticAnalyzer)Activator.CreateInstance(type);
                    }
```

To:

``` c#
                    type = Type.GetType(typeName + ", " + analyzerAssembly.FullName, throwOnError: true);
```

However, this now fails to load the TypeScript as we are not in any binding path.  This is high pri as all TypeScript diagnostic scenarios (squiggles/error-list) are broken.
</Description>
        <CreatedDate>05/06/2015</CreatedDate>
        <ClosedDate>08/06/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>3348</PullRequestID>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/EvaluationContext.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/MissingAssemblyTests.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/EvaluationContextBase.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/ExpressionCompiler.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ExpressionCompiler/ExpressionCompilerTestHelpers.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>3130</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Replace DuplicateActivationException with a strongly-typed return value</Title>
    <Description>This PR resolves #2733.

The fix focuses on the logic in `Catalog.InitActivation(...)` and how it interacts with `Catalog.RegisterActivationInGrainDirectoryAndValidate(...)`. Specifically, it removes the `DuplicateActivationException` thrown by the latter and caught by the former. Doing that required slightly reworking the control flow in `InitActivation` so that exceptions aren't the only means of error handling.

* Move recovery logic in `InitActivation` from `catch` to a new method which is called from the `finally` block.
* Return a new `ActivationRegistrationResult` struct from `RegisterActivationInGrainDirectoryAndValidate` which replaces `DuplicateActivationException`.
* When an activation fails to register, return early from `InitActivation` so that the `finally` block can clean up the activation.

One change worth noting: `InitActivation` will no longer throw when there is a duplicate activation. The activation returned by `GetOrCreateActivation` (which calls into `InitActivation`) will eventually have its `ForwardingAddress` fixed to point to the existing activation. Note that the result of `InitActivation` is only used in one specific case: when creating the `IMembershipTableGrain`. I opened #3129 to discuss converting that into a SystemTarget instead of routing it through the directory.</Description>
    <CreatedDate>15/06/2017</CreatedDate>
    <ClosedDate>19/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>3130</PullRequestID>
        <IssueID>2733</IssueID>
        <Title>Generalize assert to include source statements that result in bound try</Title>
        <Description>Fixes #2567 
@AlekseyTs @VSadov @agocke @jaredpar Please review
</Description>
        <CreatedDate>13/05/2015</CreatedDate>
        <ClosedDate>14/05/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3130</PullRequestID>
        <IssueID>3129</IssueID>
        <Title>don't try to create an outlining span if valid start/end tokens can't be found</Title>
        <Description>The issue arises when a metadata reference contains type/method/property/etc. names that aren't valid C#/VB identifiers, then the outliner is unable to properly parse the document and can't get appropriate start/end tokens.  The same code path will be hit for all **[C#] x [method, property, field, etc.]** or **[VB] x [method, property, field, etc.]** metadata as source outliners, so only one test was created for each language.

Fixes internal bug 1174405.

Tagging @Pilchie @dpoeschl @jasonmalinowski @DustinCampbell @rchande @balajikris @jmarolf @davkean as reviewers.
</Description>
        <CreatedDate>27/05/2015</CreatedDate>
        <ClosedDate>28/05/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>3130</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Emitter/EditAndContinue/PEDeltaAssemblyBuilder.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueClosureTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueTests.cs</File>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinue/EmitBaseline.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>3127</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Upgrade WindowsAzure.ServiceBus to 4.1.0</Title>
    <Description>Fixes #2910
Fixes #3062</Description>
    <CreatedDate>14/06/2017</CreatedDate>
    <ClosedDate>15/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>3127</PullRequestID>
        <IssueID>2910</IssueID>
        <Title>Remove empty string array allocations in DeclarationTreeBuilder</Title>
        <Description>I spotted some empty string arrays in a CodeLens memory dump that can be eliminated.
</Description>
        <CreatedDate>19/05/2015</CreatedDate>
        <ClosedDate>29/05/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3127</PullRequestID>
        <IssueID>3062</IssueID>
        <Title>The debugger display for sizeof is inconsistent</Title>
        <Description>Consider this code:

``` csharp
using Assembly2;

public class Class1
{
    static unsafe void Main()
    {
        System.Console.WriteLine(sizeof(Foo));
    }
}
```

``` csharp
namespace Assembly2
{

    public struct Foo
    {

    }
}
```

Both files have to be in different assemblies. The WriteLine will print 1, but the debugger display and the intermediate window will show 0 for the sizeof expression.
</Description>
        <CreatedDate>24/05/2015</CreatedDate>
        <ClosedDate>02/06/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>3127</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Statements.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenConstructorInitTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Features/CSharp/Diagnostics/Analyzers/CSharpUnboundIdentifiersDiagnosticAnalyzer.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/PreviewPane/PreviewPane.xaml.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/PreviewPane/PreviewPaneService.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/UriNavigator.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Utilities/BrowserHelper.cs</File>
      <File>src/VisualStudio/Core/SolutionExplorerShim/AnalyzersCommandHandler.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs</File>
      <File>src/Workspaces/CoreTest/WorkspaceTests/AdhocWorkspaceTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>3126</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Replace CacheSizeInMb setting with DataMaxAgeInCache and DataMinTimeInCache in stream providers</Title>
    <Description>PR for issue #3120.
- Remove CacheSzieInMb setting and its related infrastructure, including cache eviction logic around it and FixedSizeObjectPool, to simplify the system and avoid problems mentioned in #3104
- Add DataMaxAgeInCache and DataMinTimeInCache setting to `EHStreamProvider`, `MemoryStreamProvider` and `GeneratorStreamProvider`
- Add statistic monitoring to  MemoryStreamProvider and GeneratorStreamProvider </Description>
    <CreatedDate>14/06/2017</CreatedDate>
    <ClosedDate>19/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>3126</PullRequestID>
        <IssueID>3120</IssueID>
        <Title>Handle "Color color" from VB completion</Title>
        <Description>Fixes #3086.

Please review: @balajikris @brettfo @dpoeschl @jasonmalinowski @Pilchie 
</Description>
        <CreatedDate>27/05/2015</CreatedDate>
        <ClosedDate>02/06/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3126</PullRequestID>
        <IssueID>3104</IssueID>
        <Title>changed error list to use SystemBrowser API from VS.</Title>
        <Description>Customer scenario: When an user click on a link in the error list\lightbulb\solution explorer, today we open the link in the VS browser. We had done this to be consistent with F1 in the error list which opens in the VS browser. Given that we navigate to bing and potentially from there to other sites, it would be best to open the links in the system browser. The platform team recently made it so that we could launch in Edge on windows 10. Without this change, we'll be stuck in IE7 quirks mode forever and we've seen reports of people complaining about websites which don't open well in the VS browser.

Fix is to make a different VS call (most of the change is removing the unnecessary IServiceProvider parameter now)

...

manual test is done to verify it opens up system browser. and debugged to make sure we are calling right Platform APIs.

this fix basically get rid of our own implementation and call VS API directly.
</Description>
        <CreatedDate>26/05/2015</CreatedDate>
        <ClosedDate>27/05/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>3126</PullRequestID>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/Dashboard/DashboardViewModel.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/InlineRenameSession.OpenTextBufferManager.cs</File>
      <File>src/Workspaces/CSharp/Portable/Rename/CSharpRenameRewriterLanguageService.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2592</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Non-static SerializationManager</Title>
    <Description>Disclaimer: this is a work in progress. It needs work, more functional testing, and to be split into smaller, more mergable PRs. `SerialziationManager` is a core part of our system and `GrainReference` is serializable, so this PR is necessarily going to be large

Implements changes from #2591 &amp; [#467](https://github.com/dotnet/orleans/issues/467#issuecomment-255074892) (with changes).

When using an external serializer (eg, JSON.NET, ProtoBuf), `GrainReference` instances must be bound via a call to `IGrainFactory.Bind(IAddressable)` before they can be used. When using the Orleans serialization framework, this happens automatically.

Once this is ready, we will be close to completing #467. Only some minor additional work is required to complete the task, basically changing the GrainClient class itself.

Note: this is a breaking change.

EDIT: to be clear, I don't expect this code to be reviewed in detail while I've got the work-in-progress tag on it. When it's ready, I'll remove the tag and update this PR.</Description>
    <CreatedDate>13/01/2017</CreatedDate>
    <ClosedDate>24/02/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2592</PullRequestID>
        <IssueID>2591</IssueID>
        <Title>Make defaultValue a required parameter for ExtensionManager.PerformFunction*()</Title>
        <Description>Fixes internal TFS bug 1166482.

In cases where a fix provider throws an unhandled exception, `ExtensionManager.PerformFunction*()` was correctly handling the exception by displaying an 'info bar' alerting the user about the crash. However, because the `defaultValue` parameter for `ExtensionManager.PerformFunction*()` was optional, in some cases, we would end up returning `default(ImmutableArray&lt;T&gt;)` as opposed to `ImmutableArray&lt;T&gt;.Empty` to the VS platform's light bulb  engine. The difference is significant in this case since `ImmutableArray&lt;T&gt;` is a struct and since it is returned as an `IEnumerable&lt;T&gt;`. The platform code checks whether the returned `IEnumerable&lt;T&gt;` is `null` (which it won't be) and then calls `.Any()` on it and this results in an `InvalidOperationException` from `ImmutableArray&lt;T&gt;`...

In addition to supplying the correct `defaultValue` of `ImmutableArray&lt;T&gt;.Empty` to avoid the above crash, I am also making `defaultValue` a **required** parameter (so that future consumers of `ExtensionManager.PerformFunction*()` don't run into this problem).
</Description>
        <CreatedDate>08/05/2015</CreatedDate>
        <ClosedDate>08/05/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2592</PullRequestID>
        <IssueID>467</IssueID>
        <Title>Emit XML output in Jenkins</Title>
        <Description>This change causes us to emit XML for xunit test results when run inside
of Jenkins.  Having XML output enables Jenkins to provide a structured
display of the test results instead of the raw console output that we
see today.
</Description>
        <CreatedDate>13/02/2015</CreatedDate>
        <ClosedDate>13/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2592</PullRequestID>
        <IssueID>467</IssueID>
        <Title>Emit XML output in Jenkins</Title>
        <Description>This change causes us to emit XML for xunit test results when run inside
of Jenkins.  Having XML output enables Jenkins to provide a structured
display of the test results instead of the raw console output that we
see today.
</Description>
        <CreatedDate>13/02/2015</CreatedDate>
        <ClosedDate>13/02/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2592</PullRequestID>
      <File>src/VisualStudio/Core/Def/RoslynDocumentProvider.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2558</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Initial work to make SerializationManager non-static (#2547)</Title>
    <Description>This is an implementation of #2547, &amp; is related to #467.

This change moves `SerializationContext.Current` &amp; `DeserializationContext.Current` to `SerializationManager`, keeps them static, but makes them private. It continues to use static `SerializationManager` methods in the generated code, but it passes in all of the context information required - so we can begin to remove global state from those methods down the track.</Description>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2558</PullRequestID>
        <IssueID>2547</IssueID>
        <Title>Results View does not work in Windows 10 Universal Apps</Title>
        <Description>![capture](https://cloud.githubusercontent.com/assets/6464209/7487528/2d82cd76-f36e-11e4-9eda-182abe8dae47.PNG)
</Description>
        <CreatedDate>06/05/2015</CreatedDate>
        <ClosedDate>23/06/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2558</PullRequestID>
        <IssueID>467</IssueID>
        <Title>Emit XML output in Jenkins</Title>
        <Description>This change causes us to emit XML for xunit test results when run inside
of Jenkins.  Having XML output enables Jenkins to provide a structured
display of the test results instead of the raw console output that we
see today.
</Description>
        <CreatedDate>13/02/2015</CreatedDate>
        <ClosedDate>13/02/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2558</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Parser/SyntaxParser.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2537</IssueID>
    <RepoID>orleans</RepoID>
    <Title>MembershipTableFactory should call InitializeMembershipTable on tables</Title>
    <Description>This fixes an issue introduced in #2515 whereby `IMembershipTable` instances were not being correctly initialized.

For `MembershipTableGrain`, `WaitForTableGrainToInit` is called before `InitializeMembershipTable` when running on the primary. For other providers, only `InitializeMembershipTable` is called. Since #2515, it wasn't being called.</Description>
    <CreatedDate>21/12/2016</CreatedDate>
    <ClosedDate>21/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2537</PullRequestID>
        <IssueID>2515</IssueID>
        <Title>track non roslyn text buffer changes as well as roslyn text buffer chang...</Title>
        <Description>...es to delay solution crawler

There are 2 things incremental processor takes care of

@1 is making sure we delay processing any work until there is enough idle (ex, typing) in host.
@2 is managing cancellation and pending works.

we used to do #1 and #2 only for Roslyn files. and that is usually fine since most of time solution contains only roslyn files.

but for mixed solution (ex, Roslyn files + HTML + JS + CSS), #2 still makes sense but #1 doesn't. We want to pause any work while something is going on in other project types as well.

we need to make sure we play nice with neighbors as well.

now, we don't care where changes are coming from. if there is any change in host, we puase oursevles for a while.
</Description>
        <CreatedDate>05/05/2015</CreatedDate>
        <ClosedDate>07/05/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2537</PullRequestID>
        <IssueID>2515</IssueID>
        <Title>track non roslyn text buffer changes as well as roslyn text buffer chang...</Title>
        <Description>...es to delay solution crawler

There are 2 things incremental processor takes care of

@1 is making sure we delay processing any work until there is enough idle (ex, typing) in host.
@2 is managing cancellation and pending works.

we used to do #1 and #2 only for Roslyn files. and that is usually fine since most of time solution contains only roslyn files.

but for mixed solution (ex, Roslyn files + HTML + JS + CSS), #2 still makes sense but #1 doesn't. We want to pause any work while something is going on in other project types as well.

we need to make sure we play nice with neighbors as well.

now, we don't care where changes are coming from. if there is any change in host, we puase oursevles for a while.
</Description>
        <CreatedDate>05/05/2015</CreatedDate>
        <ClosedDate>07/05/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2537</PullRequestID>
      <File>src/EditorFeatures/CSharpTest/Completion/CompletionProviders/ObjectCreationCompletionProviderTests.cs</File>
      <File>src/Features/Core/Completion/Providers/AbstractObjectCreationCompletionProvider.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/ObjectExtensions.TypeSwitch.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2534</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Removed unused ClientType from GrainServiceConfiguration</Title>
    <Description>A follow-up to #2459 and #2531. Removed unused ClientType property from GrainServiceConfiguration.

@jamescarter-le, any objections?</Description>
    <CreatedDate>20/12/2016</CreatedDate>
    <ClosedDate>21/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2534</PullRequestID>
        <IssueID>2459</IssueID>
        <Title>Make option string values match their names</Title>
        <Description>These two strings seem to have had their values reversed.

Fixes internal TFS bug 1108650.
</Description>
        <CreatedDate>02/05/2015</CreatedDate>
        <ClosedDate>04/05/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2534</PullRequestID>
        <IssueID>2531</IssueID>
        <Title>Pattern matcher alloc</Title>
        <Description>In one performance trace I noticed allocations coming from the string.Split call from the PatternMatcher constructor. I special-cased the code path when the pattern doesn't contain a dot.
</Description>
        <CreatedDate>05/05/2015</CreatedDate>
        <ClosedDate>06/05/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2534</PullRequestID>
      <File>src/Compilers/Core/CodeAnalysisTest/AnalyzerFileReferenceTests.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerFileReference.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2529</IssueID>
    <RepoID>orleans</RepoID>
    <Title>ZooKeeperUtils .Net Core support</Title>
    <Description>Just a no brain support for .Net Core on ZooKeeperUtils.

There is no code changes.

@shayhatsor do you mind have a review? I ran all tests on a container and they work just fine but since it is your kid, I wonder if you can review it :)

This is part of #2143 and #2145</Description>
    <CreatedDate>17/12/2016</CreatedDate>
    <ClosedDate>18/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2529</PullRequestID>
        <IssueID>2143</IssueID>
        <Title>Proposal: Allow unsafe code in iterators</Title>
        <Description>Today we disallow any usage of pointers in iterators, due to the issues involved with those pointers and the associated state moving to the heap.  But we allow pointers in async methods (which have similar constraints) with the restriction that awaits can't be used in an unsafe context, e.g. this is allowed:

``` C#
unsafe (...)
{
    ... // no awaits
}
await ...;
unsafe (...)
{
    ... // no awaits
}
```

but this is not allowed:

``` C#
unsafe (...)
{
    await ...;
}
```

We could allow unsafe code in iterators, but with a similar constraint: yield is not allowed in unsafe contexts, e.g. this would be allowed:

``` C#
unsafe (...)
{
    ... // no yields
}
yield return ...;
unsafe (...)
{
    ... // no yields
}
```
</Description>
        <CreatedDate>21/04/2015</CreatedDate>
        <ClosedDate>28/04/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2529</PullRequestID>
        <IssueID>2145</IssueID>
        <Title>Callers should be permitted to elide arguments for out parameters</Title>
        <Description>Sometimes we call functions with out parameters, but don't need the value of these out parameters after calling. So the compiler should allow us to omit out parameters.
For example:
int func(int a, out int b) { ... }
int b; int c=func(1, out b); //Currently we have to code like this even if we don't need b.
int c=func(1, out); //I hope to code like this if I don't need the out parameter. The compiler should add the omitted out parameter automatically while compiling.
</Description>
        <CreatedDate>21/04/2015</CreatedDate>
        <ClosedDate>20/03/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2529</PullRequestID>
      <File>src/VisualStudio/Setup/VSPackage.Designer.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2514</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Fix invocation interception for grain extensions</Title>
    <Description>I broke the `PreInvocationCallbackWithStreamTest` test with #2502.
The test checks that `IGrainExtension`s can have their methods intercepted by grains. Previously we were passing a `null` `MethodInfo` parameter to the interceptor, since the correct implementation method could not be found.

#2502 broke that by throwing an exception in the event that an implementation method cannot be found.

This PR fixes it again by mapping the interface method to the extension method in the event that the incoming request is destined for the extension object.

As you can see, it's a very simple fix. Functionals are running.</Description>
    <CreatedDate>14/12/2016</CreatedDate>
    <ClosedDate>14/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2514</PullRequestID>
        <IssueID>2502</IssueID>
        <Title>Reject builds with analyzer inconsistencies</Title>
        <Description>This commit updates vbcscompiler.exe to reject builds where the list of
analyzers is incomplete (i.e., some of the analyzers depend on
assemblies that are not present), we're unable to load the analyzers, or
the assemblies on disk do not actually match the ones that are loaded.

If one of these checks fails the build request is rejected, and the
clients have been updated to fall back to running the build in their own
process (that is, csc.exe or vbc.exe).

It is possible in some cases that a build that was rejected by
vbcscompiler.exe will succeed in csc.exe/vbc.exe. Generally this will
occur when an analyzer dependency is not passed via the `/analyzer`
switch but happens to be in a place where the CLR will find and load it
automatically. We want to ensure consistency which is why these builds
are not allowed in vbcscompiler.exe; otherwise we risk a build sometimes
succeeding and sometimes failing depending on which assemblies happen to
have been loaded by other, unrelated builds.

This commit adds utility code for the following:
1. Mapping from an assembly to its nearby dependencies on disk.
2. Checking that an assembly file and a loaded `Assembly` have the same MVIDs.
3. Identifying which assembly identities are missing from a set.
4. Checking if an assembly on disk has a strong name or not.

Unit tests are also included for these utilities.
</Description>
        <CreatedDate>04/05/2015</CreatedDate>
        <ClosedDate>08/05/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2514</PullRequestID>
        <IssueID>2502</IssueID>
        <Title>Reject builds with analyzer inconsistencies</Title>
        <Description>This commit updates vbcscompiler.exe to reject builds where the list of
analyzers is incomplete (i.e., some of the analyzers depend on
assemblies that are not present), we're unable to load the analyzers, or
the assemblies on disk do not actually match the ones that are loaded.

If one of these checks fails the build request is rejected, and the
clients have been updated to fall back to running the build in their own
process (that is, csc.exe or vbc.exe).

It is possible in some cases that a build that was rejected by
vbcscompiler.exe will succeed in csc.exe/vbc.exe. Generally this will
occur when an analyzer dependency is not passed via the `/analyzer`
switch but happens to be in a place where the CLR will find and load it
automatically. We want to ensure consistency which is why these builds
are not allowed in vbcscompiler.exe; otherwise we risk a build sometimes
succeeding and sometimes failing depending on which assemblies happen to
have been loaded by other, unrelated builds.

This commit adds utility code for the following:
1. Mapping from an assembly to its nearby dependencies on disk.
2. Checking that an assembly file and a loaded `Assembly` have the same MVIDs.
3. Identifying which assembly identities are missing from a set.
4. Checking if an assembly on disk has a strong name or not.

Unit tests are also included for these utilities.
</Description>
        <CreatedDate>04/05/2015</CreatedDate>
        <ClosedDate>08/05/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2514</PullRequestID>
      <File>src/VisualStudio/Core/Def/Implementation/Venus/ContainedLanguageCodeSupport.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2008</IssueID>
    <RepoID>orleans</RepoID>
    <Title>AWS DynamoDB Membership Provider</Title>
    <Description>Implementation of #2006 which is part of #2005
</Description>
    <CreatedDate>02/08/2016</CreatedDate>
    <ClosedDate>15/08/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2008</PullRequestID>
        <IssueID>2006</IssueID>
        <Title>Simplifying some of the expressions.</Title>
        <Description>
        </Description>
        <CreatedDate>15/04/2015</CreatedDate>
        <ClosedDate>15/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2008</PullRequestID>
        <IssueID>2005</IssueID>
        <Title>Expose ExpressionGenerator.GenerateExpression()</Title>
        <Description>This is a feature request to make [`ExpressionGenerator.GenerateExpression()`](https://github.com/dotnet/roslyn/blob/c8e8ad3682cd04b4159abdb9197b70bb06d4e82e/src/Workspaces/CSharp/Portable/CodeGeneration/ExpressionGenerator.cs#L22) public.

Our use case: We build a code transformation utility where we want to copy attribute values from an `AttributeData` instance into a syntax tree. For this we utilize `ExpressionGenerator.GenerateExpression()` using a reflection call, because it does exactly what we want (converting an attribute value into an expression syntax), and an own implementation would be quite expensive.
</Description>
        <CreatedDate>15/04/2015</CreatedDate>
        <ClosedDate>27/04/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2008</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/ExpressionLambdaRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/LambdaRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/SyntheticBoundNodeFactory.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenExprLambdaTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>1973</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Azure storage update in changelog</Title>
    <Description>Include comments about the upgrade to WindowsAzure Storage 7.0.0 (#1968) in the changelog, and also listed it as a known issue / constraint of previous versions (#1912).

/cc @benjaminpetit 
</Description>
    <CreatedDate>21/07/2016</CreatedDate>
    <ClosedDate>22/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>1973</PullRequestID>
        <IssueID>1968</IssueID>
        <Title>Support fully-qualified references in XML documentation</Title>
        <Description>Currently editor features (especially Find All References, Quick Info, and Go To Definition), do not understand fully-qualified references in `cref` attributes. For example, the following is a valid `&lt;see&gt;` element, but no editor support is provided for it:

``` xml
&lt;see cref="T:System.Collections.Generic.IEnumerable`1"/&gt;
```
</Description>
        <CreatedDate>14/04/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>1973</PullRequestID>
        <IssueID>1912</IssueID>
        <Title>Compiler Support: Better Tuples</Title>
        <Description>Provide automatic support for packing, and unpacking of Anonymous Types or Tuples (as structs). 

``` C#
public (int a, string b) SomeFunction() {
  return new { 0, "Hello" };
// Also
  return (0, "Hello");
}

public void DoSomethingWithValues() {
    (int a, var b) = SomeFunction();
    Debug.Assert(a == 0);
    Debug.Assert(b == "Hello");
}

public void DoSomething2() {
   var b = (12, 34); // new { Item1 = 12, Item2 = 34 }
   (int c, int g) = b;
}
```
</Description>
        <CreatedDate>10/04/2015</CreatedDate>
        <ClosedDate>20/11/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>1973</PullRequestID>
      <File>src/Tools/Source/RunTests/TestRunner.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>1340</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Cleanup NodeConfig management in ClusterConfiguration.</Title>
    <Description>This is another pass at addressing comments in Stream Recovery Tests #1289
First pass was GetOrAddConfigurationForNode #1313 

The issue here is that the silo nodes are optional in the configuration, so code that needs them tends to use a 'get or create' pattern.  This pattern was coded into the original GetConfigurationForNode call.  From the call name it's not clear that one would be creating the node if it does not exist, when all it appears to do is access it.

Since the actual behavior was 'get or create' the first pass at addressing this ( #1313) simply renamed the operation to GetOrAddConfigurationForNode, to make it more clear what the call was actually doing.  This change introduced no new capabilities, just made the existing behavior more clear.  There remained no means of querying the configuration node without creating it.

This PR breaks the functionality up into the following functions, affording users better control over the node management.

```
    public NodeConfiguration CreateNodeConfigurationForSilo(string siloName);
    public bool TryGetNodeConfigurationForSilo(string siloName, out NodeConfiguration siloNode);
    public NodeConfiguration GetOrCreateNodeConfigurationForSilo(string siloName)
```
</Description>
    <CreatedDate>27/01/2016</CreatedDate>
    <ClosedDate>03/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>1340</PullRequestID>
        <IssueID>1289</IssueID>
        <Title>Add Analyzer shouldn't be intermixed with other Runtime Reference menu items</Title>
        <Description>When clicking on the Reference Node, the Add Analyzer... menu comes up.
From my understanding, Analyzer is a debugging, development concept, that received feedback it should be in the references folder, vs. a special folder.
However, it's currently intermixed with other Runtime scenarios, like binary, project references and the older Service References, and newer Connected Services menu items.
![analyzerinreferences](https://cloud.githubusercontent.com/assets/7647382/6670554/7eb94582-cbbc-11e4-93ad-c37fdd677cd9.png)
![analyzerinprojectmenu](https://cloud.githubusercontent.com/assets/7647382/6670556/85fe9b94-cbbc-11e4-8ff5-31d414a462e1.png)

Suggest the following.
Name the Item: Add Analyzer Reference...
Move the item below Add Connected Service in both the References and Project menu.
(Note, we have a current bug to move Add Connected Service below Add Service Reference)
http://vstfdevdiv:8080/web/wi.aspx?pcguid=22f9acc9-569a-41ff-b6ac-fac1b6370209&amp;id=1139084
Project - Add Connected Service should be grouped with the other Service menu items
</Description>
        <CreatedDate>16/03/2015</CreatedDate>
        <ClosedDate>30/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>1340</PullRequestID>
        <IssueID>1313</IssueID>
        <Title>Preserve Key modifiers from existing anonymous type properties</Title>
        <Description>Fixes #1292
</Description>
        <CreatedDate>17/03/2015</CreatedDate>
        <ClosedDate>17/03/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>1340</PullRequestID>
        <IssueID>1313</IssueID>
        <Title>Preserve Key modifiers from existing anonymous type properties</Title>
        <Description>Fixes #1292
</Description>
        <CreatedDate>17/03/2015</CreatedDate>
        <ClosedDate>17/03/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>1340</PullRequestID>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/HResult.cs</File>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/SymAsyncMethod.cs</File>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/SymConstant.cs</File>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/SymDocument.cs</File>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/SymMethod.cs</File>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/SymReader.cs</File>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/SymScope.cs</File>
      <File>Src/Dependencies/Microsoft.DiaSymReader.PortablePdb/SymVariable.cs</File>
      <File>src/Compilers/CSharp/Desktop/CommandLine/CSharpCompiler.cs</File>
      <File>src/Compilers/CSharp/Desktop/CommandLine/CommandLineParser.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Query.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Statements.cs</File>
      <File>src/Compilers/CSharp/Portable/BoundTree/BoundNode.cs</File>
      <File>src/Compilers/CSharp/Portable/BoundTree/UnboundLambda.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/Compiler/MethodCompiler.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/EditAndContinue/CSharpSymbolMatcher.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/EditAndContinue/EmitHelpers.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/EditAndContinue/PEDeltaAssemblyBuilder.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/PEModuleBuilder.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/CSDiagnosticInfo.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageID.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageProvider.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/DiagnosticsPass_ExpressionTrees.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/LambdaFrame.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/LambdaRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_Call.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_ObjectOrCollectionInitializerExpression.cs</File>
      <File>src/Compilers/CSharp/Portable/Parser/Lexer.cs</File>
      <File>src/Compilers/CSharp/Portable/SymbolDisplay/ObjectDisplay.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/AnonymousTypeManager.Templates.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/SynthesizedSymbols/AnonymousType.TemplateSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AssemblySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PEMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ObsoleteAttributeHelpers.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceModuleSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxNode.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/LambdaUtilities.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/SyntaxUtilities.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/CommandLineTests.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/ErrorLoggerTests.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/TouchedFileLoggingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/InternalsVisibleToAndStrongNameTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenExprLambdaTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenForEachTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenIterators.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenShortCircuitOperatorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/IndexerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/SwitchTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/CompilationEmitTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/DeterministicTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueClosureTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueStateMachineTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueTestBase.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EmitMetadata.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBAsyncTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Diagnostics/DiagnosticAnalyzerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ArglistTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UseSiteErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/SymbolDisplay/ObjectDisplayTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/EventTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/LexicalAndXml/CrefLexerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/LexicalAndXml/LexicalTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/LexicalAndXml/NameAttributeValueLexerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/LexicalAndXml/PreprocessorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/DeclarationParsingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SeparatedSyntaxListTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SyntaxFactoryTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SyntaxNodeOrTokenListTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SyntaxTokenListTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SyntaxTriviaListTests.cs</File>
      <File>src/Compilers/CSharp/Test/WinRT/CodeGen/WinRTCollectionTests.cs</File>
      <File>src/Compilers/CSharp/csc/Csc.cs</File>
      <File>src/Compilers/CSharp/csc/Program.cs</File>
      <File>src/Compilers/CSharp/csc2/Csc2.cs</File>
      <File>src/Compilers/Core/AnalyzerDriver/AnalyzerExecutor.cs</File>
      <File>src/Compilers/Core/AnalyzerDriver/AnalyzerManager.AnalyzerAndOptions.cs</File>
      <File>src/Compilers/Core/AnalyzerDriver/AnalyzerManager.cs</File>
      <File>src/Compilers/Core/AnalyzerDriver/DeclarationComputer.cs</File>
      <File>src/Compilers/Core/AnalyzerDriver/DiagnosticAnalysisContextHelpers.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/AnalyzerFileReferenceTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/CommonCommandLineParserTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/Diagnostics/DiagnosticLocalizationTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/Diagnostics/SuppressMessageAttributeTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/Emit/CustomDebugInfoReaderTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/Text/SourceTextStreamTests.cs</File>
      <File>src/Compilers/Core/Desktop/AnalyzerFileReference.AssemblyPathHelper.cs</File>
      <File>src/Compilers/Core/Desktop/AnalyzerFileReference.InMemoryAssemblyLoader.cs</File>
      <File>src/Compilers/Core/Desktop/AnalyzerFileReference.cs</File>
      <File>src/Compilers/Core/Desktop/CodeAnalysisDesktopResources.Designer.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/CommonCommandLineArguments.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/CommonCommandLineParser.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/CommonCompiler.CompilerEmitStreamProvider.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/CommonCompiler.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/ErrorLogger.Issue.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/ErrorLogger.Value.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/ErrorLogger.WellKnownStrings.cs</File>
      <File>src/Compilers/Core/Desktop/CommandLine/ErrorLogger.cs</File>
      <File>src/Compilers/Core/Desktop/Interop/ClrStrongName.cs</File>
      <File>src/Compilers/Core/Desktop/MetadataCache.cs</File>
      <File>src/Compilers/Core/MSBuildTask/BuildClient.cs</File>
      <File>src/Compilers/Core/MSBuildTask/ManagedCompiler.cs</File>
      <File>src/Compilers/Core/Portable/Binding/AbstractLookupSymbolsInfo.cs</File>
      <File>src/Compilers/Core/Portable/CaseInsensitiveComparison.cs</File>
      <File>src/Compilers/Core/Portable/CodeAnalysisResources.Designer.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/ArrayMembers.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/BasicBlock.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/ILBuilder.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/ILBuilderEmit.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/LocalScopeManager.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/PermissionSetAttribute.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/PrivateImplementationDetails.cs</File>
      <File>src/Compilers/Core/Portable/Collections/BitVector.cs</File>
      <File>src/Compilers/Core/Portable/Collections/CachingFactory.cs</File>
      <File>src/Compilers/Core/Portable/Collections/IdentifierCollection.cs</File>
      <File>src/Compilers/Core/Portable/Collections/ImmutableMemoryStream.cs</File>
      <File>src/Compilers/Core/Portable/Collections/OrderPreservingMultiDictionary.cs</File>
      <File>src/Compilers/Core/Portable/Collections/SmallDictionary.cs</File>
      <File>src/Compilers/Core/Portable/Compilation.EmitStreamProvider.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/CompilationOptions.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/OptimizationLevel.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/ParseOptions.cs</File>
      <File>src/Compilers/Core/Portable/CryptographicHashProvider.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/CommonMessageProvider.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticBag.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticDescriptor.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticFormatter.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticInfo.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticWithInfo.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/Diagnostic_SimpleDiagnostic.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/FileLinePositionSpan.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/LocalizableResourceString.ExceptionSafeLocalizableString.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/LocalizableResourceString.FixedLocalizableString.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/LocalizableResourceString.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/LocalizableString.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/Location.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerImageReference.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerOptions.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilerDiagnosticAnalyzer.CompilationAnalyzer.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilerDiagnosticAnalyzer.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalyzerAttribute.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/SuppressMessageAttributeState.TargetSymbolResolver.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/SuppressMessageAttributeState.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/SymbolDeclaredCompilationEvent.cs</File>
      <File>src/Compilers/Core/Portable/DocumentationComments/XmlDocumentationCommentTextReader.XmlStream.cs</File>
      <File>src/Compilers/Core/Portable/Emit/AnonymousTypeKey.cs</File>
      <File>src/Compilers/Core/Portable/Emit/CommonPEModuleBuilder.cs</File>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinue/EncHoistedLocalInfo.cs</File>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinue/EncVariableSlotAllocator.cs</File>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinue/SymbolChanges.cs</File>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinueMethodDebugInformation.cs</File>
      <File>src/Compilers/Core/Portable/Emit/NoPia/CommonEmbeddedMethod.cs</File>
      <File>src/Compilers/Core/Portable/Emit/NoPia/CommonEmbeddedParameter.cs</File>
      <File>src/Compilers/Core/Portable/Emit/NoPia/CommonEmbeddedType.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/AssemblyLocationLightUp.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/ConcurrentLruCache.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/DocumentationCommentId.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/EnsureSufficientExecutionStackLightUp.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/EnumerableExtensions.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/FatalError.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/FileStreamLightUp.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/HashAlgorithms.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/ImmutableSetWithInsertionOrder`1.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/InterlockedOperations.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/MultiDictionary.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/OneOrMany.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/ReadOnlyUnmanagedMemoryStream.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/SpecializedCollections.Empty.List.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/SpecializedCollections.Singleton.Collection`1.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/SpecializedCollections.Singleton.Enumerator`1.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/SpecializedCollections.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/StringExtensions.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/StringTable.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/TextKeyedCache.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/WeakList.cs</File>
      <File>src/Compilers/Core/Portable/InternalUtilities/XmlUtilities.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/MetadataDecoder.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/MetadataHelpers.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/ModuleExtensions.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/PEModule.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReference/AssemblyIdentity.DisplayName.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReference/AssemblyIdentity.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReference/MetadataReference.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReference/MetadataReferenceProperties.cs</File>
      <File>src/Compilers/Core/Portable/Optional.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/BinaryWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/CustomDebugInfoWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/ITypeReferenceExtensions.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/InheritedTypeParameter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/MetadataHeapsBuilder.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/MetadataWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/PdbMetadataWrapper.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/PdbWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/PeWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/ReferenceIndexer.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/ReturnValueParameter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/TypeNameSerializer.cs</File>
      <File>src/Compilers/Core/Portable/ReferenceManager/CommonReferenceManager.Resolution.cs</File>
      <File>src/Compilers/Core/Portable/ResourceDescription.cs</File>
      <File>src/Compilers/Core/Portable/Serialization/ObjectReader.cs</File>
      <File>src/Compilers/Core/Portable/Serialization/ObjectReaderData.cs</File>
      <File>src/Compilers/Core/Portable/Serialization/ObjectWriter.cs</File>
      <File>src/Compilers/Core/Portable/Serialization/ObjectWriterData.cs</File>
      <File>src/Compilers/Core/Portable/SymbolDisplay/AbstractSymbolDisplayVisitor.cs</File>
      <File>src/Compilers/Core/Portable/SymbolDisplay/AbstractSymbolDisplayVisitor_Minimal.cs</File>
      <File>src/Compilers/Core/Portable/SymbolDisplay/SymbolDisplayPart.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/Attributes/AttributeUsageInfo.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/Attributes/CommonAttributeDataComparer.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/Attributes/SecurityWellKnownAttributeData.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/PlatformInvokeInformation.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/SymbolVisitor.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/TypeLayout.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/TypedConstantValue.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/AbstractSyntaxNavigator.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/ChildSyntaxList.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/GreenNode.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxDiffer.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxNode.Iterators.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxNode.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions_Tracking.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxToken.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTokenList.Enumerator.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTokenList.Reversed.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTrivia.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTriviaList.Enumerator.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTriviaList.Reversed.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTriviaList.cs</File>
      <File>src/Compilers/Core/Portable/Text/ChangedText.cs</File>
      <File>src/Compilers/Core/Portable/Text/CompositeText.cs</File>
      <File>src/Compilers/Core/Portable/Text/LinePosition.cs</File>
      <File>src/Compilers/Core/Portable/Text/SourceText.cs</File>
      <File>src/Compilers/Core/Portable/Text/SourceTextStream.cs</File>
      <File>src/Compilers/Core/Portable/Text/StringBuilderText.cs</File>
      <File>src/Compilers/Core/Portable/Text/StringText.cs</File>
      <File>src/Compilers/Core/Portable/Text/SubText.cs</File>
      <File>src/Compilers/Core/Portable/Text/TextChange.cs</File>
      <File>src/Compilers/Core/Portable/Text/TextChangeRange.cs</File>
      <File>src/Compilers/Core/Portable/Text/TextLine.cs</File>
      <File>src/Compilers/Core/Portable/Text/TextSpan.cs</File>
      <File>src/Compilers/Core/Portable/TreeDumper.cs</File>
      <File>src/Compilers/Core/SharedCollections/ObjectPool`1.cs</File>
      <File>src/Compilers/Core/SharedCollections/PooledDictionary.cs</File>
      <File>src/Compilers/Core/SharedCollections/PooledHashSet.cs</File>
      <File>src/Compilers/Core/VBCSCompiler/BuildProtocol.cs</File>
      <File>src/Compilers/Core/VBCSCompiler/CSharpCompilerServer.cs</File>
      <File>src/Compilers/Core/VBCSCompiler/CompilerRequestHandler.cs</File>
      <File>src/Compilers/Core/VBCSCompiler/NamedPipeClientConnection.cs</File>
      <File>src/Compilers/Core/VBCSCompiler/ServerDispatcher.cs</File>
      <File>src/Compilers/Core/VBCSCompiler/VisualBasicCompilerServer.cs</File>
      <File>src/Compilers/Core/VBCSCompilerTests/CompilerServerTests.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/MockCSharpCompiler.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/MockCsi.cs</File>
      <File>src/Compilers/VisualBasic/vbc/Program.cs</File>
      <File>src/Compilers/VisualBasic/vbc/Vbc.cs</File>
      <File>src/Compilers/VisualBasic/vbc2/Vbc2.cs</File>
      <File>src/Dependencies/Microsoft.DiaSymReader/ISymUnmanagedBinder.cs</File>
      <File>src/Dependencies/Microsoft.DiaSymReader/ISymUnmanagedBinder2.cs</File>
      <File>src/Dependencies/Microsoft.DiaSymReader/ISymUnmanagedScope.cs</File>
      <File>src/Dependencies/Microsoft.DiaSymReader/ISymUnmanagedScope2.cs</File>
      <File>src/Dependencies/Microsoft.DiaSymReader/SymUnmanagedSearchPolicy.cs</File>
      <File>src/Diagnostics/Roslyn/Core/ApiDesign/DeclarePublicAPIAnalyzer.cs</File>
      <File>src/Diagnostics/Roslyn/Core/ApiDesign/DeclarePublicAPIFix.cs</File>
      <File>src/Diagnostics/Roslyn/Core/Maintainability/UnusedDeclarationsAnalyzer.cs</File>
      <File>src/EditorFeatures/CSharp/Completion/CompletionProviders/OverrideCompletionProvider.cs</File>
      <File>src/EditorFeatures/CSharp/Formatting/Indentation/CSharpIndentationService.Indenter.cs</File>
      <File>src/EditorFeatures/CSharp/LineSeparators/CSharpLineSeparatorService.cs</File>
      <File>src/EditorFeatures/CSharpTest/CodeActions/Preview/PreviewTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/AddUsing/AddUsingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/DiagnosticAnalyzerDriver/DiagnosticAnalyzerDriverTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/ActiveStatementTests.Methods.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/ActiveStatementTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/CSharpEditAndContinueAnalyzerTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/Helpers/RudeEditTestBase.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/RudeEditStatementTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/RudeEditTopLevelTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/ExtractMethod/SelectionValidatorTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Interactive/NavigateTo/InteractiveNavigateToTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/LineSeparators/LineSeparatorTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/NavigateTo/NavigateToTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Squiggles/ErrorSquiggleProducerTests.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/Navigation/INavigableItem.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/Navigation/NavigableItemFactory.DeclaredSymbolNavigableItem.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/Navigation/NavigableItemFactory.SymbolLocationNavigableItem.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/SignatureHelp/SignatureHelpItems.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractAggregatedDiagnosticsTagSource.DiagnosticsTagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractAggregatedDiagnosticsTagSource.InteractiveMode.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/DiagnosticsSquiggleTaggerProvider.TagSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/WellKnownDiagnosticPropertyNames.cs</File>
      <File>src/EditorFeatures/Core/Implementation/EditAndContinue/ReadOnlyDocumentTracker.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/AbstractEditorInlineRenameService.FailureInlineRenameInfo.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/AbstractEditorInlineRenameService.InlineRenameLocationSet.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/AbstractEditorInlineRenameService.SymbolRenameInfo.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/AbstractEditorInlineRenameService.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/Dashboard/Dashboard.xaml.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/Dashboard/DashboardViewModel.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/IEditorInlineRenameService.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/InlineRenameSession.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/CommonSignatureHelpUtilities.cs</File>
      <File>src/EditorFeatures/Core/Implementation/RenameTracking/RenameTrackingTaggerProvider.RenameTrackingCommitter.cs</File>
      <File>src/EditorFeatures/Core/Implementation/RenameTracking/RenameTrackingTaggerProvider.TrackingSession.cs</File>
      <File>src/EditorFeatures/Core/Implementation/TodoComment/TodoCommentState.cs</File>
      <File>src/EditorFeatures/Core/Shared/Tagging/TagSources/ProducerPopulatedTagSource.cs</File>
      <File>src/EditorFeatures/Test/CodeFixes/CodeFixServiceTests.cs</File>
      <File>src/EditorFeatures/Test/Completion/AbstractCompletionProviderTests.cs</File>
      <File>src/EditorFeatures/Test/Diagnostics/DiagnosticProviderTestUtilities.cs</File>
      <File>src/EditorFeatures/Test/Diagnostics/DiagnosticTagSourceTests.cs</File>
      <File>src/EditorFeatures/Test/Diagnostics/SuppressMessageAttributeTests.cs</File>
      <File>src/EditorFeatures/Test/Diagnostics/TestDiagnosticAnalyzerService.cs</File>
      <File>src/EditorFeatures/Test/EditAndContinue/EditAndContinueTestHelpers.cs</File>
      <File>src/EditorFeatures/Test/EditAndContinue/Extensions.cs</File>
      <File>src/EditorFeatures/Test/EditAndContinue/RudeEditDiagnosticTests.cs</File>
      <File>src/EditorFeatures/Test/MetadataAsSource/AbstractMetadataAsSourceTests.cs</File>
      <File>src/EditorFeatures/Test/MetadataAsSource/MetadataAsSourceTests.cs</File>
      <File>src/EditorFeatures/Test/Preview/PreviewWorkspaceTests.cs</File>
      <File>src/EditorFeatures/Test/RenameTracking/RenameTrackingTaggerProviderTests.cs</File>
      <File>src/EditorFeatures/Test/Squiggles/AbstractSquiggleProducerTests.cs</File>
      <File>src/EditorFeatures/Test/Utilities/AsynchronousOperationListenerTests.cs</File>
      <File>src/EditorFeatures/Test/Utilities/PatternMatcherTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CSharpExpressionCompiler.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CSharpInstructionDecoder.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CSharpMetadataContext.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CompilationContext.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/EvaluationContext.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/SymUnmanagedReaderExtensions.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ResultProvider/CSharpFormatter.Values.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ResultProvider/Helpers/TypeExtensions.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ResultProvider/Portable/Resources.Designer.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ExpressionCompilerTestBase.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ExpressionCompilerTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/HoistedStateMachineLocalTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/InstructionDecoderTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/MethodContextReuseConstraintsTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/PseudoVariableTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/UsingDebugInfoTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ResultProvider/ExpansionTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ResultProvider/FormatSpecifierTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ResultProvider/NativeViewTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ResultProvider/ValueFormattingTests.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/EvaluationContextBase.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/ExpressionEvaluatorFatalError.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/FrameDecoder.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/LanguageInstructionDecoder.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/MetadataContext.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/MetadataContextItem.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/MetadataUtilities.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/MethodContextReuseConstraints.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/MethodScope.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/PDB/HoisedLocalScopeRecord.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/PDB/ImportRecord.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/PDB/MethodDebugInfo.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/PDB/NativeImportRecord.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/PDB/PdbHelpers.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/PDB/PortableImportRecord.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/Placeholders.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/ReflectionHelpers.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ExpressionCompiler/Resources.Designer.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ResultProvider/Expansion/NativeViewExpansion.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ResultProvider/Formatter.Values.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ResultProvider/Helpers/MemberAndDeclarationInfo.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ResultProvider/Helpers/TypeHelpers.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ResultProvider/NetFX20/Helpers/Placeholders.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ResultProvider/Portable/Helpers/Placeholders.cs</File>
      <File>src/ExpressionEvaluator/Core/Source/ResultProvider/Portable/Resources.Designer.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ExpressionCompiler/ExpressionCompilerTestHelpers.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ExpressionCompiler/MethodDebugInfo.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ExpressionCompiler/MockSymUnmanaged.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ExpressionCompiler/NotImplementedSymUnmanaged.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ExpressionCompiler/SymReader.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmClrValue.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmCompilerId.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmEngineSettings.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmIntermediateEvaluationResult.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmLanguage.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmLanguageId.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmProcess.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmRuntimeInstance.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmVendorId.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/MemberInfo/ConstructorInfoImpl.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/MemberInfo/EventInfoImpl.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/MemberInfo/FieldInfoImpl.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/MemberInfo/MethodInfoImpl.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/MemberInfo/PropertyInfoImpl.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/MemberInfo/TypeImpl.cs</File>
      <File>src/Features/CSharp/CSharpFeaturesResources.Designer.cs</File>
      <File>src/Features/CSharp/CodeFixes/AddImport/CSharpAddImportCodeFixProvider.cs</File>
      <File>src/Features/CSharp/CodeRefactorings/InlineTemporary/InlineTemporaryCodeRefactoringProvider.cs</File>
      <File>src/Features/CSharp/Completion/CompletionProviders/EnumAndCompletionListTagCompletionProvider.cs</File>
      <File>src/Features/CSharp/Diagnostics/Analyzers/CSharpRemoveUnnecessaryImportsDiagnosticAnalyzer.cs</File>
      <File>src/Features/CSharp/EditAndContinue/CSharpEditAndContinueAnalyzer.cs</File>
      <File>src/Features/CSharp/EditAndContinue/StatementSyntaxComparer.cs</File>
      <File>src/Features/CSharp/EditAndContinue/SyntaxUtilities.cs</File>
      <File>src/Features/CSharp/GenerateMember/GenerateVariable/CSharpGenerateVariableService.cs</File>
      <File>src/Features/Core/Completion/Providers/AbstractSymbolCompletionProvider.cs</File>
      <File>src/Features/Core/Diagnostics/AbstractHostDiagnosticUpdateSource.cs</File>
      <File>src/Features/Core/Diagnostics/AnalyzerDriverResources.cs</File>
      <File>src/Features/Core/Diagnostics/AnalyzerHelper.cs</File>
      <File>src/Features/Core/Diagnostics/Analyzers/RemoveUnnecessaryImportsDiagnosticAnalyzerBase.cs</File>
      <File>src/Features/Core/Diagnostics/BaseDiagnosticIncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Diagnostics/DiagnosticAnalyzerService.cs</File>
      <File>src/Features/Core/Diagnostics/DiagnosticAnalyzerService_IncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Diagnostics/DiagnosticAnalyzerService_Test.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticAnalyzerDriver.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.DiagnosticState.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.IncrementalAnalyzer.AnalyzerExecutor.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.NestedTypes.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.StateSet.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer_GetDiagnostics.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer_GetLatestDiagnosticsForSpan.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Diagnostics/IDiagnosticAnalyzerService.cs</File>
      <File>src/Features/Core/Diagnostics/InternalDiagnosticsOptions.cs</File>
      <File>src/Features/Core/Diagnostics/UpdateArgsId.cs</File>
      <File>src/Features/Core/EditAndContinue/AbstractEditAndContinueAnalyzer.cs</File>
      <File>src/Features/Core/EditAndContinue/EditAndContinueWorkspaceService.cs</File>
      <File>src/Features/Core/EditAndContinue/EditSession.cs</File>
      <File>src/Features/Core/EditAndContinue/IEditAndContinueWorkspaceService.cs</File>
      <File>src/Features/Core/EditAndContinue/RudeEditDiagnosticDescriptors.cs</File>
      <File>src/Features/Core/EditAndContinue/RudeEditKind.cs</File>
      <File>src/Features/Core/FeaturesResources.Designer.cs</File>
      <File>src/Features/Core/Shared/Options/OrganizerOptions.cs</File>
      <File>src/Features/Core/Shared/Utilities/PatternMatcher.cs</File>
      <File>src/Features/Core/SolutionCrawler/AbstractDocumentDifferenceService.cs</File>
      <File>src/Features/Core/SolutionCrawler/IWorkCoordinatorPriorityService.cs</File>
      <File>src/Features/Core/SolutionCrawler/SolutionCrawlerService.cs</File>
      <File>src/Features/Core/SolutionCrawler/State/AbstractAnalyzerState.cs</File>
      <File>src/Features/Core/SolutionCrawler/WorkCoordinator.AsyncWorkItemQueue.cs</File>
      <File>src/Features/Core/SolutionCrawler/WorkCoordinator.LowPriorityProcessor.cs</File>
      <File>src/Features/Core/SolutionCrawler/WorkCoordinator.SemanticChangeProcessor.cs</File>
      <File>src/Features/Core/SolutionCrawler/WorkCoordinator.cs</File>
      <File>src/Features/Core/Workspace/FileTracker.cs</File>
      <File>src/Interactive/HostTest/InteractiveHostTests.cs</File>
      <File>src/Interactive/csi/Csi.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindow.cs</File>
      <File>src/Scripting/Core/Emit/CommonCompilationExtensions.cs</File>
      <File>src/Scripting/Core/ObjectFormatter.Formatter.cs</File>
      <File>src/Scripting/Core/ScriptBuilder.cs</File>
      <File>src/Test/Diagnostics/DiagnosticOnly_TPLListener.cs</File>
      <File>src/Test/PdbUtilities/Pdb/PdbToXml.cs</File>
      <File>src/Test/PdbUtilities/Pdb/TempPdbReader.cs</File>
      <File>src/Test/PdbUtilities/Shared/CustomDebugInfoReader.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymENCUnmanagedMethod.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedAsyncMethod.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedConstant.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedDispose.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedDocument.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedMethod.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedNamespace.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedReader.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedReader2.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedScope.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedScope2.cs</File>
      <File>src/Test/PdbUtilities/Shared/ISymUnmanagedVariable.cs</File>
      <File>src/Test/PdbUtilities/Shared/SymUnmanagedReaderExtensions.cs</File>
      <File>src/Test/PdbUtilities/Shared/SymUnmanagedReaderTestExtensions.cs</File>
      <File>src/Test/Utilities/AssertEx.cs</File>
      <File>src/Test/Utilities/CommonDiagnosticAnalyzers.cs</File>
      <File>src/Test/Utilities/CommonTestBase.CompilationVerifier.cs</File>
      <File>src/Test/Utilities/CompilationExtensions.cs</File>
      <File>src/Test/Utilities/DiagnosticExtensions.cs</File>
      <File>src/Test/Utilities/HostedRuntimeEnvironment.cs</File>
      <File>src/Test/Utilities/PdbTestUtilities.cs</File>
      <File>src/Test/Utilities/SharedCompilationUtils.cs</File>
      <File>src/Test/Utilities/SourceWithMarkedNodes.cs</File>
      <File>src/Test/Utilities/TestMessageProvider.cs</File>
      <File>src/VisualStudio/CSharp/Impl/Options/CSharpSettingsManagerOptionSerializer.cs</File>
      <File>src/VisualStudio/CSharp/Impl/ProjectSystemShim/CSharpProject.cs</File>
      <File>src/VisualStudio/CSharp/Test/PersistentStorage/PersistentStorageTests.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/AbstractVsTextViewFilter`3.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/SymbolReaderProvider.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/VsENCRebuildableProjectImpl.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/VsReadOnlyDocumentTracker.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/LibraryManager_FindReferences.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/LibraryManager_GoToDefinition.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/TreeItems/AbstractSourceTreeItem.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/TreeItems/AbstractTreeItem.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/TreeItems/ITreeItemWithReferenceCount.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/TreeItems/MetadataDefinitionTreeItem.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/TreeItems/SourceDefinitionTreeItem.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Library/FindResults/TreeItems/SourceReferenceTreeItem.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Options/AbstractLanguageSettingsSerializer.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Progression/GraphProvider.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/AbstractEncProject.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/AbstractEncProject_IVsENCRebuildableProjectCfg.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/AbstractProject.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/DocumentProvider.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/HierarchyEventsSink.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/IVisualStudioHostProject.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/LinkedFileUtilities.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/MiscellaneousFilesWorkspace.HostProject.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/RuleSets/RuleSetEventHandler.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/VisualStudioWorkspaceImpl.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/SolutionSize/SolutionSizeTracker.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/AbstractTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/AbstractTableDataSource.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/AbstractTableEntriesFactory.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/AbstractTableEntriesSnapshot.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/MiscellaneousDiagnosticListTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/MiscellaneousTodoListTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/VisualStudioBaseDiagnosticListTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/VisualStudioBaseTodoListTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/VisualStudioDiagnosticListTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/VisualStudioTodoListTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TaskList/ProjectExternalErrorReporter.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/VirtualMemoryNotificationListener.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Workspace/Esent/EsentPersistentStorage.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Workspace/PersistenceServiceFactory.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Workspace/PersistentStorageService.cs</File>
      <File>src/VisualStudio/Core/Def/ServicesVSResources.Designer.cs</File>
      <File>src/VisualStudio/Core/Def/SolutionEventMonitor.cs</File>
      <File>src/VisualStudio/Core/Impl/CodeModel/AbstractCodeModelService.cs</File>
      <File>src/VisualStudio/Core/SolutionExplorerShim/DiagnosticItem/DiagnosticItemProvider.cs</File>
      <File>src/VisualStudio/Core/SolutionExplorerShim/DiagnosticItem/DiagnosticItemSource.cs</File>
      <File>src/VisualStudio/Setup/RoslynPackage.cs</File>
      <File>src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs</File>
      <File>src/Workspaces/CSharp/Portable/Editing/CSharpImportAdder.cs</File>
      <File>src/Workspaces/CSharp/Portable/Extensions/ExpressionSyntaxExtensions.cs</File>
      <File>src/Workspaces/CSharp/Portable/Extensions/SyntaxNodeExtensions.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/FormattingHelpers.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/Rules/SpacingFormattingRule.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/Rules/SuppressFormattingRule.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpSyntaxTreeFactoryService.RecoverableSyntaxTree.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpSyntaxTreeFactoryService.cs</File>
      <File>src/Workspaces/CSharp/Portable/Rename/CSharpRenameRewriterLanguageService.cs</File>
      <File>src/Workspaces/CSharp/Portable/Simplification/CSharpSimplificationService.Expander.cs</File>
      <File>src/Workspaces/CSharp/Portable/Simplification/CSharpSimplificationService.cs</File>
      <File>src/Workspaces/CSharpTest/CodeGeneration/AddImportsTests.cs</File>
      <File>src/Workspaces/CSharpTest/Formatting/FormattingTests.cs</File>
      <File>src/Workspaces/Core/Desktop/Options/ExportOptionAttribute.cs</File>
      <File>src/Workspaces/Core/Desktop/Utilities/Documentation/FileBasedXmlDocumentationProvider.cs</File>
      <File>src/Workspaces/Core/Portable/Editing/GenerationOptions.cs</File>
      <File>src/Workspaces/Core/Portable/Editing/GenerationOptionsProvider.cs</File>
      <File>src/Workspaces/Core/Portable/Editing/ImportAdder.cs</File>
      <File>src/Workspaces/Core/Portable/Editing/ImportAdderService.cs</File>
      <File>src/Workspaces/Core/Portable/Formatting/FormattingOptions.cs</File>
      <File>src/Workspaces/Core/Portable/Formatting/TriviaEngine/AbstractTriviaFormatter.cs</File>
      <File>src/Workspaces/Core/Portable/Log/FunctionId.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/ConflictEngine/ConflictResolver.Session.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameLocation.ReferenceProcessing.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameLocation.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameLocationSet.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameUtilities.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/TokenRenameInfo.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/CommonSyntaxNodeExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/ITypeSymbolExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Utilities/CommonFormattingHelpers.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Utilities/StringBreaker.cs</File>
      <File>src/Workspaces/Core/Portable/Simplification/AbstractSimplificationService.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/Documentation/XmlDocumentationProvider.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/ValuesSources/CachedWeakValueSource.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/ValuesSources/RecoverableWeakValueSource.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Host/SyntaxTreeFactory/AbstractSyntaxTreeFactoryService.AbstractRecoverableSyntaxRoot.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Host/SyntaxTreeFactory/AbstractSyntaxTreeFactoryService.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Host/SyntaxTreeFactory/ISyntaxTreeFactoryService.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/DocumentState.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/DocumentState_TreeTextSource.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/ITextVersionable.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/RecoverableTextAndVersion.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/TextDocumentState.cs</File>
      <File>src/Workspaces/Core/Portable/WorkspacesResources.Designer.cs</File>
      <File>src/Workspaces/CoreTest/Host/TestHost.cs</File>
      <File>src/Workspaces/CoreTest/SyntaxReferenceTests.cs</File>
      <File>src/Workspaces/CoreTest/UtilityTest/AsyncLazyTests.cs</File>
      <File>src/Workspaces/CoreTest/WorkspaceTests/AdhocWorkspaceTests.cs</File>
      <File>src/Workspaces/CoreTest/WorkspaceTests/MSBuildWorkspaceTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>1332</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Fixed a bug of not properly handling DeactivateOnIdle inside OnActivateAsync by throwing Exception.</Title>
    <Description>Take 2 on #1325.

We used to just ignore the `DeactivateOnIdle` call made inside OnActivateAsync.
As proposed by @sergeybykov in #1325, `DeactivateOnIdle`  should throw if called from within `OnActivateAsync`.

I disagree with this semantics (I think the right fix is to cause grain to Deactivate immediately, which will also call `OnDeactivateAsync`), but there appears to be a wider opinion that this is the right behavior and since this fix is better than just completely ignoring, I prefer a sub-optimal fix rather than leaving a hanging bug (I don't like leaving hanging bugs).
</Description>
    <CreatedDate>26/01/2016</CreatedDate>
    <ClosedDate>27/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>1332</PullRequestID>
        <IssueID>1325</IssueID>
        <Title>Should UnusedDeclarationsAnalyzer be on be default?</Title>
        <Description>I'm seeing unused code being grayed out while editing Roslyn.sln in my main hive.  Is that expected?  @srivatsn tells me that the analyzer is currently just a proof-of-concept.
</Description>
        <CreatedDate>17/03/2015</CreatedDate>
        <ClosedDate>26/03/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>1332</PullRequestID>
        <IssueID>1325</IssueID>
        <Title>Should UnusedDeclarationsAnalyzer be on be default?</Title>
        <Description>I'm seeing unused code being grayed out while editing Roslyn.sln in my main hive.  Is that expected?  @srivatsn tells me that the analyzer is currently just a proof-of-concept.
</Description>
        <CreatedDate>17/03/2015</CreatedDate>
        <ClosedDate>26/03/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>1332</PullRequestID>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/AbstractProject.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>457</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Make sure we handle all in flight requests correctly when silo is shutting down.</Title>
    <Description>This is a 3rd step towards Gracefull Shutdown, related to:
#381
#320 (comment)

http://orleans.codeplex.com/discussions/637820#post1425137
Continues the work in #413.
Continues the work in #448.

Essentially, the silo was already largely handling this logic correctly. I merely simplified a couple of places, to make more clear what will actually happen. At a high level:
1) Once silo is shutting down, it first updates its membership state. This will cause all other silos not to place new activation on it, not to use this silo as grain directory and not as reminder service. This logic was already handled correctly before. No change.
2) Silo refuses to create any new activations, throws Non-existent activation and tries to forward the request. The activation will be placed on a different silo. This is a new bit added in this PR..
3) Silo starts to deactivate all activations. 
4) Any new requests that arrive to activations on that silo will be queued and after activation is deactivated, they will be forwarded to a new activation. There is no change in that logic.
</Description>
    <CreatedDate>28/05/2015</CreatedDate>
    <ClosedDate>01/06/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>381</IssueID>
        <Title>properly handle VB Global namespace in DeclaredSymbolInfo</Title>
        <Description>When walking the syntax trees to find DeclaredSymbolInfos, I missed a case where VB can have "Namespace Global".  Functionally this is no different than hitting the default case of the Select where I also Return Nothing, but it's a lot nicer to not have asserts :smile:.
</Description>
        <CreatedDate>10/02/2015</CreatedDate>
        <ClosedDate>11/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>320</IssueID>
        <Title>Possible bug in Batch Fixer merge algorithm</Title>
        <Description>We have a code fix that uses the batch fixer to provide support for correcting all instances of a particular style problem in a document/project/solution. Even though each correction is made to a distinct `ExpressionSyntax` node in the source tree, the batch fixer fails to properly merge two changes in a particular scenario.

The problem is described (with example input/output) in the following issue:
https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/466
</Description>
        <CreatedDate>09/02/2015</CreatedDate>
        <ClosedDate>27/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>413</IssueID>
        <Title>Visual studio crashes while typing inside expression nuggets in C# websites</Title>
        <Description>1. With latest roslyn bits installed, open a new C# webforms website.
2. Add a new webform - default2.aspx
3. add below code inside `&lt;div&gt;`
   
   ```
    &lt;asp:Label ID="Label1" runat="server" Text="Label"&gt;&lt;/asp:Label&gt;
    &lt;%=Label1.$$%&gt;
   ```
4. When caret is at $$, type a few backspaces
5. VS crashes.

Here is the relevant stack trace: 

```
ArgumentNullException {"Value cannot be null.\r\nParameter name: path"}
   at Microsoft.CodeAnalysis.FileLinePositionSpan..ctor(String path, LinePositionSpan span) in E:\Roslyn\Main\Open\src\Compilers\Core\Portable\Diagnostic\FileLinePositionSpan.cs:line 80
   at Microsoft.CodeAnalysis.FileLinePositionSpan..ctor(String path, LinePosition start, LinePosition end) in E:\Roslyn\Main\Open\src\Compilers\Core\Portable\Diagnostic\FileLinePositionSpan.cs:line 66
   at Microsoft.VisualStudio.LanguageServices.Implementation.Diagnostics.VisualStudioVenusSpanMappingService.GetAdjustedDiagnosticSpan(DocumentId documentId, Location location, TextSpan&amp; sourceSpan, FileLinePositionSpan&amp; originalLineInfo, FileLinePositionSpan&amp; mappedLineInfo) in E:\Roslyn\Main\Open\Src\VisualStudio\Core\Def\Implementation\Diagnostics\VisualStudioVenusSpanMappingService.cs:line 53
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.GetLocationInfo(Document document, Location location, TextSpan&amp; sourceSpan, FileLinePositionSpan&amp; originalLineInfo, FileLinePositionSpan&amp; mappedLineInfo) in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticData.cs:line 332
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.Create(Document document, Diagnostic diagnostic) in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticData.cs:line 286
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.&lt;&gt;c__DisplayClass57_0.&lt;GetDiagnosticData&gt;b__1(Diagnostic d) in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticAnalyzerService.IncrementalAnalyzer.cs:line 804
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at System.Collections.Immutable.ImmutableArray.CreateRange[T](IEnumerable`1 items)
   at Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutableOrEmpty[T](IEnumerable`1 items) in E:\Roslyn\Main\Open\src\Compilers\Core\Portable\Collections\ImmutableArrayExtensions.cs:line 45
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.AnalyzerExecutor.&lt;GetSyntaxAnalysisDataAsync&gt;d__2.MoveNext() in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticAnalyzerService.IncrementalAnalyzer.AnalyzerExecutor.cs:line 50
```
</Description>
        <CreatedDate>11/02/2015</CreatedDate>
        <ClosedDate>13/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>448</IssueID>
        <Title>Bug: The new managed Expression Evaluator ignores DEBUGPROP_INFO_NOFUNCEVAL</Title>
        <Description>In _VS2010 and VS2012_, a consumer could call the debugger API's `IDebugProperty3.EnumChildren` passing in only the `DEBUGPROP_INFO_NAME` flag, to obtain only the names of the expressions,  without incurring the performance cost of the EE actually evaluating their values and performing func-evals. We've built a lot of functionality around this ability. 

In _VS2013_, this ability was broken. I reported it on [Connect ticket 813045](https://connect.microsoft.com/VisualStudio/feedback/details/813045/bug-in-new-managed-debug-engine-idebugproperty2s-children-are-func-evalled-when-value-was-not-requested), and was offered a workaround of using `DEBUGPROP_INFO_NOFUNCEVAL`, which works.

In _VS2015 CTP5_, both the original approach and the suggested workaround no longer work. 

To reproduce:
1. Run the  [scenario I described](https://connect.microsoft.com/VisualStudio/feedback/details/813045/bug-in-new-managed-debug-engine-idebugproperty2s-children-are-func-evalled-when-value-was-not-requested) in VS2015  instead of VS2013.
2. Apply the workaround suggested by Azeem Khan on the Connect case and re-run the scenario. 
   Observe that the workaround doesn't work in VS2015 CTP5.
3. Go into Tools-&gt;Options and check the "Use the legacy C# and VB expression evaluators" option. Re-run the scenario and observe that the workaround now works.
</Description>
        <CreatedDate>12/02/2015</CreatedDate>
        <ClosedDate>18/02/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>457</PullRequestID>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SyntaxDiffingTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>422</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Testing Host Part 3</Title>
    <Description>Fixes bug in Nightly test suite introduced by PR #408 

Failure case was: SMSDeactivationTest_ClientConsumer

Change:
- Need a different client config for testing client-side streams.

This PR replaces #420 and #421 which got into a bit of a mess!
</Description>
    <CreatedDate>16/05/2015</CreatedDate>
    <ClosedDate>16/05/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>422</PullRequestID>
        <IssueID>408</IssueID>
        <Title>Debug.Assert in WorkCoordinator</Title>
        <Description>I left a debug VS open overnight and came back to this. Dump is in the internal fileshare under dumps/408/

```
&gt;   Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetNodeName(Microsoft.CodeAnalysis.SyntaxNode node, Boolean includeTypeParameters) Line 897  Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetNodeName(Microsoft.CodeAnalysis.SyntaxNode node, Boolean includeTypeParameters) Line 883  Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetContainer(Microsoft.CodeAnalysis.SyntaxNode node, Boolean immediate) Line 832 Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetContainerDisplayName(Microsoft.CodeAnalysis.SyntaxNode node) Line 824 Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.TryGetDeclaredSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo declaredSymbolInfo) Line 718  Basic
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeInfo.CreateInfoAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 163    C#
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeInfo.PrecalculateBasicInfoAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 62  C#
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeInfo.PrecalculateAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 29   C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.IncrementalCaches.SyntaxTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.AnalyzeSyntaxAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 23   C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.ProcessDocumentAnalyzersAsync.AnonymousMethod__24_0(Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer a, Microsoft.CodeAnalysis.Document d, System.Threading.CancellationToken c) Line 147 C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync.AnonymousMethod__0(T v, System.Threading.CancellationToken c) Line 174 C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.GetOrDefaultAsync&lt;TData, TResult&gt;(TData value, System.Func&lt;TData, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;TResult&gt;&gt; funcAsync, System.Threading.CancellationToken cancellationToken) Line 217    C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync&lt;T&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, T value, System.Func&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, T, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; runnerAsync, System.Threading.CancellationToken cancellationToken) Line 172   C#
```
</Description>
        <CreatedDate>11/02/2015</CreatedDate>
        <ClosedDate>11/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>422</PullRequestID>
        <IssueID>420</IssueID>
        <Title>What language proposals would benefit from CLR changes?</Title>
        <Description>If we were to plan for one language feature that requires a revision of the CLR, then we might as well do as many of them at the same time as make sense. What changes would we consider for C# 7 and VB 15 that would benefit from CLR support? See #166 for related discussion. This is a pared-down list for us to select from.
1. Virtual extension methods (see #73, #258)
2. Generic constraints about static methods or constructors (see also #129, #154).
3. Array slicing (see #120)
4. Language support for tuples (see #347) and function types (no issue yet) might benefit from CLR unification across assemblies.
5. Traits (see #60) aka structural interfaces (see #154) or mixins (no issue yet)

Those that we would likely _not_ do in this timeframe include
1. Make void a first-class type with one value; see #234 (Suggested by @ashmind) (Given how long the CLR has been around, it is probably too late for APIs to benefit, as those that would benefit most have already been written)
2. Covariance and contravariance for classes (see #171)
3. Allow |, &amp;, and ~ operators on a type parameter with the enum constraint (see #262)
4. Intersection types (#2146, though likely not that syntax) and/or union types.
5. Support generic indexers (see #523)
6. Higher-kinded polymorphism (see #2212)
</Description>
        <CreatedDate>12/02/2015</CreatedDate>
        <ClosedDate>22/03/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>422</PullRequestID>
        <IssueID>421</IssueID>
        <Title>Progression should properly descend into types for IntelliTrace MVC queries</Title>
        <Description>When BeginGetGraphData() (in GraphProvider.cs) was migrated from the old code, a query type of the format {Direction=Target, LinkCategories=[Contains]} was missed that IntelliTrace produced when it wanted us to descend into types.
</Description>
        <CreatedDate>12/02/2015</CreatedDate>
        <ClosedDate>12/02/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>422</PullRequestID>
      <File>src/Test/Utilities/HostedRuntimeEnvironment.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>457</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Make sure we handle all in flight requests correctly when silo is shutting down.</Title>
    <Description>This is a 3rd step towards Gracefull Shutdown, related to:
#381
#320 (comment)

http://orleans.codeplex.com/discussions/637820#post1425137
Continues the work in #413.
Continues the work in #448.

Essentially, the silo was already largely handling this logic correctly. I merely simplified a couple of places, to make more clear what will actually happen. At a high level:
1) Once silo is shutting down, it first updates its membership state. This will cause all other silos not to place new activation on it, not to use this silo as grain directory and not as reminder service. This logic was already handled correctly before. No change.
2) Silo refuses to create any new activations, throws Non-existent activation and tries to forward the request. The activation will be placed on a different silo. This is a new bit added in this PR..
3) Silo starts to deactivate all activations. 
4) Any new requests that arrive to activations on that silo will be queued and after activation is deactivated, they will be forwarded to a new activation. There is no change in that logic.
</Description>
    <CreatedDate>28/05/2015</CreatedDate>
    <ClosedDate>01/06/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>381</IssueID>
        <Title>properly handle VB Global namespace in DeclaredSymbolInfo</Title>
        <Description>When walking the syntax trees to find DeclaredSymbolInfos, I missed a case where VB can have "Namespace Global".  Functionally this is no different than hitting the default case of the Select where I also Return Nothing, but it's a lot nicer to not have asserts :smile:.
</Description>
        <CreatedDate>10/02/2015</CreatedDate>
        <ClosedDate>11/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>320</IssueID>
        <Title>Possible bug in Batch Fixer merge algorithm</Title>
        <Description>We have a code fix that uses the batch fixer to provide support for correcting all instances of a particular style problem in a document/project/solution. Even though each correction is made to a distinct `ExpressionSyntax` node in the source tree, the batch fixer fails to properly merge two changes in a particular scenario.

The problem is described (with example input/output) in the following issue:
https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/466
</Description>
        <CreatedDate>09/02/2015</CreatedDate>
        <ClosedDate>27/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>413</IssueID>
        <Title>Visual studio crashes while typing inside expression nuggets in C# websites</Title>
        <Description>1. With latest roslyn bits installed, open a new C# webforms website.
2. Add a new webform - default2.aspx
3. add below code inside `&lt;div&gt;`
   
   ```
    &lt;asp:Label ID="Label1" runat="server" Text="Label"&gt;&lt;/asp:Label&gt;
    &lt;%=Label1.$$%&gt;
   ```
4. When caret is at $$, type a few backspaces
5. VS crashes.

Here is the relevant stack trace: 

```
ArgumentNullException {"Value cannot be null.\r\nParameter name: path"}
   at Microsoft.CodeAnalysis.FileLinePositionSpan..ctor(String path, LinePositionSpan span) in E:\Roslyn\Main\Open\src\Compilers\Core\Portable\Diagnostic\FileLinePositionSpan.cs:line 80
   at Microsoft.CodeAnalysis.FileLinePositionSpan..ctor(String path, LinePosition start, LinePosition end) in E:\Roslyn\Main\Open\src\Compilers\Core\Portable\Diagnostic\FileLinePositionSpan.cs:line 66
   at Microsoft.VisualStudio.LanguageServices.Implementation.Diagnostics.VisualStudioVenusSpanMappingService.GetAdjustedDiagnosticSpan(DocumentId documentId, Location location, TextSpan&amp; sourceSpan, FileLinePositionSpan&amp; originalLineInfo, FileLinePositionSpan&amp; mappedLineInfo) in E:\Roslyn\Main\Open\Src\VisualStudio\Core\Def\Implementation\Diagnostics\VisualStudioVenusSpanMappingService.cs:line 53
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.GetLocationInfo(Document document, Location location, TextSpan&amp; sourceSpan, FileLinePositionSpan&amp; originalLineInfo, FileLinePositionSpan&amp; mappedLineInfo) in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticData.cs:line 332
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.Create(Document document, Diagnostic diagnostic) in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticData.cs:line 286
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.&lt;&gt;c__DisplayClass57_0.&lt;GetDiagnosticData&gt;b__1(Diagnostic d) in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticAnalyzerService.IncrementalAnalyzer.cs:line 804
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at System.Collections.Immutable.ImmutableArray.CreateRange[T](IEnumerable`1 items)
   at Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutableOrEmpty[T](IEnumerable`1 items) in E:\Roslyn\Main\Open\src\Compilers\Core\Portable\Collections\ImmutableArrayExtensions.cs:line 45
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.AnalyzerExecutor.&lt;GetSyntaxAnalysisDataAsync&gt;d__2.MoveNext() in E:\Roslyn\Main\Open\Src\Features\Core\Diagnostics\DiagnosticAnalyzerService.IncrementalAnalyzer.AnalyzerExecutor.cs:line 50
```
</Description>
        <CreatedDate>11/02/2015</CreatedDate>
        <ClosedDate>13/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>457</PullRequestID>
        <IssueID>448</IssueID>
        <Title>Bug: The new managed Expression Evaluator ignores DEBUGPROP_INFO_NOFUNCEVAL</Title>
        <Description>In _VS2010 and VS2012_, a consumer could call the debugger API's `IDebugProperty3.EnumChildren` passing in only the `DEBUGPROP_INFO_NAME` flag, to obtain only the names of the expressions,  without incurring the performance cost of the EE actually evaluating their values and performing func-evals. We've built a lot of functionality around this ability. 

In _VS2013_, this ability was broken. I reported it on [Connect ticket 813045](https://connect.microsoft.com/VisualStudio/feedback/details/813045/bug-in-new-managed-debug-engine-idebugproperty2s-children-are-func-evalled-when-value-was-not-requested), and was offered a workaround of using `DEBUGPROP_INFO_NOFUNCEVAL`, which works.

In _VS2015 CTP5_, both the original approach and the suggested workaround no longer work. 

To reproduce:
1. Run the  [scenario I described](https://connect.microsoft.com/VisualStudio/feedback/details/813045/bug-in-new-managed-debug-engine-idebugproperty2s-children-are-func-evalled-when-value-was-not-requested) in VS2015  instead of VS2013.
2. Apply the workaround suggested by Azeem Khan on the Connect case and re-run the scenario. 
   Observe that the workaround doesn't work in VS2015 CTP5.
3. Go into Tools-&gt;Options and check the "Use the legacy C# and VB expression evaluators" option. Re-run the scenario and observe that the workaround now works.
</Description>
        <CreatedDate>12/02/2015</CreatedDate>
        <ClosedDate>18/02/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>457</PullRequestID>
      <File>src/Compilers/CSharp/Test/Syntax/Syntax/SyntaxDiffingTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>422</IssueID>
    <RepoID>orleans</RepoID>
    <Title>Testing Host Part 3</Title>
    <Description>Fixes bug in Nightly test suite introduced by PR #408 

Failure case was: SMSDeactivationTest_ClientConsumer

Change:
- Need a different client config for testing client-side streams.

This PR replaces #420 and #421 which got into a bit of a mess!
</Description>
    <CreatedDate>16/05/2015</CreatedDate>
    <ClosedDate>16/05/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>422</PullRequestID>
        <IssueID>408</IssueID>
        <Title>Debug.Assert in WorkCoordinator</Title>
        <Description>I left a debug VS open overnight and came back to this. Dump is in the internal fileshare under dumps/408/

```
&gt;   Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetNodeName(Microsoft.CodeAnalysis.SyntaxNode node, Boolean includeTypeParameters) Line 897  Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetNodeName(Microsoft.CodeAnalysis.SyntaxNode node, Boolean includeTypeParameters) Line 883  Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetContainer(Microsoft.CodeAnalysis.SyntaxNode node, Boolean immediate) Line 832 Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.GetContainerDisplayName(Microsoft.CodeAnalysis.SyntaxNode node) Line 824 Basic
    Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxFactsService.TryGetDeclaredSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo declaredSymbolInfo) Line 718  Basic
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeInfo.CreateInfoAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 163    C#
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeInfo.PrecalculateBasicInfoAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 62  C#
    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeInfo.PrecalculateAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 29   C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.IncrementalCaches.SyntaxTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.AnalyzeSyntaxAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) Line 23   C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.ProcessDocumentAnalyzersAsync.AnonymousMethod__24_0(Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer a, Microsoft.CodeAnalysis.Document d, System.Threading.CancellationToken c) Line 147 C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync.AnonymousMethod__0(T v, System.Threading.CancellationToken c) Line 174 C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.GetOrDefaultAsync&lt;TData, TResult&gt;(TData value, System.Func&lt;TData, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;TResult&gt;&gt; funcAsync, System.Threading.CancellationToken cancellationToken) Line 217    C#
    Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.WorkCoordinatorRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync&lt;T&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, T value, System.Func&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, T, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; runnerAsync, System.Threading.CancellationToken cancellationToken) Line 172   C#
```
</Description>
        <CreatedDate>11/02/2015</CreatedDate>
        <ClosedDate>11/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>422</PullRequestID>
        <IssueID>420</IssueID>
        <Title>What language proposals would benefit from CLR changes?</Title>
        <Description>If we were to plan for one language feature that requires a revision of the CLR, then we might as well do as many of them at the same time as make sense. What changes would we consider for C# 7 and VB 15 that would benefit from CLR support? See #166 for related discussion. This is a pared-down list for us to select from.
1. Virtual extension methods (see #73, #258)
2. Generic constraints about static methods or constructors (see also #129, #154).
3. Array slicing (see #120)
4. Language support for tuples (see #347) and function types (no issue yet) might benefit from CLR unification across assemblies.
5. Traits (see #60) aka structural interfaces (see #154) or mixins (no issue yet)

Those that we would likely _not_ do in this timeframe include
1. Make void a first-class type with one value; see #234 (Suggested by @ashmind) (Given how long the CLR has been around, it is probably too late for APIs to benefit, as those that would benefit most have already been written)
2. Covariance and contravariance for classes (see #171)
3. Allow |, &amp;, and ~ operators on a type parameter with the enum constraint (see #262)
4. Intersection types (#2146, though likely not that syntax) and/or union types.
5. Support generic indexers (see #523)
6. Higher-kinded polymorphism (see #2212)
</Description>
        <CreatedDate>12/02/2015</CreatedDate>
        <ClosedDate>22/03/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>422</PullRequestID>
        <IssueID>421</IssueID>
        <Title>Progression should properly descend into types for IntelliTrace MVC queries</Title>
        <Description>When BeginGetGraphData() (in GraphProvider.cs) was migrated from the old code, a query type of the format {Direction=Target, LinkCategories=[Contains]} was missed that IntelliTrace produced when it wanted us to descend into types.
</Description>
        <CreatedDate>12/02/2015</CreatedDate>
        <ClosedDate>12/02/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>422</PullRequestID>
      <File>src/Test/Utilities/HostedRuntimeEnvironment.cs</File>
    </Files>
  </PullRequest>
</PullRequests>