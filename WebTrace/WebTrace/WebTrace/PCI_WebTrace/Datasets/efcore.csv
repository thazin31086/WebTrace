IssueID,Title,Description,Title_Description,PullRequestID,FixedByID,RepoID
11961,Scaffold-DbContext not correctly configuring auto incrementing primary key in from Sqlite database,"I'm using EF.Core scaffold to create a datamodel for a DB with an auto increment primary key but the context is being generated with the key annotated with ValueGeneratedNever() instead of ValueGeneratedOnAdd().  As a result EF framework requires each record to have a primary key set instead of allowing the DB to set it.

### Steps to reproduce

Create an SQLite DB with this table:

```sql
CREATE TABLE ""LastSyncTime"" 
( 
    `ID` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, 
    `SyncTime` TEXT NOT NULL, 
    `TableUpdated` TEXT NOT NULL 
)
```

In the package manager console run:  

```
Scaffold-DbContext ""DataSource=MyDatabase.sqlite;"" Microsoft.EntityFrameworkCore.Sqlite -OutputDir Models -force
```

Examine the context class, it generates with:

```c#
modelBuilder.Entity<LastSyncTime>(entity =>
{
    entity.HasIndex(e => e.Id)
        .IsUnique();

    entity.Property(e => e.Id)
        .HasColumnName(""ID"")
        .ValueGeneratedNever();

    entity.Property(e => e.SyncTime).IsRequired();

    entity.Property(e => e.TableUpdated).IsRequired();
});
```

ValueGeneratedNever() should be ValueGeneratedOnAdd()

### Further technical details
EF Core version: (found in project.csproj or packages.config) 2.1.0-rc1-final  (also happens in 2.0.2)
Database Provider: (e.g. Microsoft.EntityFrameworkCore.Sqlite)
Operating system:  Win 10 1709
IDE: (e.g. Visual Studio 2017 15.6.3)
",Scaffold-DbContext not correctly configuring auto incrementing primary key in from Sqlite database  I'm using EF.Core scaffold to create a datamodel for a DB with an auto increment primary key but the context is being generated with the key annotated with,20063,bricelam,efcore
19920,SQLite RevEng: Error when minimal foreign key specified,"``` sql
create table test (
    id integer primary key,
    parentId integer references test
);
```
```
InvalidOperationException: The data is NULL at ordinal 1. This method can't be called on NULL values. Check using IsDBNull before calling.
   at Microsoft.Data.Sqlite.SqliteValueReader.GetString(Int32 ordinal)
   at Microsoft.Data.Sqlite.SqliteDataReader.GetString(Int32 ordinal)
   at Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory.GetForeignKeys(DbConnection connection, DatabaseTable table, IList`1 tables)+MoveNext()
   at Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory.Create(DbConnection connection, DatabaseModelFactoryOptions options)
   at Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory.Create(String connectionString, DatabaseModelFactoryOptions options)
```

EF Core version: 3.1.2","SQLite RevEng: Error when minimal foreign key specified  ``` sql
create table test (
    id integer primary key,
    parentId integer references test
);
```
```
InvalidOperationException: The data is NULL at ordinal 1. This method can't be called o",20063,bricelam,efcore
17270,"To vs From methods: Proposal to rationalize ToTable, ToQuery, ToView, FromSql, and other related methods","## Problems
1. Predicting what the outcome for the query, update and DDL pipelines is when a combination of ToTable, ToView and ToQuery is used requires understanding a growing set of arbitrary rules. 
2. There are scenarios that we want to support with the current combinations that actually aren't possible. For example:
   1. We want to re-enable using defining query with keyed entity types which brings back the question of what happens with the update pipeline by default
   2. We want to allow configuring a table to be used for CUD operations and as the root of the defining query (e.g. the defining query only adds a filter and sort order), and have the table still created by the DDL pipeline.
   3. Allow a table to be used for CUD operations but a different object, for example a view, to be used for queries (#15671), and still get the table created by migrations or `EnsureCreated`.
3. We also have a desire to extend EF Core to allow mapping entities in new ways, many of which are going to require new API surface that is also going to interact with the existing one, resulting in even more combinations and more rules. For example:
   1. Support for mapping to stored procedures for updates and possible query (#245)
   2. A more terse API for creating defining queries based on raw SQL (#17063)
   3. A way to specify a _null_ mapping, so that the query pipeline throws unless the user provides ad-hoc SQL in the LINQ query (https://github.com/aspnet/EntityFrameworkCore/issues/3932#issuecomment-419770662).
4. There is currently a mismatch between the naming patterns used to specify mappings in the model (most methods start with `To`) and ad-hoc mappings in queries (methods start with `From`). This obviously affects the existing methods but it would be good to have a coherent story if we want to add more, like a `FromTable` method you can use directly in queries.

## Examples
Right now what needs to happen when you call two methods like `ToTable` and `ToQuery` on the same entity type isn't clear. 

In general, it is desirable that when and entity is configured with `ToTable`, it  affects what the query pipeline, the update pipeline and the DDL pipeline for that entity. But when `ToQuery` is also applied, the simplest and most useful behavior seems to be that the latter will only override what happens with the query pipeline.  

Here the defining query references `People` which is the `DbSet<Person>` just to add an `OrderBy` call:

``` csharp
modelBuilder.Entity<Person>().HasNoKey();
modelBuilder.Entity<Person>().ToTable(""Guests"");
modelBuilder.Entity<Person>().ToQuery(() => this.People.OrderBy(p => p.Name));
``` 

Ideally this should mean that:

1. For the query pipeline, when `context.People.ToList()` is executed, this will generate the following SQL:

``` sql
SELECT [g]
FROM [Guests] AS [g]
ORDER BY [g].[Name]
```

2. For the update pipeline, CUD operations will be generated against `Guests`.

3. In the DDL pipeline (Migrations and EnsureCreated) will still create the table `Guests`. But currently any entity that has a defining query configured is ignored by the DDL pipeline. That is, the table won't be created, and there is no way to override that.

There have been similar request from customers to be able to compose `ToTable` and `ToView`, so that if both are used together, ToView only applies to the query pipeline, and `ToTable` to the update pipeline and DDL.

 ## Proposal

a. We slightly bend the semantics of `To` as used in APIs like `ToTable` to specify:
1. Primarily, the database object to which instances of that entity type will be persisted.
2. By convention (e.g. unless it is overridden by configuration), the database object from which instances of that type should be retrieved from.
3. Also by convention, the database object that the DDL pipeline should take care of creating.

b. We start adding `From*`, e.g. `FromSql`, `FromTable`, `FromQuery`, `FromView` that are used only to configure the way instances of a type should be retrieved (e.g. the mapping used by the query pipeline), without affecting the other two aspects.

c. We add the ability to configuring a null mapping, either through a new API or through calling `ToTable(null)` .

d. We add public API to ignore parts of the model in the DDL pipeline (#2725). That is, so that elements can be configured as declared but not defined in the EF Core model. E.g. `IsExtern()` or whatever name we choose.

e. We decide what to do with the other existing `To*`  methods on a case-by-case basis: 
1. Some of them may become obsolete if they are incoherent and not useful.
2. Some of them may be kept if they can be expressed using the building blocks listed above. For example, the current version of `ToView` which doesn't allow a definition of the view to be passed, implies by convention to use the same object for the update pipeline and to ignore the object for the purpose of migrations (e.g. `IsExtern(true)`).

f. For store procedure mapping, also consider how we can leverage the building blocks above. In the past we have got a lot of feedback on the value of having fine-grained mappings, for instance, be able to configure that UPDATEs should go trough a stored procedures while other operations still go through other conventional or explicitly configured mappings. While at the same time, there is value in being able to in a single call configure all CUD operations to stored procedures with by-convention names. But should this override the mapping for the query pipeline, or should we still go by the default table name unless explicitly configured with `FromQuery` or `FromSql`?.","To vs From methods: Proposal to rationalize ToTable, ToQuery, ToView, FromSql, and other related methods  ## Problems
1. Predicting what the outcome for the query, update and DDL pipelines is when a combination of ToTable, ToView and ToQuery is used requ",20054,AndriySvyryd,efcore
15671,Support separation of query and update mapping,"Copied from my StackOverflow post.

> Consider the model below. I have an `Order` class and an `OrderLine` class. The `Order.TotalAmount` is calculated through a view which performs an `OUTER APPLY` across all the `Order.OrderLines`.
> 
> ```csharp
>     [Table(""SelectOrder"")]
>     public class Order
>     {
>     	public decimal TotalAmount { get; set; }
>     	
>     	public virtual ICollection<OrderLine> OrderLines { get; set; }
>     }
>     
>     [Table(""SelectOrderLine"")]
>     public class OrderLine
>     {
>     	public decimal Amount { get; set; }
>     	
>     	public virtual Order Order { get; set; }
>     }
> ```
> 
> I have decorated my classes with the `TableAttribute` to enable Entity Framework Core to get the data from the views to the entity. The `TableAttribute` actually points to the view instead.
> 
> Now I would like to perform inserts, updates and deletes. This poses a problem as it's not possible to use a view with an `OUTER APPLY` for these changes. I've tried using query types for this but you cannot define an entity as both a query type and an entity type. Doing so results in an error for me. So adding a `TableAttribute` with the actual table e.g. `Order` in combination with `modelBuilder.Query<Order>().ToView(""SelectOrder"");` does not work.
> 
> I could create a separate class SelectOrder which is mapped to the view and map my Order entity to the table. Or I could build a custom attribute and perform some custom SQL generation by overriding the `SqlServerQuerySqlGenerator`.
> 
> But before I go down these roads... Is it really not possible to map an entity to both a view for selects and a table for inserts, updates and deletes?

I've since gone through the code and noticed that SqlServerQuerySqlGenerator is not used to generate non-SELECT queries, am I correct? So I'm left with adjusting the code to a custom EF Core version and add a ViewAttribute which it uses during `INSERT INTO SELECT ... FROM` generation or multiple classes which is the least preferred option by the person pulling my strings. Is there nothing better?","Support separation of query and update mapping  Copied from my StackOverflow post.

> Consider the model below. I have an `Order` class and an `OrderLine` class. The `Order.TotalAmount` is calculated through a view which performs an `OUTER APPLY` across",20054,AndriySvyryd,efcore
19687,SQLite: Incorrect result for modulo (%) on REAL values,SQLite always performs integer arithmetic for the modulo operator. This means that results will be very different from .NET on `double` and `float` values. We should consider blocking the SQL translation of this operator or enabling it via a UDF.,SQLite: Incorrect result for modulo (%) on REAL values  SQLite always performs integer arithmetic for the modulo operator. This means that results will be very different from .NET on `double` and `float` values. We should consider blocking the SQL transla,20024,bricelam,efcore
19635,SQLite: Enable Decimal,"Similar to PR #19617, we can enable more decimal operations by leveraging UDFs. Unlike TimeSpan, however, there isn't an acceptable type we can convert to to perform the operations, so it will require roughly one UDF per operation. For example:

Done | .NET | SQL
--- | --- | ---
&nbsp; | m1 + m2 | ef_add($m1, $m2)
&nbsp; | m1 / m2 | ef_divide($m1, $m2)
&nbsp; | m1 > m2 | ef_compare($m1, $m2) > 0
&nbsp; | m1 >= m2 | ef_compare($m1, $m2) >= 0
&nbsp; | m1 < m2 | ef_compare($m1, $m2) < 0
&nbsp; | m1 <= m2 | ef_compare($m1, $m2) <= 0
✔ | m1 % m2 | ef_mod($m1, $m2)
&nbsp; | m1 * m2 | ef_multiply($m1, $m2)
&nbsp; | m1 - m2 | ef_add($m1, ef_negate($m2))
&nbsp; | -m | ef_negate($m)
&nbsp; | Average(t => t.Decimal) | ef_avg(t.Decimal)
&nbsp; | Max(t => t.Decimal) | ef_max(t.Decimal)
&nbsp; | Min(t => t.Decimal) | ef_min(t.Decimal)
&nbsp; | Sum(t => t.Decimal) | ef_sum(t.Decimal)","SQLite: Enable Decimal  Similar to PR #19617, we can enable more decimal operations by leveraging UDFs. Unlike TimeSpan, however, there isn't an acceptable type we can convert to to perform the operations, so it will require roughly one UDF per operation.",20024,bricelam,efcore
12462,Stop configuring lazy-loading for properties that will always be eager-loaded,"For example, for owner to owned navigation properties in aggregates.

See also https://github.com/aspnet/EntityFrameworkCore/issues/10787#issuecomment-399989313","Stop configuring lazy-loading for properties that will always be eager-loaded  For example, for owner to owned navigation properties in aggregates.

See also https://github.com/aspnet/EntityFrameworkCore/issues/10787#issuecomment-399989313",20015,lajones,efcore
19847,Lazy-loading of an owned entity throws,"When I Update an entity's owned type to null, then do Detect Changes. after that read the navigation property, it throws InvalidOperationException: ""A tracking query projects owned entity without corresponding owner in result. Owned entities cannot be tracked without their owner. Either include the owner entity in the result or make query non-tracking using AsNoTracking()."";

If I set the naviation poperty to another instance which is not null,I can read it successfully.
by the way.when when lazy loading is not used, I can read it as null well.

### Steps to reproduce

``` C#
public class Order
{
    public int Id { get; set; }
    public StreetAddress? ShippingAddress { get; set; }
}

[Owned]
public class StreetAddress
{
    public string Street { get; set; }
    public string City { get; set; }
}

public class TestDbContext : DbContext
{
    public DbSet<Order> Orders {get;set;}

    protected override void OnConfiguring(DbContextOptionsBuilder options)
    {
        options.UseLazyLoadingProxies();
    }
}

using (var context = new TestDbContext())
{
      // seed order with non-null ShippingAddress.
      context.Orders.Add(new Order {Id = 1, ShippingAddress = new ShippingAddress {Street =""a"", City = ""b""}});
     context.SaveChanges();
}

//  update ShippingAddress  to null will throw the InvalidOperationException.
using (var context = new TestDbContext())
{
    var order = context.Orders.First();
    //  set ShippingAddress to null.
    order.ShippingAddress = null;
    context.Attach(order);
    context.Update(order);
    Console.WriteLine(order.ShippingAddress);  //  prints null.
    context.ChangeTracker.DetectChanges();
    Console.WriteLine(order.ShippingAddress); // will throw an exception.
}

//  update ShippingAddress  to non-null will not throw the InvalidOperationException.
using (var context = new TestDbContext())
{
    var order = context.Orders.First();
    //  set ShippingAddress to non-null.
    order.ShippingAddress = new ShippingAddress{Street =""c"", City = ""d""};
    context.Attach(order);
    context.Update(order);
    Console.WriteLine(order.ShippingAddress);  //  prints updated ShippingAddress.
    context.ChangeTracker.DetectChanges();
    Console.WriteLine(order.ShippingAddress);  //  prints updated ShippingAddress without the invalid operation exception
}

```

### Further technical details

EF Core version:3.1.1
Database provider: Microsoft.EntityFrameworkCore.SqlServer
Target framework: netcoreapp3.1
Operating system: windows 10
IDE: Visual Studio 2019 16.3","Lazy-loading of an owned entity throws  When I Update an entity's owned type to null, then do Detect Changes. after that read the navigation property, it throws InvalidOperationException: ""A tracking query projects owned entity without corresponding owner",20015,lajones,efcore
19246,Suggestion: add attribute to make type keyless,"Now ViewModel（ReonlyModel） It can only be set through the fluent API.
I want to attribute that the entity is read-only through the feature.

To avoid having to call `HasNoKey`.","Suggestion: add attribute to make type keyless  Now ViewModel（ReonlyModel） It can only be set through the fluent API.
I want to attribute that the entity is read-only through the feature.

To avoid having to call `HasNoKey`.",20011,smitpatel,efcore
19964,Test binaries compiled on windows fail on linux platform,"Line ending differences
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Design.Tests.dll/console
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.InMemory.FunctionalTests.dll/console
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Sqlite.FunctionalTests.dll/console
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Tests.dll/console","Test binaries compiled on windows fail on linux platform  Line ending differences
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Design.Tests.dll/console
https://helix.dot.net/api/2",20011,smitpatel,efcore
19964,Test binaries compiled on windows fail on linux platform,"Line ending differences
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Design.Tests.dll/console
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.InMemory.FunctionalTests.dll/console
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Sqlite.FunctionalTests.dll/console
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Tests.dll/console","Test binaries compiled on windows fail on linux platform  Line ending differences
https://helix.dot.net/api/2019-06-17/jobs/262e6f29-3aef-4972-92f8-ce5b4952ed89/workitems/Microsoft.EntityFrameworkCore.Design.Tests.dll/console
https://helix.dot.net/api/2",19917,smitpatel,efcore
19857,Run EF Core C.I. tests on Helix,To align with ASP.NET and take advantage of the data gathering and analysis that is being done.,Run EF Core C.I. tests on Helix  To align with ASP.NET and take advantage of the data gathering and analysis that is being done.,19917,smitpatel,efcore
19203,Detaching an entity results in modify references,"I disable AutoDetectChanges and load some related records from different tables. When I detach some entity, all references to it are automatically nullified.
Everything worked well on EF Core 2.*.

### Steps to reproduce

``` C#
public class Class1 {
	public long Id { get; set; }
	public long? Class2Id { get; set; }
	public Class2 Class2 { get; set; }
}
	
public class Class2 {
	public long Id { get; set; }
}
...
public void TestMethod() {
	using(var db = new MyContext()) {
		db.ChangeTracker.AutoDetectChangesEnabled = false;
		var t1 = db.Class1.Include(m => m.Class2).FirstOrDefault();
		
		...
		// db.Entry(t1).State - Unchanged
		
		// detaching sub entity
		db.Entry(t1.Class2).State = EntityState.Detached;
		
		// result: 
		// db.Entry(t1).State - Modified
		// db.Entry(t1).Reference(m => m.Class2) - IsModified = true
		// db.Entry(t1).Property(m => m.Class2Id) - IsModified = true
	}
}

```


### Further technical details

EF Core version: 3.1.0
Database provider: Microsoft.EntityFrameworkCore.SqlServer
Target framework: NET Core 3.1
Operating system: Windows 10
IDE: Visual Studio 2019 16.4","Detaching an entity results in modify references  I disable AutoDetectChanges and load some related records from different tables. When I detach some entity, all references to it are automatically nullified.
Everything worked well on EF Core 2.*.

###",19911,ajcvickers,efcore
19137,Clearing a nullable foreign key field throws exception,"<!-- Describe what isn't working as expected -->
I have a simple database model with two objects. The first (Foo) contains an optional reference to the second (Bar). An exception is thrown if I try these updates:

1. Generate a new Foo without a Bar
2. Set Foo's Bar to some Bar
3. Clear Foo's Bar again

The last step produces a foreign key violation, as EF Core tries to insert a large negative value (-2147482647) instead of null. At first guess, this is a temporary value generated when first creating a Foo without a Bar.

### Steps to reproduce

#### Model
``` C#
public class Foo
{
	public int Id { get; set; }
	public Bar Bar { get; set; }
}

public class Bar
{
	public int Id { get; set; }
}
``` 

#### DbContext
``` C#
public class Context : DbContext
{
	public virtual DbSet<Foo> Foos { get; set; }

	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	{
		optionsBuilder.UseNpgsql(@""Server=localhost;Database=test;UserId=test;Password=test;"");
	}

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Foo>(e =>
		{
			e.HasKey(x => x.Id);
			e.Property(x => x.Id).ValueGeneratedOnAdd();

			e.ToTable(""Foos"");
		});

		modelBuilder.Entity<Bar>(e =>
		{
			e.HasKey(x => x.Id);
			e.Property(x => x.Id).ValueGeneratedOnAdd();

			e.ToTable(""Bars"");
		});
	}
}
```

#### Migration generated
``` C#
migrationBuilder.CreateTable(
	name: ""Bars"",
	columns: table => new
	{
		Id = table.Column<int>(nullable: false)
			.Annotation(""Npgsql:ValueGenerationStrategy"", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
	},
	constraints: table =>
	{
		table.PrimaryKey(""PK_Bars"", x => x.Id);
	});

migrationBuilder.CreateTable(
	name: ""Foos"",
	columns: table => new
	{
		Id = table.Column<int>(nullable: false)
			.Annotation(""Npgsql:ValueGenerationStrategy"", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
		BarId = table.Column<int>(nullable: true)
	},
	constraints: table =>
	{
		table.PrimaryKey(""PK_Foos"", x => x.Id);
		table.ForeignKey(
			name: ""FK_Foos_Bars_BarId"",
			column: x => x.BarId,
			principalTable: ""Bars"",
			principalColumn: ""Id"",
			onDelete: ReferentialAction.Restrict);
	});

migrationBuilder.CreateIndex(
	name: ""IX_Foos_BarId"",
	table: ""Foos"",
	column: ""BarId"");
```

#### Program logic
``` C#
var context = new Context();
var foo = new Foo();

context.Foos.Add(foo);
await context.SaveChangesAsync();	//Foo added with empty foreign key
	
foo.Bar = new Bar();
await context.SaveChangesAsync();	//Foreign key set

foo.Bar = null;
await context.SaveChangesAsync();	//Foreign key cleared, exception thrown
```

#### Exception thrown
```
Unhandled exception. Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while updating the entries. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table ""Foos"" violates foreign key constraint ""FK_Foos_Bars_BarId""
   at Npgsql.NpgsqlConnector.<>c__DisplayClass160_0.<<DoReadMessage>g__ReadMessageLong|0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Npgsql.NpgsqlConnector.<>c__DisplayClass160_0.<<DoReadMessage>g__ReadMessageLong|0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming)
   at Npgsql.NpgsqlCommand.ExecuteReaderAsync(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table ""Foos"" violates foreign key constraint ""FK_Foos_Bars_BarId""
    Detail: Key (BarId)=(-2147482647) is not present in table ""Bars"".
    SchemaName: public
    TableName: Foos
    ConstraintName: FK_Foos_Bars_BarId
    File: d:\pginstaller_12.auto\postgres.windows-x64\src\backend\utils\adt\ri_triggers.c
    Line: 2474
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
```



### Further technical details

EF Core version: 3.0.1
Database provider: Npgsql.EntityFrameworkCore.PostgreSQL
Target framework: .NET Core 3.0
Operating system: Windows 10
IDE: JetBrains Rider 2019.2.3","Clearing a nullable foreign key field throws exception  <!-- Describe what isn't working as expected -->
I have a simple database model with two objects. The first (Foo) contains an optional reference to the second (Bar). An exception is thrown if I try",19911,ajcvickers,efcore
18982,Detaching an entity results in related entities being deleted,"EF Core 3.0.1

I insert an object along with related objects. Then I set the state of the object to ""Detached"". I then perform another call to `.SaveChangesAsync()`.

Observed behavior: the related objects are deleted.
Expected behavior: the related objects should not be deleted; rather their tracking status should simply be set to ""Detached"".

(This is a breaking change since upgrading from EF Core 2.2.4)


### Steps to reproduce

```
    public class Thing
    {
        [Key]
        public Guid ThingId { get; set; }
        [MaxLength(200)]
        public string Description { get; set; }
        public List<OwnedByThing> OwnedByThings { get; set; } = new List<OwnedByThing>();
    }

    public class OwnedByThing
    {
        [Key]
        public Guid OwnedByThingId { get; set; }
        public Guid ThingId { get; set; }
        public Thing Thing { get; set; }
        public int Value { get; set; }
    }

            await using var db = new MyDbContext();
            var thing = new Thing
            {
                Description = ""Hello world thing"",
                OwnedByThings = new List<OwnedByThing>
                {
                    new OwnedByThing {Value = 1},
                    new OwnedByThing {Value = 2}
                }
            };

            db.Things.Add(thing);
            await db.SaveChangesAsync();

            var thingCount = await db.Things.CountAsync(e => e.ThingId == thing.ThingId);
            Assert.AreEqual(1, thingCount, ""Thing Count A"");
            var ownedCount = await db.OwnedByThings.CountAsync(e => e.ThingId == thing.ThingId);
            Assert.AreEqual(2, ownedCount, ""Owned count A"");

            db.Entry(thing).State = EntityState.Detached;
            await db.SaveChangesAsync();
            
            thingCount = await db.Things.CountAsync(e => e.ThingId == thing.ThingId);
            Assert.AreEqual(1, thingCount, ""Thing Count B"");
            ownedCount = await db.OwnedByThings.CountAsync(e => e.ThingId == thing.ThingId);
            Assert.AreEqual(2, ownedCount, ""Owned count B"");
```
Result:
``` 
  Owned count B
  Expected: 2
  But was:  0
```

### Further technical details

EF Core version: 3.0.1
Database provider: Npgsql
Target framework:.NET Core 3.0
Operating system: Windows 10 Pro
IDE: JetBrains Rider","Detaching an entity results in related entities being deleted  EF Core 3.0.1

I insert an object along with related objects. Then I set the state of the object to ""Detached"". I then perform another call to `.SaveChangesAsync()`.

Observed behavior: th",19911,ajcvickers,efcore
16546,PropertyValues.SetValues(obj) causes DELETE instead of UPDATE,"Describe what is not working as expected.
`DELETE FROM [ContainerRooms] WHERE [Id] = ...;`
instead of
`UPDATE [ContainerRooms] SET [ProductId] = NULL WHERE [Id] = ...;`

### Steps to reproduce
[Eval.EFCore.DeleteInsteadUpdate.zip](https://github.com/aspnet/EntityFrameworkCore/files/3377516/Eval.EFCore.DeleteInsteadUpdate.zip)

Schema:
`Container` 1-n `ContainerRoom` n-1 `Product`
```c#
modelBuilder.Entity<ContainerRoom>()
    .HasOne(room => room.Product)
    .WithMany(product => product.Rooms)
    .HasForeignKey(room => room.ProductId)
    .IsRequired(false)
    .OnDelete(DeleteBehavior.Cascade)
    ;
```
Assume the following use case (where the room will be emptied):
```c#
var detachedRoom = detachedContainer.Rooms.First();
// Prepare update (remove product from room).
detachedRoom.Product = null;
detachedRoom.ProductId = null;

var attachedRoom = attachedContainer.Rooms.Single();
Console.WriteLine($""Before update: {db.Entry(attachedRoom).State}""); // Unchanged
// Update.
//attachedRoom.ProductId = null;
//attachedRoom.Product = null;
db.Entry(attachedRoom).CurrentValues.SetValues(detachedRoom);

Console.WriteLine($""After update: {db.Entry(attachedRoom).State}""); // Modified
await db.SaveChangesAsync(); // DELETE FROM [ContainerRooms] WHERE [Id] = @p0; ???
Console.WriteLine($""After persist: {db.Entry(attachedRoom).State}""); // Detached :-(
```
**Instead of updating the  `ContainerRoom` it will be deleted!**

### Workaround
```c#
attachedRoom.ProductId = null;
attachedRoom.Product = null;
await db.SaveChangesAsync(); // UPDATE [ContainerRooms] SET [ProductId] = @p0 WHERE [Id] = @p1;
```

### Further technical details
EF Core version: 2.2.6
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: Visual Studio 2019, Version 16.1.6","PropertyValues.SetValues(obj) causes DELETE instead of UPDATE  Describe what is not working as expected.
`DELETE FROM [ContainerRooms] WHERE [Id] = ...;`
instead of
`UPDATE [ContainerRooms] SET [ProductId] = NULL WHERE [Id] = ...;`

### Steps to repr",19911,ajcvickers,efcore
12846,Create a consistent relational model API,"Add a new API that allows to configure and read relational mapping information. Adding this abstraction layer would allow to make the mapping more flexible and the implementation more efficient without additional changes to the consumers.

Some examples of queries that would benefit from this:
- Get all columns for a table
- Get all entity types mapped to a table
- Get all properties mapped to a column
- Get the database object that a navigation/relationship is mapped to

New mapping scenarios that this would be allow:
- Mapping an entity type to more than one table
- Different relational configuration for properties mapped to more than one column
- Different mapping for migrations, query and update pipeline

Tasks:
- [x] Add metadata implementation
- [x] Port migrations
- [x] Port update pipeline
- [x] Port query",Create a consistent relational model API  Add a new API that allows to configure and read relational mapping information. Adding this abstraction layer would allow to make the mapping more flexible and the implementation more efficient without additional,19896,AndriySvyryd,efcore
2725,Ability to exclude/skip/ignore parts of the model from migrations so that a table is not created (for overlapping bounded contexts),"I suggest having an attribute that can be applied to DbSet properties in a DbContext, which indicates whether or not to include them in the migration scaffolding process.

An example use case is when part of an application's database is replicated from another environment.  Replicated entities will be included in the same DbContext as custom-developed entities so they can be queried. During development many migrations may be performed. Each time a migration is scaffolded, the replicated entities will be added to the migration, and then must be removed manually.

If an attribute only used for EF commands is too polluting to include in the DbContext, some alternatives might be: an additional config file that can be specified on the command line listing which entities should be excluded. Or perhaps additional command line arguments that allow a migration to be generated for specified entities only instead of scanning and comparing all entities.

Also consider the scenario of inherited models when looking at this feature https://github.com/aspnet/EntityFramework/issues/5572","Ability to exclude/skip/ignore parts of the model from migrations so that a table is not created (for overlapping bounded contexts)  I suggest having an attribute that can be applied to DbSet properties in a DbContext, which indicates whether or not to in",19896,AndriySvyryd,efcore
8258,Create a read-optimized implementation of IModel,"This `IModel` will be built after the model is validated and will not have the `ConfigurationSource` or other data used only during model building.

The builder will be a convention so providers can have a derived implementation or another convention that runs prior.

To provide the optimized implementations default interface implementations are to be used, see https://github.com/aspnet/EntityFramework/issues/19213

Add an option to precompute all runtime values eagerly, this would also affect the relational model.","Create a read-optimized implementation of IModel  This `IModel` will be built after the model is validated and will not have the `ConfigurationSource` or other data used only during model building.

The builder will be a convention so providers can have",19896,AndriySvyryd,efcore
15671,Support separation of query and update mapping,"Copied from my StackOverflow post.

> Consider the model below. I have an `Order` class and an `OrderLine` class. The `Order.TotalAmount` is calculated through a view which performs an `OUTER APPLY` across all the `Order.OrderLines`.
> 
> ```csharp
>     [Table(""SelectOrder"")]
>     public class Order
>     {
>     	public decimal TotalAmount { get; set; }
>     	
>     	public virtual ICollection<OrderLine> OrderLines { get; set; }
>     }
>     
>     [Table(""SelectOrderLine"")]
>     public class OrderLine
>     {
>     	public decimal Amount { get; set; }
>     	
>     	public virtual Order Order { get; set; }
>     }
> ```
> 
> I have decorated my classes with the `TableAttribute` to enable Entity Framework Core to get the data from the views to the entity. The `TableAttribute` actually points to the view instead.
> 
> Now I would like to perform inserts, updates and deletes. This poses a problem as it's not possible to use a view with an `OUTER APPLY` for these changes. I've tried using query types for this but you cannot define an entity as both a query type and an entity type. Doing so results in an error for me. So adding a `TableAttribute` with the actual table e.g. `Order` in combination with `modelBuilder.Query<Order>().ToView(""SelectOrder"");` does not work.
> 
> I could create a separate class SelectOrder which is mapped to the view and map my Order entity to the table. Or I could build a custom attribute and perform some custom SQL generation by overriding the `SqlServerQuerySqlGenerator`.
> 
> But before I go down these roads... Is it really not possible to map an entity to both a view for selects and a table for inserts, updates and deletes?

I've since gone through the code and noticed that SqlServerQuerySqlGenerator is not used to generate non-SELECT queries, am I correct? So I'm left with adjusting the code to a custom EF Core version and add a ViewAttribute which it uses during `INSERT INTO SELECT ... FROM` generation or multiple classes which is the least preferred option by the person pulling my strings. Is there nothing better?","Support separation of query and update mapping  Copied from my StackOverflow post.

> Consider the model below. I have an `Order` class and an `OrderLine` class. The `Order.TotalAmount` is calculated through a view which performs an `OUTER APPLY` across",19896,AndriySvyryd,efcore
17270,"To vs From methods: Proposal to rationalize ToTable, ToQuery, ToView, FromSql, and other related methods","## Problems
1. Predicting what the outcome for the query, update and DDL pipelines is when a combination of ToTable, ToView and ToQuery is used requires understanding a growing set of arbitrary rules. 
2. There are scenarios that we want to support with the current combinations that actually aren't possible. For example:
   1. We want to re-enable using defining query with keyed entity types which brings back the question of what happens with the update pipeline by default
   2. We want to allow configuring a table to be used for CUD operations and as the root of the defining query (e.g. the defining query only adds a filter and sort order), and have the table still created by the DDL pipeline.
   3. Allow a table to be used for CUD operations but a different object, for example a view, to be used for queries (#15671), and still get the table created by migrations or `EnsureCreated`.
3. We also have a desire to extend EF Core to allow mapping entities in new ways, many of which are going to require new API surface that is also going to interact with the existing one, resulting in even more combinations and more rules. For example:
   1. Support for mapping to stored procedures for updates and possible query (#245)
   2. A more terse API for creating defining queries based on raw SQL (#17063)
   3. A way to specify a _null_ mapping, so that the query pipeline throws unless the user provides ad-hoc SQL in the LINQ query (https://github.com/aspnet/EntityFrameworkCore/issues/3932#issuecomment-419770662).
4. There is currently a mismatch between the naming patterns used to specify mappings in the model (most methods start with `To`) and ad-hoc mappings in queries (methods start with `From`). This obviously affects the existing methods but it would be good to have a coherent story if we want to add more, like a `FromTable` method you can use directly in queries.

## Examples
Right now what needs to happen when you call two methods like `ToTable` and `ToQuery` on the same entity type isn't clear. 

In general, it is desirable that when and entity is configured with `ToTable`, it  affects what the query pipeline, the update pipeline and the DDL pipeline for that entity. But when `ToQuery` is also applied, the simplest and most useful behavior seems to be that the latter will only override what happens with the query pipeline.  

Here the defining query references `People` which is the `DbSet<Person>` just to add an `OrderBy` call:

``` csharp
modelBuilder.Entity<Person>().HasNoKey();
modelBuilder.Entity<Person>().ToTable(""Guests"");
modelBuilder.Entity<Person>().ToQuery(() => this.People.OrderBy(p => p.Name));
``` 

Ideally this should mean that:

1. For the query pipeline, when `context.People.ToList()` is executed, this will generate the following SQL:

``` sql
SELECT [g]
FROM [Guests] AS [g]
ORDER BY [g].[Name]
```

2. For the update pipeline, CUD operations will be generated against `Guests`.

3. In the DDL pipeline (Migrations and EnsureCreated) will still create the table `Guests`. But currently any entity that has a defining query configured is ignored by the DDL pipeline. That is, the table won't be created, and there is no way to override that.

There have been similar request from customers to be able to compose `ToTable` and `ToView`, so that if both are used together, ToView only applies to the query pipeline, and `ToTable` to the update pipeline and DDL.

 ## Proposal

a. We slightly bend the semantics of `To` as used in APIs like `ToTable` to specify:
1. Primarily, the database object to which instances of that entity type will be persisted.
2. By convention (e.g. unless it is overridden by configuration), the database object from which instances of that type should be retrieved from.
3. Also by convention, the database object that the DDL pipeline should take care of creating.

b. We start adding `From*`, e.g. `FromSql`, `FromTable`, `FromQuery`, `FromView` that are used only to configure the way instances of a type should be retrieved (e.g. the mapping used by the query pipeline), without affecting the other two aspects.

c. We add the ability to configuring a null mapping, either through a new API or through calling `ToTable(null)` .

d. We add public API to ignore parts of the model in the DDL pipeline (#2725). That is, so that elements can be configured as declared but not defined in the EF Core model. E.g. `IsExtern()` or whatever name we choose.

e. We decide what to do with the other existing `To*`  methods on a case-by-case basis: 
1. Some of them may become obsolete if they are incoherent and not useful.
2. Some of them may be kept if they can be expressed using the building blocks listed above. For example, the current version of `ToView` which doesn't allow a definition of the view to be passed, implies by convention to use the same object for the update pipeline and to ignore the object for the purpose of migrations (e.g. `IsExtern(true)`).

f. For store procedure mapping, also consider how we can leverage the building blocks above. In the past we have got a lot of feedback on the value of having fine-grained mappings, for instance, be able to configure that UPDATEs should go trough a stored procedures while other operations still go through other conventional or explicitly configured mappings. While at the same time, there is value in being able to in a single call configure all CUD operations to stored procedures with by-convention names. But should this override the mapping for the query pipeline, or should we still go by the default table name unless explicitly configured with `FromQuery` or `FromSql`?.","To vs From methods: Proposal to rationalize ToTable, ToQuery, ToView, FromSql, and other related methods  ## Problems
1. Predicting what the outcome for the query, update and DDL pipelines is when a combination of ToTable, ToView and ToQuery is used requ",19896,AndriySvyryd,efcore
19708,EF Core 3.1 Urgent Issue:-  ToQuery Method with Left Outer Join Causes an Error although it was working Properly with Previous Version,"In EF Core 2.1, I was able to test SQL View with InMemory Provider using a custom ToQuery() method, like below:-
```        //SQL View
        public DbSet<CustomerView> CustomerViews { get; set; }
        if (Database.IsInMemory())
            {
                //In memory test query type mappings
                modelBuilder.Entity<CustomerView>().HasNoKey().ToQuery(Build_Customers_Sql_View_InMemory());
            }
        private Expression<Func<IQueryable<CustomerView>>> Build_Customers_Sql_View_InMemory()
        {
            Expression<Func<IQueryable<CustomerView>>> query = () =>
                from customer in Customers
                join customerMembership in CustomerMemberships on customer.Id equals customerMembership.CustomerId into
                    nullableCustomerMemberships
                from customerMembership in nullableCustomerMemberships.DefaultIfEmpty()
                select new CustomerView
                {
                    Id = customer.Id,
                    Name = customer.Name,
                    CustomerMembershipId = customerMembership != null? customerMembership.Id : default(int?),
                    CustomerMembershipName = customerMembership != null ? customerMembership.Name: """"
                };
            return query;
        }
```
but after i upgrade to EF Core 3.1, I got an exception **""System.InvalidOperationException : Processing of the LINQ expression**"" although my ToQuery method code works properly outside  the method.
Kindly, check the stack trace and working sample that produce the issue
```
System.InvalidOperationException : Processing of the LINQ expression 'DbSet<Customer>
    .GroupJoin(
        outer: DbSet<CustomerMembership>, 
        inner: customer => customer.Id, 
        outerKeySelector: customerMembership => customerMembership.CustomerId, 
        innerKeySelector: (customer, nullableCustomerMemberships) => new { 
            customer = customer, 
            nullableCustomerMemberships = nullableCustomerMemberships
         })' by 'NavigationExpandingExpressionVisitor' failed. This may indicate either a bug or a limitation in EF Core. See https://go.microsoft.com/fwlink/?linkid=2101433 for more detailed information.
   at Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor.VisitConstant(ConstantExpression constantExpression)
   at System.Linq.Expressions.ConstantExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor.Expand(Expression query)
   at Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessor.Process(Expression query)
   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()
   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at EFInMemoryProviderSQLViewIssue.CustomerTests.Create_New_Customer()
Got Exceptions? Include both the message and the stack trace

-->



### Further technical details

EF Core version: 3.1.1
Database provider: (Microsoft.EntityFrameworkCore.InMemory)
Target framework: (.NET Core 3.1)

[EFInMemoryProviderSQLViewIssue.zip](https://github.com/dotnet/efcore/files/4112526/EFInMemoryProviderSQLViewIssue.zip)
IDE: (Visual Studio 2019 16.4.2)
","EF Core 3.1 Urgent Issue:-  ToQuery Method with Left Outer Join Causes an Error although it was working Properly with Previous Version  In EF Core 2.1, I was able to test SQL View with InMemory Provider using a custom ToQuery() method, like below:-
```",19885,smitpatel,efcore
18923,Query: Pay your (technical) debt on time,"Creating a general tracking issue for tasks which were deferred in new query pipeline due to time constraint and also as an iteration over the design as we see customer reports we are getting.

This is a meta issue. It will evolve and add more stuff as we discuss things in team meetings (like the one we did about null semantics & command caching). I would prefer this to be assigned to me as the sticky we decided in the planning process. And we will split out smaller tasks out of this and assign to actual implementer. If you are working on something already, please add tracking issue here next to the item.

- [ ] Extensibility of pre/post translation processors.
- [ ] Consolidation of visitors inside pre/post phase to avoid visiting whole tree for each task.
- [ ] Nav expansion improvements
  - [x] Processing of pending selector. When can we flow the selector through. When do we need to apply the selector to get back original shape.
  - [ ] Processing of complex operators like GroupJoin/GroupBy from nav expansion perspective.
- [ ] GroupBy aggregate translation improvement
  - [ ] Allowing more operators before aggregate
    - [ ] Distinct (also introduction of Distinct Column syntax)
    - [ ] Where using case block with null as else
    - [ ] Ignore/trim OrderBy/ThenBy since it is not useful?
  - [ ] Keep them enumerable methods or convert to queryable
- [ ] SqlFunctionExpression nullability
  - [x] If parameter propagates null (if arg is null then func is null)
  - [x] If Function can be nullable (func may never be null even if arg is null)
  - [ ]  API on DbFunction to configure these facets
- [x] SearchCondition conversion to relational in order to do conversion for bool columns with value converter
  - [x] Opt out flag to generate shorter SQL. (non-SqlServer kind)
- [x] NullSemantics after parameter values are known @maumar 
- [ ] What should go after relational command caching (visitors which requires parameter values)
- [ ] Relational command caching which uses lambdas rather than just parameter nullability (partial parameter sniffing) @roji 
- [ ] Pending collections
  - [ ] A different way to store them to avoid disconnect
  - [ ] Multi level deep correlation predicate
  - [ ] Keep them in sync with outer
- [ ] ColumnExpression.Table
  - [ ] Avoid storing actual Table with columnExpression
    - [ ] Different way to assign unique table alias
    - [ ] Do we ever update the table alias during any visitation?
    - [ ] readonly table alias?
  - [ ] Make it readonly after assigning alias?
- [ ] Block translation of member/methodCall when store type is different from expected
  - [ ] Alternate translation? Eg. ToString
- [ ] Exception messages using core string (referenced in code with TODOs)
  - [ ] Cosmos requires Offset-Limit both
- [ ] Evaluate what is being printed for exception when printing non-linq tree
- [ ] Avoid throwing exception in places other than translation
   - [x] Must do for GroupJoin
- [ ] Block translation of collection projection when it is not possible to correlate
  - [ ] Distinct case
  - [ ] GroupBy aggregate case
- [ ] XML Docs","Query: Pay your (technical) debt on time  Creating a general tracking issue for tasks which were deferred in new query pipeline due to time constraint and also as an iteration over the design as we see customer reports we are getting.

This is a meta is",19885,smitpatel,efcore
19322,Query: Constant of DbContext is getting evaluated in compiled query,"The parameters declared in compileQuery are ignored if not referenced directly in the expression body.
The exact same query works fine with EF core 2.x

### Steps to reproduce

``` C#
using System;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace TestConsole
{
    class Program
    {
        public class TestDbContext : DbContext
        {
            public TestDbContext(DbContextOptions options)
                : base(options)
            {
            }

            public DbSet<TestEntity> Entities { get; set; }
        }

        public class TestEntity
        {
            public Guid Id { get; set; }
        }

        static void Main(string[] args)
        {
            var sp = new ServiceCollection()
                .AddEntityFrameworkInMemoryDatabase()
                .AddDbContext<TestDbContext>(builder => builder
                    .UseInMemoryDatabase(""test"")
                    .EnableSensitiveDataLogging())
                .BuildServiceProvider();

            var predicate = CreatePredicate<TestEntity, Guid>(""__id"");

            var okQuery = EF.CompileQuery((TestDbContext c, Guid id)
               => c.Entities
                   .Where(e => e.Id == id) // removing this results in an exception
                   .SingleOrDefault(predicate)
               );

            var failingQuery = EF.CompileQuery((TestDbContext c, Guid id)
               => c.Entities
                   .SingleOrDefault(predicate)
               );

            var context = sp.GetRequiredService<TestDbContext>();
            var entity = new TestEntity() { Id = Guid.NewGuid() };
            context.Add(entity);
            context.SaveChanges();

            // works fine
            okQuery(context, entity.Id);

            // fails: System.Collections.Generic.KeyNotFoundException: The given key '__id' was not present in the dictionary.
            failingQuery(context, entity.Id);
        }

        private static Expression<Func<TEntity, bool>> CreatePredicate<TEntity, TKey>(
                string grainKeyParamName = ""__id"")
        {
            // Creates expression (e => e.Id == id)
            ParameterExpression stateParam = Expression.Parameter(typeof(TEntity), ""state"");
            ParameterExpression grainKeyParam = Expression.Parameter(typeof(TKey), grainKeyParamName);
            MemberExpression stateKeyParam = Expression.Property(stateParam, ""Id"");

            BinaryExpression equals = Expression.Equal(grainKeyParam, stateKeyParam);

            return Expression.Lambda<Func<TEntity, bool>>(equals, stateParam);
        }
    }
}
```
```
Unhandled exception. System.InvalidOperationException: An exception was thrown while attempting to evaluate the LINQ query parameter expression 'value(TestConsole.Program+TestDbContext).Entities.SingleOrDefault(value(TestConsole.Program+<>c__DisplayClass2_0).predicate)'.
 ---> System.Collections.Generic.KeyNotFoundException: The given key '__id' was not present in the dictionary.
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryExpressionTranslatingExpressionVisitor.GetParameterValue[T](QueryContext queryContext, String parameterName)
   at lambda_method(Closure , ValueBuffer )
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source)
   at Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ResultEnumerable.GetEnumerator()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryShapedQueryCompilingExpressionVisitor.QueryingEnumerable`1.Enumerator.MoveNext()
   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at System.Linq.Queryable.SingleOrDefault[TSource](IQueryable`1 source, Expression`1 predicate)
   at lambda_method(Closure )
   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.GetValue(Expression expression, String& parameterName)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.GetValue(Expression expression, String& parameterName)
   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Evaluate(Expression expression, Boolean generateParameter)
   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(Expression expression)         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(Expression query, IParameterValues parameterValues, IDiagnosticsLogger`1 logger, Boolean parameterize, Boolean generateContextAccessors)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledQuery[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.<>c__DisplayClass6_0.<EnsureExecutor>b__0(TContext c, LambdaExpression q)
   at Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized[TParam1,TParam2,TValue](TValue& target, TParam1 param1, TParam2 param2, Func`3 valueFactory)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.EnsureExecutor(TContext context)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.ExecuteCore(TContext context, CancellationToken cancellationToken, Object[] parameters)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.ExecuteCore(TContext context, Object[] parameters)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2.Execute[TParam1](TContext context, TParam1 param1)
   at TestConsole.Program.Main(String[] args) in C:\Users\Alire\repos\Orleans.Providers.EntityFramework\toys\TestConsole\Program.cs:line 57
```

### Further technical details

EF Core version: 3.0.0 / 3.1.0
Database provider: InMemory / Microsoft.EntityFrameworkCore.SqlServer
Target framework: .NET Core 3.0
Operating system: Windows 10
IDE:  Visual Studio 2019 16.3","Query: Constant of DbContext is getting evaluated in compiled query  The parameters declared in compileQuery are ignored if not referenced directly in the expression body.
The exact same query works fine with EF core 2.x

### Steps to reproduce

```",19841,smitpatel,efcore
19209,Parameter-specific evaluation in ParameterExtractor and compiled queries,"When executing normal queries, ParameterExtractor is invoked every time, and performs evaluations on parameters. However, with compiled queries the ParameterExtractor is invoked only once, so these evaluations do not take place. This raises some questions:

* Do we have any code in the pipeline which assumes evaluations have taken place? If so, queries would succeed when executed normally but fail as compiled queries.
* At least in theory, the lack of evaluation in compiled queries could make them slower than normal queries. We could make client-side evaluation for compiled queries work by having ParameterExtractor register evaluations as lambdas to be invoked each time a query is executed.

Originally discussed in https://github.com/aspnet/EntityFrameworkCore/pull/19189#discussion_r354852354","Parameter-specific evaluation in ParameterExtractor and compiled queries   When executing normal queries, ParameterExtractor is invoked every time, and performs evaluations on parameters. However, with compiled queries the ParameterExtractor is invoked on",19841,smitpatel,efcore
9914,Shared-type entities (part of property bag entities),"There are entity types that don't have a natural mapping to a CLR type, either because they aren't part of the domain model (e.g. many-to-many join types) or because the CLR types are inaccessible (e.g. migration snapshot).  While these could be mapped to shadow entity types #749 that would make working with them harder as they are tightly coupled to the state manager and would need special case handling throughout the stack, especially in the query pipeline.

Property bag entity types are still fully specified at model building time, dynamic types are tracked by #2282. The basic implementation would add support for entities backed up by a `Dictionary<string, object>` with a predefined entry that contains the entity type name.

Usage:
```C#
modelBuilder.Entity(""Cat"", c =>
    {
        c.Property<int>(""Id"");
        c.Property<string>(""Name"");
    });
```

```C#
context.Add(new Dictionary<string, object>
{
    { ""Entity type name"", ""Cat"" },
    { ""Id"", 123 },
    { ""Name"", ""Tabby"" }
});
```

Related to #2968","Shared-type entities (part of property bag entities)  There are entity types that don't have a natural mapping to a CLR type, either because they aren't part of the domain model (e.g. many-to-many join types) or because the CLR types are inaccessible (e.g",19819,smitpatel,efcore
18923,Query: Pay your (technical) debt on time,"Creating a general tracking issue for tasks which were deferred in new query pipeline due to time constraint and also as an iteration over the design as we see customer reports we are getting.

This is a meta issue. It will evolve and add more stuff as we discuss things in team meetings (like the one we did about null semantics & command caching). I would prefer this to be assigned to me as the sticky we decided in the planning process. And we will split out smaller tasks out of this and assign to actual implementer. If you are working on something already, please add tracking issue here next to the item.

- [ ] Extensibility of pre/post translation processors.
- [ ] Consolidation of visitors inside pre/post phase to avoid visiting whole tree for each task.
- [ ] Nav expansion improvements
  - [x] Processing of pending selector. When can we flow the selector through. When do we need to apply the selector to get back original shape.
  - [ ] Processing of complex operators like GroupJoin/GroupBy from nav expansion perspective.
- [ ] GroupBy aggregate translation improvement
  - [ ] Allowing more operators before aggregate
    - [ ] Distinct (also introduction of Distinct Column syntax)
    - [ ] Where using case block with null as else
    - [ ] Ignore/trim OrderBy/ThenBy since it is not useful?
  - [ ] Keep them enumerable methods or convert to queryable
- [ ] SqlFunctionExpression nullability
  - [x] If parameter propagates null (if arg is null then func is null)
  - [x] If Function can be nullable (func may never be null even if arg is null)
  - [ ]  API on DbFunction to configure these facets
- [x] SearchCondition conversion to relational in order to do conversion for bool columns with value converter
  - [x] Opt out flag to generate shorter SQL. (non-SqlServer kind)
- [x] NullSemantics after parameter values are known @maumar 
- [ ] What should go after relational command caching (visitors which requires parameter values)
- [ ] Relational command caching which uses lambdas rather than just parameter nullability (partial parameter sniffing) @roji 
- [ ] Pending collections
  - [ ] A different way to store them to avoid disconnect
  - [ ] Multi level deep correlation predicate
  - [ ] Keep them in sync with outer
- [ ] ColumnExpression.Table
  - [ ] Avoid storing actual Table with columnExpression
    - [ ] Different way to assign unique table alias
    - [ ] Do we ever update the table alias during any visitation?
    - [ ] readonly table alias?
  - [ ] Make it readonly after assigning alias?
- [ ] Block translation of member/methodCall when store type is different from expected
  - [ ] Alternate translation? Eg. ToString
- [ ] Exception messages using core string (referenced in code with TODOs)
  - [ ] Cosmos requires Offset-Limit both
- [ ] Evaluate what is being printed for exception when printing non-linq tree
- [ ] Avoid throwing exception in places other than translation
   - [x] Must do for GroupJoin
- [ ] Block translation of collection projection when it is not possible to correlate
  - [ ] Distinct case
  - [ ] GroupBy aggregate case
- [ ] XML Docs","Query: Pay your (technical) debt on time  Creating a general tracking issue for tasks which were deferred in new query pipeline due to time constraint and also as an iteration over the design as we see customer reports we are getting.

This is a meta is",19819,smitpatel,efcore
18784,Remove obsolete APIs for 5.0,"","Remove obsolete APIs for 5.0  ",18787,ajcvickers,efcore
17529,Remove RemoveConvert API,"We stopped using it in our stack due to new design & https://github.com/aspnet/EntityFrameworkCore/issues/13908

We still haven't removed the public API. We should remove it in next breaking change.","Remove RemoveConvert API  We stopped using it in our stack due to new design & https://github.com/aspnet/EntityFrameworkCore/issues/13908

We still haven't removed the public API. We should remove it in next breaking change.",18787,ajcvickers,efcore
18700,Remove row-number paging code,If #16400 is not implemented.,Remove row-number paging code  If #16400 is not implemented.,18787,ajcvickers,efcore
18539,Remove IRelationalConnection.IsMultipleActiveResultSetsEnabled,"","Remove IRelationalConnection.IsMultipleActiveResultSetsEnabled  ",18787,ajcvickers,efcore
18759,QueryFilter (cont): KeyNotFoundException: The given key '__ef_filter__p_0' was not present in the dictionary.,"Follow up of: https://github.com/aspnet/EntityFrameworkCore/issues/18158
Repository: https://github.com/MintPlayer/QueryFilterIssue (Only mind DotNetCore31)

- I updated the .NET Core SDK
- I updated the NuGet packages in my project
- I'm able to generate the database migrations
- I'm able to perform the database migrations

Now I'm getting the following exception when yielding the DbSet from the database:

```
KeyNotFoundException: The given key '__ef_filter__p_0' was not present in the dictionary.
```

The QueryFilter on my DbContext:

```
// The following line breaks the app
modelBuilder.Entity<Person>().HasQueryFilter(p => p.UserDelete == null);
```

Once again uncommenting the QueryFilter ""fixes"" the problem.

### Steps to reproduce

```
git clone https://github.com/MintPlayer/QueryFilterIssue
cd QueryFilterIssue\DotNetCore31\QueryFilterIssue31.Data
dotnet ef database update
```

Run the project. This will try to fetch all people from the database.

### Exception

KeyNotFoundException: The given key '__ef_filter__p_0' was not present in the dictionary.

### Stack trace

```
System.Collections.Generic.Dictionary<TKey, TValue>.get_Item(TKey key)
Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.ParameterValueExtractor<T>(QueryContext context, string baseParameterName, IProperty property)
lambda_method(Closure , QueryContext )
Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync<TResult>(Expression query, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable<TResult>.GetAsyncEnumerator(CancellationToken cancellationToken)
System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable<T>.GetAsyncEnumerator()
Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken)
QueryFilterIssue31.Data.Repositories.PersonRepository.GetPeople() in PersonRepository.cs
QueryFilterIssue31.Web.Controllers.PersonController.Get() in PersonController.cs
...
MVC method pointers
```

### Further technical details

| Item  | Version |
| ------------- | ------------- |
| .NET Core  | 3.1.100-preview2-014569  |
| EF Core version  | **3.1.0-preview2.19525.5**  |
| Database provider  | **Microsoft.EntityFrameworkCore.SqlServer**  |
| Target framework  | **.NET Core 3.1**  |
| Operating system  | **Windows 10-1903 (build 18362.418)**  |
| IDE  | **Visual Studio 2019 16.4.0 Preview 3.0**  |

### Information

```
C:\Users\user>dotnet --info
.NET Core SDK (reflecting any global.json):
 Version:   3.1.100-preview2-014569
 Commit:    4bd5d24d87

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.18362
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100-preview2-014569\

Host (useful for support):
  Version: 3.1.0-preview2.19525.6
  Commit:  5672978d91

.NET Core SDKs installed:
  1.0.0-preview2-003131 [C:\Program Files\dotnet\sdk]
  2.1.202 [C:\Program Files\dotnet\sdk]
  2.1.505 [C:\Program Files\dotnet\sdk]
  2.1.508 [C:\Program Files\dotnet\sdk]
  2.1.509 [C:\Program Files\dotnet\sdk]
  2.1.701 [C:\Program Files\dotnet\sdk]
  2.1.801 [C:\Program Files\dotnet\sdk]
  2.1.802 [C:\Program Files\dotnet\sdk]
  2.2.108 [C:\Program Files\dotnet\sdk]
  2.2.301 [C:\Program Files\dotnet\sdk]
  3.0.100 [C:\Program Files\dotnet\sdk]
  3.1.100-preview1-014459 [C:\Program Files\dotnet\sdk]
  3.1.100-preview2-014569 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0-preview1.19508.20 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0-preview2.19528.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 1.0.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0-preview1.19506.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0-preview2.19525.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 3.1.0-preview1.19506.1 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 3.1.0-preview2.19525.6 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
```

Commit reference: https://github.com/MintPlayer/QueryFilterIssue/commit/2be9e5e3565a03827bebaacc3453223e2b388aa3","QueryFilter (cont): KeyNotFoundException: The given key '__ef_filter__p_0' was not present in the dictionary.  Follow up of: https://github.com/aspnet/EntityFrameworkCore/issues/18158
Repository: https://github.com/MintPlayer/QueryFilterIssue (Only mind",18770,roji,efcore
18761,Exclude Object when checking for DbContext in query filters,"Fixes #18759

@smitpatel if we really want to avoid QueryBugsTest we can simply remove the equality operator from Customer and the bug should repro in FiltersQueryBase.Entity_Equality. But this seems subtle enough that a query bug test makes sense (i.e. to avoid someone defining an operator again in the future). Let me know what you prefer.","Exclude Object when checking for DbContext in query filters  Fixes #18759

@smitpatel if we really want to avoid QueryBugsTest we can simply remove the equality operator from Customer and the bug should repro in FiltersQueryBase.Entity_Equality. But thi",18770,roji,efcore
18709,Query: expression printer should still print type argument for Cast and OfType,"Currently just prints out Method name, like for all other Enumerable/Queryable methods","Query: expression printer should still print type argument for Cast and OfType  Currently just prints out Method name, like for all other Enumerable/Queryable methods",18763,maumar,efcore
18413,Query: clean-up expression printer when we can do breaking changes,"We can make expression printer internal, since we expose Print method on `ExpressionExtensions`

Also, currently we repurposed 'generateUniqueParameterIds' to mean general optimized vs debug output. We should rename it to something more appropriate.","Query: clean-up expression printer when we can do breaking changes  We can make expression printer internal, since we expose Print method on `ExpressionExtensions`

Also, currently we repurposed 'generateUniqueParameterIds' to mean general optimized vs",18763,maumar,efcore
17543,Queries really slow due to null checks,"I'm getting a lot of slowdowns on the EF Core 3 preview. Here's an example.

```c#
var firstResult = await Db.Results.FirstOrDefaultAsync(o => o.TestId == 1);
```

This generates the following SQL, which runs really slowly on my SQL Azure database (>3 seconds):

```sql
exec sp_executesql N'SELECT TOP(1) [r].[Id]
FROM [Results] AS [r]
WHERE (([r].[TestId] = @__testId_0) AND ([r].[TestId] IS NOT NULL AND @__testId_0 IS NOT NULL))
OR ([r].[TestId] IS NULL AND @__testId_0 IS NULL)',N'@__testId_0 int',@__testId_0=1
```

The SQL I would expect is (<0.1 seconds):
```sql
exec sp_executesql N'SELECT TOP(1) [r].[Id]
FROM [Results] AS [r]
WHERE ([r].[TestId] = @__testId_0)',N'@__testId_0 int',@__testId_0=1
```

### Further technical details
EF Core version: 3.0.0-preview8.19405.11
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: Visual Studio 2019 Version 16.3 Preview 2","Queries really slow due to null checks  I'm getting a lot of slowdowns on the EF Core 3 preview. Here's an example.

```c#
var firstResult = await Db.Results.FirstOrDefaultAsync(o => o.TestId == 1);
```

This generates the following SQL, which runs",18694,maumar,efcore
18525,Query: optimize binary expression AndAlso and OrElse where left and right are the same,"Sometimes after running optimizations we end up with expressions like:

```sql
(c.Property IS NULL AND c.Property IS NULL) OR (c.Property2 IS NOT NULL AND c.Property2 IS NOT NULL)
```

this can be optimized to: 

```sql
c.Property IS NULL OR c.Property2 IS NOT NULL
```

moreover, case like:

```sql
c.Property IS NULL OR c.Property IS NOT NULL
```

is tautology, which we can also recognize (similarly for AND, resolving to always being false
","Query: optimize binary expression AndAlso and OrElse where left and right are the same  Sometimes after running optimizations we end up with expressions like:

```sql
(c.Property IS NULL AND c.Property IS NULL) OR (c.Property2 IS NOT NULL AND c.Propert",18694,maumar,efcore
18547,DbFunctions compared to NULL are ignored and break the query builder,"DbFunctions that are comparing to NULL are ignored in the query and even break other (valid) conditions.

For example:
```csharp
    public class DataContext : DbContext
    {
        private static readonly LoggerFactory LoggerFactory =
            new LoggerFactory(new[]
            {
                new DebugLoggerProvider()
            });

        public DbSet<Course> Courses { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(""Data Source=.;Initial Catalog=Test;Integrated Security=True;MultipleActiveResultSets=True;"");
            optionsBuilder.UseLoggerFactory(LoggerFactory);
            optionsBuilder.EnableDetailedErrors();
            optionsBuilder.EnableSensitiveDataLogging();
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasDbFunction(typeof(DataContext).GetMethod(nameof(JsonValue)))
                        .HasTranslation(args =>
                        {
                            var arguments = args.ToList();
                            var a = (String) ((SqlConstantExpression) arguments[0]).Value;
                            arguments[0] = new SqlConstantExpression(Expression.Constant(a), RelationalTypeMapping.NullMapping);

                            return SqlFunctionExpression.Create(""JSON_VALUE"", arguments, typeof(String), null);
                        });
        }

        public static String JsonValue(String column, String path)
        {
            throw new NotSupportedException();
        }
    }

    public class Course
    {
        [Key]
        public Guid CourseId { get; set; }

        public String CourseName { get; set; }
        public String MetaData { get; set; }
    }

    public class MetaData
    {
        public String TestParam { get; set; }
    }
```

When I run:
```context.Courses.FirstOrDefault(m => DataContext.JsonValue(""MetaData"", ""$.TestParam"") == ""Test 123"");```
Works as expected, but when I run:
```context.Courses.FirstOrDefault(m => DataContext.JsonValue(""MetaData"", ""$.TestParam"") == null);```
it doesn't work, the generated query is odd as well:
```sql
SELECT TOP(1) [c].[CourseId], [c].[CourseName], [c].[MetaData]
FROM [Courses] AS [c]
WHERE CAST(0 AS bit) = CAST(1 AS bit)
```
When chaining multiple conditions, like this:
```context.Courses.FirstOrDefault(m => m.CourseName == ""Test 1"" && DataContext.JsonValue(""MetaData"", ""$.TestParam"") == null);```
It gives the same result.

Here is a demo repo:
[test-repo.zip](https://github.com/aspnet/EntityFrameworkCore/files/3764393/test-repo.zip)","DbFunctions compared to NULL are ignored and break the query builder  DbFunctions that are comparing to NULL are ignored in the query and even break other (valid) conditions.

For example:
```csharp
    public class DataContext : DbContext
    {",18694,maumar,efcore
17942,Nullable parameter in Select with ?: conditional operator throws InvalidOperationException,"## Description
If you use a nullable parameter in a select expression with ?: conditional operator, the EFCore provider evaulates the nullable object's value even that condition branch should be skipped.

### Steps to reproduce
Consider this entity and query, 

```C#
public class TestEntity
{
    public int Id { get; set; }
    public DateTime TestDateTime { get; set; }
}

public class TestDto
{
    public bool Result { get; set; }
}

public class IndexModel : PageModel
{
    private readonly ApplicationDbContext _context;

    public IndexModel(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task OnGet()
    {
        var r1 = await ReproMethodAsync(DateTime.Now);
        var r2 = await ReproMethodAsync(null); // InvalidOperationException: Nullable object must have a value.
    }

    private async Task<List<TestDto>> ReproMethodAsync(DateTime? param)
    {
        var results = await _context.Tests.Select(x => new TestDto
        {
            Result = param != null ? x.TestDateTime == param.Value : true,
        }).ToListAsync();

        return results;
    }
}
```

#### StackTrace

```
InvalidOperationException: An exception was thrown while attempting to evaluate a LINQ query parameter expression. To show additional information call EnableSensitiveDataLogging() when overriding DbContext.OnConfiguring.
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.GetValue(Expression expression, out string parameterName)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Evaluate(Expression expression, bool generateParameter)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
System.Linq.Expressions.ExpressionVisitor.VisitBinary(BinaryExpression node)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)
System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)
System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
System.Linq.Expressions.ExpressionVisitor.VisitConditional(ConditionalExpression node)
System.Linq.Expressions.ConditionalExpression.Accept(ExpressionVisitor visitor)
System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)
System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(MemberBinding node)
System.Linq.Expressions.ExpressionVisitor.Visit<T>(ReadOnlyCollection<T> nodes, Func<T, T> elementVisitor)
System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(MemberInitExpression node)
System.Linq.Expressions.MemberInitExpression.Accept(ExpressionVisitor visitor)
System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(Expression<T> node)
System.Linq.Expressions.Expression<TDelegate>.Accept(ExpressionVisitor visitor)
System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)
System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)
System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)
System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)
System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)
Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(Expression expression)
Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(Expression query, IParameterValues parameterValues, IDiagnosticsLogger<Query> logger, bool parameterize, bool generateContextAccessors)
Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync<TResult>(Expression query, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable<TResult>.GetAsyncEnumerator(CancellationToken cancellationToken)
System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable<T>.GetAsyncEnumerator()
Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken)
```

### Further technical details

EF Core version: 2.2, 3.0-rc1
Database provider: Microsoft.EntityFrameworkCore.SqlServer
Target framework: .NET FW 4.x with 2.2, .NET Core 3.0-rc1
Operating system: WIndows 10 10.0.18362.356
IDE: Visual Studio 2019 16.3.0-preview4","Nullable parameter in Select with ?: conditional operator throws InvalidOperationException  ## Description
If you use a nullable parameter in a select expression with ?: conditional operator, the EFCore provider evaulates the nullable object's value even",18640,roji,efcore
13859,Query: Short circuiting when left-over code is server correlated,"True port of #5736 for other expressions

This is different from #13068 in terms that #13068 talks about short-circuiting when the whole expression is client evaluatable. Which we solved by evaluating largest subtree possible. (hence compiler did short-circuit for us).

This issue is about expressions like this
```C#
List<Blog> values = null;
bool? test = false;
db.Blogs.Select(b => new { Test = (test ?? values.Select(e => e.Id).Contains(b.Id)) }).ToList();
```
Here we cannot evaluate `values.Select(e => e.Id)` since it throws NRE but we shouldn't need to evaluate it given test is there. We won't pick whole subtree because presence of `b.Id`","Query: Short circuiting when left-over code is server correlated  True port of #5736 for other expressions

This is different from #13068 in terms that #13068 talks about short-circuiting when the whole expression is client evaluatable. Which we solved",18640,roji,efcore
18127,Subquery-FirstOrDefault-Navigation compared to other navigation in where throws error,"### Steps to reproduce
The following code

``` C#
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApp40
{
    class Program
    {
        static void Main(string[] args)
        {
            string nickname = ""test"";
            using var context = new TestContext();
            context.Reminders.Where(x => x.User == context.Nicknames.FirstOrDefault(n => n.Name == nickname).User).ToList();
        }
    }

    class TestContext : DbContext
    {
        public DbSet<Reminder> Reminders { get; set; } = null!;
        public DbSet<User> Users { get; set; } = null!;
        public DbSet<Nickname> Nicknames { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.EnableSensitiveDataLogging();
            optionsBuilder.UseSqlite(@""Data Source=database.sqlite"");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>()
                .HasMany(x => x.Names)
                .WithOne(x => x.User);

            modelBuilder.Entity<Nickname>()
                .HasIndex(x => x.Name)
                .IsUnique();
        }
    }

    public class Reminder
    {
        public long Id { get; set; }
        public User? User { get; set; }
    }

    public class User
    {
        public long Id { get; set; }
        public virtual ICollection<Nickname> Names { get; set; } = null!;
        public Nickname? LastUsedName { get; set; }
    }

    public class Nickname
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public User User { get; set; }
    }
}
```
produces this exception when trying to execute the query.
```
System.InvalidOperationException
  HResult=0x80131509
  Message=EF.Property called with wrong property name.
  Source=Microsoft.EntityFrameworkCore.Relational
  StackTrace:
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Translate(SelectExpression selectExpression, Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect(ShapedQueryExpression source, LambdaExpression selector)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSubquery(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)
   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)
   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLambdaExpression(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at ConsoleApp40.Program.Main(String[] args)
```
possibly a dupe of #18090


### Further technical details

EF Core version: 3.0
Database provider: Microsoft.EntityFrameworkCore.Sqlite
Target framework: .NET Core 3.0
Operating system: Windows 10 Pro 1903
IDE: Visual Studio 2019 16.4 P1","Subquery-FirstOrDefault-Navigation compared to other navigation in where throws error  ### Steps to reproduce
The following code

``` C#
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleAp",18625,smitpatel,efcore
18090,Including reference navigation and projecting collection navigation throws,"When using `.Include().ThenInclude()` and selecting a collection, EF throws an `InvalidOperationException` with error `EF.Property called with wrong property name.`

Note that also using `.Include()` on the selected collection still throws.

The only ""workaround"" is to avoid `.ThenInclude()` which is not a solution for me (I need `SomeCustomerDataFkNavigation`)

### Steps to reproduce

```csharp
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Debug;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace _18090Repro
{
    class Program
    {
        static void Main(string[] args)
        {
            using var context = new MyContext();

            context.Database.EnsureDeleted();
            context.Database.EnsureCreated();
            context.SomeCustomerData.Add(new SomeCustomerData { });
            context.SaveChanges();

            context.Customer.Add(new Customer() { SomeCustomerDataFk = 1 });
            context.Customer.Add(new Customer() { });
            context.SaveChanges();

            context.Invoice.Add(new Invoice { CustomerFk = 1 });
            context.SaveChanges();

            context.InvoiceLine.Add(new InvoiceLine { InvoiceFk = 1 });
            context.SaveChanges();

            var invoices = context.Invoice
                .Include(i => i.CustomerFkNavigation)
                    .ThenInclude(c => c.SomeCustomerDataFkNavigation)
                .Select(i => new Invoice()
                {
                    Id = i.Id,
                    CustomerFkNavigation = i.CustomerFkNavigation,
                    InvoiceLine = i.InvoiceLine // This throws
                })
                .ToList();
        }
    }

    public partial class MyContext : DbContext
    {
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceLine> InvoiceLine { get; set; }
        public virtual DbSet<SomeCustomerData> SomeCustomerData { get; set; }

        private static readonly LoggerFactory Logger = new LoggerFactory(new[] { new DebugLoggerProvider() });

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            string connectionString = ""Server=.;Database=Repro18090;Trusted_Connection=True;MultipleActiveResultSets=true"";

            optionsBuilder.UseSqlServer(connectionString)
                .EnableSensitiveDataLogging()
                .UseLoggerFactory(Logger);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasIndex(e => e.SomeCustomerDataFk);

                entity.Property(e => e.Id).HasColumnName(""id"");

                entity.Property(e => e.SomeCustomerDataFk).HasColumnName(""someCustomerData_fk"");

                entity.HasOne(d => d.SomeCustomerDataFkNavigation)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.SomeCustomerDataFk)
                    .HasConstraintName(""FK_Customer_SomeCustomerData"");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.HasIndex(e => e.CustomerFk);

                entity.Property(e => e.Id).HasColumnName(""id"");

                entity.Property(e => e.CustomerFk).HasColumnName(""customer_fk"");

                entity.HasOne(d => d.CustomerFkNavigation)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.CustomerFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName(""FK_Invoice_Customer"");
            });

            modelBuilder.Entity<InvoiceLine>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName(""id"");

                entity.Property(e => e.InvoiceFk).HasColumnName(""invoice_fk"");

                entity.HasOne(d => d.InvoiceFkNavigation)
                    .WithMany(p => p.InvoiceLine)
                    .HasForeignKey(d => d.InvoiceFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName(""FK_InvoiceLine_Invoice"");
            });

            modelBuilder.Entity<SomeCustomerData>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName(""id"");
            });
        }
    }

    public partial class Customer
    {
        public Customer()
        {
            Invoice = new HashSet<Invoice>();
        }

        public int Id { get; set; }
        public int? SomeCustomerDataFk { get; set; }

        public virtual SomeCustomerData SomeCustomerDataFkNavigation { get; set; }
        public virtual ICollection<Invoice> Invoice { get; set; }
    }

    public partial class Invoice
    {
        public Invoice()
        {
            InvoiceLine = new HashSet<InvoiceLine>();
        }

        public int Id { get; set; }
        public int CustomerFk { get; set; }

        public virtual Customer CustomerFkNavigation { get; set; }
        public virtual ICollection<InvoiceLine> InvoiceLine { get; set; }
    }

    public partial class InvoiceLine
    {
        public int Id { get; set; }
        public int InvoiceFk { get; set; }

        public virtual Invoice InvoiceFkNavigation { get; set; }
    }

    public partial class SomeCustomerData
    {
        public SomeCustomerData()
        {
            Customer = new HashSet<Customer>();
        }

        public int Id { get; set; }

        public virtual ICollection<Customer> Customer { get; set; }
    }
}

```

### Further technical details

EF Core version:
Database provider: Microsoft.EntityFrameworkCore.SqlServer
Target framework:  .NET Core 3.0
Operating system: Windows 10 x64
IDE: Visual Studio 2019 16.3.1","Including reference navigation and projecting collection navigation throws  When using `.Include().ThenInclude()` and selecting a collection, EF throws an `InvalidOperationException` with error `EF.Property called with wrong property name.`

Note that a",18625,smitpatel,efcore
17852,Return entire entity in projection (select),"Is it possible to return the entire entity in a projection or to only selectively get specific properties? If the latter, I guess this becomes a feature request since it's tedious to get every single property and have to keep that up-to-date.

### Steps to reproduce
The line: `Blog = x` causes an exception: `EF.Property called with wrong property name.`
```
var results = Blogs
	.Include(x => x.Author)
	.Include(x => x.Comments)
	.Select(x => new 
	{
		Blog = x,
		NewestComment = x.Comments
			.OrderByDescending(y => y.DateCreated)
			.FirstOrDefault()
	})
	.ToList();

```
## Stacktrace
```
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)
   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)
   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLambdaExpression(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSubquery(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitNew(NewExpression newExpression)
   at System.Linq.Expressions.NewExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Translate(SelectExpression selectExpression, Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect(ShapedQueryExpression source, LambdaExpression selector)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
```



### Further technical details

EF Core version: 3.0 preview 9
Database provider: SQLite
Target framework: .NET Core 3.0
Operating system: Win 10
IDE: Visual Studio 2019 16.2.4","Return entire entity in projection (select)  Is it possible to return the entire entity in a projection or to only selectively get specific properties? If the latter, I guess this becomes a feature request since it's tedious to get every single property a",18625,smitpatel,efcore
17756,Query: Non-expanded navigations in query,"- [x] Required_navigation_on_a_subquery_with_First_in_predicate
- [x] Dependent_to_principal_navigation_equal_to_null_for_subquery","Query: Non-expanded navigations in query  - [x] Required_navigation_on_a_subquery_with_First_in_predicate
- [x] Dependent_to_principal_navigation_equal_to_null_for_subquery",18625,smitpatel,efcore
13958,Finish merging Microsoft.Data.Sqlite,"- [x] Create issue templates
  - Bug in Entity Framework Core
  - Bug in Microsoft.Data.Sqlite
  - Feature request
- [x] Clean up samples directory
  - EFCore and Microsoft.Data.Sqlite subdirectories
  - Link to samples in the docs repo
- [x] Update README
  - Highlight both products
  - Link to release planning process #18766
- [ ] Combine Resources.tt files
- [ ] Combine *.ruleset files

Other cleanup:

- [x] Move CONTRIBUTING to .github directory
- [x] Link to [Getting and Building the Code](https://github.com/aspnet/EntityFrameworkCore/wiki/getting-and-building-the-code) from CONTRIBUTING
- [x] Add SUPPORT","Finish merging Microsoft.Data.Sqlite  - [x] Create issue templates
  - Bug in Entity Framework Core
  - Bug in Microsoft.Data.Sqlite
  - Feature request
- [x] Clean up samples directory
  - EFCore and Microsoft.Data.Sqlite subdirectories
  - Link to",17533,bricelam,efcore
15821,Issue quality is worse after change to template,"My qualitative experience is that more people are not reading the template now that the standard warning for security issues has been included. My guess is that people stop reading after the first sentence because they assume all the other text is also related to this. In particular, many issues now do not include version info, when it was common before.

The current template is below.

-----

### If you believe you have an issue that affects the security of the platform please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://technet.microsoft.com/en-us/mt764065.aspx) but ONLY if it is reported through email.

Describe what is not working as expected.

If you are seeing an exception, include the full exceptions details (message and stack trace).

```
Exception message:
Stack trace:
```

### Steps to reproduce
Include a complete code listing (or project/solution) that we can run to reproduce the issue.

Partial code listings, or multiple fragments of code, will slow down our response or cause us to push the issue back to you to provide code to reproduce the issue.

```c#
Console.WriteLine(""Hello World!"");
```

### Further technical details
EF Core version: (found in project.csproj or packages.config)
Database Provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)
Operating system: 
IDE: (e.g. Visual Studio 2017 15.4)",Issue quality is worse after change to template  My qualitative experience is that more people are not reading the template now that the standard warning for security issues has been included. My guess is that people stop reading after the first sentence,17533,bricelam,efcore
17498,Add logging to query,"- Log for ignored include.
- Log for including navigation","Add logging to query  - Log for ignored include.
- Log for including navigation",17500,smitpatel,efcore
17245,Concat_Include_collection_ignored throws,"```
Microsoft.EntityFrameworkCore.Query.QueryLoggingSqlServerTest.Concat_Include_collection_ignored

Assert.Contains() Failure
Not found: The Include operation for navigation '[o].OrderDetails' is unnecessary and was ignored because the navigation is not reachable in the final query results. See https://go.microsoft.com/fwlink/?linkid=850303 for more information.
In value:  SelectListIterator<ValueTuple<LogLevel, EventId, String, Object, Exception>, String> [""(queryContext) => new QueryingEnumerable<Order>(\r""..., ""Creating DbCommand for 'ExecuteReader'."", ""Created DbCommand for 'ExecuteReader' (0ms)."", ""A data reader was disposed.""]
   at Microsoft.EntityFrameworkCore.Query.QueryLoggingSqlServerTest.Concat_Include_collection_ignored() in C:\aspnet\EntityFrameworkCore\test\EFCore.SqlServer.FunctionalTests\Query\QueryLoggingSqlServerTest.cs:line 130
```","Concat_Include_collection_ignored throws  ```
Microsoft.EntityFrameworkCore.Query.QueryLoggingSqlServerTest.Concat_Include_collection_ignored

Assert.Contains() Failure
Not found: The Include operation for navigation '[o].OrderDetails' is unnecessary",17500,smitpatel,efcore
15698,'CollectionOwnershipBuilder' does not contain a definition for 'HasAlternateKey',"Describe what is not working as expected.
I've got several DbContexts in my solution. All are working as expected except for one, which is generating anomalous code in the snapshot and designer classes. I have an entity, let's call it ABC. ABC has a list of DEFs. DEF is marked as `[Owned]` and I have it configured as an OwnsMany in the OnModelCreating as in the following:

```C#
modelBuilder.Entity<ABC>().OwnsMany(a => a.defs, a => 
{
  a.HasForeignKey(b => b.AbcId);
  a.Property(b => b.Id).HasDefaultValueSql(""newid()"");
  a.HasKey(b => new {
    b.AbcId,
    b.Id
  });
});
```

The IDs for each are GUIDs, in case that's relevant. When I run the Add-Migration command, I use the following:

Add-Migration Initial -StartupProject SampleBuilder -Project Data.Abc -Verbose

This runs without issue and produces _Initial.cs, _Initial.Designer.cs and MyContextModelSnapshot. There is nothing flagged as wrong in _Initial.cs, but when looking at _Initial.Designer.cs, I see the following (names changed, of course):

```C#
modelBuilder.Entity(""ABC"", b => {
  //...
  b.OwnsMany(""DEF"", ""DEFs"", b1 => {
    b1.Property<Guid>(""AbcId"");
    b1.Property<Guid>(""Id"")
      .ValueGeneratedOnAdd()
      .HasDefaultValueSql(""newid()"");
    b.Property<Guid>(""GhiId"");
    b.HasKey(""AbcId"", ""Id"");
    b.HasAlternateKey(""Id""); //When attempting to build or update the database, I get an error that ""CollectionOwnershipBuilder"" does not contain a definition for ""HasAlternateKey"".
    b.ToTable(""DefTable"");
    b.HasOne(""ABC"")
      .WithMany(""Defs"")
      .HasForeignKey(""AbcId"")
      .OnDelete(DeleteBehavior.Cascade);
  });

  //...
});
```
I see exactly the same thing in the MyContextModelSnapshot.cs file and the same error.

I attempted to remove the migration and that worked fine. I re-added it and the same thing happened. It only occurs in that one spot and I haven't experienced this in any of the other many owned types in this or other DbContexts.

If you are seeing an exception, include the full exceptions details (message and stack trace).
```
CS1061	'CollectionOwnershipBuilder' does not contain a definition for 'HasAlternateKey' and no accessible extension method 'HasAlternateKey' accepting a first argument of type 'CollectionOwnershipBuilder' could be found (are you missing a using directive or an assembly reference?)	Data.Abc	20190512195516_Initial.Designer.cs	432	Active
```

```
CS1061	'CollectionOwnershipBuilder' does not contain a definition for 'HasAlternateKey' and no accessible extension method 'HasAlternateKey' accepting a first argument of type 'CollectionOwnershipBuilder' could be found (are you missing a using directive or an assembly reference?)	Data.Abc	MyContextModelSnapshot.cs	430	Active
```

Here are the classes and their relevant bits:

```C#
public class ABC {
  public ABC(//Lots of parameters) {
    //Lots of property setting
  }

  private ABC(){}

  [Key]
  [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
  public Guid Id {get;set;}

  public List<DEF> DEFs {get;set;} = new List<DEF>();
}

[Owned]
public class DEF {
  [Key]
  [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
  public Guid Id {get;set;}

  public Guid AbcId {get;set;}
}
```

### Further technical details

EF Core version: 2.2.4
Microsoft.EntityFrameworkCore.Design: 2.2.4
Database Provider: Microsoft.EntityFrameworkCore.SqlServer: 2.2.4
Operating system: Windows 10 x64 Pro
IDE: Visual Studio 2019 Pro Stable channel, 16.0.3","'CollectionOwnershipBuilder' does not contain a definition for 'HasAlternateKey'  Describe what is not working as expected.
I've got several DbContexts in my solution. All are working as expected except for one, which is generating anomalous code in the",17481,AndriySvyryd,efcore
13628,Unnecessary alternate key generated by convention,"An unnecessary alternate key is created for the `UserListMember` table in Step 2 of the Steps to Reproduce:
```sql
    CONSTRAINT ""PK_UserListMembers"" PRIMARY KEY (""UserListId"", ""MemberId""),
    CONSTRAINT ""AK_UserListMembers_MemberId_UserListId"" UNIQUE (""MemberId"", ""UserListId""),
    CONSTRAINT ""FK_UserListMembers_Users_MemberId"" FOREIGN KEY (""MemberId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE,
    CONSTRAINT ""FK_UserListMembers_UserLists_UserListId"" FOREIGN KEY (""UserListId"") REFERENCES ""UserLists"" (""Id"") ON DELETE CASCADE
```
That alternate key is not generated when the word `User` is removed from the table name (Step 5):
```sql
    CONSTRAINT ""PK_ListMembers"" PRIMARY KEY (""ListId"", ""MemberId""),
    CONSTRAINT ""FK_ListMembers_Lists_ListId"" FOREIGN KEY (""ListId"") REFERENCES ""Lists"" (""Id"") ON DELETE CASCADE,
    CONSTRAINT ""FK_ListMembers_Users_MemberId"" FOREIGN KEY (""MemberId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
```
The same behaviour is also reproducible using the Npgsql provider.

### Steps to Reproduce
1. Create a new console project
2. Create a `.cs` file with content below:
```c#
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace EFCoreTest
{
    public class User
    {
        [Key]
        public string Id { get; set; }

        public ICollection<UserList> UserLists { get; set; }

        public ICollection<UserListMember> UserListMembers { get; set; }
    }

    public class UserList
    {
        [Key]
        public string Id { get; set; }

        [Required]
        public string OwnerId { get; set; }

        public User Owner { get; set; }

        public ICollection<UserListMember> UserListMembers { get; set; }
    }

    public class UserListMember
    {
        [Key]
        public string UserListId { get; set; }

        [Key]
        public string MemberId { get; set; }

        public UserList UserList { get; set; }

        public User Member { get; set; }
    }

    public class UserDbContext : DbContext
    {
        public DbSet<User> Users { get; set; }
        public DbSet<UserList> UserLists { get; set; }
        public DbSet<UserListMember> UserListMembers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite(""Data Source=EFCoreTest-ExtraAK.db"");
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            builder.Entity<UserListMember>(userListMember =>
            {
                userListMember.HasKey(ulm => new { ulm.UserListId, ulm.MemberId });
            });
        }
    }
}
```
3. Run the following commands:
```
dotnet build
dotnet ef migrations add initial
dotnet ef database update
```
4. Delete the `Migrations` folder
5. Replace the content in the `.cs` file created in Step 2 with:
```cs
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace EFCoreTest
{
    public class User
    {
        [Key]
        public string Id { get; set; }

        public ICollection<List> Lists { get; set; }

        public ICollection<ListMember> ListMembers { get; set; }
    }

    public class List
    {
        [Key]
        public string Id { get; set; }

        [Required]
        public string OwnerId { get; set; }

        public User Owner { get; set; }

        public ICollection<ListMember> ListMembers { get; set; }
    }

    public class ListMember
    {
        [Key]
        public string ListId { get; set; }

        [Key]
        public string MemberId { get; set; }

        public List List { get; set; }

        public User Member { get; set; }
    }

    public class UserDbContext : DbContext
    {
        public DbSet<User> Users { get; set; }
        public DbSet<List> Lists { get; set; }
        public DbSet<ListMember> ListMembers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite(""Data Source=EFCoreTest.db"");
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            builder.Entity<ListMember>(listMember =>
            {
                listMember.HasKey(ulm => new { ulm.ListId, ulm.MemberId });
            });
        }
    }
}
```
6. Repeat the commands in Step 3
7. Compare the constraints of UserListMembers in EFCoreTest-ExtraAK.db and those of ListMembers in EFCoreTest.db

### Further technical details
EF Core version: 2.1.4
Database Provider: Microsoft.EntityFrameworkCore.Sqlite, Npgsql.EntityFrameworkCore.PostgreSQL
Operating system: Windows 10 1803
IDE: Visual Studio Code 1.28.1","Unnecessary alternate key generated by convention  An unnecessary alternate key is created for the `UserListMember` table in Step 2 of the Steps to Reproduce:
```sql
    CONSTRAINT ""PK_UserListMembers"" PRIMARY KEY (""UserListId"", ""MemberId""),
    CONSTR",17481,AndriySvyryd,efcore
12414,HasKey changed functionality in 2.1.1 Service Release,"When overriding calls to HasKey for an entity, the newest servicing release changes behavior and does not override previous calls to HasKey.  The first call to HasKey is used to generate a Unique Constraint on the field, which looks to be broken as HasKey is supposed to be for defining a primary key (only one).

Using this example context in a brand new project:
```C#
public class Thing : Entity
{
	public Guid ParentId { get; set; }

	public string Name { get; set; }
	public string Code { get; set; }
}

public abstract class Entity
{
	public Guid Id { get; set; }

	public byte[] RowVersion { get; set; }
}

public static class EntityMapping
{
	public static EntityTypeBuilder<T> MapEntity<T>(this EntityTypeBuilder<T> entity, bool isAutoId = true) where T : Entity
	{
		entity.HasKey(x => x.Id);

		if (isAutoId)
		{
			entity.Property(x => x.Id).ValueGeneratedOnAdd().HasDefaultValueSql(""NEWID()"");
		}
		else
		{
			entity.Property(x => x.Id).ValueGeneratedNever();
		}

		entity.Property(x => x.RowVersion).IsRowVersion();

		return entity;
	}
}

public class TestContext : DbContext
{
	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	{
		optionsBuilder
			.UseSqlServer(@""Server=(localdb)\mssqllocaldb;Database=Test;ConnectRetryCount=0"");
	}

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Thing>().Map();
	}
}

internal static class ThingEntityExtensions
{
	public static EntityTypeBuilder<Thing> Map(this EntityTypeBuilder<Thing> entity)
	{
		entity.ToTable(nameof(Thing));
		entity.MapEntity(false);
		entity.HasKey(x => new { x.Id, x.ParentId });

		entity.Property(x => x.Name).IsRequired().HasMaxLength(250);

		return entity;
	}
}
```

The migration generated in 2.1.0 is:
```C#
public partial class Init : Migration
{
	protected override void Up(MigrationBuilder migrationBuilder)
	{
		migrationBuilder.CreateTable(
			name: ""Thing"",
			columns: table => new
			{
				Id = table.Column<Guid>(nullable: false),
				RowVersion = table.Column<byte[]>(rowVersion: true, nullable: true),
				ParentId = table.Column<Guid>(nullable: false),
				Name = table.Column<string>(maxLength: 250, nullable: false),
				Code = table.Column<string>(nullable: true)
			},
			constraints: table =>
			{
				table.PrimaryKey(""PK_Thing"", x => new { x.Id, x.ParentId });
			});
	}

	protected override void Down(MigrationBuilder migrationBuilder)
	{
		migrationBuilder.DropTable(
			name: ""Thing"");
	}
}
```

In 2.1.1, the migration adds a unique constraint like it is applying both calls to HasKey and not overwriting the earlier call like it did before.
```C#
public partial class Init : Migration
{
	protected override void Up(MigrationBuilder migrationBuilder)
	{
		migrationBuilder.CreateTable(
			name: ""Thing"",
			columns: table => new
			{
				Id = table.Column<Guid>(nullable: false),
				RowVersion = table.Column<byte[]>(rowVersion: true, nullable: true),
				ParentId = table.Column<Guid>(nullable: false),
				Name = table.Column<string>(maxLength: 250, nullable: false),
				Code = table.Column<string>(nullable: true)
			},
			constraints: table =>
			{
				table.PrimaryKey(""PK_Thing"", x => new { x.Id, x.ParentId });
				table.UniqueConstraint(""AK_Thing_Id"", x => x.Id);
			});
	}

	protected override void Down(MigrationBuilder migrationBuilder)
	{
		migrationBuilder.DropTable(
			name: ""Thing"");
	}
}
```

### Further technical details
EF Core version: 2.1.1
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: Visual Studio 2017 15.7.4","HasKey changed functionality in 2.1.1 Service Release  When overriding calls to HasKey for an entity, the newest servicing release changes behavior and does not override previous calls to HasKey.  The first call to HasKey is used to generate a Unique Cons",17481,AndriySvyryd,efcore
16963,Query work for in-memory provider,"- [x] Reference Include
- [x] Collection Include
- [x] Collection in projection @smitpatel 
- [x] Single non-scalar result in projection @smitpatel 
- [x] Translate Owned navigation properties in query @smitpatel
- [x] investigate/fix failures in FiltersInheritanceInMemoryTest test suite
- [x] Re-enable non-query tests @smitpatel
  - [x] GraphUpdatesInMemoryTest
  - [x] ProxyGraphUpdatesInMemoryTest
  - [x] LoadInMemoryTest
  - [x] InMemoryComplianceTest @smitpatel
  - [x] FixupTest.Collection_nav_props_remain_fixed_up_after_manual_fixup_and_DetectChanges @smitpatel
  - [x] QueryRewrite: enable inmemory tests failing with NRE and ""Nullable object must have a value"" See #15343 @maumar
- [x] InMemory: Reading value from server may need to apply default. See #16575 @maumar
- [x] Inheritance
- [X] Spatial @bricelam
~- [ ] ValueComparer.Snapshot() results~ #14042

Test Failures
- [x] Include18_3_3 @smitpatel
- [x] Join_flattening_bug_4539 @smitpatel
- [x] Too many results @maumar - needs core changes, filed #17531 to track this


Queryable methods pending
- [x] Cast P4 Implemented by @smitpatel in https://github.com/aspnet/EntityFrameworkCore/commit/9f202066018f67efdb56c87c0995ab39f17ae74c
- [x] Concat/Except/Intersect/Union P6 @roji
- [x] DefaultIfEmpty P1 @smitpatel
- [x] GroupBy P5 @smitpatel
- [x] OfType/is P3 @ajcvickers
~- [ ] Reverse P7~ #17388
- [x] SelectMany P2 @smitpatel","Query work for in-memory provider  - [x] Reference Include
- [x] Collection Include
- [x] Collection in projection @smitpatel 
- [x] Single non-scalar result in projection @smitpatel 
- [x] Translate Owned navigation properties in query @smitpatel
-",17480,smitpatel,efcore
9591,Query: Distinct GroupBy fails for InMemory,"Query
```C#       
        [ConditionalFact]
        public virtual void Select_Distinct_GroupBy()
        {
            AssertQuery<Order>(
                os => os.Select(o => new { o.CustomerID, o.EmployeeID }).OrderBy(a => a.EmployeeID).Distinct().GroupBy(o => o.CustomerID),
                elementSorter: GroupingSorter<string, object>(),
                elementAsserter: GroupingAsserter<string, dynamic>(d => d.EmployeeID));
        }
```
Fails in assertion
Query Plan
```
Output from Microsoft.EntityFrameworkCore.Query.SimpleQueryInMemoryTest.Select_Distinct_GroupBy:
  Entity Framework Core 2.1.0-preview1 initialized 'NorthwindContext' using provider 'Microsoft.EntityFrameworkCore.InMemory' with options: SensitiveDataLoggingEnabled StoreName=Northwind 
  Compiling query model: 
  '(from Order o in DbSet<Order>
  order by [o].EmployeeID asc
  select new <>f__AnonymousType273<string, Nullable<int>>(
      [o].CustomerID, 
      [o].EmployeeID
  ))
  .Distinct()
  .GroupBy([o].CustomerID, new <>f__AnonymousType273`2(CustomerID = [o].CustomerID, EmployeeID = [o].EmployeeID))'
  Optimized query model: 
  '(from Order o in DbSet<Order>
  order by [o].EmployeeID asc
  select new <>f__AnonymousType273<string, Nullable<int>>(
      [o].CustomerID, 
      [o].EmployeeID
  ))
  .Distinct()
  .GroupBy([o].CustomerID, new <>f__AnonymousType273`2(CustomerID = [o].CustomerID, EmployeeID = [o].EmployeeID))'
  (QueryContext queryContext) => IEnumerable<IGrouping<string, <>f__AnonymousType273<string, Nullable<int>>>> _InterceptExceptions(
      source: IEnumerable<IGrouping<string, <>f__AnonymousType273<string, Nullable<int>>>> _GroupBy(
          source: IEnumerable<ValueBuffer> Distinct(IOrderedEnumerable<ValueBuffer> _OrderBy(
                  source: IEnumerable<ValueBuffer> ProjectionQuery(
                      queryContext: queryContext, 
                      entityType: EntityType: Order), 
                  expression: (ValueBuffer o) => Nullable<int> TryReadValue(o, 2, Order.EmployeeID), 
                  orderingDirection: Asc)), 
          keySelector: (ValueBuffer o) => string TryReadValue(o, 1, Order.CustomerID), 
          elementSelector: (ValueBuffer o) => new <>f__AnonymousType273<string, Nullable<int>>(
              string TryReadValue(o, 1, Order.CustomerID), 
              Nullable<int> TryReadValue(o, 2, Order.EmployeeID)
          )), 
      contextType: TestModels.Northwind.NorthwindContext, 
      logger: DiagnosticsLogger<Query>, 
      queryContext: queryContext)
```

The issue is Distinct is being applied on ValueBuffers which is not going work hence we generate duplicate entries in grouping. The root cause is we are optimizing away the selector in `EntityQueryModelVisitor.VisitSelectClause` to skip for GroupBy or All result operator. But we cannot do that if there are other result operators.

Disabling test for inmemory for now.
","Query: Distinct GroupBy fails for InMemory  Query
```C#       
        [ConditionalFact]
        public virtual void Select_Distinct_GroupBy()
        {
            AssertQuery<Order>(
                os => os.Select(o => new { o.CustomerID, o.Emplo",17480,smitpatel,efcore
17276,IQueryable extention within db context,"Moved from https://github.com/dotnet/core/issues/3220 filed by @RomasB

Interface:

    public interface IRemovable
    {
        bool IsRemoved { get; set; }

        string RemovedByUser { get; set; }

        DateTime? Removed { get; set; }
    }

Extention: 

        public static List<T> List<T>(this IQueryable<T> query) where T : IRemovable
        {
            return query.Where(x => !x.IsRemoved).ToList();
        }

Usage:

      _dbContext.RemovableEntities.List()


Getting an exception like: ""Operation is not valid due to the current state of the object.""
Putting condition directly without extension everything works fine.

Looks like exception started to occur within .net core 3.0 preview 8





","IQueryable extention within db context  Moved from https://github.com/dotnet/core/issues/3220 filed by @RomasB

Interface:

    public interface IRemovable
    {
        bool IsRemoved { get; set; }

        string RemovedByUser { get; set; }
",17438,smitpatel,efcore
17099,Using EF.Property to target included entity property,"Hi!

Is it possible to use `EF.Property<>` to target property of included entities? Following attempts:
```c#
 var fail = await Dependencies.EntityServices.FavoriteExerciseService.GetAll()
     .Include(m => m.Exercise)
     .Where(m => EF.Functions.Contains(EF.Property<string>(m, ""Exercise.DisplayName""), ""\""*press*\""""))
     .ToListAsync();

var fail = await Dependencies.EntityServices.FavoriteExerciseService.GetAll()
     .Include(m => m.Exercise)
     .Where(m => EF.Functions.Contains(EF.Property<string>(m, m.Exercise.DisplayName), ""\""*press*\""""))
     .ToListAsync();
```

throw 

```
The property 'Exercise.DisplayName' on entity type 'FavoriteExercise' could not be found. Ensure that the property exists and has been included in the model.
```

The `DisplayName` on `Exercise` type is properly indexed and this works and returns correct results:

```c#
var ok = await Dependencies.EntityServices.ExerciseService.GetAll()
                .Where(m => EF.Functions.Contains(EF.Property<string>(m, ""DisplayName""), ""\""*press*\""""))
                .ToListAsync();
```

I also tried running following query on SQL which also returns proper results.

```sql
select * from FavoriteExercises join Exercises
on FavoriteExercises.ExerciseId = Exercises.Id
where Contains(Exercises.DisplayName, '""*press*""')
```

Thank you for any help or suggestions.

### Further technical details
EF Core version: 3.0.0-preview5.19227.1
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Win 10
IDE: Visual Studio 2019 preview","Using EF.Property to target included entity property  Hi!

Is it possible to use `EF.Property<>` to target property of included entities? Following attempts:
```c#
 var fail = await Dependencies.EntityServices.FavoriteExerciseService.GetAll()
     .I",17438,smitpatel,efcore
16759,Expression on interface implemented by entity throws InvalidOperationException,"I have an Expression that is used to filter entities by Id. The Expression is based on the interface that is implemented by the entity (see the code below). This throws InvalidOperationException.
```
Exception message: Operation is not valid due to the current state of the object.
Stack trace:
System.InvalidOperationException
  HResult=0x80131509
  Message=Operation is not valid due to the current state of the object.
  Source=Microsoft.EntityFrameworkCore.Relational
  StackTrace:
   at Microsoft.EntityFrameworkCore.Relational.Query.Pipeline.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate) in /_/src/EFCore.Relational/Query/Pipeline/RelationalQueryableMethodTranslatingExpressionVisitor.cs:line 867
   at Microsoft.EntityFrameworkCore.Query.Pipeline.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression) in /_/src/EFCore/Query/Pipeline/QueryableMethodTranslatingExpressionVisitor.cs:line 424
   at Microsoft.EntityFrameworkCore.Relational.Query.Pipeline.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression) in /_/src/EFCore.Relational/Query/Pipeline/RelationalQueryableMethodTranslatingExpressionVisitor.cs:line 61
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.Pipeline.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query) in /_/src/EFCore/Query/Pipeline/QueryCompilationContext.cs:line 65
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async) in /_/src/EFCore/Storage/Database.cs:line 72
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async) in /_/src/EFCore/Query/Internal/QueryCompiler.cs:line 108
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0() in /_/src/EFCore/Query/Internal/QueryCompiler.cs:line 97
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler) in /_/src/EFCore/Query/Internal/CompiledQueryCache.cs:line 84
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler) in /_/src/EFCore/Query/Internal/CompiledQueryCache.cs:line 59
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query) in /_/src/EFCore/Query/Internal/QueryCompiler.cs:line 93
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression) in /_/src/EFCore/Query/Internal/EntityQueryProvider.cs:line 79
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator() in /_/src/EFCore/Query/Internal/EntityQueryable`.cs:line 94
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at EfBug.Program.Main(String[] args) in C:\tmp\EfBug\EfBug\Program.cs:line 52


```

### Steps to reproduce
```c#
	interface IHasId<out T>
	{
		T Id { get; }
	}

	class Entity : IHasId<int>
	{
		public virtual int Id { get; protected set; }
	}

	class Context : DbContext
	{
		public Context(DbContextOptions options) : base(options)
		{
		}

		public DbSet<Entity> Entities { get; set; }
	}

	class Specification<T>
		where T : IHasId<int>
	{
		public Expression<Func<T, bool>> Criteria { get; }

		public Specification(int id)
		{
			Criteria = t => t.Id == id;
		}
	}

	class Program
	{
		static void Main(string[] args)
		{
			var services = new ServiceCollection();
			services.AddDbContext<Context>(builder => builder.UseSqlServer(""Data Source=(localdb)\\MSSQLLocalDB;Database=test;Integrated Security=True""));
			var serviceProvider = services.BuildServiceProvider();

			var context = serviceProvider.GetRequiredService<Context>();
			context.Database.EnsureCreated();

			var specification = new Specification<Entity>(1);
			var entities = context.Set<Entity>().Where(specification.Criteria);
			var list = entities.ToList();
		}
	}
```

### Further technical details
EF Core version: 3.0.0-preview7.19362.6
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10 Build 18362.239
IDE: Visual Studio 2019 16.3.0 Preview 1.0",Expression on interface implemented by entity throws InvalidOperationException  I have an Expression that is used to filter entities by Id. The Expression is based on the interface that is implemented by the entity (see the code below). This throws Invali,17438,smitpatel,efcore
18519,Query: Owned collection should defer translating correlation predicate,"When we expand owned collections in Relational, we convert the correlation predicate to SQL and add it to inner SelectExpression. This SelectExpression contains reference to outer which can be modified during PushDown and we don't have any way to update it. We should generate Where in LINQ and let it get translated to SQL when visiting it so it gets updated reference as necessary.","Query: Owned collection should defer translating correlation predicate  When we expand owned collections in Relational, we convert the correlation predicate to SQL and add it to inner SelectExpression. This SelectExpression contains reference to outer whi",18520,smitpatel,efcore
18514,'SqlException: The multi-part identifier xxxx could not be bound' for a query scenario that was working in 2.2 that doesn't work in 3.0,"The following query was working in 2.2 but fails in 3.0.  The original query is more complex that this but I narrowed it down to this:
```
var result = dbSetMembre
    .Take(25)
    .Select(a => new
    {
        aId = a.Id,
        a1 = a.TelephonesMembres
        .Select(b => new
        {
            bId = b.Id
        })
        .FirstOrDefault(),
        a2 = a.CourrielsMembres
        .Select(c => new
        {
            cId = c.Id,
        })
}).ToList();
```
generates the following sql:
```
exec sp_executesql N'SELECT [t].[Id], [t2].[Id], [t3].[Id]
FROM (
    SELECT TOP(@__p_0) [m].[Id]
    FROM [Membre] AS [m]
) AS [t]
LEFT JOIN (
    SELECT [t1].[Id], [t1].[MembreId]
    FROM (
        SELECT [t0].[Id], [t0].[MembreId], ROW_NUMBER() OVER(PARTITION BY [t0].[MembreId] ORDER BY [t0].[Id]) AS [row]
        FROM [TelephoneMembre] AS [t0]
    ) AS [t1]
    WHERE [t1].[row] <= 1
) AS [t2] ON [t].[Id] = [t2].[MembreId]
OUTER APPLY (
    SELECT [c].[Id]
    FROM [CourrielMembre] AS [c]
    WHERE [m].[Id] = [c].[MembreId]
) AS [t3]
ORDER BY [t].[Id], [t3].[Id]',N'@__p_0 int',@__p_0=25
```
which result with the following error: SqlException: The multi-part identifier ""m.Id"" could not be bound.  When analyzing the generated sql, we can see that the outer apply is using m.Id from a sub query but it must use the result of that sub query: t.Id

### Further technical details

EF Core version: 3.0
Database provider: Microsoft.EntityFrameworkCore.SqlServer
Target framework: .NET Core 3.0
Operating system: windows 7
IDE: Visual Studio 2019 16.3.5",'SqlException: The multi-part identifier xxxx could not be bound' for a query scenario that was working in 2.2 that doesn't work in 3.0  The following query was working in 2.2 but fails in 3.0.  The original query is more complex that this but I narrowed,18520,smitpatel,efcore
16819,Cleanup or back-out support for column/table comments,"Several issues with the implementation have been found--see #16800 #16799 #16808

Given where we are in the 3.0 schedule, we may need to back this out since this is not a priority feature.","Cleanup or back-out support for column/table comments  Several issues with the implementation have been found--see #16800 #16799 #16808

Given where we are in the 3.0 schedule, we may need to back this out since this is not a priority feature.",16981,roji,efcore
16798,AlterTableOperation doesn't have a full OldTable,"While AlterColumnOperation has an OldColumn of type ColumnOperation, AlterTableOperation's OldTable property has type Annotatable. This only allows comparing annotations with their previous values and not relational, non-annotation values.

In particular this means we can't access the old comment on a table, to avoid generating the SQL for it every time the table is altered.","AlterTableOperation doesn't have a full OldTable  While AlterColumnOperation has an OldColumn of type ColumnOperation, AlterTableOperation's OldTable property has type Annotatable. This only allows comparing annotations with their previous values and not",16981,roji,efcore
16620,Nav Expansion: Owned collections are expanded,Owned navigation cannot be expanded,Nav Expansion: Owned collections are expanded  Owned navigation cannot be expanded,16927,smitpatel,efcore
16392,Cosmos: Collection rewrite in navigation causes type error,"```
System.ArgumentException : Expression of type 'System.Collections.Generic.ICollection`1[Microsoft.EntityFrameworkCore.Query.OwnedQueryTestBase`1+Order[Microsoft.EntityFrameworkCore.Cosmos.Query.OwnedQueryCosmosTest+OwnedQueryCosmosFixture]]' cannot be used for parameter of type 'System.Linq.IQueryable`1[Microsoft.EntityFrameworkCore.Query.OwnedQueryTestBase`1+Order[Microsoft.EntityFrameworkCore.Cosmos.Query.OwnedQueryCosmosTest+OwnedQueryCosmosFixture]]' of method 'System.Linq.IQueryable`1[System.Boolean] Select[Order,Boolean](System.Linq.IQueryable`1[Microsoft.EntityFrameworkCore.Query.OwnedQueryTestBase`1+Order[Microsoft.EntityFrameworkCore.Cosmos.Query.OwnedQueryCosmosTest+OwnedQueryCosmosFixture]], System.Linq.Expressions.Expression`1[System.Func`2[Microsoft.EntityFrameworkCore.Query.OwnedQueryTestBase`1+Order[Microsoft.EntityFrameworkCore.Cosmos.Query.OwnedQueryCosmosTest+OwnedQueryCosmosFixture],System.Boolean]])' (Parameter 'arg0')
 ```","Cosmos: Collection rewrite in navigation causes type error  ```
System.ArgumentException : Expression of type 'System.Collections.Generic.ICollection`1[Microsoft.EntityFrameworkCore.Query.OwnedQueryTestBase`1+Order[Microsoft.EntityFrameworkCore.Cosmos.Qu",16927,smitpatel,efcore
15285,QueryRewrite: correctly handle weak/owned entities,Currently weak entities are not handled properly - we lose type entity type information when we generate entity queryable for the expanded entity. In the old pipeline we keep track of them using dictionary. ~We can do similar thing in the new pipeline or embed the entity type information directly into expression tree~,QueryRewrite: correctly handle weak/owned entities  Currently weak entities are not handled properly - we lose type entity type information when we generate entity queryable for the expanded entity. In the old pipeline we keep track of them using dictiona,16927,smitpatel,efcore
15554,QueryRewrite: support contains on collection navigation,"query:

```cs
customers.Select(c => c.Orders.Contains(someOrder))
```

currently Enumerable.Contains is translated to `IN`, which is incorrect for the case above","QueryRewrite: support contains on collection navigation  query:

```cs
customers.Select(c => c.Orders.Contains(someOrder))
```

currently Enumerable.Contains is translated to `IN`, which is incorrect for the case above",16841,roji,efcore
16134,Entity equality: Contains and OrderBy,"Closes #15939

For Contains, I realized half-way through that the test (Contains_over_entityType_should_rewrite_to_identity_equality) depends on #15855, since the second query sends the ID selected in the first query. Am still submitting the implementation - the expression tree generated internally looks good. I can also hold off until #15855 is done.

Also, I tested the case `Orders.Contains(null)` and was surprised to see the null is parameterized. Is this intended?

Finally, unrelated to EE: I understand the need to split into two queries for Single, since the 1-element verification needs to happen client-side. However, for First, FOD, Last, LOD we can translate as a single query:

```sql
SELECT (
    SELECT TOP(1) [o].[OrderID]
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] = 10248)
IN (
    SELECT [o].[OrderID]
    FROM [Orders] AS [o]
    WHERE [o].[CustomerID] = N'VINET'
)"");
```

(this is PostgreSQL, SQLServer requires the surrounding CASE for boolean). Is this optimization already tracked somewhere, should I open an issue?

For OrderBy, note that I've implemented support for composite keys, where we split the comparison into multiple OrderBy().ThenBy() operators.","Entity equality: Contains and OrderBy  Closes #15939

For Contains, I realized half-way through that the test (Contains_over_entityType_should_rewrite_to_identity_equality) depends on #15855, since the second query sends the ID selected in the first que",16841,roji,efcore
16799,Comment removal in migrations,"~SqlServerMigrationsSqlGenerator never removes comments.~

It's a bit odd that there's a general API for adding comments (MigrationsSqlGenerator.GenerateComment) but removal is a special SqlServer-specific thing...","Comment removal in migrations  ~SqlServerMigrationsSqlGenerator never removes comments.~

It's a bit odd that there's a general API for adding comments (MigrationsSqlGenerator.GenerateComment) but removal is a special SqlServer-specific thing...",16828,roji,efcore
16800,Can't do memory-optimized tables with comments,"SqlServer's migrations generator for CreateTable and AddColumn call base and then tacks on `WITH (MEMORY_OPTIMIZED = ON)`. But the base implementation now renders comments as well, which are different statements, so we get mangled SQL.

This makes me question the general model of optionally terminating or not - in Npgsql I never use it, since I typically have to insert SQL in the middle anyway, so I end up duplicating the SQL. There are still some places in SqlServer where terminate false is used without bugs (e.g. AddForeignKey) but I'm not sure it's worth it.

What generally works better IMHO is separating out logic for fragments inside statements, e.g. CreateTableColumn, CreateTableConstraints, GenerateComment.

We can consider removing this, or fix CreateTable and AddColumn specifically.","Can't do memory-optimized tables with comments  SqlServer's migrations generator for CreateTable and AddColumn call base and then tacks on `WITH (MEMORY_OPTIMIZED = ON)`. But the base implementation now renders comments as well, which are different statem",16828,roji,efcore
214,Model Definition: Custom conventions,"- [x] Create public interfaces for metadata API to be used by conventions.
- [x] Change `QueryFilter`, `DefiningQuery`, `IsEagerLoaded`, `IsShadowProperty` , `IsIndexedProperty`, `BeforeSaveBehavior` `AfterSaveBehavior` to extension methods.
- [x] Throw when calling `SetField` would change the shadowness of a property or the name of the identifying `MemberInfo`.
- [x] Rename `GetContainingPrimaryKey` to `FindContainingPrimaryKey`.
- [x] Throw when calling `SetField` on a shadow or a field-only property.
- [x] Create public interfaces that the internal model builders implement, e.g. `IConventionModelBuilder`. This will allow cleaner API, without the explicit `ConfigurationSource` parameter.
- [x] Throw instead of silently failing when a non-explicit configuration call is invalid. This would require adding quiz API ('CanSet').
- [x] Make model element references consistent (e.g. `Property` vs `IProperty` vs `string` vs `PropertyInfo`)
- [x] Add provider-specific extension methods for convention metadata interfaces.
- [x] Rename and move `RelationalAnnotations` and `RelationalAnnotationsBuilder` to Core.
- [x] Remove unused methods on provider classes like  `SqlServerPropertyBuilderAnnotations.ColumnName`.
- [x] Rename the `Apply` methods to be more descriptive and make the return types consistent, still allowing to stop the execution of the following conventions.
- [x] Pass `CoreConventionSetBuilderDependencies` to the constructor of all conventions.
- [x] Add convention type for configuring a type as owned and use it to remove ambiguous ownerships.
- [x] Track the model elements as they are modified by conventions, so a call to a convention never returns an element that is no longer in the model.
- [x] Add a way to delay the convention execution.
- [x] Move logic from `ModelCustomizer` to a convention.
- [x] Add `SqlServerValueGenerationStrategy.None` value that can be used to override the model default.
- [x] Filter out the core annotations changes from conventions.
- [x] Remove `PropertyMetadataChanged()` calls and don't cache indexes while the model is mutable.
- [ ] Add sugar methods to add/remove a convention to/from all appropriate convention lists.
- [ ] Separate conventions into several groups/tags: required, data-annotations, context type-dependent, opt-in and other. Add API to include/exclude them from the convention set. (`SqlServerEnumConvention` would be opt-in)
- [ ] Consider creating a convention set to mimic EF6 behavior https://github.com/aspnet/EntityFramework.Docs/issues/1971
- [ ] Add API to `DbContextOptionsBuilder` that allows to switch convention sets or to modify them in a granular way (this could also be used for other global configuration like https://github.com/aspnet/EntityFrameworkCore/issues/10784).","Model Definition: Custom conventions  - [x] Create public interfaces for metadata API to be used by conventions.
- [x] Change `QueryFilter`, `DefiningQuery`, `IsEagerLoaded`, `IsShadowProperty` , `IsIndexedProperty`, `BeforeSaveBehavior` `AfterSaveBehavi",15793,AndriySvyryd,efcore
6681,Move useful methods from M.EFC.Metadata.Internal.EntityTypeExtensions,"There are many methods like GetDeclared\* that are useful enough to be made public.

Also ForeignKeyExtensions.ResolveOtherEntityType()","Move useful methods from M.EFC.Metadata.Internal.EntityTypeExtensions  There are many methods like GetDeclared\* that are useful enough to be made public.

Also ForeignKeyExtensions.ResolveOtherEntityType()",15793,AndriySvyryd,efcore
12285,Review exception classes for best practices,"Some of our benchmarks on SQLite are failing with following error. (Initialization tests)
```
[07:09:07] :	 [Step 3/4] System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.Runtime.Serialization.SerializationException: Type 'Microsoft.EntityFrameworkCore.DbUpdateException' in assembly 'Microsoft.EntityFrameworkCore, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' is not marked as serializable.
[07:09:07] :	 [Step 3/4]    at Microsoft.EntityFrameworkCore.Benchmarks.Initialization.ColdStartEnabledTests.InitializeAndSaveChanges_AdventureWorks(Int32 count)
[07:09:07] :	 [Step 3/4]    at BenchmarkDotNet.Autogenerated.Runnable.MainMultiAction(Int64 invokeCount)
[07:09:07] :	 [Step 3/4]    at BenchmarkDotNet.Engines.Engine.Jitting()
[07:09:07] :	 [Step 3/4]    at BenchmarkDotNet.Autogenerated.Runnable.Run(IHost host)
[07:09:07] :	 [Step 3/4]    --- End of inner exception stack trace ---
[07:09:07] :	 [Step 3/4]    at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
[07:09:07] :	 [Step 3/4]    at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
[07:09:07] :	 [Step 3/4]    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[07:09:07] :	 [Step 3/4]    at BenchmarkDotNet.Autogenerated.Program.AfterAssemblyLoadingAttached(String[] args)
```
Commits which broke caused error to start
77e08fc0fea6 
d8b7ebbfabff 
7b9938ae5a15","Review exception classes for best practices  Some of our benchmarks on SQLite are failing with following error. (Initialization tests)
```
[07:09:07] :	 [Step 3/4] System.Reflection.TargetInvocationException: Exception has been thrown by the target of a",15779,ajcvickers,efcore
15214,EF Core Querying Every DbSet Under Certain Circumstances,"This was originally logged at #13310 and #15000.  /cc @rosspace, @ajcvickers, and @divega who were involved in the originals.

Error:
When I hit a SQL exception of some sort in certain scenarios, such as a foreign key violation or a length exceeded, EF Core goes haywire and **starts querying every DbSet in the DbContext**.  This causes my server(s) to run out of memory.

In tracking this down, I found that this happens when the following are true:
1. Pending update for AT LEAST two **different** entities
2. The SQL exception occurs for a 3rd entity AND AT LEAST two records of that entity.

I will come up with a minimal repro in the coming days that has all the data seeded and all that, but I figured I'd log this to give a head start on this.

### Steps to reproduce
The code below throws an error.  Note, it will not behave this way if there is only one other valid entity pending an update (below the `user` and `role` variables are pending an update).  And it will not behave this way if there is only one UserRole with a SQL issue (i.e. if you switch the `i < 2` to `i < 1` it will not have this issue).

```csharp
    [AllowAnonymous]
    public class IndexModel : PageModel
    {
        private readonly ApplicationDbContext _dbContext;

        public IndexModel(ApplicationDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<IActionResult> OnGet()
        {   
            // First update pending
            var user = await _dbContext.Users.FirstOrDefaultAsync();
            user.PhoneNumber = user.PhoneNumber == ""5551234567"" ? ""2221234567"" : ""5551234567"";

            // Second update pending
            var role = await _dbContext.Roles.FirstOrDefaultAsync();
            role.ConcurrencyStamp = Guid.NewGuid().ToString();

            // Foreign key issue
            for (int i = 0; i < 2; i++)
            {
                var userRole = new BenefitsPortalUserRole
                {
                    UserId = ""0f7183fd-94f6-40de-9ee4-e30f4d3b6167"",
                    RoleId = Guid.NewGuid().ToString() // this role ID is not valid
                };

                _dbContext.UserRoles.Add(userRole);
            }

           await _dbContext.SaveChangesAsync();
            
            return Page();
        }
    }
```

Below is the logs from running this.  You can see it queries all the DbSets (in this case, I only have the Identity DbSets in my DbContext) like it queries the Application_User_External_Tokens even though that's not involved in this at all.  It looks like it does this twice.  I have bolded where it happens below.




EfCoreRepro> [23:56:38 INF] Request starting HTTP/1.1 GET http://localhost:44325/  
EfCoreRepro> [23:56:38 INF] Route matched with {page = ""/Index"", action = """", controller = """"}. Executing action /Index
EfCoreRepro> [23:56:38 INF] Executing handler method OnGet with arguments (null) - ModelState is Valid
EfCoreRepro> [23:56:38 INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
EfCoreRepro> [23:56:38 INF] Executed DbCommand (41ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT TOP(1) [g].[Id], [g].[AccessFailedCount], [g].[ConcurrencyStamp], [g].[Email], [g].[EmailConfirmed], [g].[LockoutEnabled], [g].[LockoutEnd], [g].[NeedsToChangePassword], [g].[NormalizedEmail], [g].[NormalizedUserName], [g].[PasswordHash], [g].[PersonId], [g].[PhoneNumber], [g].[PhoneNumberConfirmed], [g].[SecurityStamp], [g].[TwoFactorEnabled], [g].[UserName]
EfCoreRepro> FROM [Application_Users] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (39ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT TOP(1) [g].[Id], [g].[ConcurrencyStamp], [g].[Name], [g].[NormalizedName]
EfCoreRepro> FROM [Application_Roles] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (48ms) [Parameters=[@p1='?' (Size = 450), @p0='?' (Size = 8000) (DbType = AnsiString), @p2='?' (Size = 100) (DbType = AnsiString), @p3='?' (DbType = Int32), @p4='?' (Size = 8000) (DbType = AnsiString), @p5='?' (Size = 100) (DbType = AnsiString), @p6='?' (DbType = Int32), @p7='?' (Size = 900) (DbType = AnsiString), @p8='?' (Size = 100) (DbType = AnsiString), @p9='?' (DbType = Int32), @p10='?' (Size = 8000) (DbType = AnsiString), @p11='?' (Size = 100) (DbType = AnsiString), @p12='?' (DbType = Int32), @p13='?' (Size = 900) (DbType = AnsiString), @p15='?' (Size = 450), @p16='?' (Size = 8000) (DbType = AnsiString), @p14='?' (Size = 15) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SET NOCOUNT ON;
EfCoreRepro> UPDATE [Application_Roles] SET [ConcurrencyStamp] = @p0
EfCoreRepro> WHERE [Id] = @p1;
EfCoreRepro> SELECT @@ROWCOUNT;
EfCoreRepro> 
EfCoreRepro> DECLARE @inserted1 TABLE ([Id] bigint, [_Position] [int]);
EfCoreRepro> MERGE [Application_User_Roles] USING (
EfCoreRepro> VALUES (@p2, @p3, @p4, @p5, @p6, @p7, 0),
EfCoreRepro> (@p8, @p9, @p10, @p11, @p12, @p13, 1)) AS i ([EmployerGuid], [EmployerId], [RoleId], [SubgroupGuid], [SubgroupId], [UserId], _Position) ON 1=0
EfCoreRepro> WHEN NOT MATCHED THEN
EfCoreRepro> INSERT ([EmployerGuid], [EmployerId], [RoleId], [SubgroupGuid], [SubgroupId], [UserId])
EfCoreRepro> VALUES (i.[EmployerGuid], i.[EmployerId], i.[RoleId], i.[SubgroupGuid], i.[SubgroupId], i.[UserId])
EfCoreRepro> OUTPUT INSERTED.[Id], i._Position
EfCoreRepro> INTO @inserted1;
EfCoreRepro> 
EfCoreRepro> SELECT [t].[Id] FROM [Application_User_Roles] t
EfCoreRepro> INNER JOIN @inserted1 i ON ([t].[Id] = [i].[Id])
EfCoreRepro> ORDER BY [i].[_Position];
EfCoreRepro> 
EfCoreRepro> UPDATE [Application_Users] SET [PhoneNumber] = @p14
EfCoreRepro> WHERE [Id] = @p15 AND [ConcurrencyStamp] = @p16;
EfCoreRepro> SELECT @@ROWCOUNT;
EfCoreRepro> [23:56:38 INF] Executed DbCommand (43ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[EmployerGuid], [g].[EmployerId], [g].[RoleId], [g].[SubgroupGuid], [g].[SubgroupId], [g].[UserId]
EfCoreRepro> FROM [Application_User_Roles] AS [g]
EfCoreRepro> [23:56:38 ERR] An exception occurred in the database while iterating the results of a query for context type 'Entities.ApplicationDbContext'.
EfCoreRepro> System.InvalidOperationException: An exception occurred while reading a database value for property 'ApplicationUserRole.EmployerId'. The expected type was 'System.Int32' but the actual value was null. ---> System.NullReferenceException: Object reference not set to an instance of an object.
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    --- End of inner exception stack trace ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.ThrowReadValueException[TValue](Exception exception, Object value, IPropertyBase property)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    at lambda_method(Closure , MaterializationContext )
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.UnbufferedEntityShaper`1.Shape(QueryContext queryContext, ValueBuffer& valueBuffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
EfCoreRepro> System.InvalidOperationException: An exception occurred while reading a database value for property 'ApplicationUserRole.EmployerId'. The expected type was 'System.Int32' but the actual value was null. ---> System.NullReferenceException: Object reference not set to an instance of an object.
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    --- End of inner exception stack trace ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.ThrowReadValueException[TValue](Exception exception, Object value, IPropertyBase property)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    at lambda_method(Closure , MaterializationContext )
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.UnbufferedEntityShaper`1.Shape(QueryContext queryContext, ValueBuffer& valueBuffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
EfCoreRepro> [23:56:38 INF] Executed DbCommand (41ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
**EfCoreRepro> SELECT [g].[Id], [g].[ConcurrencyStamp], [g].[Name], [g].[NormalizedName]
EfCoreRepro> FROM [Application_Roles] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (42ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[ClaimType], [g].[ClaimValue], [g].[RoleId]
EfCoreRepro> FROM [Application_Role_Claims] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (39ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[AccessFailedCount], [g].[ConcurrencyStamp], [g].[Email], [g].[EmailConfirmed], [g].[LockoutEnabled], [g].[LockoutEnd], [g].[NeedsToChangePassword], [g].[NormalizedEmail], [g].[NormalizedUserName], [g].[PasswordHash], [g].[PersonId], [g].[PhoneNumber], [g].[PhoneNumberConfirmed], [g].[SecurityStamp], [g].[TwoFactorEnabled], [g].[UserName]
EfCoreRepro> FROM [Application_Users] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (40ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[ClaimType], [g].[ClaimValue], [g].[UserId]
EfCoreRepro> FROM [Application_User_Claims] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (41ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[LoginProvider], [g].[ProviderKey], [g].[ProviderDisplayName], [g].[UserId]
EfCoreRepro> FROM [Application_User_External_Logins] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (40ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[UserId], [g].[LoginProvider], [g].[Name], [g].[Value]
EfCoreRepro> FROM [Application_User_External_Tokens] AS [g]**
EfCoreRepro> [23:56:38 ERR] An exception occurred in the database while saving changes for context type 'Entities.ApplicationDbContext'.
EfCoreRepro> Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while updating the entries. See the inner exception for details. ---> System.Data.SqlClient.SqlException: The MERGE statement conflicted with the FOREIGN KEY constraint ""FK_PortalUserRoles_PortalRoles_RoleId"". The conflict occurred in database ""EfCoreRepro"", table ""dbo.Application_Roles"", column 'Id'.
EfCoreRepro>    at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
EfCoreRepro>    at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
EfCoreRepro>    at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
EfCoreRepro>    at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryHasMoreResults(Boolean& moreResults)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryNextResult(Boolean& more)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.<>c__DisplayClass187_0.<NextResultAsync>b__1(Task t)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.InvokeRetryable[T](Func`2 moreFunc, TaskCompletionSource`1 source, IDisposable objectToDispose)
EfCoreRepro> --- End of stack trace from previous location where exception was thrown ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
EfCoreRepro>    --- End of inner exception stack trace ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
EfCoreRepro> Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while updating the entries. See the inner exception for details. ---> System.Data.SqlClient.SqlException: The MERGE statement conflicted with the FOREIGN KEY constraint ""FK_PortalUserRoles_PortalRoles_RoleId"". The conflict occurred in database ""EfCoreRepro"", table ""dbo.Application_Roles"", column 'Id'.
EfCoreRepro>    at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
EfCoreRepro>    at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
EfCoreRepro>    at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
EfCoreRepro>    at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryHasMoreResults(Boolean& moreResults)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryNextResult(Boolean& more)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.<>c__DisplayClass187_0.<NextResultAsync>b__1(Task t)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.InvokeRetryable[T](Func`2 moreFunc, TaskCompletionSource`1 source, IDisposable objectToDispose)
EfCoreRepro> --- End of stack trace from previous location where exception was thrown ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
EfCoreRepro>    --- End of inner exception stack trace ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
EfCoreRepro> [23:56:38 INF] Executed action /Index in 526.8129ms
EfCoreRepro> [23:56:38 INF] Executed DbCommand (39ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
EfCoreRepro> [23:56:38 INF] Executed DbCommand (41ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[EmployerGuid], [g].[EmployerId], [g].[RoleId], [g].[SubgroupGuid], [g].[SubgroupId], [g].[UserId]
EfCoreRepro> FROM [Application_User_Roles] AS [g]
EfCoreRepro> [23:56:38 ERR] An exception occurred in the database while iterating the results of a query for context type 'Entities.ApplicationDbContext'.
EfCoreRepro> System.InvalidOperationException: An exception occurred while reading a database value for property 'ApplicationUserRole.EmployerId'. The expected type was 'System.Int32' but the actual value was null. ---> System.NullReferenceException: Object reference not set to an instance of an object.
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    --- End of inner exception stack trace ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.ThrowReadValueException[TValue](Exception exception, Object value, IPropertyBase property)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    at lambda_method(Closure , MaterializationContext )
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.UnbufferedEntityShaper`1.Shape(QueryContext queryContext, ValueBuffer& valueBuffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
EfCoreRepro> System.InvalidOperationException: An exception occurred while reading a database value for property 'ApplicationUserRole.EmployerId'. The expected type was 'System.Int32' but the actual value was null. ---> System.NullReferenceException: Object reference not set to an instance of an object.
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    --- End of inner exception stack trace ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.ThrowReadValueException[TValue](Exception exception, Object value, IPropertyBase property)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer& valueBuffer, Int32 index, IPropertyBase property)
EfCoreRepro>    at lambda_method(Closure , MaterializationContext )
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.UnbufferedEntityShaper`1.Shape(QueryContext queryContext, ValueBuffer& valueBuffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
EfCoreRepro> [23:56:38 INF] Executed DbCommand (43ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
**EfCoreRepro> SELECT [g].[Id], [g].[ConcurrencyStamp], [g].[Name], [g].[NormalizedName]
EfCoreRepro> FROM [Application_Roles] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (38ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[ClaimType], [g].[ClaimValue], [g].[RoleId]
EfCoreRepro> FROM [Application_Role_Claims] AS [g]
EfCoreRepro> [23:56:38 INF] Executed DbCommand (40ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[AccessFailedCount], [g].[ConcurrencyStamp], [g].[Email], [g].[EmailConfirmed], [g].[LockoutEnabled], [g].[LockoutEnd], [g].[NeedsToChangePassword], [g].[NormalizedEmail], [g].[NormalizedUserName], [g].[PasswordHash], [g].[PersonId], [g].[PhoneNumber], [g].[PhoneNumberConfirmed], [g].[SecurityStamp], [g].[TwoFactorEnabled], [g].[UserName]
EfCoreRepro> FROM [Application_Users] AS [g]
EfCoreRepro> [23:56:39 INF] Executed DbCommand (42ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[Id], [g].[ClaimType], [g].[ClaimValue], [g].[UserId]
EfCoreRepro> FROM [Application_User_Claims] AS [g]
EfCoreRepro> [23:56:39 INF] Executed DbCommand (48ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[LoginProvider], [g].[ProviderKey], [g].[ProviderDisplayName], [g].[UserId]
EfCoreRepro> FROM [Application_User_External_Logins] AS [g]
EfCoreRepro> [23:56:39 INF] Executed DbCommand (40ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
EfCoreRepro> SELECT [g].[UserId], [g].[LoginProvider], [g].[Name], [g].[Value]
EfCoreRepro> FROM [Application_User_External_Tokens] AS [g]**
EfCoreRepro> [23:56:38 ERR] An unhandled exception has occurred while executing the request.
EfCoreRepro> Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while updating the entries. See the inner exception for details. ---> System.Data.SqlClient.SqlException: The MERGE statement conflicted with the FOREIGN KEY constraint ""FK_PortalUserRoles_PortalRoles_RoleId"". The conflict occurred in database ""EfCoreRepro"", table ""dbo.Application_Roles"", column 'Id'.
EfCoreRepro>    at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
EfCoreRepro>    at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
EfCoreRepro>    at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
EfCoreRepro>    at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryHasMoreResults(Boolean& moreResults)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.TryNextResult(Boolean& more)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.<>c__DisplayClass187_0.<NextResultAsync>b__1(Task t)
EfCoreRepro>    at System.Data.SqlClient.SqlDataReader.InvokeRetryable[T](Func`2 moreFunc, TaskCompletionSource`1 source, IDisposable objectToDispose)
EfCoreRepro> --- End of stack trace from previous location where exception was thrown ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
EfCoreRepro>    --- End of inner exception stack trace ---
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
EfCoreRepro>    at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
EfCoreRepro>    at EfCoreRepro.Pages.IndexModel.OnGet() in C:\dev\EfCoreRepro\EfCoreRepro\Pages\Index.cshtml.cs:line 44
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.RazorPages.Internal.ExecutorFactory.GenericTaskHandlerMethod.Convert[T](Object taskAsObject)
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.RazorPages.Internal.ExecutorFactory.GenericTaskHandlerMethod.Execute(Object receiver, Object[] arguments)
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker.InvokeHandlerMethodAsync()
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker.InvokeNextPageFilterAsync()
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker.Rethrow(PageHandlerExecutedContext context)
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker.InvokeInnerFilterAsync()
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
EfCoreRepro>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
EfCoreRepro>    at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
EfCoreRepro>    at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
EfCoreRepro>    at StackExchange.Profiling.MiniProfilerMiddleware.Invoke(HttpContext context) in C:\projects\dotnet\src\MiniProfiler.AspNetCore\MiniProfilerMiddleware.cs:line 86
EfCoreRepro>    at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.Invoke(HttpContext context)
EfCoreRepro>    at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)
EfCoreRepro>    at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)
EfCoreRepro>    at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
EfCoreRepro> [23:56:39 INF] Request finished in 902.2378ms 500 text/html; charset=utf-8
EfCoreRepro> [23:56:39 INF] Request starting HTTP/1.1 GET http://localhost:44325/favicon.ico  
EfCoreRepro> [23:56:39 INF] Sending file. Request path: '/favicon.ico'. Physical path: 'C:\dev\EfCoreRepro\EfCoreRepro\wwwroot\favicon.ico'
EfCoreRepro> [23:56:39 INF] Request finished in 23.8229ms 200 image/x-icon


When I have a real DbContext with lots of DbSets and tons of data in them, this essentially will eat all the memory on my server, although I've set my IIS App Pool to auto-restart after it hits 2GB to mitigate this issue.


### Further technical details
EF Core version: 2.1.8
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: VS 2017 15.9.7","EF Core Querying Every DbSet Under Certain Circumstances  This was originally logged at #13310 and #15000.  /cc @rosspace, @ajcvickers, and @divega who were involved in the originals.

Error:
When I hit a SQL exception of some sort in certain scenarios",15779,ajcvickers,efcore
15715,Query: Materialize an array,Current binding is member based and does not support arrays. Hence projection gets overwritten.,Query: Materialize an array  Current binding is member based and does not support arrays. Hence projection gets overwritten.,15771,smitpatel,efcore
15719,Query: NewExpression.Members can be null,Perhaps binding similar to array can help but I doubt without the member infos we can compose any further.,Query: NewExpression.Members can be null  Perhaps binding similar to array can help but I doubt without the member infos we can compose any further.,15771,smitpatel,efcore
15716,Query: Enable client eval in projection,"","Query: Enable client eval in projection  ",15771,smitpatel,efcore
15750,QueryRewrite: parameter support for FromSql(),"Basic FromSql() support is implemented in #15704, but parameter support was left for later to review how to best do this.","QueryRewrite: parameter support for FromSql()  Basic FromSql() support is implemented in #15704, but parameter support was left for later to review how to best do this.",15752,roji,efcore
15704,QueryRewrite: add support for FromSql,"Issue for tracking purposes - when FromSql works, make sure to enable skipped tests.","QueryRewrite: add support for FromSql  Issue for tracking purposes - when FromSql works, make sure to enable skipped tests.",15752,roji,efcore
214,Model Definition: Custom conventions,"- [x] Create public interfaces for metadata API to be used by conventions.
- [x] Change `QueryFilter`, `DefiningQuery`, `IsEagerLoaded`, `IsShadowProperty` , `IsIndexedProperty`, `BeforeSaveBehavior` `AfterSaveBehavior` to extension methods.
- [x] Throw when calling `SetField` would change the shadowness of a property or the name of the identifying `MemberInfo`.
- [x] Rename `GetContainingPrimaryKey` to `FindContainingPrimaryKey`.
- [x] Throw when calling `SetField` on a shadow or a field-only property.
- [x] Create public interfaces that the internal model builders implement, e.g. `IConventionModelBuilder`. This will allow cleaner API, without the explicit `ConfigurationSource` parameter.
- [x] Throw instead of silently failing when a non-explicit configuration call is invalid. This would require adding quiz API ('CanSet').
- [x] Make model element references consistent (e.g. `Property` vs `IProperty` vs `string` vs `PropertyInfo`)
- [x] Add provider-specific extension methods for convention metadata interfaces.
- [x] Rename and move `RelationalAnnotations` and `RelationalAnnotationsBuilder` to Core.
- [x] Remove unused methods on provider classes like  `SqlServerPropertyBuilderAnnotations.ColumnName`.
- [x] Rename the `Apply` methods to be more descriptive and make the return types consistent, still allowing to stop the execution of the following conventions.
- [x] Pass `CoreConventionSetBuilderDependencies` to the constructor of all conventions.
- [x] Add convention type for configuring a type as owned and use it to remove ambiguous ownerships.
- [x] Track the model elements as they are modified by conventions, so a call to a convention never returns an element that is no longer in the model.
- [x] Add a way to delay the convention execution.
- [x] Move logic from `ModelCustomizer` to a convention.
- [x] Add `SqlServerValueGenerationStrategy.None` value that can be used to override the model default.
- [x] Filter out the core annotations changes from conventions.
- [x] Remove `PropertyMetadataChanged()` calls and don't cache indexes while the model is mutable.
- [ ] Add sugar methods to add/remove a convention to/from all appropriate convention lists.
- [ ] Separate conventions into several groups/tags: required, data-annotations, context type-dependent, opt-in and other. Add API to include/exclude them from the convention set. (`SqlServerEnumConvention` would be opt-in)
- [ ] Consider creating a convention set to mimic EF6 behavior https://github.com/aspnet/EntityFramework.Docs/issues/1971
- [ ] Add API to `DbContextOptionsBuilder` that allows to switch convention sets or to modify them in a granular way (this could also be used for other global configuration like https://github.com/aspnet/EntityFrameworkCore/issues/10784).","Model Definition: Custom conventions  - [x] Create public interfaces for metadata API to be used by conventions.
- [x] Change `QueryFilter`, `DefiningQuery`, `IsEagerLoaded`, `IsShadowProperty` , `IsIndexedProperty`, `BeforeSaveBehavior` `AfterSaveBehavi",15706,AndriySvyryd,efcore
13603,Move discriminator support to Core,This would allow easier implementations of discriminators in non-relational providers,Move discriminator support to Core  This would allow easier implementations of discriminators in non-relational providers,15706,AndriySvyryd,efcore
14554,Custom proxy generation for entities,"I would like to generate my own proxies for the entities returned by EF. 

The particular feature I would like to be able to implement, is similar to the LazyLoading proxies. But instead of lazy loading, I want to throw exceptions when un-loaded navigational properties are accessed.

And example navigational path could be Blog => Post => Comment.

A method that takes a Post as an argument might not know if the Comments list was loaded by the query. So if the Comments property is accessed, I would want my proxy to throw an exception, if there was no `Include` for that relation in the query.

Currently, the issue is that the property would just be null, which could be interpreted wrongly be the runtime code.

I looked at the LazyLoading implementation, but it seems most of the code required to do this is marked as ""Internal, do not use"", so I would suggest there was a supported way of doing this. (If there is, I could not find it, but would love to know)","Custom proxy generation for entities  I would like to generate my own proxies for the entities returned by EF. 

The particular feature I would like to be able to implement, is similar to the LazyLoading proxies. But instead of lazy loading, I want to t",15630,ajcvickers,efcore
15252,Add ServiceProperty.ParameterBinding to public interfaces,"","Add ServiceProperty.ParameterBinding to public interfaces  ",15630,ajcvickers,efcore
1697,Foreign key name is incorrectly generated for one:many relationships,"In the below model, we create a shadow state property named PersonId while we are building the Siblings relationship rather than a SiblingReverseId property

```
    public class Person
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public List<Person> Siblings { get; set; }
        public Person Lover { get; set; }
        public Person LoverReverse { get; set; }
        public Person SiblingReverse { get; set; }
    }

    public class GoTContext : DbContext
    {
        public DbSet<Person> People { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Person>().HasMany(p => p.Siblings)
                .WithOne(p => p.SiblingReverse).Required(false);
            modelBuilder.Entity<Person>().HasOne(p => p.Lover)
                .WithOne(p => p.LoverReverse).Required(false);
        }

        protected override void OnConfiguring(DbContextOptions options)
        {
            options.UseSqlServer(@""Server=(localdb)\mssqllocaldb;Database=StateManagerBug;Trusted_Connection=True;MultipleActiveResultSets=true"");
        }
    }
```","Foreign key name is incorrectly generated for one:many relationships  In the below model, we create a shadow state property named PersonId while we are building the Siblings relationship rather than a SiblingReverseId property

```
    public class Per",15576,ErikEJ,efcore
1679,RevEng: Support Views,"Note: This issue is tracking a specific aspect of using EF Core with database views. See #827 for an overview of the areas where EF Core interacts with database views. The completion of this feature does not mean that every aspect of database view support has been implemented.

---
See also #5719, which is about support for tables without keys.

Part of #830. At the moment we generate code only from tables, not views. Need to include views but may have to consider what we want to use as the primary key.",RevEng: Support Views  Note: This issue is tracking a specific aspect of using EF Core with database views. See #827 for an overview of the areas where EF Core interacts with database views. The completion of this feature does not mean that every aspect o,15576,ErikEJ,efcore
14154,Throw on saving partial changes to entities using shared tables with concurrency token,"If there's a concurrency token column in a table then the entity containing it should be tracked when saving changes to any entities sharing the table, otherwise an exception would be thrown.","Throw on saving partial changes to entities using shared tables with concurrency token  If there's a concurrency token column in a table then the entity containing it should be tracked when saving changes to any entities sharing the table, otherwise an ex",15129,AndriySvyryd,efcore
12758,Replacing Owned object should trigger RowVersion's concurrency checking,"I have an entity which has an Owned Object and a Timestamp RowVersion property.
When replacing entity's owned object, the new owned object's state is Added and the entity's state is Unchanged. In this situation, the RowVersion's concurrency checking doesn't work. The SQL generated by efcore is lack of the part of RowVersion checking which should look like 'UPDATE [xxx] SET [yyy] = @p0 WHERE [Id] = @p1 AND [Version] = @p2;SELECT [Version] FROM [xxx]' . (It works well in EF6.)
If I explicitly made the entity's state be Modified by 'dbContext.Entry(entity).State = EntityState.Modified', the RowVersion checking was triggered , but it resulted in that the update SQL was with all the entity's fields to be updated.
Now I have to explicitly update one property (LastModifedTime) in the entity to make the RowVersion checking triggered. 
Could you please give me some other advises? Or will it be improved in the next release?  

I am following DDD in ASPNETCORE2.1, I expect when the Owned Object even the nested Owned Object in Owned Object is replaced, the owner entity's RowVersion concurrency checking still works since they are all in one Table sharing the same RowVersion.


EF Core version: 2.1.1
Database Provider: Microsoft.EntityFrameworkCore.SqlServer 2.1.1
Operating system:  Visual Studio 2017 15.7.5","Replacing Owned object should trigger RowVersion's concurrency checking  I have an entity which has an Owned Object and a Timestamp RowVersion property.
When replacing entity's owned object, the new owned object's state is Added and the entity's state is",15129,AndriySvyryd,efcore
12865,Changes on Owned Entites Properties causes a concurrency conflict on same dbContext,"When changing an `Owned Entities Property` and than save twice, the second `SaveChanges` call throws an `DbUpdateConcurrencyException` because the local entities rowversion was not updated.

## Steps to reproduce
```csharp
public class Name
{
    public string First { get; set; }
    public string Last { get; set; }
}
public class Author
{
    public int Id { get; set; }
    public Name Name { get; set; }
    public string Description { get; set; }
    public byte[] Rowversion { get; set; }
}
```
```csharp
using (var context = new BookDbContext())
{
    var author = context.Authors.First();
    author.Name.First = ""Lukas"";
    context.SaveChanges();

    author.Description = ""Some very important information"";
    context.SaveChanges();    // -> DbUpdateConcurrencyException
}
```
Here´s a [Sample Project](https://github.com/rzlsoftware/EfCoreOwnedEntitesConcurrencyProblemTest/tree/master) to reproduce the Issue.

### Exception message:
```
Database operation expected to affect 1 row(s) but actually affected 0 row(s). Data may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.
```

### Stack trace:
```
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ThrowAggregateUpdateConcurrencyException(Int32 commandIndex, Int32 expectedRowsAffected, Int32 rowsAffected)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithPropagation(Int32 commandIndex, RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(DbContext _, ValueTuple`2 parameters)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(IReadOnlyList`1 entries)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()
   at EfCoreOwnedEntitesConcurrencyProblemTest.Program.ConcurrencyProblem() in C:\Development\EfCoreOwnedEntitesConcurrencyProblemTest\EfCoreOwnedEntitesConcurrencyProblemTest\Program.cs:line 32
   at EfCoreOwnedEntitesConcurrencyProblemTest.Program.Main(String[] args) in C:\Development\EfCoreOwnedEntitesConcurrencyProblemTest\EfCoreOwnedEntitesConcurrencyProblemTest\Program.cs:line 20
```

### Further technical details
EF Core version: 2.1.1
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10 1803
IDE: Visual Studio 2017 15.7.5","Changes on Owned Entites Properties causes a concurrency conflict on same dbContext  When changing an `Owned Entities Property` and than save twice, the second `SaveChanges` call throws an `DbUpdateConcurrencyException` because the local entities rowversi",15129,AndriySvyryd,efcore
14539,ConcurrencyCheck on navigational properties with new object added uses wrong original value,"I have an AggregateRoot object with navigational object property in it.
Here Balance is a Money class which is immutable.
```c#
public override void Configure(EntityTypeBuilder<UserPaymentAggregateRoot> builder)
        {
            builder.OwnsOne(e => e.Balance, OIAction =>
            {
                OIAction.Property(x => x.Amount)
                                         .HasColumnName(nameof(UserPaymentAggregateRoot.Balance.Amount))
                                         .HasColumnType(DatabaseColumnTypes.DecimalType)
                                         .IsConcurrencyToken();
            });
        }
```
When I am updating Balance I am assigning a new Money object to it.
```c#
public Money Balance
        {
            get
            {
                return _balance;
            }
            private set
            {
                _balance = value;
            }
        }
```
Then when I call SaveChanges I am getting _DbConcurrencyUpdate_ exception because sql server uses wrong value to validate original values.
![image](https://user-images.githubusercontent.com/17739850/51898435-8e9bae00-23b9-11e9-99a6-5177719e31cf.png)

Here @p8 should be 20.00 but not 22.00 which is a new value.

So, my assumption is that Concurrency check is loosing original values while updating navigational properties to new reference objects which have an Added state. If I change only some of the _balance object's properties but not the reference object itself, everything works fine.

### Further technical details
EF Core version: 2.2
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
SQL Server 2017
Operating system: Windows 10
IDE: (e.g. Visual Studio 2017 15.4)","ConcurrencyCheck on navigational properties with new object added uses wrong original value  I have an AggregateRoot object with navigational object property in it.
Here Balance is a Money class which is immutable.
```c#
public override void Configure(",15129,AndriySvyryd,efcore
15034,Analyzers: Remove analyzer on FromSql/ExecuteSqlCommand methods,Methods deprecated. Remove/modify analyzer.,Analyzers: Remove analyzer on FromSql/ExecuteSqlCommand methods  Methods deprecated. Remove/modify analyzer.,15087,roji,efcore
12104,Analyzer: detect usage of public internal code,"(I thought we already had an issue for this but I couldn't find it)

In the discussion with provider writers at https://github.com/aspnet/EntityFrameworkCore/issues/11266#issuecomment-377675119 there was some consensus that an analyzer would be the best way to prevent anyone from unintentionally taking a dependency on public internal code.","Analyzer: detect usage of public internal code  (I thought we already had an issue for this but I couldn't find it)

In the discussion with provider writers at https://github.com/aspnet/EntityFrameworkCore/issues/11266#issuecomment-377675119 there was s",15087,roji,efcore
13253,SQLite: Consider changing ultimate fallback type to BLOB,"We have #8824 to generally improve type inference, but we'll still have fallbacks. Like aspnet/Microsoft.Data.Sqlite#548, we should also review everywhere we fallback to a default and make sure it's consistent. I propose BLOB since every value can be losslessly coerced to it.","SQLite: Consider changing ultimate fallback type to BLOB  We have #8824 to generally improve type inference, but we'll still have fallbacks. Like aspnet/Microsoft.Data.Sqlite#548, we should also review everywhere we fallback to a default and make sure it'",15071,bricelam,efcore
13841,Microsoft.Data.Sqlite: Consider changing ultimate fallback type to BLOB,We have aspnet/Microsoft.Data.Sqlite#435 and aspnet/Microsoft.Data.Sqlite#523 the help improve type inference. We should look for anywhere else that we fallback to a default and make sure they're all consistent. I propose BLOB since every value can be losslessly coerced to it.,Microsoft.Data.Sqlite: Consider changing ultimate fallback type to BLOB  We have aspnet/Microsoft.Data.Sqlite#435 and aspnet/Microsoft.Data.Sqlite#523 the help improve type inference. We should look for anywhere else that we fallback to a default and make,15071,bricelam,efcore
8824,SQLite RevEng: Sample data to determine CLR type,"Reverse engineering SQLite column types is tricky due to it's dynamic typing. The column type hold no real meaning.

Today, we apply the same [type affinity](https://www.sqlite.org/datatype3.html#type_affinity) rules that SQLite does to the specified column type name to put it into one of the four primitive types (which map to `long`, `double`, `string` & `byte[]`).

I think we could do a much better job by sampling the data to determine a suitable CLR type. This would allow us to reverse engineer types that need to be coerced like `decimal`, `DateTime` and `Guid`. We could also provide a more natural numeric type like `int` if the data fits.","SQLite RevEng: Sample data to determine CLR type  Reverse engineering SQLite column types is tricky due to it's dynamic typing. The column type hold no real meaning.

Today, we apply the same [type affinity](https://www.sqlite.org/datatype3.html#type_af",15071,bricelam,efcore
13831,Microsoft.Data.Sqlite: Improve SqliteDataReader.GetFieldType() when NULL,"`SqliteDataReader.GetFieldType(0)` returns `int` when the value is `NULL`. We should improve this.

Thoughts:
* This should probably return `DBNull`, but will that break other assumptions in ADO.NET?
* If we simply don't have enough information to determine the type, should we...
  * ...throw?
  * ...use a highly-compatible type (like `string`)?
  * ...use the type affinity of its column?","Microsoft.Data.Sqlite: Improve SqliteDataReader.GetFieldType() when NULL  `SqliteDataReader.GetFieldType(0)` returns `int` when the value is `NULL`. We should improve this.

Thoughts:
* This should probably return `DBNull`, but will that break other as",15071,bricelam,efcore
13839,Microsoft.Data.Sqlite: Improve SqliteDataReader.GetSchemaTable() DataType when no rows,"I'm using a custom DataAdapter i wrote to fill the void for the lack of one in this library, that is as follows:
```
using System;
using System.Data;
using System.Data.Common;
using Microsoft.Data.Sqlite;

namespace Ultz.BeagleFramework.SQLite
{
    public delegate void SqliteRowUpdatedEventHandler(Object sender, SqliteRowUpdatedEventArgs e);
    public delegate void SqliteRowUpdatingEventHandler(Object sender, SqliteRowUpdatingEventArgs e);
    public sealed class SqliteDataAdapter : DbDataAdapter
    {
        public event SqliteRowUpdatedEventHandler RowUpdated;

        public event SqliteRowUpdatingEventHandler RowUpdating;

        public SqliteDataAdapter() { }

        public SqliteDataAdapter(SqliteCommand selectCommand)
        {
            SelectCommand = selectCommand;
        }

        public SqliteDataAdapter(string selectCommandText, SqliteConnection selectConnection)
            : this(new SqliteCommand(selectCommandText, selectConnection)) { }

        public SqliteDataAdapter(string selectCommandText, string selectConnectionString)
            : this(selectCommandText, new SqliteConnection(selectConnectionString)) { }

        protected override RowUpdatedEventArgs CreateRowUpdatedEvent( DataRow dataRow,  IDbCommand command,
                                                                     System.Data.StatementType statementType,
                                                                      DataTableMapping tableMapping)
        {
            return new SqliteRowUpdatedEventArgs(dataRow, command, statementType, tableMapping);
        }

        protected override RowUpdatingEventArgs CreateRowUpdatingEvent( DataRow dataRow,  IDbCommand command,
                                                                       System.Data.StatementType statementType,
                                                                        DataTableMapping tableMapping)
        {
            return new SqliteRowUpdatingEventArgs(dataRow, command, statementType, tableMapping);
        }

        protected override void OnRowUpdated( RowUpdatedEventArgs value)
        {
            //base.OnRowUpdated(value);
            if (RowUpdated != null && value is SqliteRowUpdatedEventArgs)
                RowUpdated(this, (SqliteRowUpdatedEventArgs)value);
        }

        protected override void OnRowUpdating( RowUpdatingEventArgs value)
        {
            if (RowUpdating != null && value is SqliteRowUpdatingEventArgs)
                RowUpdating(this, (SqliteRowUpdatingEventArgs)value);
        }

        public new SqliteCommand DeleteCommand
        {
            get { return (SqliteCommand)base.DeleteCommand; }
            set { base.DeleteCommand = value; }
        }

        public new SqliteCommand SelectCommand
        {
            get { return (SqliteCommand)base.SelectCommand; }
            set { base.SelectCommand = value; }
        }

        public new SqliteCommand UpdateCommand
        {
            get { return (SqliteCommand)base.UpdateCommand; }
            set { base.UpdateCommand = value; }
        }

        public new SqliteCommand InsertCommand
        {
            get { return (SqliteCommand)base.InsertCommand; }
            set { base.InsertCommand = value; }
        }
    }

#pragma warning disable 1591

    public class SqliteRowUpdatingEventArgs : RowUpdatingEventArgs
    {
        public SqliteRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, System.Data.StatementType statementType,
                                          DataTableMapping tableMapping)
            : base(dataRow, command, statementType, tableMapping) { }
    }

    public class SqliteRowUpdatedEventArgs : RowUpdatedEventArgs
    {
        public SqliteRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, System.Data.StatementType statementType,
                                         DataTableMapping tableMapping)
            : base(dataRow, command, statementType, tableMapping) { }
    }

#pragma warning restore 1591
}
```

After creating a table, I then `SELECT * FROM` the table, and use `SqliteDataAdapter.Fill()`. However, all of the types are set to Int32. This also happens when using `DataTable.Load()`.","Microsoft.Data.Sqlite: Improve SqliteDataReader.GetSchemaTable() DataType when no rows  I'm using a custom DataAdapter i wrote to fill the void for the lack of one in this library, that is as follows:
```
using System;
using System.Data;
using System.",15071,bricelam,efcore
11409,Update/Command: Internal code usage in providers,"If provider needs to customize the command generated then overriding IRelationalCommandBuilder to generate a difference RelationalCommand requires access to IndentedStringBuilder (part of interface contract). Further Provider also has to implement IRelationalParameterBuilder. Relational Implementation of it is internal. RelationalCommand is also internal so provider cannot reuse code.

Further providers are also using log messages in custom RelationalCommand to log command start/end/error. Transaction start/commit/error/rollback/Use

Some providers are using ISingletonUpdateSqlGenerator which is internal.",Update/Command: Internal code usage in providers  If provider needs to customize the command generated then overriding IRelationalCommandBuilder to generate a difference RelationalCommand requires access to IndentedStringBuilder (part of interface contrac,15067,ajcvickers,efcore
14923,Query: SelectExpression holds onto loggers from previous context which compiled the query,"Hello,

**EF Core: master.**

I have two tests (test1 and test2), which generate equal SQL with select statement. Both tests uses one MyDbContext class.

When I run these tests one by one - no problem.

When I run these tests together (through ""run all""), test2 uses RelationCommand from test1.

As I undertood it works pool of commands.

Test1 and Test2 use separate log-objects for catch a SQL of executed command.

In last case, Test2 not see execution of command, because the message passed into log1 (object from test1).

How I may resolve this problem?

I want to isolate tests from each other.

Thanks.","Query: SelectExpression holds onto loggers from previous context which compiled the query  Hello,

**EF Core: master.**

I have two tests (test1 and test2), which generate equal SQL with select statement. Both tests uses one MyDbContext class.

When",15067,ajcvickers,efcore
8764,SQLite Migrations: HasComputedColumnSql is ignored,"I am using examples from EntityFramework docs to use Sqlite and InMemoryDatabase for unit testing. Most tests work fine, but I am unable to test fluent API model changes that should take place during OnModelCreating.

For example,

```
// please excuse any typos in this example!

public class PersonContext : DbContext
{
    public PersonContext(DbContextOptions<PersonContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Person>()
            .Property(p => p.DisplayName)
            .HasComputedColumnSql(""[LastName] + ', ' + [FirstName]"");
    }

    public DbSet<Person> Persons { get; set; }
}

public class Person
{
    public int PersonId { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }

    [Display(Name =""Full Name"")]
    public string DisplayName { get; set; }
}
```
```
[Fact]
public void TestCreatePerson()
{
    var options = new DbContextOptionsBuilder<PersonContext>()
        .UseInMemoryDatabase(databaseName: ""TestCreatePerson"")
        .Options;

    using (var context = new PersonContext(options))
    {
        var person = new Person();
        person.FirstName = ""Steven"";
        person.LastName = ""Ferrell"";
        PersonsController controller = new PersonsController(context);
        controller.Create(person);
    }

    using (var context = new PersonContext(options))
    {
        Assert.Equal(1, context.Persons.Count());
        Assert.Equal(""Steven"", context.Persons.Single().FirstName);
//the following fails with the error that DisplayName is actually <null> instead of ""Ferrell, Steven""
        Assert.Equal(""Ferrell, Steven"", context.Persons.Single().DisplayName);
    }
}
```","SQLite Migrations: HasComputedColumnSql is ignored  I am using examples from EntityFramework docs to use Sqlite and InMemoryDatabase for unit testing. Most tests work fine, but I am unable to test fluent API model changes that should take place during OnM",15044,bricelam,efcore
11242,Relational: CharTypeMapping doesn't escape apostrophe,"Generating the SQL literal will produce `'''` with is an unclosed string starting with apostrophe.

This is low priority for us since neither SQL Server nor SQLite use this.","Relational: CharTypeMapping doesn't escape apostrophe  Generating the SQL literal will produce `'''` with is an unclosed string starting with apostrophe.

This is low priority for us since neither SQL Server nor SQLite use this.",15044,bricelam,efcore
15020,Microsoft.Data.Sqlite: Store char as TEXT,"Again, like #15019, it's probably too late, but I wish we could store `char` values as TEXT. This would make databases way more compatible with external systems.

Today, we store the UTF-16 character code as an INTEGER.","Microsoft.Data.Sqlite: Store char as TEXT  Again, like #15019, it's probably too late, but I wish we could store `char` values as TEXT. This would make databases way more compatible with external systems.

Today, we store the UTF-16 character code as an",15044,bricelam,efcore
14970,Allow configuration of logging level per event,"Because there is no real consensus as to what level things should be logged, and also therefore to mitigate the breaking change of #14523.","Allow configuration of logging level per event  Because there is no real consensus as to what level things should be logged, and also therefore to mitigate the breaking change of #14523.",14972,ajcvickers,efcore
14523,SQL should be logged at debug level,"Note that this change was reverted before the final release of 3.0. Instead we made it easy to configure any event to log at any level. See #15888

----

Currently, if we implement logging filtered at the Information level, we get details of every EF SQL query.  This is clearly debug or trace level data, not Information.  It clutters everyone's logs, and is useless because the data is hiding the interesting things like id numbers, field values, etc.

What I'd like to see is these EF SQL details to be down-graded to Debug level.","SQL should be logged at debug level  Note that this change was reverted before the final release of 3.0. Instead we made it easy to configure any event to log at any level. See #15888

----

Currently, if we implement logging filtered at the Informati",14972,ajcvickers,efcore
13833,Microsoft.Data.Sqlite: Leverage ADO.NET spec tests,"Some progress on dotnet/corefx#7810 has been made in [mysql-net/AdoNetApiTest](https://github.com/mysql-net/AdoNetApiTest). We should consider leveraging it here.

cc @bgrainger @roji","Microsoft.Data.Sqlite: Leverage ADO.NET spec tests  Some progress on dotnet/corefx#7810 has been made in [mysql-net/AdoNetApiTest](https://github.com/mysql-net/AdoNetApiTest). We should consider leveraging it here.

cc @bgrainger @roji",14958,bricelam,efcore
14682,Microsoft.Data.Sqlite: Enable overflow checking (except for ulong),"We should enable overflow checking when converting integer values in SqliteValueReader.

Found by these tests in [mysql-net/AdoNetApiTest](https://github.com/mysql-net/AdoNetApiTest):
* GetInt16_throws_for_maximum_Int32													
* GetInt16_throws_for_maximum_Int64
* GetInt16_throws_for_minimum_Int32													
* GetInt16_throws_for_minimum_Int64
* GetInt32_throws_for_maximum_Int64
* GetInt32_throws_for_minimum_Int64","Microsoft.Data.Sqlite: Enable overflow checking (except for ulong)  We should enable overflow checking when converting integer values in SqliteValueReader.

Found by these tests in [mysql-net/AdoNetApiTest](https://github.com/mysql-net/AdoNetApiTest):",14958,bricelam,efcore
14947,Microsoft.Data.Sqlite: PRAGMA incremental_vacuum execution incomplete,"So it turns out that `PRAGMA incremental_vacuum` can require multiple calls to sqlite3_step() before it completes. Today, we only call it once for non-INSERT statements during SqliteCommand.ExecuteNonQuery(). We should keep calling it until it returns `SQLITE_DONE`.","Microsoft.Data.Sqlite: PRAGMA incremental_vacuum execution incomplete  So it turns out that `PRAGMA incremental_vacuum` can require multiple calls to sqlite3_step() before it completes. Today, we only call it once for non-INSERT statements during SqliteCo",14958,bricelam,efcore
12378,Store temporary key values in state entry rather than setting them on entity instances,"Similar to the way store-generated values are stored during SaveChanges. This would mean that temporary values would not be stored in or visible in the key property, which would have a few advantages:
* Entities that have are moved from one context instance to another will not incorrectly treat temporary key values as real--see #10167
* When using data binding, the temporary value will not show up in the data grid--see #12218

The reasons that we didn't do this before were:
* The key value in the entity may not be the key value that EF is using. This can be confusing.
* Fixup could be more complex, but I think our indirections for shadow values, store-generated values, etc. are pretty good now, so I am hopeful this won't be a major problem.","Store temporary key values in state entry rather than setting them on entity instances  Similar to the way store-generated values are stored during SaveChanges. This would mean that temporary values would not be stored in or visible in the key property, w",14256,ajcvickers,efcore
10167,Prevent temporary key values from becoming permanent,"This has been raised in other issues (e.g. #6147 and #7743), which have been closed as 'by design', but could someone explain the rational for doing this when entities are added to a DbSet?

The scenario that is causing me a problem is the same one as reported in issue #7743.  I'm developing an ASP.Net Core MVC application, and the problem is when adding a new entity instance to the database.  The model has an int identity column, and a unique index set on one of the properties. The sequence of actions is as follows:

1) An Add view is rendered with a new instance of the model, containing Id = 0.
2) The model is posted back to the controller action with Id still = 0.
3) The model is added to the DbSet using 'context.Set<T>().Add(model)', which updates the Id to -2147482647.
4) The SaveChangesAsync fails due to a duplicate key value, and this is pushed into ModelState.
5) The view is re-rendered showing the ModelState error, but now the Id control has the value -2147482647.
6) The user fixes the field which contains the duplicate key value, and re-posts the page.
7) The model is added to the DbSet again, as before.
8) The SaveChangesAsync fails, this time with the exception 'Cannot insert explicit value for identity column in table 'XXXX' when IDENTITY_INSERT is set to OFF', because it is now apparently trying to set the identity column value to -2147482647.

I don't think that this is a particularly outlandish scenario for an MVC application.  I'm using the same partial view to contain the controls for both add and edit actions, so I'd prefer not to have to put in additional code to exclude Id fields when the view is rendered for Add, rather than Edit.

What is the recommended approach to making this work?  Do we have to navigate through the object graph for the model (which in my case contains a number of nested child collections), after the add has failed, and reset any Id field with a negative value to zero?  This functionality in the new version of EF seems very clunky to me, especially as it seems to behave differently to previous versions.

I'd appreciate your advice.

Technical details
EF Core version: 2.0.0
Database Provider: Sql Server 2012 (localdb)
Operating system: Windows 10 Pro
IDE: Visual Studio 2017 v15.4.1","Prevent temporary key values from becoming permanent  This has been raised in other issues (e.g. #6147 and #7743), which have been closed as 'by design', but could someone explain the rational for doing this when entities are added to a DbSet?

The scen",14256,ajcvickers,efcore
14160,RevEng: Fixed Length facet incorrect in ScaffoldingTypeMapper,"https://github.com/aspnet/EntityFrameworkCore/blob/8e7402701ea1416b7fe55e1863ae65b3147c02c7/src/EFCore.Design/Scaffolding/Internal/ScaffoldingTypeMapper.cs#L117-L125

Above code is supposed to pass in default value for Fixed Length and compare type mapping to figure out if the value is same as default (hence no need to scaffold). Default for Fixed length is false and _not_ true.","RevEng: Fixed Length facet incorrect in ScaffoldingTypeMapper  https://github.com/aspnet/EntityFrameworkCore/blob/8e7402701ea1416b7fe55e1863ae65b3147c02c7/src/EFCore.Design/Scaffolding/Internal/ScaffoldingTypeMapper.cs#L117-L125

Above code is supposed",14209,ajcvickers,efcore
14162,RevEng: Fix IsFixedLength inference in ScaffoldingTypeMapper,"Resolves #14160","RevEng: Fix IsFixedLength inference in ScaffoldingTypeMapper  Resolves #14160",14209,ajcvickers,efcore
12537,Change nuget packages projectUrl to point to doco or better landing page,"Moved from https://github.com/aspnet/EntityFramework.Docs/issues/803 filed by @SimonCropp since NuGet packages and their metadata are generated as part of the build.

Often searches will resolve to a nuget package. or people will know the nuget they are using and want to find the doco for it. 

However most MS nuget 

At the moment nugets point to generic getting stated pages. For example 
 
 * [Microsoft.Extensions.Logging.Console](https://www.nuget.org/packages/Microsoft.Extensions.Logging.Console/)
 * [Microsoft.EntityFrameworkCore.SqlServer](https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer/)
* [Microsoft.AspNetCore](https://www.nuget.org/packages/Microsoft.AspNetCore)

All point to https://www.asp.net/

This experience looses all context of the users navigation history, and is unlikely to be the desired page for most people. I would expect the better locations would be

 * https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.1#built-in-logging-providers
 * https://docs.microsoft.com/en-us/ef/core/providers/sql-server/
 * https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1  (note the view goes to the correct version)

I realise that the history of nuget versions is static, but doco is a changing structure. but you could manage the redirects dynamically with all nuget pointing to a redirector `https://docs.microsoft.com/nugets?Microsoft.EntityFrameworkCore.SqlServer&version=1.2.3`

another option would be ad to nuget the ability to store more urls. eg ""project hosting url"", ""docs url"" etc","Change nuget packages projectUrl to point to doco or better landing page  Moved from https://github.com/aspnet/EntityFramework.Docs/issues/803 filed by @SimonCropp since NuGet packages and their metadata are generated as part of the build.

Often search",14177,bricelam,efcore
14025,Implement automated dependency flow using darc,"See https://github.com/dotnet/arcade/blob/master/Documentation/DependencyFlowOnboarding.md

We should implement automated dependency flow. This replaces ProdCon v1 and makes it possible to (1) automatically get PRs from new builds of dotnet/corefx and aspnet/Extensions, and (2) automate flowing EF Core into upstream partners, like dotnet/core-sdk and aspnet/AspNetCore.

Currently, the plan is to only implement this for 3.0 on master branches.

Matching bug on dotnet/arcade: https://github.com/dotnet/arcade/issues/1050. See also https://github.com/dotnet/arcade/issues/1054","Implement automated dependency flow using darc  See https://github.com/dotnet/arcade/blob/master/Documentation/DependencyFlowOnboarding.md

We should implement automated dependency flow. This replaces ProdCon v1 and makes it possible to (1) automaticall",14177,bricelam,efcore
1051,SQL Azure: Retrying and resiliency,"Investigate porting the code from EF6.","SQL Azure: Retrying and resiliency  Investigate porting the code from EF6.",14177,bricelam,efcore
1052,Adding API for ignoring a property,"","Adding API for ignoring a property  ",14177,bricelam,efcore
1053,SQLite: Finish implementing migrations,"Re-enable SqLiteMonsterFixupTest when completed.","SQLite: Finish implementing migrations  Re-enable SqLiteMonsterFixupTest when completed.",14177,bricelam,efcore
1054,Decouple value generation from DbContextConfiguration and state entries,"This is part of Issue #641 which is about cleaning up the use of DbContextConfiguration. DbContextConfiguration is intended to help resolve dynamic services--that is, services for which the actual type/instance of service to use depends on the current context configuration. However, it has gradually spread throughout the code as a general purpose service locator. This causes dependencies to be hidden and creates a lot of coupling to DbContextConfiguration throughout the code, so I am making a set of changes to help fix this.

Value generation is special in that it needs to be a singleton service such that values span context scopes for things like the in-memory provider and for management of sequence blocks. However, the generation process may sometimes need to make use of the current data store, and hence the current context scope. This means that a value generator cannot just depend on any scoped data service that it needs because it is itself a singleton. Therefore, the generation methods are passed the current data store services such that they can be used if necessary.

In addition, since the state entry was no longer being used to get access to the current scope it meant that decoupling from the state entry was possible. This decoupling in general made the code simpler and made more apparent the fact that the ForeignKeyValueGenerator wasn't really a value generator and hence no longer tries to be one and is handled separately. This is cleaner especially since it was being partially handled separately anyway.","Decouple value generation from DbContextConfiguration and state entries  This is part of Issue #641 which is about cleaning up the use of DbContextConfiguration. DbContextConfiguration is intended to help resolve dynamic services--that is, services for wh",14177,bricelam,efcore
11702,Consolidate samples to one place,"At some point we started creating more sample code in this repo with the idea that this would help having a rich set of runnable samples that you could access directly in the EF Core repo rather than just projects were we can host the documentation's code snippets. 

Technically things almost work thanks to the fact that you can link additional repos in the docs build (@anpete figured out how to do it).

However from the perspective of authoring the documentation (arguably one of the main goal of the samples we have so far) requires two separate PRs (for example, https://github.com/aspnet/EntityFramework.Docs/pull/682 and https://github.com/aspnet/EntityFrameworkCore/pull/11701). 

Also, from the perspective of maintaining runnable samples, having them on this repo is apparently not helping a lot because we don't compile the samples and they can easily become stale (again see https://github.com/aspnet/EntityFrameworkCore/pull/11701).",Consolidate samples to one place  At some point we started creating more sample code in this repo with the idea that this would help having a rich set of runnable samples that you could access directly in the EF Core repo rather than just projects were we,14105,bricelam,efcore
1161,Exploratory Testing: Query,"","Exploratory Testing: Query  ",14105,bricelam,efcore
13292,RevEng: Remove infra around underlyingstoretype which was to support type aliases,With #12633 type alises are going away from DatabaseModel level. i.e. providers will find out underlying type for aliased type and swap them out so EF never sees aliases. The infra to support aliases in EF Core design is public and should be removed.,RevEng: Remove infra around underlyingstoretype which was to support type aliases  With #12633 type alises are going away from DatabaseModel level. i.e. providers will find out underlying type for aliased type and swap them out so EF never sees aliases. T,14022,bricelam,efcore
12835,Remove obsolete APIs for 3.0,"There are several obsolete APIs that have been accumulated over the versions, and still exist in order to maintain backwards compatibility. I'm hoping it's planned to remove these for version 3.0, to keep the codebase clean and lean.

This could be a matter of going over everything tagged with `[Obsolete]`, but it may be worth listing and tracking in an issue.

* [ ] Old type mapping API (`ITypeMapper` and derived, `FallbackTypeMappingSource`).
* [x] Overload of `MigrationsSqlGenerator.ColumnDefinition` that doesn't accept `FixedLength`
* [ ] `DefaultQuerySqlGenerator.GenerateBinaryOperator(ExpressionType)`

(there are obviously many more).

Some of these could be a bit tricky, as they'd require potentially considerable effort to port to the newer APIs (I'm thinking about the old type mapping for example). It may make sense to carefully evaluate, API by API, whether it's worth it to remove or not.","Remove obsolete APIs for 3.0  There are several obsolete APIs that have been accumulated over the versions, and still exist in order to maintain backwards compatibility. I'm hoping it's planned to remove these for version 3.0, to keep the codebase clean a",14022,bricelam,efcore
13862,Query: Remove ReLinq dependency in Funcletizer,"Fixes #13524
Fixes #13549

Part of #12048","Query: Remove ReLinq dependency in Funcletizer  Fixes #13524
Fixes #13549

Part of #12048",13901,smitpatel,efcore
13775,Join DbSets in different DbContexts,"How to join two DbSet<> in different db contexts in EF Core? I have written the following code: Here I have got `NullReferenceException`

Exception message:
System.ArgumentNullException

  Message=Value cannot be null.
Parameter name: entityType
  Source=Microsoft.EntityFrameworkCore.Relational

Code
var collections = (from l in _logcontext.Logs join p in _applicationdbcontext.Users on l.UserID equals p.Id select new { i = l.TableName }).ToList();

 ScreenShot 

![capture](https://user-images.githubusercontent.com/35919382/47561997-16db6480-d92e-11e8-816f-fc65c1288313.PNG)
","Join DbSets in different DbContexts  How to join two DbSet<> in different db contexts in EF Core? I have written the following code: Here I have got `NullReferenceException`

Exception message:
System.ArgumentNullException

  Message=Value cannot be",13901,smitpatel,efcore
13524,Client evaluation in query with Contains on an IEnumerable subquery,"This is the query pattern that [caused StackOverflow.com to go offline yesterday](https://twitter.com/Nick_Craver/status/1047929955206795267):

![image](https://user-images.githubusercontent.com/1253414/46564945-993caf80-c8bf-11e8-87eb-8269c533495f.png)

There are two separate aspects we need to follow up on:

1. This is a predicate that we could do a better job of translating to SQL. We will use this issue to track that pattern specifically. 

2. The customer was porting their code from LINQ to SQL to EF Core and didn't expect client evaluation to occur for a predicate against a table that contained millions of rows, and did not think of [switching client-eval off](https://docs.microsoft.com/en-us/ef/core/querying/client-eval#optional-behavior-throw-an-exception-for-client-evaluation). Assuming the query was exercised in testing or staging, that could have helped detect the issue before rolling up to production. Based on this and other previous feedback, we are discussing moving the slider for client eval in future versions. Whatever shape this takes, it is likely to be a breaking change, so we will track it as part of the overall 3.0 plan for query in #12795.

## Workaround
If you are hitting client evaluation for this query, you can follow the same pattern @JoshSchreuder described below: split the sub-query into its own variable:

```csharp
var postIds = grp.Select(g => g.PostId); 
var answers = db.Posts.Where(postIds.Contains(p.Id)).Select(...).ToList();
```","Client evaluation in query with Contains on an IEnumerable subquery  This is the query pattern that [caused StackOverflow.com to go offline yesterday](https://twitter.com/Nick_Craver/status/1047929955206795267):

![image](https://user-images.githubuserc",13862,smitpatel,efcore
13549,Query: Funcletization Improvements,Find the biggest evaluatable subtree to parametrize.,Query: Funcletization Improvements  Find the biggest evaluatable subtree to parametrize.,13862,smitpatel,efcore
12048,Internalize external dependencies,"There is an ongoing discussion on how to improve our ability to service libraries like EF Core if things go really bad, e.g. if there is a security issue that needs to be patched urgently but we cannot wait for a dependency to be patched. 

This issue is about executing on the plan resulting from the discussion, whatever it ends up being (the title assumes that it will require somehow internalizing some of our current dependencies, but it may end up looking different).","Internalize external dependencies  There is an ongoing discussion on how to improve our ability to service libraries like EF Core if things go really bad, e.g. if there is a security issue that needs to be patched urgently but we cannot wait for a depende",13862,smitpatel,efcore
8741,Add Code Literal Generation to Type Mapping,"Currently, all intrinsic types are handled by `ICSharpHelper` (or `ICSharpUtilities` for RevEng), and if we encounter a type we don't understand, we'll throw.

Instead of throwing, we should ask the provider if they know how to generate a literal for the type. We'll do this by adding a method similar to the following to `RelationalTypeMapping`.

```C#
string GenerateCodeLiteral(object value, string language)
```

`language` will probably be the file extension of the code file we're generating (e.g. `.cs` for C#).

If a value is returned, we'll use it. If `null` is returned we'll continue to error with unknown literal.

Optionally, we could move the existing literal generation code to the type mappings so that they become the source of truth for all literal generation.

If an application wanted to support literal generation for a new language (e.g. Visual Basic or F#), they could override the provider type mapping implementation to handle that language.","Add Code Literal Generation to Type Mapping  Currently, all intrinsic types are handled by `ICSharpHelper` (or `ICSharpUtilities` for RevEng), and if we encounter a type we don't understand, we'll throw.

Instead of throwing, we should ask the provider",13416,ajcvickers,efcore
13297,Spatial: HasData does not work with Geometry,Throws exception from CSharpHelper while scaffolding literal for type `System.Data.SqlTypes.SqlBytes`,Spatial: HasData does not work with Geometry  Throws exception from CSharpHelper while scaffolding literal for type `System.Data.SqlTypes.SqlBytes`,13416,ajcvickers,efcore
8741,Add Code Literal Generation to Type Mapping,"Currently, all intrinsic types are handled by `ICSharpHelper` (or `ICSharpUtilities` for RevEng), and if we encounter a type we don't understand, we'll throw.

Instead of throwing, we should ask the provider if they know how to generate a literal for the type. We'll do this by adding a method similar to the following to `RelationalTypeMapping`.

```C#
string GenerateCodeLiteral(object value, string language)
```

`language` will probably be the file extension of the code file we're generating (e.g. `.cs` for C#).

If a value is returned, we'll use it. If `null` is returned we'll continue to error with unknown literal.

Optionally, we could move the existing literal generation code to the type mappings so that they become the source of truth for all literal generation.

If an application wanted to support literal generation for a new language (e.g. Visual Basic or F#), they could override the provider type mapping implementation to handle that language.","Add Code Literal Generation to Type Mapping  Currently, all intrinsic types are handled by `ICSharpHelper` (or `ICSharpUtilities` for RevEng), and if we encounter a type we don't understand, we'll throw.

Instead of throwing, we should ask the provider",13396,ajcvickers,efcore
13223,Update NetTopologySuite to 1.15.1,And remove [this workaround](https://github.com/aspnet/EntityFrameworkCore/blob/cbd2a2074d908673195abbb14de5a460acaa2aea/src/EFCore.SqlServer.NTS/NetTopologySuite.IO/SqlServerSpatialReader.cs#L73-L77).,Update NetTopologySuite to 1.15.1  And remove [this workaround](https://github.com/aspnet/EntityFrameworkCore/blob/cbd2a2074d908673195abbb14de5a460acaa2aea/src/EFCore.SqlServer.NTS/NetTopologySuite.IO/SqlServerSpatialReader.cs#L73-L77).,13356,bricelam,efcore
1409,Connection Configuration: Changes in indirect key format,"#1391 - Removed 2 different key names and added ""name=xyz"" syntax.
#1395 - Added test to verify that priority given to full name","Connection Configuration: Changes in indirect key format  #1391 - Removed 2 different key names and added ""name=xyz"" syntax.
#1395 - Added test to verify that priority given to full name",13356,bricelam,efcore
12633,RevEng: Use underlying types (not aliases) in the resulting model,"I'm using a database where there are a lot of user defined data-types. There are also like 60 tables or more so I used the `dotnet ef dbcontext scaffold` command to generate the models. 

In the project file I included

```xml
   <DotNetCliToolReference Include=""Microsoft.EntityFrameworkCore.Tools.DotNet"" Version=""2.1.0-preview1-final"" />
```
and generated it with the following command:

```ps1
$connectionString = ""Data Source=(local);Initial catalog=TestDb;Persist Security Info=True;Integrated Security=True;""
$outputDir = ""Entities\TestDb""
$context = ""TestContext""

dotnet ef dbcontext scaffold ""$connectionString"" Microsoft.EntityFrameworkCore.SqlServer --output-dir ""$outputDir"" --force --context ""$context"" --schema dbo --use-database-names
```
the resulting context is

```cs
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserDefinedDataTypeBug>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Status).HasColumnType(""Enumeration"");
            });
        }
```

When I now try to query this model with

```cs
            using (var context = new TestContext())
            {
                var results =
                    context
                        .UserDefinedDataTypeBug
                        .Where(x => x.Status == 1)
                        .ToList();
            }
```

it throws a `SqlException` that reads

```
Class         16  byte
LineNumber    1   int
Message       ""Type Enumeration is not a defined system type.""    string
Number        243 int
Procedure     """"  string
Server        ""...""   string
Source        "".Net SqlClient Data Provider""  string
State         2   byte
```

with the stack-trace

```
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, SqlDataReader ds)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.<_TrackEntities>d__17`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at System.Collections.Generic.List`1.AddEnumerable(IEnumerable`1 enumerable)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at UserDefinedDataTypeBug.Program.Main(String[] args) in C:\...\UserDefinedDataTypeBug\Program.cs:line 13
```

I've read (e.g. [here](https://www.learnentityframeworkcore.com/configuration/fluent-api/hascolumntype-method)) that this should work but it doesn't. I have to manually comment the `HasColumnType` line out in order for the query to work.

### Steps to reproduce

I have created a small console application that reproduces this issue. You can find it in [here](https://github.com/he-dev/UserDefinedDataTypeBug) in my repository.

### Further technical details
EF Core version: (2.1.1)
Database Provider: (Microsoft.EntityFrameworkCore.SqlServer) SqlServer 2014
Operating system: Window 10 Pro
IDE: (Visual Studio 2017 15.7.4)","RevEng: Use underlying types (not aliases) in the resulting model  I'm using a database where there are a lot of user defined data-types. There are also like 60 tables or more so I used the `dotnet ef dbcontext scaffold` command to generate the models. ",13293,smitpatel,efcore
13292,RevEng: Remove infra around underlyingstoretype which was to support type aliases,With #12633 type alises are going away from DatabaseModel level. i.e. providers will find out underlying type for aliased type and swap them out so EF never sees aliases. The infra to support aliases in EF Core design is public and should be removed.,RevEng: Remove infra around underlyingstoretype which was to support type aliases  With #12633 type alises are going away from DatabaseModel level. i.e. providers will find out underlying type for aliased type and swap them out so EF never sees aliases. T,13293,smitpatel,efcore
1100,Support Spatial Data Types on SQL Server and SQLite,"how to use Spatial Data types (e.g. DbGeography) in model (code-first method) to save points, shapes etc.

e.g.

public DbGeography gps_points {get; set;}

i'm unable to use ""DbGeography"".","Support Spatial Data Types on SQL Server and SQLite  how to use Spatial Data types (e.g. DbGeography) in model (code-first method) to save points, shapes etc.

e.g.

public DbGeography gps_points {get; set;}

i'm unable to use ""DbGeography"".",13245,bricelam,efcore
1389,Fixing ef migration add help.,"Adding the ability to specify subcommands in the print help command

Fix for #980 ","Fixing ef migration add help.   Adding the ability to specify subcommands in the print help command

Fix for #980 ",13245,bricelam,efcore
13098,InMemory: Should byte[] be copied in and out of store?,"``` csharp
class Data
{
    public int Id { get; set; }
    public byte[] Value { get; set; }
}

class Context : DbContext
{
    public DbSet<Data> Data { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder options)
        => options.UseInMemoryDatabase(nameof(Context));
}

class Program
{
    static void Main()
    {
        using (var db = new Context())
        {
            var data1 = new Data
            {
                Id = 1,
                Value = new byte[] { 1 }
            };
            db.Add(data1);
            db.Add(
                new Data
                {
                    Id = 2,
                    Value = new byte[] { 2 }
                });
            db.SaveChanges();

            // Mutate original instance
            data1.Value[0] = 3;
        }

        using (var db = new Context())
        {
            var data1 = db.Data.AsNoTracking().First(d => d.Id == 1);

            // Fails. It's 3.
            Debug.Assert(data1.Value[0] == 1);

            var data2 = db.Data.AsNoTracking().First(d => d.Id == 2);

            // Mutate queried instance
            data2.Value[0] = 4;
        }

        using (var db = new Context())
        {
            var data2 = db.Data.AsNoTracking().First(d => d.Id == 2);

            // Fails. It's 4.
            Debug.Assert(data2.Value[0] == 2);
        }
    }
}
```","InMemory: Should byte[] be copied in and out of store?  ``` csharp
class Data
{
    public int Id { get; set; }
    public byte[] Value { get; set; }
}

class Context : DbContext
{
    public DbSet<Data> Data { get; set; }

    protected overri",13182,ajcvickers,efcore
13053,Test failure: Update_on_bytes_concurrency_token_original_value_matches_does_not_throw,"This test [fails](http://aspnetci/viewLog.html?buildId=535124&buildTypeId=Releases_21Public_UbuntuUniverse) occasionally with the following error:
```
Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException : Conflicts were detected for instance of entity type 'ProductWithBytes' on the concurrency token properties {'Bytes'}. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting values.
   at Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTable`1.ThrowUpdateConcurrencyException(IUpdateEntry entry, Dictionary`2 concurrencyConflicts) in /_/src/EFCore.InMemory/Storage/Internal/InMemoryTable.cs:line 179
   at Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTable`1.Update(IUpdateEntry entry) in /_/src/EFCore.InMemory/Storage/Internal/InMemoryTable.cs:line 144
   at Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStore.ExecuteTransaction(IReadOnlyList`1 entries, IDiagnosticsLogger`1 updateLogger) in /_/src/EFCore.InMemory/Storage/Internal/InMemoryStore.cs:line 178
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave) in /_/src/EFCore/ChangeTracking/Internal/StateManager.cs:line 921
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess) in /_/src/EFCore/ChangeTracking/Internal/StateManager.cs:line 788
   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess) in /_/src/EFCore/DbContext.cs:line 445
   at Microsoft.EntityFrameworkCore.UpdatesTestBase`1.<>c__DisplayClass8_0.<Update_on_bytes_concurrency_token_original_value_matches_does_not_throw>b__0(UpdatesContext context) in /_/src/EFCore.Specification.Tests/UpdatesTestBase.cs:line 148
   at Microsoft.EntityFrameworkCore.TestUtilities.TestHelpers.<>c__DisplayClass35_0`1.<ExecuteWithStrategyInTransaction>b__0(TContext context) in /_/src/EFCore.Specification.Tests/TestUtilities/TestHelpers.cs:line 385
   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.<>c__2`1.<Execute>b__2_0(<>f__AnonymousType0`2 s) in /_/src/EFCore/Extensions/ExecutionStrategyExtensions.cs:line 74
   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState](IExecutionStrategy strategy, TState state, Action`1 operation) in /_/src/EFCore/Extensions/ExecutionStrategyExtensions.cs:line 76
   at Microsoft.EntityFrameworkCore.TestUtilities.TestHelpers.ExecuteWithStrategyInTransaction[TContext](Func`1 createContext, Action`2 useTransaction, Action`1 testOperation, Action`1 nestedTestOperation1, Action`1 nestedTestOperation2, Action`1 nestedTestOperation3)
   at Microsoft.EntityFrameworkCore.UpdatesTestBase`1.ExecuteWithStrategyInTransaction(Action`1 testOperation, Action`1 nestedTestOperation1) in /_/src/EFCore.Specification.Tests/UpdatesTestBase.cs:line 458
   at Microsoft.EntityFrameworkCore.UpdatesInMemoryTestBase`1.ExecuteWithStrategyInTransaction(Action`1 testOperation, Action`1 nestedTestOperation1) in /_/test/EFCore.InMemory.FunctionalTests/UpdatesInMemoryTestBase.cs:line 106
   at Microsoft.EntityFrameworkCore.UpdatesTestBase`1.Update_on_bytes_concurrency_token_original_value_matches_does_not_throw() in /_/src/EFCore.Specification.Tests/UpdatesTestBase.cs:line 154
```
Other tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.

This test failed on 2.1.

CC @ajcvickers

This issue was made automatically. If there is a problem contact ryanbrandenburg.","Test failure: Update_on_bytes_concurrency_token_original_value_matches_does_not_throw  This test [fails](http://aspnetci/viewLog.html?buildId=535124&buildTypeId=Releases_21Public_UbuntuUniverse) occasionally with the following error:
```
Microsoft.Entit",13182,ajcvickers,efcore
11929,Fix floating point comparison in BuiltInDataTypesTestBase,"Tests like `Can_query_using_any_data_type` and `Can_query_using_any_data_type_shadow` have queries with strict floating point comparisons, these aren't guaranteed to return `true` for all databases and should be changed to delta comparisons.","Fix floating point comparison in BuiltInDataTypesTestBase  Tests like `Can_query_using_any_data_type` and `Can_query_using_any_data_type_shadow` have queries with strict floating point comparisons, these aren't guaranteed to return `true` for all database",12057,AndriySvyryd,efcore
11940,Abstract SQL delimeters in tests,Like `AsyncFromSqlQueryTestBase` and `FromSqlQueryTestBase`,Abstract SQL delimeters in tests  Like `AsyncFromSqlQueryTestBase` and `FromSqlQueryTestBase`,12057,AndriySvyryd,efcore
11789,QueryTypes: Defining query on hierarchy of query types (base and derived) doesn't work,"repro:

```cs
    class Program
    {
        static void Main(string[] args)
        {
            using (var ctx = new MyContext())
            {
                ctx.Database.EnsureDeleted();
                ctx.Database.EnsureCreated();

                var f1 = new Faction { Name = ""Skeliege"" };
                var f2 = new Faction { Name = ""Monsters"" };
                var f3 = new Faction { Name = ""Nilfgaard"" };
                var f4 = new Faction { Name = ""Northern Realms"" };
                var f5 = new Faction { Name = ""Scioia'tael"" };

                var l11 = new Leader { Faction = f1, Name = ""Bran Tuirseach"" };
                var l12 = new Leader { Faction = f1, Name = ""Crach an Craite"" };
                var l13 = new Leader { Faction = f1, Name = ""Eist Tuirseach"" };
                var l14 = new Leader { Faction = f1, Name = ""Harald the Cripple"" };

                ctx.Factions.AddRange(f1, f2, f3, f4, f5);
                ctx.Leaders.AddRange(l11, l12, l13, l14);
                ctx.SaveChanges();
            }

            using (var ctx = new MyContext())
            {
                ctx.LeadersQuery.ToList();
            }
        }
    }

    public class MyContext : DbContext
    {
        public DbSet<Faction> Factions { get; set; }
        public DbSet<Leader> Leaders { get; set; }

        public DbQuery<LeaderQuery> LeadersQuery { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@""Server=.;Database=QueryTypesRepro;Trusted_Connection=True;MultipleActiveResultSets=True"");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Query<LeaderQuery>().ToQuery(() => Set<Leader>().Select(l => new LeaderQuery { Name = l.Name, Faction = l.Faction.Leaders.OrderBy(ll => ll.Id).Select(ll => ll.Faction).FirstOrDefault() } ));
            modelBuilder.Query<LeaderQueryBase>().ToQuery(() => Set<Leader>().Select(l => new LeaderQueryBase { Name = l.Name }));
        }
    }

    public class Faction
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public List<Leader> Leaders { get; set; }
    }

    public class FactionQuery
    {
        public string Name { get; set; }
    }

    public class Leader
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Faction Faction { get; set; }
    }

    public class LeaderQuery : LeaderQueryBase
    {
        public Faction Faction { get; set; }
    }

    public class LeaderQueryBase
    {
        public string Name { get; set; }
    }
```

this throws:

```
The query model's result type cannot be changed to 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[QueryTypesTests.LeaderQuery]'. The result type may only be overridden and set to values compatible with the ResultOperators' current data type ('System.Linq.IQueryable`1[QueryTypesTests.LeaderQueryBase]').

   at Remotion.Linq.QueryModel.GetOutputDataInfo()
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence(QueryModel queryModel, Type type) in D:\git\EntityFrameworkCore\src\EFCore\Query\EntityQueryModelVisitor.cs:line 646
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel) in D:\git\EntityFrameworkCore\src\EFCore\Query\EntityQueryModelVisitor.cs:line 177
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](QueryModel queryModel) in D:\git\EntityFrameworkCore\src\EFCore\Storage\Database.cs:line 70
```

QM:

```
from Leader l in DbSet<Leader>
select new LeaderQueryBase{ Name = [l].Name }
```

We seem to be using only the defining query for LeaderQueryBase, when asked to construct `DbQuery<LeaderQuery>`","QueryTypes: Defining query on hierarchy of query types (base and derived) doesn't work  repro:

```cs
    class Program
    {
        static void Main(string[] args)
        {
            using (var ctx = new MyContext())
            {",11812,AndriySvyryd,efcore
11808,QueryTypes: ToView() on two query types in the same hierarchy (mapping to different views) tries to map each type to the different view,"Repro:


```cs
    class Program
    {
        static void Main(string[] args)
        {
            using (var ctx = new MyContext())
            {
                ctx.Database.EnsureDeleted();
                ctx.Database.EnsureCreated();

                var f1 = new Faction { Name = ""Skeliege"" };
                var f2 = new Faction { Name = ""Monsters"" };
                var f3 = new Faction { Name = ""Nilfgaard"" };
                var f4 = new Faction { Name = ""Northern Realms"" };
                var f5 = new Faction { Name = ""Scioia'tael"" };

                var l11 = new Leader { Faction = f1, Name = ""Bran Tuirseach"" };
                var l12 = new Leader { Faction = f1, Name = ""Crach an Craite"" };
                var l13 = new Leader { Faction = f1, Name = ""Eist Tuirseach"" };
                var l14 = new Leader { Faction = f1, Name = ""Harald the Cripple"" };

                ctx.Factions.AddRange(f1, f2, f3, f4, f5);
                ctx.Leaders.AddRange(l11, l12, l13, l14);
                ctx.SaveChanges();
            }

            using (var ctx = new MyContext())
            {
                var q1 = ctx.Set<LeaderBase>().ToList(); // queries LeaderBases table
                var q2 = ctx.Set<Leader>().ToList(); // also queries LeaderBases table

                var q3 = ctx.Query<LeaderQueryBase>().ToList(); // queries LeaderBasesView
                var q4 = ctx.Query<LeaderQuery>().ToList(); // queries LeadersView
            }
        }
    }

    public class MyContext : DbContext
    {
        public DbSet<Faction> Factions { get; set; }
        public DbSet<LeaderBase> Leaders { get; set; }

        public DbQuery<LeaderQueryBase> LeadersQuery { get; set; }
        public DbQuery<FactionQuery> FactionsQuery { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@""Server=.;Database=QueryTypesRepro;Trusted_Connection=True;MultipleActiveResultSets=True"");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LeaderBase>().ToTable(""LeaderBases"");
            modelBuilder.Entity<Leader>().ToTable(""Leaders"");

            modelBuilder.Query<LeaderQueryBase>().ToView(""LeaderBasesView"");
            modelBuilder.Query<LeaderQuery>().ToView(""LeadersView"");
        }
    }

    public class Faction
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public List<Leader> Leaders { get; set; }
    }

    public class FactionQuery
    {
        public string Name { get; set; }
    }

    public class Leader : LeaderBase
    {
        public Faction Faction { get; set; }
    }

    public class LeaderBase
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class LeaderQuery
    {
        public Faction Faction { get; set; }
    }

    public class LeaderQueryBase
    {
        public string Name { get; set; }
    }
```
","QueryTypes: ToView() on two query types in the same hierarchy (mapping to different views) tries to map each type to the different view  Repro:


```cs
    class Program
    {
        static void Main(string[] args)
        {
            using (va",11812,AndriySvyryd,efcore
10134,RevEng: Multi-line DEFAULT SQL results in invalid C#,"Describe what is not working as expected.
When creating the model for table columns that have a default value set via a function, the scaffolding is creating incorrect syntax in the ModelCreating.

In sql server, I have a column with a ""Default Vale or Binding"" set as `dbo.Set_To_Zero`.

The resulting code created in `protected override void OnModelCreating(ModelBuilder modelBuilder)` was:

``` C#
.HasDefaultValueSql(""
/****** Object:  Default dbo.Set_To_Zero    Script Date: 8/20/01 1:54:04 PM ******/

/****** Object:  Default dbo.Set_To_Zero    Script Date: 8/6/01 11:18:06 AM ******/

CREATE DEFAULT Set_To_Zero
\tAS 0




"");
```

### Steps to reproduce
Have a sql server column with a Default Value or Binding set to a db function. 
Use DB Scaffold-DbContext to have it create the models.
View result in the resulting Context.cs file.

### Further technical details
EF Core version: (found in project.csproj or packages.config)
    ```
<PackageReference Include=""Microsoft.EntityFrameworkCore.Design"" Version=""1.1.2"" PrivateAssets=""All"" />
    <PackageReference Include=""Microsoft.EntityFrameworkCore.SqlServer"" Version=""1.1.2"" />
    <PackageReference Include=""Microsoft.EntityFrameworkCore.SqlServer.Design"" Version=""1.1.2"" PrivateAssets=""All"" />
    <PackageReference Include=""Microsoft.EntityFrameworkCore.Tools"" Version=""1.1.1"" PrivateAssets=""All"" />
```
Database Provider:  Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10 x64
IDE: e.g. Visual Studio 2017","RevEng: Multi-line DEFAULT SQL results in invalid C#  Describe what is not working as expected.
When creating the model for table columns that have a default value set via a function, the scaffolding is creating incorrect syntax in the ModelCreating.
",11643,bricelam,efcore
8853,RevEng: Clean up internal code,"A few ideas:
- [ ] Move checks for default constraint names in CSharpDbContextGenerator to ScaffoldingModelFactory
- [ ] Better variable and parameter names
- [x] Rename ModelScaffolder to ReverseEngineeringScaffolder OR merge it into DatabaseOperations
- [x] Decouple RelationalScaffoldingModelFactory from IDatabaseModelFactory
- [ ] Use resources (issue #8599)
- [x] Clean up IModel annotations (issue #8689)
- [x] Remove DbDataReaderExtension (issue #8712)
- [x] Remove TableSelectionSet
- [ ] Merge code which does similar things in Migrations (issue #1671)
  - CSharpUtilities cf CSharpHelper
  - code that transforms directory paths into namespaces
  - code for GenerateAnnotations including GenerateFluentApiForAnnotation
  - DbContext writer does not generate namespaces for custom types
- [ ] Uniquification is done twice in `CSharpUtilities` and in `CSharpUniqueNamer`. We should rationalize this and figure out how configurable candidate naming, ensuring valid C# identifier, storing the names so that another name used in the same context clashes, and pluralization/singularization fits in to that process (see #8989).
- [x] Use IOperationsReporter and vanilla Logging (issue #8686)
- [x] Remove IRelationalTypeMapper dependency in RelationalScaffoldingModelFactory (use IScaffoldingTypeMapper)
- [x] Remove protected dependency properties on internal services
- [x] Remove ServiceCollection.AddScaffolding() extension method (update tests to build the full design-time service provider)
- [x] Decouple IScaffoldingCodeGenerator form I/O (see [this comment](https://github.com/aspnet/EntityFrameworkCore/pull/10356#issuecomment-346412414))","RevEng: Clean up internal code  A few ideas:
- [ ] Move checks for default constraint names in CSharpDbContextGenerator to ScaffoldingModelFactory
- [ ] Better variable and parameter names
- [x] Rename ModelScaffolder to ReverseEngineeringScaffolder OR",11643,bricelam,efcore
10175,Migrations: Unused using generated,"The following namespaces are generated in the migraiton designer and model snapshot files.
``` csharp
using Microsoft.EntityFrameworkCore.Migrations; // Not used by snapshot
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
```

I suspect it's due to annotations that we later filter out.","Migrations: Unused using generated  The following namespaces are generated in the migraiton designer and model snapshot files.
``` csharp
using Microsoft.EntityFrameworkCore.Migrations; // Not used by snapshot
using Microsoft.EntityFrameworkCore.Storag",11638,bricelam,efcore
11114,Using SeedData with enums generates non-compiling code,"When using EntityTypeBuilder.SeedData with an entity that has an enum property, updating the database reports the error ""Build failed"". This is because EF Core migrations generates code that fails to resolve the enum.

### Steps to reproduce
1. Create any enumeration:
```
    public enum TestEnum
    {
        EnumValue1,
        EnumValue2
    }
```

2. Use in an entity:
```
   public int Id { get; set; }
   public TestEnum MyTestEnum { get; set; }
   public string Name { get; set; }
```

3. In OnModelCreating, seed the table as follows:
```
            modelBuilder.Entity<Project>().SeedData(
                new { Id = 1, MyTestEnum = TestEnum.EnumValue1, Name = ""Test Project"" });
```

4. Drop and recreate the database via migrations:
```
dotnet ef database drop -f
dotnet ef migrations remove
dotnet ef migrations add InitialCreate
dotnet ef database update
```

This reports ""Build failed"". The offending code is in Migrations/20180301115050_InitialCreate.cs:

```
            migrationBuilder.InsertData(
                table: ""Project"",
                columns: new[] { ""Id"", ""MyTestEnum"", ""Name"" },
                values: new object[] { 1, TestEnum.EnumValue1, ""Test Project"" });
```

Above, ""TestEnum"" cannot be resolved.

In case of relevance, the entity classes are in a separate project named Domain - the EF code is in a project named Database. But judging from the usings in 20180301115050_InitialCreate.cs, I don't think it would find TestEnum even if everything was in the same project.

In step 3 above I tried replacing TestEnum.EnumValue1 with 0, but then updating the database rightly complained of a type mismatch: ""The seed entity for entity type 'Project' cannot be added because the value provided for the property 'TestEnum' is not of the type 'Domain.Model.TestEnum'"".

Fully qualifying TestEnum did not help either, as the generated code removed the qualification (not unreasonably).

In case of use, here is an extract from my csproj:
```
  <ItemGroup>
    <PackageReference Include=""Microsoft.EntityFrameworkCore.Design"" Version=""2.1.0-preview1-final"" />
    <PackageReference Include=""Microsoft.EntityFrameworkCore.SqlServer"" Version=""2.1.0-preview1-final"" />
    <PackageReference Include=""Microsoft.Extensions.Configuration.FileExtensions"" Version=""2.0.0"" />
    <PackageReference Include=""Microsoft.Extensions.Configuration.Json"" Version=""2.0.0"" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include=""Microsoft.EntityFrameworkCore.Tools.DotNet"" Version=""2.1.0-preview1-final"" />
  </ItemGroup>
```

### Further technical details
EF Core version: 2.1.0-preview1-final
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10 Professional
IDE: Visual Studio 2017 15.5.4","Using SeedData with enums generates non-compiling code  When using EntityTypeBuilder.SeedData with an entity that has an enum property, updating the database reports the error ""Build failed"". This is because EF Core migrations generates code that fails to",11638,bricelam,efcore
10430,Missing multi-part identifier when executing ToListAsync,"### Failing query
```c#
var query = await ctx
.Profiles
.Include(i => i.ProfileInstagrams)
.ThenInclude(i => i.Instagram)
.Where(p => !p.Deleted)
.OrderBy(p => (int?)p.ProfileInstagrams.Sum(i => i.Instagram.FollowCount) ?? 0)
.ToListAsync();
```

Corresponding `ToList()` version works (see code at the bottom). Just paste the code into an empty WebApplication project and launch it.

The async version works if the `OrderBy` references a single property e.g. `OrderBy(p => (int?) p.ProfileInstagram.FollowCount) ?? 0)`

SQL Server Express 13.0.4001.0 (English)

### StackTrace
```
WebApplication3> System.Data.SqlClient.SqlException (0x80131904): The multi-part identifier ""t.c"" could not be bound.
WebApplication3> The multi-part identifier ""t.Id"" could not be bound.
WebApplication3>    at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__108_0(Task`1 result)
WebApplication3>    at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()
WebApplication3>    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
WebApplication3>    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
WebApplication3>    at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.<ExecuteAsync>d__17.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<BufferlessMoveNext>d__10.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<MoveNext>d__9.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Linq.AsyncEnumerable.JoinAsyncIterator`4.<MoveNextCore>d__20.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
WebApplication3>    at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
WebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.<IncludeCollectionAsync>d__12.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.<_IncludeAsync>d__20`1.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
WebApplication3>    at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.<_ExecuteAsync>d__8`1.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
WebApplication3>    at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
WebApplication3>    at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
WebApplication3>    at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()
WebApplication3> --- End of stack trace from previous location where exception was thrown ---
WebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
WebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
WebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()
WebApplication3> ClientConnectionId:b8a1ac8b-8515-4c53-a7e8-433b99af31b5
WebApplication3> Error Number:4104,State:1,Class:16
```

### Further technical details
Microsoft.AspNetCore.All.2.0.3
EF Core version: 2.0.1
Database Provider: Microsoft.EntityFrameworkCore.SqlServer.2.0.1
Operating system: Windows 10 Pro 1709 16299.64
IDE: Visual Studio Community 2017

### Steps to reproduce
Empty WebApp start project then just paste code
```c#
    public class ProfileInstagram
    {
        public int ProfileId { get; set; }

        public Profile Profile { get; set; }

        public int InstagramId { get; set; }

        public Instagram Instagram { get; set; }
    }

    public class Profile
    {
        public int Id { get; set; }

        public ICollection<ProfileInstagram> ProfileInstagrams { get; set; }
    }

    public class Instagram
    {
        public int Id { get; set; }

        public int FollowCount { get; set; }

        public ICollection<ProfileInstagram> ProfileInstagrams { get; set; }
    }

    public class Context : DbContext
    {
        public DbSet<Profile> Profiles { get; set; }

        public DbSet<Instagram> Instagrams { get; set; }

        // ReSharper disable once SuggestBaseTypeForParameter
        // Must declare type explicitly when used with pooling
        public Context(DbContextOptions<Context> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ProfileInstagram>(e =>
            {
                e.HasKey(_ => new
                {
                    _.ProfileId,
                    _.InstagramId
                });
                e.HasOne(_ => _.Profile)
                 .WithMany(_ => _.ProfileInstagrams);

                e.HasOne(_ => _.Instagram)
                 .WithMany(_ => _.ProfileInstagrams);
            });
            base.OnModelCreating(modelBuilder);
        }
    }

    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            const string cs =
                ""Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Test1;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False"";
            services.AddEntityFrameworkSqlServer()
                    .AddDbContext<Context>(options => options.UseSqlServer(cs));
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(
            IApplicationBuilder app,
            IHostingEnvironment env,
            IServiceProvider prv)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            Seed(prv);

            app.Run(async context => { await Query(prv); });
        }

        private static async Task Query(IServiceProvider prv)
        {
            // ReSharper disable once ConstantNullCoalescingCondition
            // Force COALESCE in case no Instagram for Profile
            using (var scope = prv.CreateScope())
            {
                var ctx = scope.ServiceProvider.GetRequiredService<Context>();
                var query = ctx
                    .Profiles
                    .Include(i => i.ProfileInstagrams)
                    .ThenInclude(i => i.Instagram)
                    .OrderBy(p => (int?) p.ProfileInstagrams.Sum(i => i.Instagram.FollowCount) ?? 0);

                var influencers = query.ToList();
                var influencersAsync = await query.ToListAsync();
            }
        }

        private static void Seed(IServiceProvider prv)
        {
            using (var scope = prv.CreateScope())
            {
                var ctx = scope.ServiceProvider.GetRequiredService<Context>();
                ctx.Database.EnsureDeleted();
                ctx.Database.EnsureCreated();

                var instagrams = new List<Instagram>
                {
                    new Instagram
                    {
                        FollowCount = 10
                    },
                    new Instagram
                    {
                        FollowCount = 20
                    },
                    new Instagram
                    {
                        FollowCount = 31
                    }
                };
                ctx.Instagrams.AddRange(instagrams);
                var influencers = new List<Profile>
                {
                    new Profile
                    {
                        ProfileInstagrams = new List<ProfileInstagram>
                        {
                            new ProfileInstagram
                            {
                                Instagram = instagrams[0]
                            }
                        }
                    },
                    new Profile
                    {
                        ProfileInstagrams = new List<ProfileInstagram>
                        {
                            new ProfileInstagram
                            {
                                Instagram = instagrams[1]
                            }
                        }
                    },
                    new Profile(),
                    new Profile
                    {
                        ProfileInstagrams = new List<ProfileInstagram>
                        {
                            new ProfileInstagram
                            {
                                Instagram = instagrams[0]
                            },
                            new ProfileInstagram
                            {
                                Instagram = instagrams[1]
                            }
                        }
                    },
                    new Profile
                    {
                        ProfileInstagrams = new List<ProfileInstagram>
                        {
                            new ProfileInstagram
                            {
                                Instagram = instagrams[2]
                            }
                        }
                    }
                };
                ctx.Profiles.AddRange(influencers);
                ctx.SaveChanges();
            }
        }
    }
```","Missing multi-part identifier when executing ToListAsync  ### Failing query
```c#
var query = await ctx
.Profiles
.Include(i => i.ProfileInstagrams)
.ThenInclude(i => i.Instagram)
.Where(p => !p.Deleted)
.OrderBy(p => (int?)p.ProfileInstagrams.Sum(",11623,smitpatel,efcore
11037,Invalid included navigation query generated,"I have run into situation when Npgsql.EF.Core generates invalid SQL query when complex OrderBy expression used in async query.

```
Exception message: ""42P01: missing FROM-clause entry for table \""t0\""""
Stack trace: ""   at Npgsql.NpgsqlConnector.<DoReadMessage>d__155.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()
   at Npgsql.NpgsqlConnector.<ReadMessage>d__154.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Npgsql.NpgsqlConnector.<ReadMessage>d__154.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()
   at Npgsql.NpgsqlConnector.<ReadExpecting>d__161`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()
   at Npgsql.NpgsqlDataReader.<NextResult>d__32.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Npgsql.NpgsqlDataReader.<<NextResultAsync>b__31_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Npgsql.NpgsqlCommand.<Execute>d__71.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()
   at Npgsql.NpgsqlCommand.<ExecuteDbDataReader>d__92.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()
   at Npgsql.NpgsqlCommand.<>c__DisplayClass90_0.<<ExecuteDbDataReaderAsync>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.<ExecuteAsync>d__17.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<BufferlessMoveNext>d__10.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.EntityFrameworkCore.Storage.Internal.NpgsqlExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<MoveNext>d__9.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Linq.AsyncEnumerable.JoinAsyncIterator`4.<MoveNextCore>d__20.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.<IncludeCollectionAsync>d__12.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.<_IncludeAsync>d__20`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.<_ExecuteAsync>d__8`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at QueryExample.Program.Main(String[] args) in D:\\Git\\pgefcore2-query-bug\\QueryExample\\Program.cs:line 34""
```

### Steps to reproduce

I wrote example project where this error is reproduced:
https://github.com/grayver/pgefcore2-query-bug

Briefly:

Here is LINQ expression:
```c#
            return _context.Competitions
                .Include(c => c.Quest)
                .Include(c => c.Quest).ThenInclude(q => q.Author)
                .Include(c => c.Quest).ThenInclude(q => q.QuestTags).ThenInclude(qt => qt.Tag)
                .Where(c => c.Passes.Any(qp => qp.User.UserFriends.Any(uf => uf.FriendId == userId)))
                .OrderByDescending(c => c.Passes
                    .Where(qp => qp.User.UserFriends.Any(uf => uf.FriendId == userId))
                    .Max(qp => qp.CreatedAt))
                .Skip(1)
                .Take(3)
                .ToListAsync();
```
 
and here are SQL queries:
```sql
SELECT ""c"".""Id"", ""c"".""DislikeCount"", ""c"".""LikeCount"", ""c"".""QuestId"", ""c.Quest"".""Id"", ""c.Quest"".""Answer1Text"", ""c.Quest"".""Answer2Text"", ""c.Quest"".""Answer3Text"", ""c.Quest"".""Answer4Text"", ""c.Quest"".""AuthorId"", ""c.Quest"".""Name"", ""c.Quest"".""QuestionText"", ""c.Quest.Author"".""Id"", ""c.Quest.Author"".""Email"", ""c.Quest.Author"".""Fullname"", ""c.Quest.Author"".""IsEmailConfirmed""
FROM ""Competitions"" AS ""c""
INNER JOIN ""Quests"" AS ""c.Quest"" ON ""c"".""QuestId"" = ""c.Quest"".""Id""
INNER JOIN ""Users"" AS ""c.Quest.Author"" ON ""c.Quest"".""AuthorId"" = ""c.Quest.Author"".""Id""
WHERE EXISTS (
    SELECT 1
    FROM ""QuestPasses"" AS ""qp""
    INNER JOIN ""Users"" AS ""qp.User"" ON ""qp"".""UserId"" = ""qp.User"".""Id""
    WHERE EXISTS (
        SELECT 1
        FROM ""UserFriends"" AS ""uf""
        WHERE (""uf"".""FriendId"" = @__userId_0) AND (""qp.User"".""Id"" = ""uf"".""UserId"")) AND (""c"".""Id"" = ""qp"".""CompetitionId""))
ORDER BY (
    SELECT MAX(""qp0"".""CreatedAt"")
    FROM ""QuestPasses"" AS ""qp0""
    INNER JOIN ""Users"" AS ""qp.User0"" ON ""qp0"".""UserId"" = ""qp.User0"".""Id""
    WHERE EXISTS (
        SELECT 1
        FROM ""UserFriends"" AS ""uf0""
        WHERE (""uf0"".""FriendId"" = @__userId_1) AND (""qp.User0"".""Id"" = ""uf0"".""UserId"")) AND (""c"".""Id"" = ""qp0"".""CompetitionId"")
) DESC, ""c.Quest"".""Id""
LIMIT @__p_3 OFFSET @__p_2

SELECT ""c.Quest.QuestTags"".""QuestId"", ""c.Quest.QuestTags"".""TagId"", ""q.Tag"".""Id"", ""q.Tag"".""Value""
FROM ""QuestTags"" AS ""c.Quest.QuestTags""
INNER JOIN ""Tags"" AS ""q.Tag"" ON ""c.Quest.QuestTags"".""TagId"" = ""q.Tag"".""Id""
ORDER BY ""t0"".""c"" DESC, ""t0"".""Id""
```

However, if I use sync query instead of async - error disappears and valid query generated.

### Further technical details
EF Core version: 2.0.1
Database Provider: Npgsql.EntityFrameworkCore.PostgreSQL version 2.0.1
Operating system: Windows 10, Windows 7, Ubuntu 16.04
IDE: Visual Studio 2017 15.5.7","Invalid included navigation query generated  I have run into situation when Npgsql.EF.Core generates invalid SQL query when complex OrderBy expression used in async query.

```
Exception message: ""42P01: missing FROM-clause entry for table \""t0\""""
Sta",11623,smitpatel,efcore
10450,Adding an item to a collection doesn't mark it as modified,"See [Repro10450](https://github.com/aspnet/EntityFrameworkCore/compare/Repro10449...Repro10450)
```C#
[Fact]
public void Adding_an_item_to_a_collection_marks_it_as_modified()
{
    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))
    {
        var options = Fixture.CreateOptions(testDatabase);
        using (var context = new GameDbContext(options))
        {
            context.Database.EnsureCreated();

            var player = new PlayerCharacter(new Level
            {
                Game = new Game()
            });
            var weapon = new Item
            {
                Id = 1,
                Game = player.Game
            };
            context.Characters.Add(player);

            context.SaveChanges();

            player.Items.Add(weapon);

            context.ChangeTracker.DetectChanges();
            Assert.True(context.Entry(player).Collection(p => p.Items).IsModified);
        }
    }
}
```","Adding an item to a collection doesn't mark it as modified  See [Repro10450](https://github.com/aspnet/EntityFrameworkCore/compare/Repro10449...Repro10450)
```C#
[Fact]
public void Adding_an_item_to_a_collection_marks_it_as_modified()
{
    using (va",11619,ajcvickers,efcore
10448,Setting a reference twice using the same context fails,"Saving after setting `CurrentWeapon` to `null` doesn't update the relationship snapshot, so the last `SaveChanges` doesn't detect the change.

See [Repro10448]( https://github.com/aspnet/EntityFrameworkCore/compare/Repro10440...Repro10448)

```C#
[Fact]
public void Can_set_reference_twice()
{
    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))
    {
        var options = Fixture.CreateOptions(testDatabase);
        using (var context = new GameDbContext(options))
        {
            context.Database.EnsureCreated();

            var player = new PlayerCharacter(new Level
            {
                Game = new Game()
            });
            var weapon = new Item
            {
                Id = 1,
                Game = player.Game
            };
            player.Items.Add(weapon);
            context.Characters.Add(player);

            context.SaveChanges();

            player.CurrentWeapon = weapon;
            context.SaveChanges();

            player.CurrentWeapon = null;
            context.SaveChanges();

            player.CurrentWeapon = weapon;
            context.SaveChanges();
        }

        using (var context = new GameDbContext(options))
        {
            var player = context.Characters
                .Include(c => c.Items)
                .ToList().Single();
                    
            Assert.Equal(player.Items.Single(), player.CurrentWeapon);
        }
    }
}
```","Setting a reference twice using the same context fails  Saving after setting `CurrentWeapon` to `null` doesn't update the relationship snapshot, so the last `SaveChanges` doesn't detect the change.

See [Repro10448]( https://github.com/aspnet/EntityFram",11619,ajcvickers,efcore
10603,Navigations on attached entities are not fixed up,"See [Repro10603](https://github.com/aspnet/EntityFrameworkCore/compare/Repro10450...Repro10603)
```C#
[Fact]
public void Can_include_on_loaded_entity()
{
    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))
    {
        var options = Fixture.CreateOptions(testDatabase);
        using (var context = new GameDbContext(options))
        {
            context.Database.EnsureCreated();

            var player = new PlayerCharacter(new Level
            {
                Game = new Game()
            });
            var weapon = new Item
            {
                Id = 1,
                Game = player.Game
            };
            player.Items.Add(weapon);
            player.Items.Add(new Item
            {
                Id = 2,
                Game = player.Game
            });
            context.Characters.Add(player);

            context.SaveChanges();

            player.CurrentWeapon = weapon;

            context.SaveChanges();
        }

        using (var context = new GameDbContext(options))
        {
            var player = context.Characters
                .Include(p => p.CurrentWeapon)
                .Single();

            Assert.Equal(1, player.Items.Count);

            context.Attach(player);

            Assert.Equal(1, player.Items.Count);

            context.Levels
                .Include(l => l.Actors)
                .ThenInclude(a => a.Items)
                .Load();

            Assert.Equal(2, player.Items.Count);
        }

        using (var context = new GameDbContext(options))
        {
            var player = context.Characters
                .Include(p => p.CurrentWeapon)
                .AsNoTracking()
                .Single();

            Assert.Equal(0, player.Items.Count);

            context.Attach(player);

            // Throws
            Assert.Equal(1, player.Items.Count);

            context.Levels
                .Include(l => l.Actors)
                .ThenInclude(a => a.Items)
                .Load();

            // Throws
            Assert.Equal(2, player.Items.Count);
        }
    }
}
```","Navigations on attached entities are not fixed up  See [Repro10603](https://github.com/aspnet/EntityFrameworkCore/compare/Repro10450...Repro10603)
```C#
[Fact]
public void Can_include_on_loaded_entity()
{
    using (var testDatabase = SqlServerTestSt",11619,ajcvickers,efcore
11083,EF Core 2.1 Preview 1 SeedData method throws The seed entity for entity type 'XXX' cannot be added because the was no value provided for the required property 'Discriminator'.,"SeedData has an issue with Entities that rely on Discriminators. Updated ef core tutorial highlights the issue.

```
update-database
Microsoft.EntityFrameworkCore.Model[10601]
      The index {'CourseID'} was not created as the properties are already covered by the index {'CourseID', 'InstructorID'}.
System.InvalidOperationException: The seed entity for entity type 'Student' cannot be added because the was no value provided for the required property 'Discriminator'. 
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateSeedData(IModel model)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.Validate(IModel model)
   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.Validate(IModel model)
   at Microsoft.EntityFrameworkCore.Internal.SqlServerModelValidator.Validate(IModel model)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()
   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()
   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()
   at Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()
   at Microsoft.EntityFrameworkCore.Internal.InternalAccessorExtensions.GetService[TService](IInfrastructure`1 accessor)
   at Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService[TService](IInfrastructure`1 accessor)
   at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.CreateContext(Func`1 factory)
   at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.CreateContext(String contextType)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.UpdateDatabase(String targetMigration, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.UpdateDatabase.<>c__DisplayClass0_1.<.ctor>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)
The seed entity for entity type 'Student' cannot be added because the was no value provided for the required property 'Discriminator'.
```

### Steps to reproduce
Using the following sample:
https://github.com/aspnet/Docs/tree/master/aspnetcore/data/ef-mvc/intro/samples/cu-final

Comment out everything in Data\DbInitializer\Initialize 

Add the following code at the end of Data\SchoolContext\OnModelCreating 
```C#
            modelBuilder.Entity<Student>().SeedData(new Student
            {
                ID = 1,
                EnrollmentDate = DateTime.Now,
                FirstMidName = ""FirstName"",
                LastName = ""Lastname""
            });
```

Run update-database from the package manager console.

### Further technical details
EF Core version: ""Microsoft.EntityFrameworkCore.Relational"" Version=""2.1.0-preview1-final""
Database Provider: ""Microsoft.EntityFrameworkCore.SqlServer"": ""2.1.0-preview1-final""
Operating system: Win 10 Pro x64 1709 16299.248
IDE: VisualStudio.15.Preview/15.6.0-pre.6.0+27421.1",EF Core 2.1 Preview 1 SeedData method throws The seed entity for entity type 'XXX' cannot be added because the was no value provided for the required property 'Discriminator'.  SeedData has an issue with Entities that rely on Discriminators. Updated ef co,11103,AndriySvyryd,efcore
11097,Migrations generates invalid code for data seeding,"I was trying to try out the new data seeding feature from Preview 1. However, it seems like EF is generating invalid C# code sometimes, depending on entity.

Please refer to [this repository](https://github.com/alaatm/EF21MigrationsIssue) where I have already generated migrations but the code is invalid with the message: **No best type found for implicitly-typed array** in both designer and snapshot files.

### Further technical details
EF Core version: 2.1 Preview 1
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
","Migrations generates invalid code for data seeding  I was trying to try out the new data seeding feature from Preview 1. However, it seems like EF is generating invalid C# code sometimes, depending on entity.

Please refer to [this repository](https://g",11103,AndriySvyryd,efcore
9180,Metadata: InverseProperty fails to resolve ambiguity while use KeyAttribute on PK,"I am opening a issue regarding the [Foreignkey] attribute
This was using the Pomelo.MySQL driver, but it might also affect other drivers.

(origional issue) [https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/324](https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/324)

Note (as described below) that it worked perfectly fine in EFCore 1.0 and 1.1 and broke in 2.0

### Steps to reproduce
1. Create a test application with the model below
    1 targeting NetCoreApp 1.1
    1 targeting NetCoreApp 2.0
2. Run ""dotnet restore""
3. Run ""dotnet build""
4. Run ""dotnet ef migrations add initial""

### Model used
```
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EFModelTest
{
    class Program
    {
        static void Main(string[] args) { }
    }

    public class User
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int UserId { get; set; }

        [MaxLength(64)]
        public string Name { get; set; }

        [InverseProperty(nameof(Relation.AccountManager))]
        public virtual ICollection<Relation> AccountManagerRelations { get; set; }

        [InverseProperty(nameof(Relation.SalesManager))]
        public virtual ICollection<Relation> SalesManagerRelations { get; set; }
    }

    public class Relation
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        public string Id { get; set; }

        [MaxLength(64)]
        public string Name { get; set; }

        public int? AccountManagerId { get; set; }

        [ForeignKey(nameof(AccountManagerId))]
        public virtual User AccountManager { get; set; }

        public int? SalesManagerId { get; set; }

        [ForeignKey(nameof(SalesManagerId))]
        public virtual User SalesManager { get; set; }
    }

    public class MyContext : DbContext
    {
        public DbSet<User> Users { get; set; }
		
        public DbSet<Relation> Relations { get; set; }
		
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder.UseMySql(@""User Id=root;Password=root;Host=localhost;Database=eftest;Persist Security Info=True;Convert Zero Datetime=True;"");
    }
}
```

### The issue
Using data attributes to add a foreign key fails in EFCore 2.0 when the classname is not equal to a property name.

For instance:
Mapping a UserId as foreign key to a class called User using a property User => works fine
Mapping a ManagerId as foreign key to a class called User using a property called Manager => Broken

### Stacktrace EF MySQL 1.1
```
PS D:\Sourcecodes\EF Core MySQL\NET1.1> dotnet ef migrations add initial

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.39
Done. To undo this action, use 'ef migrations remove'
```

### Migration model
```
.....
   migrationBuilder.CreateTable(
                name: ""Relations"",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    AccountManagerId = table.Column<int>(nullable: true),
                    Name = table.Column<string>(maxLength: 64, nullable: true),
                    SalesManagerId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey(""PK_Relations"", x => x.Id);
                    table.ForeignKey(
                        name: ""FK_Relations_Users_AccountManagerId"",
                        column: x => x.AccountManagerId,
                        principalTable: ""Users"",
                        principalColumn: ""UserId"",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: ""FK_Relations_Users_SalesManagerId"",
                        column: x => x.SalesManagerId,
                        principalTable: ""Users"",
                        principalColumn: ""UserId"",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: ""IX_Relations_AccountManagerId"",
                table: ""Relations"",
                column: ""AccountManagerId"");

            migrationBuilder.CreateIndex(
                name: ""IX_Relations_SalesManagerId"",
                table: ""Relations"",
                column: ""SalesManagerId"");
```

### Stacktrace EF MySQL 2.0
```
PS D:\Sourcecodes\Model Scaffolding Error\NET2.0> dotnet ef migrations add initial
System.InvalidOperationException: Unable to determine the relationship represented by navigation property 'Relation.AccountManager' of type 'User'. Either manually configure the relationship, or ignore this property using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.Apply(InternalModelBuilder modelBuilder)
   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.ImmediateConventionScope.OnModelBuilt(InternalModelBuilder modelBuilder)
   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnModelBuilt(InternalModelBuilder modelBuilder)
   at Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Validate()
   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Validate()
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()
   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactoryService(FactoryService factoryService, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass17_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.Design.Internal.DesignTimeServicesBuilder.<>c__DisplayClass6_0.<ConfigureContextServices>b__7(IServiceProvider _)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactoryService(FactoryService factoryService, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite transientCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass17_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.EnsureServices(IServiceProvider services)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigrationImpl(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigration.<>c__DisplayClass0_1.<.ctor>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.<>c__DisplayClass3_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)
Unable to determine the relationship represented by navigation property 'Relation.AccountManager' of type 'User'. Either manually configure the relationship, or ignore this property using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
```

### Workaround
Using the fluent api to add the constraint fixes the issue, its purely data attribute constraints that can't be resolved.

Adding the below modelbuilder to the MyContext fixes the issue in EF Core 2.0
This was not required in 1.1
```
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
	base.OnModelCreating(modelBuilder);
	modelBuilder.Entity<Relation>(e =>
	{
	   e.HasOne(r => r.AccountManager).WithMany(u => u.AccountManagerRelations).HasForeignKey(r => r.AccountManagerId);
	   e.HasOne(r => r.SalesManager).WithMany(u => u.SalesManagerRelations).HasForeignKey(r => r.SalesManagerId);
	});
}
```

### Output with workaround
```
PS D:\Sourcecodes\Model Scaffolding Error\NET2.0> dotnet ef migrations add initial
Done. To undo this action, use 'ef migrations remove'
```
Scaffolds just fine

### Further technical details
MySQL version:  5.7.14
Operating system: Windows Server 2012
Pomelo.EntityFrameworkCore.MySql version: 1.1.2 & 2.0.0-preview2-10046

Other details about my project setup:
Visual Studio 2017 Preview 4","Metadata: InverseProperty fails to resolve ambiguity while use KeyAttribute on PK  I am opening a issue regarding the [Foreignkey] attribute
This was using the Pomelo.MySQL driver, but it might also affect other drivers.

(origional issue) [https://git",11088,AndriySvyryd,efcore
11019,ForeignKeyConvention doesnt run when dependent entity type PK is changed,"Before:

```cs
    public class LocustLeader
    {
        public string Name { get; set; }
        public short ThreatLevel { get; set; }
    }

    public class LocustCommander : LocustLeader
    {
        public LocustHorde CommandingFaction { get; set; }

        public string DefeatedByNickname { get; set; }
        public int? DefeatedBySquadId { get; set; }
        public Gear DefeatedBy { get; set; }
    }

    public abstract class Faction
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public string CapitalName { get; set; }
        public City Capital { get; set; }
    }

    public class LocustHorde : Faction
    {
        public LocustCommander Commander { get; set; }
        public List<LocustLeader> Leaders { get; set; }

        public string CommanderName { get; set; }
        public bool? Eradicated { get; set; }
    }
```

and OnModelCreating:

```cs
modelBuilder.Entity<LocustHorde>().HasOne(h => h.Commander).WithOne(c => c.CommandingFaction);
```

would create a navigation: locustHorde.CommanderName -> locustLeader.Name

After adding (undelated) navigation to LocustCommander, the relationship is not defined as:
faction.Id -> locustLeader.CommandingFactionId

The new definition is worse because the navigation is declared on derived entity - LocustHorde and there is a matching FK (CommanderName)




","ForeignKeyConvention doesnt run when dependent entity type PK is changed  Before:

```cs
    public class LocustLeader
    {
        public string Name { get; set; }
        public short ThreatLevel { get; set; }
    }

    public class LocustCom",11088,AndriySvyryd,efcore
221,Logging: add to Change Tracker,"","Logging: add to Change Tracker  ",11065,ajcvickers,efcore
9291,efcore2 warns about default values for bool,"I'm in the process of updating a large app from efcore 1.1 to efcore 2preview
Got everything working with the existing models and previous migrations but ran into this problem when adding new properties to the model.

I added a few properties to my model and then wanted to generate a migration. The new props are added like this:

    entity.Property(p => p.PwdRequireNonAlpha)
                .IsRequired()
                .HasColumnType(""bit"")
                .HasDefaultValue(true)
                ;
                entity.Property(p => p.PwdRequireLowercase)
                .IsRequired()
                .HasColumnType(""bit"")
                .HasDefaultValue(true)
                ;
                entity.Property(p => p.PwdRequireUppercase)
                .IsRequired()
                .HasColumnType(""bit"")
                .HasDefaultValue(true)
                ;
                entity.Property(p => p.PwdRequireDigit)
                .IsRequired()
                .HasColumnType(""bit"")
                .HasDefaultValue(true)
                ;
Then when I generated the migration I got a lot of warnings about default values for existing bool properties and also about my new ones like this:

    The 'bool' property 'PwdRequireNonAlpha' on entity type 'SiteSettings' is configured with a 
    database-generated default. This default will always be used when the property has the value 'false', 
    since this is the CLR default for the 'bool' type. Consider using the nullable 'bool?' type instead so that
     the default will only be used when the property value is 'null'.

So that means if later I update the value to false on the entity it will be changed to true?
I don't want a nullable bool, what I want is to add the column and for existing rows make it true.

How can I accomplish that?","efcore2 warns about default values for bool  I'm in the process of updating a large app from efcore 1.1 to efcore 2preview
Got everything working with the existing models and previous migrations but ran into this problem when adding new properties to the",11065,ajcvickers,efcore
9761,Data type 'nvarchar' is not supported in this form should also say which property,The exception message says what is wrong and how to fix but does not indicate which property it was on. We can probably improve the message.,Data type 'nvarchar' is not supported in this form should also say which property  The exception message says what is wrong and how to fix but does not indicate which property it was on. We can probably improve the message.,11065,ajcvickers,efcore
10170,"Better SaveChanges exception messages for ""conceptual nulls""","The normal ""conceptual null"" message is:

> The association between entity types 'Blog' and 'Post' has been severed but the foreign key for this relationship cannot be set to null. If the dependent entity should be deleted, then setup the relationship to use cascade deletes.

However, this can be confusing if:
* The relationship was severed because the principal was deleted--the message above is correct, but additional information should be included so that the deletion can be identified as the root cause.
* The key is nullable--in this case it's not that the key can't be set to null, but rather that the relationship is configured with Restrict such that the key is not set to null automatically.","Better SaveChanges exception messages for ""conceptual nulls""  The normal ""conceptual null"" message is:

> The association between entity types 'Blog' and 'Post' has been severed but the foreign key for this relationship cannot be set to null. If the dep",11065,ajcvickers,efcore
10435,Add logging event for client-side cascade delete,This is tricky to debug when not intended,Add logging event for client-side cascade delete  This is tricky to debug when not intended,11065,ajcvickers,efcore
10540,Make IEntityEntryGraphIterator public,"Implementation can stay internal. See https://github.com/aspnet/EntityFrameworkCore/pull/10517 for discussion. 

Consider fixing #8226 before making public in case it impacts public API in breaking way.","Make IEntityEntryGraphIterator public  Implementation can stay internal. See https://github.com/aspnet/EntityFrameworkCore/pull/10517 for discussion. 

Consider fixing #8226 before making public in case it impacts public API in breaking way.",11047,ajcvickers,efcore
8226,"TrackGraph stop tracking if current State is not set, but setting state throw InvalidOperationException","In our situation, we have to work with TrackGraph method because we have mapping between Domain and Persistence layer.

The fact is, in case of update, we look in local tracking entries to retrieve value and update it if necessary

```
        private void TrackGraph(EntityEntryGraphNode e)
        {
            if (e.Entry.IsKeySet)
            {
                var entry = Context.ChangeTracker.Entries().Where(m => m.Entity.GetType() == e.Entry.Entity.GetType())
                    .FirstOrDefault(m => m.Entity?.Equals(e.Entry.Entity) == true);
                if (entry == null) 
                {
                    e.Entry.State = EntityState.Modified; 
                }
                else
                {
                    var domainValues = GetPropertiesEvaluated(e.Entry.Entity);
                    var currentValues = GetPropertiesEvaluated(entry.Entity);
                    if (domainValues.Except(currentValues).Any())
                    {
                        entry.CurrentValues.SetValues(domainValues);
                        entry.State = EntityState.Modified;
                        if (entry.Entity is DbEntity ent)
                        {
                            ent.EditDate = DateTime.Now;
                        }
                    }
                    else
                    {
                        entry.State = EntityState.Unchanged;
                    }
                }
            }
            else
            {
                e.Entry.State = EntityState.Added;
            }
        }
```
In case of update, we enter the function with a Detached entity, retrieve the corresponding local instance and then updating it. However, because we're not setting the state of current entering entity in `TrackGraph` method, the TrackGraph method ends here ( https://github.com/aspnet/EntityFramework/blob/dev/src/EFCore/ChangeTracking/ChangeTracker.cs indicates that State should be different of Detached)

Is this possible to make Callback a `Func<EntityEntryGraphNode, bool>` to indicate continuation instead of relaying on the State ? Or maybe to have both method signatures ...

In my case, if I set State directly on the e.Entry, I've got and `InvalidOperationException` because Entity is currently tracked with the same key.

I've already tried to detach local entity, but the thing is, when I set state to my current entity, I have a `InvalidOperationException` at next node when calling `Context.ChangeTracker.Entries()`.

### Further technical details
EF Core version: 1.1.1
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: VS 2017","TrackGraph stop tracking if current State is not set, but setting state throw InvalidOperationException  In our situation, we have to work with TrackGraph method because we have mapping between Domain and Persistence layer.

The fact is, in case of upda",11047,ajcvickers,efcore
10962,Update pipeline doesn't enforce all the identifying relationships in table splitting,Can insert PoweredVehicle and FuelTank without CombustionEngine,Update pipeline doesn't enforce all the identifying relationships in table splitting  Can insert PoweredVehicle and FuelTank without CombustionEngine,11044,AndriySvyryd,efcore
10971,Test: Can_use_with_fanned_relationships has incorrect assertion,"Can_use_with_fanned_relationships ignores a relationship but the seed data still contains connected data so when we load data from database and assert, it fails.","Test: Can_use_with_fanned_relationships has incorrect assertion  Can_use_with_fanned_relationships ignores a relationship but the seed data still contains connected data so when we load data from database and assert, it fails.",11044,AndriySvyryd,efcore
10716,"Get the values of Group by using MyGroup.ToList() Throw exception, Must select First","Get the values of Group by using grp.ToList() Throw exception I must Select First

```
Exception message:
Stack trace:
```
Expression of type 'System.Linq.IAsyncGrouping`2[x,y]' 
cannot be used for parameter of type 'System.Collections.Generic.IEnumerable`1[y]' 
of method 'System.Collections.Generic.List`1[y] 
ToList[y](System.Collections.Generic.IEnumerable`1[y])'
Parameter name: arg0
 at System.Dynamic.Utils.ExpressionUtils.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, String methodParamName, String argumentParamName, Int32 index)
   at System.Linq.Expressions.Expression.Call(MethodInfo method, Expression arg0)
   at System.Linq.Expressions.MethodCallExpression1.Rewrite(Expression instance, IReadOnlyList`1 args)
   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)
   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)
   at System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(MemberBinding node)
   at System.Linq.Expressions.ExpressionVisitor.Visit[T](ReadOnlyCollection`1 nodes, Func`2 elementVisitor)
   at System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(MemberInitExpression node)
   at System.Linq.Expressions.MemberInitExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)
   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor[TResult](QueryModel queryModel)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass24_0`1.<CompileAsyncQuery>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System.Collections.Generic.IAsyncEnumerable<TResult>.GetEnumerator()
   at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

### Steps to reproduce

```c#
var q =  await (
              from t1 in _context.T1
	      join t2 in _context.T2 on t1.Id equals t2.Id
              group t2 by t1 into grp
              select new MyModel
	      {
		  T1 = grp.Key,
		  T2s = grp.ToList() // THROW exception .. should use  grp..Select(x => x).ToList() 
	      }
            ).ToListAsync();
```

### Further technical details
EF Core version: 2.0
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE:  Visual Studio 2017 15.4","Get the values of Group by using MyGroup.ToList() Throw exception, Must select First  Get the values of Group by using grp.ToList() Throw exception I must Select First

```
Exception message:
Stack trace:
```
Expression of type 'System.Linq.IAsyncGr",10976,smitpatel,efcore
10974,Query: Include Collection group by reference throws exception,"In GearsOfWarQueryTestBase
```C#
        [ConditionalFact]
        public virtual void Include_collection_group_by_reference()
        {
            using (var context = CreateContext())
            {
                var query = context.Set<Gear>()
                    .Include(g => g.Weapons)
                    .GroupBy(g => g.Squad)
                    .ToList();
            }
        }
```","Query: Include Collection group by reference throws exception  In GearsOfWarQueryTestBase
```C#
        [ConditionalFact]
        public virtual void Include_collection_group_by_reference()
        {
            using (var context = CreateContext())",10976,smitpatel,efcore
10612,Rebuilding relationships causes annotations on navigations to be lost,"Cannot include a private collection in an entity
```
System.NotSupportedException : Collection is read-only.
   at System.ThrowHelper.ThrowNotSupportedException(ExceptionResource resource)
   at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Add(Object instance, Object value)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.AddToCollection(InternalEntityEntry entry, INavigation navigation, IClrCollectionAccessor collectionAccessor, Object value)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.ToDependentFixup(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.TrackedFromQuery(InternalEntityEntry entry, ISet`1 handledForeignKeys)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.TrackedFromQuery(InternalEntityEntry entry, ISet`1 handledForeignKeys)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(ISet`1 handledForeignKeys)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(IEntityType baseEntityType, Object entity, ValueBuffer valueBuffer, ISet`1 handledForeignKeys)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.StartTracking(Object entity, IEntityType entityType)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.<IncludeCollectionAsync>d__12.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.<_IncludeAsync>d__20`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.<_ExecuteAsync>d__8`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at System.Linq.AsyncEnumerable.<SingleOrDefault_>d__381`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.<MoveNext>d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<ExecuteSingletonAsyncQuery>d__23`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at booking.student.infrastructure.Repositories.StudentRepository.<FindAsync>d__6.MoveNext() in /Users/Jose8789/oculos/college/services/booking.student/infrastructure/booking.student.infrastructure/Repositories/StudentRepository.cs:line 36
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at booking.student.tests.StudentManagementTest.<ChangeProgressStatus>d__3.MoveNext() in /Users/Jose8789/oculos/college/services/booking.student/tests/booking.student.tests/StudentManagementTest.cs:line 107
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```

### Steps to reproduce

```c#
public class Student 
    {
        private List<StudentProgress> _progresses;
        protected Student()
        {
            _progresses = new List<StudentProgress>();
        }
        public IEnumerable<StudentProgress> Progresses => _progresses.AsReadOnly();
    }

public void Configure(EntityTypeBuilder<Student> studentConfiguration)
        {
            studentConfiguration.HasKey(x => x.Id);
            studentConfiguration.Ignore(x => x.DomainEvents);

            studentConfiguration.Metadata.FindNavigation(nameof(Student.Progresses))
                .SetPropertyAccessMode(PropertyAccessMode.Field);
        }
public class StudentProgress : Entity
    {
        public int ProgressStatusId { get; private set; }
        public int Year { get; private set; }
        public Grade Grade { get; private set; }
        public int CourseId { get; private set; }

        public StudentProgress(Grade grade, int year, int courseId, ProgressStatus progress)
        {
            ProgressStatusId = progress.Id;
            Year = year;
            Grade = grade;
            CourseId = courseId;
        }
    }

this is where I'm getting the error:
public async Task<Student> FindAsync(int identity)
        {
            var student = await _context.Set<Student>()
                .Include(x=>x.Progresses) // this line is generating the error
                .Where(b => b.Id == identity)
                .SingleOrDefaultAsync();

            return student;
        }
```","Rebuilding relationships causes annotations on navigations to be lost  Cannot include a private collection in an entity
```
System.NotSupportedException : Collection is read-only.
   at System.ThrowHelper.ThrowNotSupportedException(ExceptionResource re",10975,AndriySvyryd,efcore
10911,Annotations on the first owned entity type reference are lost,"I discovered an odd regression that has occurred between build 28148 and 300047. I will have to spend some time tracking down when it occurred, I will try to do that tomorrow.

The issue is that my model has sub-owned types and suddenly the migration would stop generating correctly. I have tracked it down to two issues in the ModelSnapshot code, below is a Gist of a sample snapshot.

https://gist.github.com/mrswain/f975e4a2538eaea8d9b06d26d961cecc

The end result of the model should be 4 entities and 7 owned entities, and all entities should be mapped to 4 schema.table pairs.

What happens is I now get 6 entities (two owned ones become unowned) and some of the owned entities lose their table relational attributes.

I dropped the test back to build 28148 and it gives the correct output so some change has caused this.

NOTE:
My test program is a simple
```C#
using System;

namespace EFTest
{
    class Program
    {
        static void Main(string[] args)
        {
            var snapshot = new SnapshotTest();

            var model = snapshot.Model;

        }
    }
}
```
I have a breakpoint on the model assignment so I can view the results.","Annotations on the first owned entity type reference are lost  I discovered an odd regression that has occurred between build 28148 and 300047. I will have to spend some time tracking down when it occurred, I will try to do that tomorrow.

The issue is",10975,AndriySvyryd,efcore
9753,Support change tracking of non-primitive types,"ChangeTracker does not detect changes to properties of type Dictionary<,>. In provider for PostgreSQL database database column type hstore is mapped to .net type Dictionary<string,string> but this feature can not be used properly if we do not have change tracking for those properties. One solution would be to use ImmutableDictionary but we want to avoid that.

### Steps to reproduce

```c#
public class HStoreContext : DbContext
{
   public DbSet<SomeEntity> SomeEntities { get; set; }
}

public class SomeEntity
{
   public int Id { get; set; }
   public Dictionary<string, string> Tags { get; set; }
}

using (HStoreContext ctx = CreateContext())
{
   var entity = new SomeEntity()
   {
       Tags = new Dictionary<string, string>()
   };
   ctx.SomeEntities.Add(entity);
   var num = ctx.SaveChanges();

   Assert.Equal(1, num);

   var entry = ctx.Entry(entity);
   Assert.Equal(EntityState.Unchanged, entry.State);

   entity.Tags.Add(""kind"", ""new"");
   ctx.ChangeTracker.DetectChanges();

   Assert.Equal(EntityState.Modified, entry.State); // This fails
}
```

### Further technical details
EF Core version: 2.0.0
Database Provider: Microsoft.EntityFrameworkCore.PostgreSQL
Operating system: 
IDE: Visual Studio 2017","Support change tracking of non-primitive types  ChangeTracker does not detect changes to properties of type Dictionary<,>. In provider for PostgreSQL database database column type hstore is mapped to .net type Dictionary<string,string> but this feature ca",10969,ajcvickers,efcore
10961,Add fluent API for configuring value snapshot/comparison,"#9753 added support for DetectChanges to work with types that need a custom snapshot and/or equality comparison. This allows providers (e.g. for Postgres) to create type mappings with these things specified. This issue is about adding fluent API to make it easy for applications to specify equality/snapshot, which is important when using value conversions for model types that need such things.",Add fluent API for configuring value snapshot/comparison  #9753 added support for DetectChanges to work with types that need a custom snapshot and/or equality comparison. This allows providers (e.g. for Postgres) to create type mappings with these things,10969,ajcvickers,efcore
9422,Snapshot change tracking is slow,The scenario in https://github.com/aspnet/EntityFramework/issues/7582 is slow even in desktop app,Snapshot change tracking is slow  The scenario in https://github.com/aspnet/EntityFramework/issues/7582 is slow even in desktop app,10969,ajcvickers,efcore
8652,InvalidCastException when casting from one value type to another in a simple select statement,"[InvalidCastApp.zip](https://github.com/aspnet/EntityFramework/files/1045495/InvalidCastApp.zip)
When casting a property from a nullable double to a nullable int in a `Select` function, an InvalidCastException occurs. Likewise, the same exception occurs if the types are not nullable.

Attached is a working example of the issue. Just create the database and table first and then update the connection string in `Program.cs`.

The select looks like this:
```               
.Select(o => new DTO() {  
  Limit = o.Limit__c.HasValue ? (int?)o.Limit__c : null,   
  Slots = o.Slots__c.HasValue ? (int?)o.Slots__c : null  
  })  
  .Where(o => cIds.Contains(o.CId))  
  .ToListAsync());  
```
`Limit__c` and `Slots__c` are nullable doubles
The SQL profiler does not show any casting before the exception is thrown.
The same query was working in EF 6.x (Full Framework).
```
Exception message: Specified cast is not valid.
Stack trace:
<error errorId=""7f262bc2-3b41-439b-be10-ed2c6e480a0f"" application=""/LM/W3SVC/2/ROOT"" host="""" type=""System.InvalidCastException"" message=""Specified cast is not valid."" source=""Anonymously Hosted DynamicMethods Assembly"" detail=""System.InvalidCastException: Specified cast is not valid.;  
 at lambda_method(Closure , QueryContext , ValueBuffer );  
 at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionShaper.TypedProjectionShaper`3.Shape(QueryContext queryContext, ValueBuffer valueBuffer);  
 at Microsoft.EntityFrameworkCore.Query.AsyncQueryMethodProvider.&lt;&gt;c__DisplayClass3_0`1.&lt;_ShapedQuery&gt;b__0(ValueBuffer vb);  
 at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.&lt;MoveNextCore&gt;d__7.MoveNext();--- End of stack trace from previous location where exception was thrown ---;  
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Linq.AsyncEnumerable.AsyncIterator`1.&lt;MoveNext&gt;d__10.MoveNext();--- End of stack trace from previous location where exception was thrown ---;  
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.&lt;MoveNext&gt;d__5.MoveNext();--- End of stack trace from previous location where exception was thrown ---;  
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Linq.AsyncEnumerable.&lt;Aggregate_&gt;d__6`3.MoveNext();--- End of stack trace from previous location where exception was thrown ---;  
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult();  
 at --snip--.&lt;WithContext&gt;d__5`1.MoveNext();--- End of stack trace from previous location where exception was thrown ---;  
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult();  
 at --snip--.&lt;GetByContractIds&gt;d__13.MoveNext();--- End of stack trace from previous location where exception was thrown ---;  
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult();  
 at --snip--d__54.MoveNext() in 
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult();  
 at --snip--Load&gt;d__14.MoveNext() in 
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.GetResult();  
 at --snip--Contract&gt;d__70.MoveNext() in 
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task);  
 at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task);  
 at System.Web.Mvc.Async.TaskAsyncActionDescriptor.EndExecute(IAsyncResult asyncResult);  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.&lt;&gt;c__DisplayClass37.&lt;BeginInvokeAsynchronousActionMethod&gt;b__36(IAsyncResult asyncResult);  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult);  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.AsyncInvocationWithFilters.&lt;InvokeActionMethodFilterAsynchronouslyRecursive&gt;b__3d();  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.AsyncInvocationWithFilters.&lt;&gt;c__DisplayClass46.&lt;InvokeActionMethodFilterAsynchronouslyRecursive&gt;b__3f();  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult);  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.&lt;&gt;c__DisplayClass21.&lt;&gt;c__DisplayClass2b.&lt;BeginInvokeAction&gt;b__1c();  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.&lt;&gt;c__DisplayClass21.&lt;BeginInvokeAction&gt;b__1e(IAsyncResult asyncResult);  
 at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction(IAsyncResult asyncResult);  
 at System.Web.Mvc.Controller.&lt;BeginExecuteCore&gt;b__1d(IAsyncResult asyncResult, ExecuteCoreState innerState);  
 at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult);  
 at System.Web.Mvc.Controller.EndExecuteCore(IAsyncResult asyncResult);  
 at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult);  
 at System.Web.Mvc.Controller.EndExecute(IAsyncResult asyncResult);  
 at System.Web.Mvc.MvcHandler.&lt;BeginProcessRequest&gt;b__5(IAsyncResult asyncResult, ProcessRequestState innerState);  
 at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult);  
 at System.Web.Mvc.MvcHandler.EndProcessRequest(IAsyncResult asyncResult);  
 at System.Web.HttpApplication.CallHandlerExecutionStep.OnAsyncHandlerCompletion(IAsyncResult ar)"" user="""" time=""2017-05-31T19:14:36.8015246Z"">

```

### Steps to reproduce
1. Create a table with a column defined as `decimal(18,0),null` and an `int` primary key.
2. Use the project in the attached zip, first updating the connection string in `Program.cs`.
3. Running the application will give the invalid cast exception.
```
.Select(o => new DTO() {  
  ModelWithNullableInt = o.ModelWithNullableDecimal.HasValue ? (int?)o.ModelWithNullableDecimal: null})  
```

### Further technical details
EF Core version: Reproduced in 1.1.2 as well as 2.0.0-preview1-final
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10 64-bit
IDE: Visual Studio 2017 - build 26510.0 Preview","InvalidCastException when casting from one value type to another in a simple select statement  [InvalidCastApp.zip](https://github.com/aspnet/EntityFramework/files/1045495/InvalidCastApp.zip)
When casting a property from a nullable double to a nullable i",10960,maumar,efcore
1251,Query :: join + orderby + count produces invalid sql,"Consider the following query:

```
(from c in cs
                 join o in os on c.CustomerID equals o.CustomerID
                 orderby c.CustomerID
                 select c).Count()
```

This produces incorrect sql:

```
SELECT COUNT(*)
FROM [Customers] AS [c]
INNER JOIN [Orders] AS [o] ON [c].[CustomerID] = [o].[CustomerID]
ORDER BY [c].[CustomerID]
```

which throws:

Column ""Customers.CustomerID"" is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause.

We should probably prune the orderby call as it doesn't do anything","Query :: join + orderby + count produces invalid sql  Consider the following query:

```
(from c in cs
                 join o in os on c.CustomerID equals o.CustomerID
                 orderby c.CustomerID
                 select c).Count()
```
",10960,maumar,efcore
10748,Migration Snapshot enum/valueconverter issue,"Describe what is not working as expected.

If you have a nullable enum property that also uses a value converter, the snapshot code generates invalid calls.

```C#
    public enum RoadwaySides
    {
        Left = -1,
        Center,
        Right
    }

    public class ProjectDetail
    {
        public RoadwaySides? RoadwaySide { get; set; }
    }
```

... in model builder

```C#
            builder.Property(pd => pd.RoadwaySide).HasConversion(v => v == RoadwaySides.Left ? ""L"" : v == RoadwaySides.Center ? ""C"" : v == RoadwaySides.Right ? ""R"" : null, v => v == ""L"" ? RoadwaySides.Left : v == ""C"" ? RoadwaySides.Center : v == ""R"" ? RoadwaySides.Right : (RoadwaySides?)null).HasColumnName(""RDWYSIDE"").HasColumnType(""char(1)"").HasMaxLength(1);

```

... in generated snapshot

```C#

                    b.Property<int?>(""RoadwaySide"")
                        .HasConversion(new ValueConverter<RoadwaySides?, string>(v => default(string), v => default(RoadwaySides?)))
                        .HasColumnName(""RDWYSIDE"")
                        .HasColumnType(""char(1)"")
                        .HasMaxLength(1)
                        .IsUnicode(false);

```
The snapshot generator unwraps the enum for the property call but does not unwrap the enum for the HasConversion call.

I think this line:
https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.Design/Migrations/Design/CSharpSnapshotGenerator.cs#L433

needs a .UnwrapEnumType() call in it to fix the problem.

### Further technical details
EF Core version: 2.1.0 - 28148
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Win10 Ent
IDE: Visual Studio comm 2017 15.4","Migration Snapshot enum/valueconverter issue  Describe what is not working as expected.

If you have a nullable enum property that also uses a value converter, the snapshot code generates invalid calls.

```C#
    public enum RoadwaySides
    {",10920,ajcvickers,efcore
3620,Support for database enums,"PostgreSQL allows defining enums as first-class database types, which can then be used in regular columns. Npgsql exposes this by allowing users to define a mapping between a PostgreSQL enum and a CLR enum.

EF7's type mapping now allows arbitrary types to be mapped to supported database types, this works very well with PostgreSQL types - types such as `macaddr` are successfully mapped in EF7 to .NET PhysicalAddress. However, when trying to add enum mapping support I ran into trouble - it seems that in various areas of the EF7 core enums are unwrapped and treated as their underlying numeric type instead (e.g. int).

I'm guessing this is to allow enums to be saved to numeric columns for databases which don't support enums natively (e.g. SqlServer). Am I understanding the situation correctly, is database enum support currently impossible in EF7?","Support for database enums  PostgreSQL allows defining enums as first-class database types, which can then be used in regular columns. Npgsql exposes this by allowing users to define a mapping between a PostgreSQL enum and a CLR enum.

EF7's type mappin",10920,ajcvickers,efcore
10509,Implement lazy-loading of navigation properties,"This issue tracks work on lazy-loading of relationships in EF Core. Subscribe to this issue to get updates when progress is made on lazy-loading. This issue is locked for now to reduce noise. Please use issue #3797 for general discussion on lazy-loading in EF Core.",Implement lazy-loading of navigation properties  This issue tracks work on lazy-loading of relationships in EF Core. Subscribe to this issue to get updates when progress is made on lazy-loading. This issue is locked for now to reduce noise. Please use iss,10904,ajcvickers,efcore
3797,Discussion on lazy-loading of navigation properties,"Note:
* Issue #10509 has been created to track actual work on lazy-loading. The new issue is locked so that it can be subscribed to for updates on the implementation without noise.
* This issue has been re-purposed to be discussion about lazy-loading in EF Core. It will not (for the time being) be locked because it is important to us that we don’t shut down channels of communication with the community.

With regard to feedback, I think it is worth reiterating some comments made a few months ago. We read and consider all feedback (and try to make the right choices based on it) no matter how it is delivered; that is, whether it is provided politely and with respect or not. Yelling at us or others with different opinions at best makes you feel good and us/them feel bad. It doesn’t achieve anything concrete. We are doing our best to prioritize features and implement them in the best way we can. We really appreciate your feedback and it makes a big difference on shaping the product. We personally appreciate it more when feedback is delivered in a respectful way, but please don’t stop providing constructive feedback.

---

Original issue:

Hi,

i was wondering if I am the only one that thinks EF Core is useless without Lazy Loading? Or do I do something wrong? Lets just consider a simple scenario when a course provider cancels a course on a course booking plattform written in MVC. 

The user calls courses/cancel/1. The action would get the course and call cancel method like here

```
Course course = context.Courses.SingleOrDefault(c => c.Id = 1);
course.Cancel();
```

The cancel method then needs to cancel each booking on the course so it would do something like this

```
foreach(Booking booking in this.Bookings)
{
    booking.Cancel();
}
```

The booking in turn would refund the transaction

```
foreach(Transaction transaction in this.Transactions)
{
    transaction.Refund();
}
```

So for this to work, lazy loading is needed?! (The solution would be to eager load all the data on the controllers action method. But I do not know what will be needed from the controller?)

I'd appreciate any information on that.","Discussion on lazy-loading of navigation properties  Note:
* Issue #10509 has been created to track actual work on lazy-loading. The new issue is locked so that it can be subscribed to for updates on the implementation without noise.
* This issue has be",10904,ajcvickers,efcore
10115,Bug in MigrationBuilder,"Calling MigrationBuilder.UpdateData does not persist passed in schema

It is due to this method:
https://github.com/aspnet/EntityFrameworkCore/blob/fbaebcbfb57f245edfded68f0bad78f4978d8867/src/EFCore.Relational/Migrations/MigrationBuilder.cs#L1230

I stepped through it trying to debug the problem and I noticed it does not pass schema through thus dropping any supplied value.

### Further technical details
EF Core version: 2.0","Bug in MigrationBuilder  Calling MigrationBuilder.UpdateData does not persist passed in schema

It is due to this method:
https://github.com/aspnet/EntityFrameworkCore/blob/fbaebcbfb57f245edfded68f0bad78f4978d8867/src/EFCore.Relational/Migrations/Migra",10899,bricelam,efcore
10402,SQL Server Migrations: CreateIndex for Memory-Optimized Table ignores schema,"There is no chance to create index for memory-optimized table with schema different from [dbo] using migrations. Command does not use schema name to identify db object.

```
Exception message: Cannot find the object ""UserInfo"" because it does not exist or you do not have permissions

Stack trace:
      Microsoft.EntityFrameworkCore.Database.Command[20102]
      Failed executing DbCommand (88ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      ALTER TABLE [UserInfo] ADD INDEX [IX_NameIndex] NONCLUSTERED ([NameIndex]);
System.Data.SqlClient.SqlException (0x80131904): Cannot find the object ""UserInfo"" because it does not exist or you do not have permissions.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
...
```
```c#
            migrationBuilder.EnsureSchema(
                name: ""Users"");

            migrationBuilder.AlterDatabase()
                .Annotation(""SqlServer:MemoryOptimized"", true);

            migrationBuilder.CreateTable(
                name: ""UserInfo"",
                schema: ""Users"",
                columns: table => new
                {
                    ...
                })
                .Annotation(""SqlServer:MemoryOptimized"", true);

            ...

            migrationBuilder.CreateIndex(
                name: ""IX_NameIndex"",
                schema: ""Users"",
                table: ""UserInfo"",
                column: ""NameIndex"")
                .Annotation(""SqlServer:Clustered"", false);
```

### Further technical details
EF Core version: 2.1.0-preview1-27654 and earlier
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: No matter (Rider 2017.2.1)","SQL Server Migrations: CreateIndex for Memory-Optimized Table ignores schema  There is no chance to create index for memory-optimized table with schema different from [dbo] using migrations. Command does not use schema name to identify db object.

```",10899,bricelam,efcore
10895,Add events for entity state changes,Breakout from #626 to track for 2.1,Add events for entity state changes  Breakout from #626 to track for 2.1,10896,ajcvickers,efcore
626,Lifecycle hooks,"***Note: this is a copy of a very old EF specification and reflects thinking from several years ago. A lot of things aren't valid anymore.***

We define EF Core lifecycle hooks as the general feature that enables an application or library to sign up to be invoked or notified whenever certain interesting conditions or actions occur as part of the lifecycle of entities, properties, associations, queries, context instances, and other elements in the Entity Framework stack. 

For example:
1. An application can provide a method that will be invoked automatically whenever an object is about to be saved, or it can subscribe to an event that fires when an object is created and its properties initialized, etc. 
2. A framework extension can register an interceptor that gives it an opportunity to rewrite query expression trees before they get translated by EF. This could be used to validate whether a user has access to specific information or to filter query results based on per DbContext filter (see #6440).
3. Execute SQL after a `DbConnection` is opened (to use features such as SQL Server App Role)

### The need for lifecycle hooks

We want to enable customers to write business logic that triggers in the different stages of the lifecycle of these objects, following well factored coding patterns. We also want framework writers to be able to use these hooks to extend EF Core in useful ways. 

In previous versions of Entity Framework we already exposed a few lifecycle hooks. For instance, we had the `AssociationChanged` and `ObjectStateManagerChanged` events since the first version, and the `ObjectMaterialized` event was added in EF4. Up until EF6.x many of the existing hooks are not exposed in the DbContext API. In EF6 we also added several low level extensibility points in [Interception](https://msdn.microsoft.com/en-us/dn469464#BuildingBlocks) that can be used too as lifecycle hooks. 

There is a continuum of capabilities related and overlapping with lifecycle hooks, e.g.:
- We want to improve everyone’s ability to diagnose functional and performance issues with their code using Entity Framework by recording information about interesting events and conditions in the EF stack, but that is essentially logging (tracked in #218 and other work items). By comparison, lifecycle hooks allows to modify the outcome of these events. 
- Also the DI-based architecture of EF Core allows for a very granular capability to wrap and replace individual implementation services, which can potentially be used to extend EF and to execute business logic. By comparison, lifecycle hooks is about adding simple and first class hooks that can easily be used to react to interesting conditions without having to re-implement the complete interface of a service.
### Target customers
1.	Application developers that need to implement business logic that is triggered at certain points in the lifecycle of an application, for instance, before an added or modified object is saved to the database, just before loading the contents of a navigation property, etc. Someone could add an OnValidate method to an entity that gets executed right before the entity is stored.
2.	Framework/tool writers that need to extend the behavior of Entity Framework to support new application scenarios or to integrate it with other products or frameworks can write their own frameworks on top of EF that customize the behavior, collect data about the execution of specific actions, etc. Someone can write a full-fledged profiler taking advantage of the hooks. 
### Goals & Principles
1.	Should work well and be consistent with DbContext design principles
2.	Should have a consistent story on when and how it is allowed to re-enter: With a very small set of rules users should be able to predict what is allowed and what is not. The stack should be resilient to reentrancy in some cases and throw good exceptions if reentrancy occurs in other cases. We should prevent doing the same work more than once. 
3.	Should have minimal performance impact, especially when hooks are not being used the impact should be insignificant.
### A brief survey of hooking mechanisms
There are not only different interesting conditions or actions an application may need to listen to, but also different kinds of mechanisms to implement hooks that present distinctive characteristics along the following dimensions:
1.	Compile-time vs. run-time binding
2.	Performance
3.	Cancellability
4.	Override/customization of default behavior
5.	Single vs. multi-cast
6.	Simplicity
7.	Discoverability
8.	Familiarity 
Note: We are looking for criteria that will help us choose the best type of hook for each extensibility point, as well as for the possibility of defining unified hook mechanisms that we can leverage to support different patterns with the same framework code. 
#### .NET Events
Events are the most common hook pattern that almost every API in .NET uses. Events are messages sent by sender object to one or more receiver objects through a multicast delegate that acts as a dispatcher. Among the characteristics of events, they support runtime subscribe/unsubscribe, multiple listeners, and are relatively easy to use. Events can be slower than other hook mechanisms, but they have the advantage of being very discoverable (they are usually public members on the sender object) and familiar to customers. Events also provide a standard way to model cancellable actions with CancelEventArgs.
#### Virtual methods
Virtual methods require the application code to declare a derived type and override the method. Virtual methods provide better performance than events but are slower than regular method invocation. Virtual methods are easy to discover and provide a very nice model for overriding/customizing default behavior and chaining with subsequent derivate types. Visual Studio provides a nice Intellisense experience for virtual methods: when you write the overrides keyword in C#, Intellisense provides the list of all the virtual methods available.
#### Delegates
A more efficient alternative to events, regular (non-multicast) delegates can also be used as a hook. Users can normally provide some implementation of a predefined delegate signature (usually a Func<T…\> or Action<T…\> that can be implemented as a regular method, and anonymous method or a lambda expression) as a parameter to a framework method, as the return type from a method or as a property.  Then the delegate is invoked by the framework at appropriate times. While delegates are often compared to strongly typed function pointers, they in fact are very flexible with regards to the signature (they support variance).
#### Partial methods
Partial methods were introduced in .NET 3.5 as a means to extend generated code in separate partial classes. Partial methods are void methods that are both defined and invoked in the right places in generated code. Users can choose to provide the implementation of partial methods in a separate partial class, and the compiler will resolve the partial method to the implementation provide by the user. When the implementation of a partial method is not provided, all calls to the method and its definition are removed by the compiler. Since partial methods are either turned into regular methods or removed, the mechanism is extremely efficient. Partial methods are discoverable because Visual Studio provides a nice Intellisense experience for them. Similar to virtual methods, once you write the keyword partial inside the partial class, Visual Studio editor will list all the partial method definitions that haven’t been implemented.
#### Magic methods
The concept of magic methods is that the user can write a method that follows a particular naming convention and signature, and a framework component will make sure the method will get invoked automatically at runtime. Usually an expression is compiled at runtime to produce a delegate that be used to invoke the method multiple times very efficiently. There is some runtime overhead in compiling the expression, but this is paid only once. Magic methods can be instance or static method. A common practice for magic methods, when code generation is involved, is to provide the declaration of the magic method as a partial method. Although no actual calls are generated, the partial method that gets an implementation will be compiled into the assembly so that it can be invoked at runtime. The only reason for this is the Intellisense experience you get. 
Magic methods can be used to override default behaviors but it is necessary to expose a public method that implements the default behavior so that the user has the option to invoke this method from within the magic method if he doesn’t want to completely override it.
LINQ to SQL uses this mechanism pervasively. 
#### Attributed methods
Similar to magic methods, an instance or static method with the right signature can decorated with a special attribute that specifies a runtime role for this method. The runtime examines types for the presence of these attributes and registers the method to be executed on the occurrence of certain conditions. 
WCF Data Services uses this pattern pervasively.
#### Listener interfaces
This approach consists on defining a class that implements a custom interface provided by the framework and at a later point register an instance of this class as a listener for particular events. Usually, the interface defines one or more methods with a very specific purpose, but the listener class can be a composite of multiple interfaces. Discoverability can be improved in this programing model with a base listener interfaces and by placing all the related interfaces under the same namespace.
#### IObservable<T\>
In many situations a mechanism is required to handle a stream of asynchronous events coming from the same source. IObservable<T\> is an analog to IEnumerabe<T\> that can be used to represent this kind of source.
### Context hooks vs. entity and property hooks
DbContext provide a very good place for us to focus when defining extensibility hooks for anything that has to do with the functions that they encompass:
1.	Store Connection
2.	Launchpad for queries
3.	Unit of work
4.	Update adapter
But for hooks that are specific to the lifecycle of entity or complex types, properties, etc., other options exist:
1.	Factor business logic into the entity type itself: The typical example of this is the OnValidate method that LINQ to SQL supports: a user can define the method on a particular entity type, and have the framework will automatically invoke the method at appropriate times.
2.	Extend the Code-First API to support hooks: The Code-First API provides a nice central configuration point for entity types, complex types and properties. We could extend the API with methods to register listeners, e.g.:
``` csharp
mb.Entity<Product>().Notify(new EntityLoadedListener());
mb.Entity<Customer>().Property(c => c.Orders).Notify(new PropertyLoadedListener());
```
The one potential issue with this approach is that the hook configuration would become part of the model and therefore it would not be possible to change it once the context object has been instantiated. This might be an acceptable limitation however, since any necessary changes in behavior can be coded into the listener class itself. Making the configuration of hooks immutable also has the advantage of allowing for compiling the invocations to listeners into efficient delegates. 
### EF requirements for a hooking mechanims
We are trying to find a design that has the following characteristics:
1.	Works well for both app developers and framework developers.
2.	Makes hooks very discoverable.
3.	Invocation is efficient.
4.	Requires only very simple coding patterns to use.
5.	Should allow get the hooks at runtime and from a separate assembly.
6.	Hook handlers can be implemented outside the entity types.
7.	Hook handlers can be implemented as part of the entity types.
8.	Ideally, the way you implement a hook handler in an entity shouldn’t break POCO.
9.	The complexity of supporting multiple hook mechanism should be completely hidden from the sender. 
This requires further analysis, but it seems that it would be reasonable to support a mix of hook mechanisms (but not too many) to optimize for different scenarios.
The current thinking is that we would use a single generic class to represent a hook. The sender should just need to call a method or instantiate a class and call a method, nothing much more complex than the typical “On[EventName]” pattern, and the hook class would make sure all the hook handlers are invoked.
We are also considering building a convention system for wiring up hook handlers in the entity types. 
When designing this we should take advantage of any opportunity to reuse some hook mechanism as building blocks for others. For instance:
1.	If we decide that the basic mechanism is listener interfaces, then we can have context objects implement those interfaces and re-cast the hooks as events. 
2.	We can have a single convention system that understands about naming patterns and attributes (similar to how the Code-First convention system understands naming patterns and data annotations as different vocabularies to express the same kind of concepts).
 
### Lifecycle hooks list
The following is an incomplete list that presents various hooks we could consider adding. Intentionally the list does not try to be specific on each hook about certain details:
1.	Hooking mechanisms 
2.	Method / argument signatures
3.	All names of new hooks are up for discussion 

Name | Pri | Location | Cancel or override | Description & sample   scenario
-- | -- | -- | -- | --
QueryExecuting | 0 | DbContext | Yes | Query interception, custom query   caching.
QueryExecuted | 3 | DbContext | No | When Execute happened, before the reader is read. Tracing?
QueryCompleted | 3 | DbContext | No | After DbDataReader is closed.   Tracing?
EntityStateChanged | 0 | DbContext | No | Signals all state changes
EntityStateChanging | 3 | DbContext | ? | Undo changes or change proposed   values before they are set?
ConnectionProvisioning | 2 | DbContext | Yes | Execute additional code to make sure the connection is alive, or do   logging
ConnectionReleasing | 2 | DbContext | Yes | Cleanup something done during   Ensure / StartUsingConnection
ConnectionOpened | 2 |   | No | More likely for tracing. Since SqlClient has fixed invalid connection   pools, then this is lower priority
ConnectionOpening | 1 | DbContext | Yes | Slightly simpler to use than   Ensure/Start, would not require user to check current state. Could also be   used for tracing.
ConnectionClosed | 1 |   | No |  
ConnectionClosing | 1 | DbContext | Yes | Slightly simpler to use than   Release/Stop, would not require user to check the initial state. Could also   be used for tracing.
OnModelCreating | 0 | DbContext | Yes | Tweak model before it is cached.
OnModelCreated | 1 | DbContext | Yes | Signal that the model is done   and execute some custom code, possibly related to caching logic. . Issue: do   we need this for ObjectContext?   Issue: if the user is going to   implement his own caching, we should have an abstract class or interface for   that.
ModelCacheLookup | 2 | DbContext | Yes | Implement your own caching logic. Tracing?
ModelCacheHit | 2 | DbContext | Yes | Execute additional code when the   model is found in the cache. Tracing?
EntityLoading | 1 | DbContext, DbEntityEntry | No | After object instance is created but before its properties are   initialized. Can be used to reset a flag that will be set in newly created   instances but shouldn’t be set during initialization, i.e. for validation.
EntityLoaded | 0 | DbContext, DbEntityEntry | No | Can be used to setup anything   after an object has been materialized, i.e. event handlers, flags, etc.
CollectionLoading | 1 | DbContext, DbEntityEntry DbCollectiohnEntry | No | Can be used to setup anything on a collection after it is created but   before it is populated. Issue: Could be used to provide your own collection?
CollectionLoading | 1 | Context, Entity or Collection | No | Can be used to setup anything on   a collection after it has been created and populated, i.e. listeners for its   changed event.
ObjectTypeResolving | 1 | Context | Yes | Could be used to specify a different type than the original one, i.e.   to implement your own proxy mechanism. It should be per type but could return   a Func<T\> that returns a new instance and the result could be compiled   into materialization delegates.
CollectionTypeResolving | 1 | Context | Yes | Something similar to   ObjectTypeResolving but for collections. Could be used to replace the default   collection type with a custom proxy collection with additional functionality   (i.e. paging, fine grained lazy load).
Virtual OnSavingChanges | Medium | DbContext | No | Can be used to re-implement SaveChanges but still invoke the existing   SavingChanges event
SavedChanges | Low | Context | No | Could be used to execute cleanup   code after SaveChanges. For instance, to call AcceptChanges on each STE   change tracker. It is lower priority because virtual SaveChanges covers most   scenarios.
EntityStateChanging | Low | Context, Entity | Yes | For an entity instance or type in particular we could avoid putting   in the modified state. So even if the properties are read-write, the context   ignores changes to this entity. Could be also used to suspend fixup on an   entity that is being detached.
EntityStateChanged | High | Context, Entity | No | Executes logic after an entity   has been put in a certain state. Can be used to setup property values,   restore state after the changing event.
PropertyChanging | Low | Context, Entity | Yes | Any time a property is about to be changed by the framework or any   party, if notification or interception is enabled by the entity type. Should   make original and new value available. Should also work for navigation,   scalar and complex types properties. Tracing?
PropertyChanged | High | Context, Entity | No | Any time a change in a property   value change is detected.
PropertyLoading | High | Context, Entity, Collection | Yes | Intercepts, overrides de loading of a property. Could be used to   support loading of properties using stored procedures.
PropertyLoaded | Medium | Context,   Entity, Collection | No | Tracing?
Writetable IsLoaded | High | Context,    Entity | Yes | Allows cancelling the loading of a property.
CollectionChanging | Medium | Context | Yes | Any time a collection is about   to be changed by the framework or any party, if interception is enabled
CollectionChanged | Medium | Context, Entity | No | Any time a change to a collection has been detected.
AssociationChanging | Low | Context, RelatedEnd | Yes | Can be used to prevent an   association from being changed, or to execute business logic when the   association is about to change.
AssociationChanged | Medium | Context, RelatedEnd | No | Can be used to execute additional logic after an association is   changed, i.e. user can explicitly cascade relationships removals into   dependent removals, workaround current databinding shortcomings. 
RowValidate ,   RowValidateAdded,   RowValidateModified,   RowValidateDeleted | Medium | Context | Yes | Storage level version of   ObjectValidate. Tracing?
SavingChanges event | 0 | DbContext | ? | Currently only available on ObjectContext. Should make trigger   OnSavingChanges method protected.

### Existing hooks

Name | Description & sample   scenario
-- | --
virtual Dispose | This can be used to do   additional cleanup, i.e. on entity instances.
virtual SaveChanges | Can be used to execute additional logic before, after or instead of   saving changes.

### Some open issues: 
1.	Need to prototype some coding patterns and try them.
2.	Is logging and tracing part of this API? It seems that ideally we should have the same level of flexibility for hooking mechanisms with logging and tracing as we end up having with this API.
3.	Second level cache should probably expose its hooks through the same mechanisms.
4.	Should we provide low level query interception points with the same mechanisms, i.e. as command tress and store commands? Should we do the same for CUD store commands? Would need to make sure those work well with caching.
5.	Can we get some level of support for async execution of queries with this hook?
6.	Should we provide enough lifecycle hooks to implement custom fixup logic? 
7.	Areas of overlap with other extensibilities: read and write properties in object mapping, proxy type creation (can be imperative vs. event driven), equality and snapshot comparisons for change tracking extensibility.
8.	What about customizing identity resolution?
9.	Is Logging and Tracing part of the lifecycle hooks
10.	Is Query interception  part of the lifecycle hooks
11.	Even without query interception we should expose when we are about to execute (imagine a profiling tool that measures how much query compilation costs).
12.	Is ContinueOnConflict part of the lifecycle hooks
13.	How do we improve diagnostics? Can we have OnError
14.	Need to do prioritization, costing and scoping
15.   Should we have a fine grained version of CollectionAdding / CollectionRemoving with support for magic methods on the entities to enable collection patterns? We would need a pattern for Contains checks also.
16.   There is a conversation about splitting AssociationChanged this event into properties and collection changes. However, there should be a way to tell the difference between a scalar property change and a nav prop. Should we make AssociationChanged more accessible and add AssociationChanging? This would provide a way to intercept changes in associations independently of cardinality, constraints, etc.
17. AssociationChanging would need the entity and collection types to collaborate to avoid changes from being made to the graph.","Lifecycle hooks  ***Note: this is a copy of a very old EF specification and reflects thinking from several years ago. A lot of things aren't valid anymore.***

We define EF Core lifecycle hooks as the general feature that enables an application or libra",10896,ajcvickers,efcore
8363,Improve SaveChanges circular dependency exception,If sensitive data logging is enabled the exception should provide the key values involved in the cycle,Improve SaveChanges circular dependency exception  If sensitive data logging is enabled the exception should provide the key values involved in the cycle,10894,AndriySvyryd,efcore
8365,Improve the conceptual null exception,If sensitive data logging is enabled the exception should provide the key values involved,Improve the conceptual null exception  If sensitive data logging is enabled the exception should provide the key values involved,10894,AndriySvyryd,efcore
9696,Improve exception for incorrect FK value,"When the FK is set to a value that corresponds to an entity of an incompatible type the exception is not helpful:

Add `eagle.EagleId = kiwi.Species;` to `InheritanceContext.SeedData`

> System.InvalidCastException : Unable to cast object of type 'Microsoft.EntityFrameworkCore.TestModels.Inheritance.Kiwi' to type 'Microsoft.EntityFrameworkCore.TestModels.Inheritance.Eagle'.
	C:\enlistments\Universe\EntityFramework\src\EFCore\Metadata\Internal\ClrICollectionAccessor.cs(146,0): at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.GetCollection(Object instance)
	C:\enlistments\Universe\EntityFramework\src\EFCore\Metadata\Internal\ClrICollectionAccessor.cs(122,0): at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.GetOrCreateCollection(Object instance)
	C:\enlistments\Universe\EntityFramework\src\EFCore\Metadata\Internal\ClrICollectionAccessor.cs(55,0): at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Add(Object instance, Object value)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\NavigationFixer.cs(887,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.AddToCollection(InternalEntityEntry entry, INavigation navigation, IClrCollectionAccessor collectionAccessor, Object value)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\NavigationFixer.cs(925,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.SetReferenceOrAddToCollection(InternalEntityEntry entry, INavigation navigation, IClrCollectionAccessor collectionAccessor, Object value)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\NavigationFixer.cs(768,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.ToDependentFixup(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\NavigationFixer.cs(554,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\NavigationFixer.cs(474,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\InternalEntityEntryNotifier.cs(95,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\InternalEntityEntry.cs(258,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\InternalEntityEntry.cs(79,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\EntityGraphAttacher.cs(68,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\EntityEntryGraphIterator.cs(25,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)
	C:\enlistments\Universe\EntityFramework\src\EFCore\ChangeTracking\Internal\EntityGraphAttacher.cs(34,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey)
	C:\enlistments\Universe\EntityFramework\src\EFCore\DbContext.cs(601,0): at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)
	C:\enlistments\Universe\EntityFramework\src\EFCore\DbContext.cs(805,0): at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)
	C:\enlistments\Universe\EntityFramework\src\EFCore\DbContext.cs(651,0): at Microsoft.EntityFrameworkCore.DbContext.Add[TEntity](TEntity entity)
	C:\enlistments\Universe\EntityFramework\src\EFCore\Internal\InternalDbSet.cs(129,0): at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Add(TEntity entity)

For 1-1 a similar exception is thrown:

> System.InvalidCastException: Unable to cast object of type 'Microsoft.EntityFrameworkCore.ModelBuilding.ModelBuilderTest.SpecialOrder' to type 'Microsoft.EntityFrameworkCore.ModelBuilding.ModelBuilderTest.BackOrder'. 
at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2.SetClrValue(Object instance, Object value) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.WritePropertyValue(IPropertyBase propertyBase, Object value) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean setModified) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.set_Item(IPropertyBase propertyBase, Object value) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.SetNavigation(InternalEntityEntry entry, INavigation navigation, Object value) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1 added, IEnumerable`1 removed) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1 added, IEnumerable`1 removed) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectNavigationChange(InternalEntityEntry entry, INavigation navigation) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(InternalEntityEntry entry) 
at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(IStateManager stateManager) 
at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges() 
at Microsoft.EntityFrameworkCore.DbContext.TryDetectChanges() 
at Microsoft.EntityFrameworkCore.DbContext.Entry[TEntity](TEntity entity) 
","Improve exception for incorrect FK value  When the FK is set to a value that corresponds to an entity of an incompatible type the exception is not helpful:

Add `eagle.EagleId = kiwi.Species;` to `InheritanceContext.SeedData`

> System.InvalidCastExce",10894,AndriySvyryd,efcore
9817,EF generates very unclear error message in case too generic key types in M:M relationship,"I have `many-to-many` relationship entity that accidentally got property of type `object`. This happened by accident — during automatic creation of the property by Visual Studio. Later that property was set as a key by `FluentAPI`.

During start-up my application ensures that database created, and as soon it reaches that place — following exception fired:

```
Exception message: The property 'Sprint.TempId' is of type 'object' which is not supported by current database provider. Either change the property CLR type or ignore the property using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
Stack trace:    at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.Apply(InternalModelBuilder modelBuilder)
   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.ImmediateConventionScope.OnModelBuilt(InternalModelBuilder modelBuilder)
   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnModelBuilt(InternalModelBuilder modelBuilder)
   at Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Validate()
   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Validate()
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()
   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass22_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()
   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()
   at Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()
   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()
   at Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService[TService](IInfrastructure`1 accessor)
   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.get_DatabaseCreator()
   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated()
   at Web.Startup.ConfigureServices(IServiceCollection services)
```

### Steps to reproduce

1. Create 2 entities. In my case `Issue` and `Sprint`;
1. Create N:N relation entity. In my case `IssueSprint`;
1. Set type of a property to `object`. In my case `SprintId`;
1. Use that property as key by FluentAPI;
1. Try to create database;

From `N:N` relation entity:
```c#
public class IssueSprint
    {
        #region Public Constructors

        public IssueSprint(Issue issue, Sprint sprint)
        {
            Issue = issue;
            IssueId = issue.Id;

            Sprint = sprint;
            SprintId = sprint.Id;
        }

        #endregion Public Constructors

        #region Public Properties

        public Issue Issue
        {
            get;
            private set;
        }

        public string IssueId
        {
            get;
            private set;
        }

        public Sprint Sprint
        {
            get;
            private set;
        }

        public object SprintId  // <-- note generic type `object`. It should be `string` as for `IssueId`
        {
            get;
            private set;
        }

        #endregion Public Properties

        #region Public Methods

        public override string ToString()
        {
            return $""{IssueId} <-> {SprintId}"";
        }

        #endregion Public Methods
    }
```
From `DbContext.cs`:
```c#
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IssueSprint>()
                .HasKey(record => new { record.IssueId, record.SprintId });

            // 1:N connection from relation entity to issue
            modelBuilder.Entity<IssueSprint>()
                .HasOne(relation => relation.Issue)
                .WithMany(issue => issue.Sprints)
                .HasForeignKey(relation => relation.IssueId);

            // 1:N connection from relation entity to sprint
            modelBuilder.Entity<IssueSprint>()
                .HasOne(relation => relation.Sprint)
                .WithMany(sprint => sprint.Issues)
                .HasForeignKey(relation => relation.SprintId);

            base.OnModelCreating(modelBuilder);
        }
```

From `Startup.cs`:
```c#
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();

            using (var context = new DbContext())
            {
                context.Database.EnsureCreated();
            }
        }
```

*Problem*: Error message tells about problem with `Sprint.TempId` field. Which does not exist anywhere. While in reality `IssueSprint.SprintId` is the main reason of that exception. Switching type from `object` to less generic type (`string` in my case) has fixed the issue. 

Although just by reading this error message it is almost impossible to find real cause. 

I believe error message should be updated to point user to correct location in the code, that triggers the issue.

### Further technical details
EF Core version: 2.0.0
Database Provider: Microsoft.EntityFrameworkCore.Sqlite
Operating system: Windows 10 x64
IDE: Visual Studio 2017",EF generates very unclear error message in case too generic key types in M:M relationship  I have `many-to-many` relationship entity that accidentally got property of type `object`. This happened by accident — during automatic creation of the property by,10894,AndriySvyryd,efcore
10135,HasIndex does not work as expected,"I'm trying to map something like that:
```
            b.HasOne(x => x.AppUser)
                .WithMany()
                .IsRequired();

            b.HasIndex(x => x.AppUser)
                .HasName(""IX_eo_MyTable_AppUser"");
```
MyTable class:
```
public class MyTable() {
...
public virtual User AppUser { get; set; }
...
}
```

When I run the app I receive the following error:
_One or more errors occurred. (Cannot call Property for the property 'AppUser' on entity type 'MyTable' because it is configured as a navigation property. Property can only be used to configure scalar properties.)_

It is fine when I remove the code:
```
            b.HasIndex(x => x.AppUser)
                .HasName(""IX_eo_MyTable_AppUser"");
```

Could please someone help me? Thanks.

### Further technical details
EF Core version: 2.0.0
Database Provider: Npgsql.EntityFrameworkCore.PostgreSQL 2.0.0
Operating system: Windows 10 Pro x64 (1703)
IDE: Visual Studio Community 2017","HasIndex does not work as expected  I'm trying to map something like that:
```
            b.HasOne(x => x.AppUser)
                .WithMany()
                .IsRequired();

            b.HasIndex(x => x.AppUser)
                .HasName(""IX_eo_M",10894,AndriySvyryd,efcore
10856,Update transient error message,"Since it refers to ""SqlAzureExecutionStrategy"".

```xml
  <data name=""TransientExceptionDetected"" xml:space=""preserve"">
    <value>An exception has been raised that is likely due to a transient failure. If you are connecting to a SQL Azure database consider using SqlAzureExecutionStrategy.</value>
  </data>
```","Update transient error message  Since it refers to ""SqlAzureExecutionStrategy"".

```xml
  <data name=""TransientExceptionDetected"" xml:space=""preserve"">
    <value>An exception has been raised that is likely due to a transient failure. If you are conne",10894,AndriySvyryd,efcore
9265,The convention invocations have reached the recursion limit.,"When an owned entity (one that is marked with ComplexType attribute) that is a singleton property in a class and a list element in another class, Add-Migration will fail with the error 'The convention invocations have reached the recursion limit. This is likely an issue in EF Core, please report it.' 

I have attached a zip file that contains a project that can reproduce this problem. It is at the bottom of this post. Just open the Package Manager console and type 'Add-Migration ""testing""'. It should attempt to run but then cause an error. 

```
Exception message: The convention invocations have reached the recursion limit. This is likely an issue in EF Core, please report it.
Stack trace:
System.InvalidOperationException: The convention invocations have reached the recursion limit. This is likely an issue in EF Core, please report it.
   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.ConventionBatch.Run()
   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.ConventionBatch.Dispose()
   at Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOneBuilder[TRelatedEntity](PropertyInfo navigation)
   at Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne[TRelatedEntity](Expression`1 navigationExpression)
   at ConventionInvocationErrorExample.DatabaseContext.OnModelCreating(ModelBuilder builder) in C:\Users\User\Documents\Visual Studio 2015\Projects\ConventionInvocationErrorExample\ConventionInvocationErrorExample\DatabaseContext.cs:line 19
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.Customize(ModelBuilder modelBuilder, DbContext dbContext)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()
   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactoryService(FactoryService factoryService, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass17_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.Design.Internal.DesignTimeServicesBuilder.<>c__DisplayClass6_0.<ConfigureContextServices>b__11(IServiceProvider _)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactoryService(FactoryService factoryService, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite transientCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass17_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.EnsureServices(IServiceProvider services)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigrationImpl(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigration.<>c__DisplayClass0_1.<.ctor>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.<>c__DisplayClass3_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)
The convention invocations have reached the recursion limit. This is likely an issue in EF Core, please report it.
```

### Steps to reproduce
The Owned Entity:
```c#
namespace ConventionInvocationErrorExample
{
    [ComplexType]
    public class OwnedEntity
    {      
        public string ExampleProperty { get; set; }
        public double ExampleProperty2 { get; set; }
    }
}
```
The Owning Entity 1 (has the OwnedEntity as a singleton):
```c#
namespace ConventionInvocationErrorExample
{
    /// <summary>
    /// This entity will only have the owned entity as a property
    /// </summary>
    public class OwningEntity1    
    {
        public int ID { get; set; }
        public OwnedEntity OwnedEntity { get; set; }
    }
}
```
The Owning Entity 2 (has the Ownedentity as a list element):
```c#
namespace ConventionInvocationErrorExample
{
    /// <summary>
    /// This entity will only have the owned entity as a list of said entity
    /// </summary>
    public class OwningEntity2
    {
        public int ID { get; set; }
        public List<OwnedEntity> OwnedEntities { get; set; }
    }
}
```
The database context:
```c#
namespace ConventionInvocationErrorExample
{
    public class DatabaseContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite(""Data Source=database.db"");
        }
        protected override void OnModelCreating(ModelBuilder builder)
        {
            // OwningEntity has OwnedEntity as a property
            builder.Entity<OwningEntity1>().OwnsOne(c => c.OwnedEntity);           
        }
        public DbSet<OwningEntity1> OwningEntities1 { get; set; }
        public DbSet<OwningEntity2> OwningEntities2 { get; set; }
    }
}
```
### Further technical details
EF Core version: 2.0.0-preview2-24617
Database Provider: Microsoft.EntityFramework.Sqlite
Operating system: Windows 10 Pro v. 15063
IDE: Visual Studio 2015

[Convention Invocation Error Example.zip](https://github.com/aspnet/EntityFramework/files/1177880/Convention.Invocation.Error.Example.zip)","The convention invocations have reached the recursion limit.  When an owned entity (one that is marked with ComplexType attribute) that is a singleton property in a class and a list element in another class, Add-Migration will fail with the error 'The con",10853,AndriySvyryd,efcore
9626,Throw better exception for .Set<OwnedType>(),"Currently it's
>Cannot create a DbSet for 'OwnedType' because this type is not included in the model for the context.","Throw better exception for .Set<OwnedType>()  Currently it's
>Cannot create a DbSet for 'OwnedType' because this type is not included in the model for the context.",10853,AndriySvyryd,efcore
10042,Support lazy and explicit loading from entities queried with NoTracking behavior,"Explicit loading of a `Reference` does not populate the navigation property when `QueryTrackingBehavior.NoTracking` is set and `AsTracking()` is used as an override.

Explicit loading of a `Collection` does work as expected though.

### Steps to reproduce
Minimalistic example for various combinations included. The issue arises only in the last assert statement of the second using block.

#### Program.cs
```c#
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace NoTrackingBug
{
    public class BloggingContext : DbContext
    {
        public DbSet<Blog> Blogs { get; set; }
        public DbSet<Post> Posts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite(""Data Source=blogging.db"");
        }
    }

    public class Blog
    {
        public int BlogId { get; set; }
        public string Url { get; set; }

        public List<Post> Posts { get; set; }

        public int OwnerId { get; set; }
        public Person Owner { get; set; }
    }

    public class Post
    {
        public int PostId { get; set; }
        public string Title { get; set; }

        public int BlogId { get; set; }
        public Blog Blog { get; set; }
    }

    public class Person
    {
        public int PersonId { get; set; }
        public string Name { get; set; }

        public List<Blog> OwnedBlogs { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Setup the example
            using (var db = new BloggingContext())
            {
                if (!db.Blogs.Any())
                {
                    db.Blogs.Add(new Blog
                    {
                        Url = ""http://blogs.msdn.com/adonet"",
                        Posts = new List<Post>{
                            new Post { Title = ""SomeTitle"" }
                        },
                        Owner = new Person
                        {
                            Name = ""Kobert""
                        }
                    });

                    db.SaveChanges();
                }
            }

            // Explicit load and .NoTracking => does not work for References
            using (var db = new BloggingContext())
            {
                db.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;

                var blog = db.Blogs
                    .AsTracking()
                    .Single();

                db.Entry(blog)
                    .Collection(b => b.Posts)
                    .Load();

                db.Entry(blog)
                    .Reference(b => b.Owner)
                    .Load();

                Debug.Assert(blog.Posts != null);
                Debug.Assert(blog.Owner != null); // <== This will fail!
            }

            // Eager load and .NoTracking => does work
            using (var db = new BloggingContext())
            {
                db.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;

                var blog = db.Blogs
                    .Include(b => b.Posts)
                    .Include(b => b.Owner)
                    .AsTracking()
                    .Single();

                Debug.Assert (blog.Posts != null);
                Debug.Assert (blog.Owner != null);
            }
            
            // Explicit load and .TrackAll => does work
            using (var db = new BloggingContext())
            {
                var blog = db.Blogs
                    .Single();

                db.Entry(blog)
                    .Collection(b => b.Posts)
                    .Load();

                db.Entry(blog)
                    .Reference(b => b.Owner)
                    .Load();

                Debug.Assert(blog.Posts != null);
                Debug.Assert(blog.Owner != null);
            }
        }
    }
}
```

### Further technical details
EF Core version: 1.1.0 and 2.0.0
Database Provider: Microsoft.EntityFrameworkCore.SqlServer and Micrisoft.EntityFrameworkCore.Sqlite
Operating system: Windows 7 Enterprise
IDE: Visual Studio 2017 Enterprise and Visual Studio Code","Support lazy and explicit loading from entities queried with NoTracking behavior  Explicit loading of a `Reference` does not populate the navigation property when `QueryTrackingBehavior.NoTracking` is set and `AsTracking()` is used as an override.

Expl",10851,ajcvickers,efcore
10509,Implement lazy-loading of navigation properties,"This issue tracks work on lazy-loading of relationships in EF Core. Subscribe to this issue to get updates when progress is made on lazy-loading. This issue is locked for now to reduce noise. Please use issue #3797 for general discussion on lazy-loading in EF Core.",Implement lazy-loading of navigation properties  This issue tracks work on lazy-loading of relationships in EF Core. Subscribe to this issue to get updates when progress is made on lazy-loading. This issue is locked for now to reduce noise. Please use iss,10851,ajcvickers,efcore
3797,Discussion on lazy-loading of navigation properties,"Note:
* Issue #10509 has been created to track actual work on lazy-loading. The new issue is locked so that it can be subscribed to for updates on the implementation without noise.
* This issue has been re-purposed to be discussion about lazy-loading in EF Core. It will not (for the time being) be locked because it is important to us that we don’t shut down channels of communication with the community.

With regard to feedback, I think it is worth reiterating some comments made a few months ago. We read and consider all feedback (and try to make the right choices based on it) no matter how it is delivered; that is, whether it is provided politely and with respect or not. Yelling at us or others with different opinions at best makes you feel good and us/them feel bad. It doesn’t achieve anything concrete. We are doing our best to prioritize features and implement them in the best way we can. We really appreciate your feedback and it makes a big difference on shaping the product. We personally appreciate it more when feedback is delivered in a respectful way, but please don’t stop providing constructive feedback.

---

Original issue:

Hi,

i was wondering if I am the only one that thinks EF Core is useless without Lazy Loading? Or do I do something wrong? Lets just consider a simple scenario when a course provider cancels a course on a course booking plattform written in MVC. 

The user calls courses/cancel/1. The action would get the course and call cancel method like here

```
Course course = context.Courses.SingleOrDefault(c => c.Id = 1);
course.Cancel();
```

The cancel method then needs to cancel each booking on the course so it would do something like this

```
foreach(Booking booking in this.Bookings)
{
    booking.Cancel();
}
```

The booking in turn would refund the transaction

```
foreach(Transaction transaction in this.Transactions)
{
    transaction.Refund();
}
```

So for this to work, lazy loading is needed?! (The solution would be to eager load all the data on the controllers action method. But I do not know what will be needed from the controller?)

I'd appreciate any information on that.","Discussion on lazy-loading of navigation properties  Note:
* Issue #10509 has been created to track actual work on lazy-loading. The new issue is locked so that it can be subscribed to for updates on the implementation without noise.
* This issue has be",10851,ajcvickers,efcore
10200,Mix of owned and normal entity types in hierarchy should cause validation error,"### Observed Behavior
Using the following setup with an Address class that is used as an Owned Entity and as a base class for the ContactAddress class:
```c#
public class OwnedTypesContext : DbContext
{
    public DbSet<House> Houses { get; set; }
    public DbSet<Contact> Contacts { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(@""Server=(localdb)\mssqllocaldb;Database=OwnedTypesInheritence;Trusted_Connection=True;"");
        base.OnConfiguring(optionsBuilder);
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<House>()
            .OwnsOne(e => e.Address);
        
        base.OnModelCreating(modelBuilder);
    }
}

public class Address
{
    [MaxLength(500)] public string StreetAddress1 { get; set; }
    [MaxLength(200)] public string City { get; set; }
    [MaxLength(2)]   public string State { get; set; }
    [MaxLength(5)]   public string Zip { get; set; }
}

public class ContactAddress : Address
{
    public int Id { get; set; }
    public int ContactId { get; set; }
    public Contact Contact { get; set; }
}

public class Contact
{
    public int Id { get; set; }
    [MaxLength(100)] public string FirstName { get; set; }
    [MaxLength(200)] public string LastName { get; set; }
    public List<ContactAddress> Addresses { get; set; } = new List<ContactAddress>();
}

public class House
{
    public int Id { get; set; }
    public Address Address { get; set; }
    public string OwnerName { get; set; }
}
```
Creating the initial migration works as expected - the ContactAddress table **does not** have a Discriminator column but the ContextModelSnapshot **does** show Discriminator column:
```c#
modelBuilder.Entity(""EFCoreOwnedTypeInheritence.ContactAddress"", b =>
    {
        b.Property<int>(""Id"")
            .ValueGeneratedOnAdd();

        b.Property<string>(""City"")
            .HasMaxLength(200);

        b.Property<int>(""ContactId"");

        b.Property<string>(""Discriminator"") // <---  Exists in Model Snapshot
            .IsRequired();

        b.Property<string>(""Label"")
            .HasMaxLength(25);

        b.Property<string>(""State"")
            .HasMaxLength(2);

        b.Property<string>(""StreetAddress1"")
            .HasMaxLength(500);

        b.Property<string>(""Zip"")
            .HasMaxLength(5);

        b.HasKey(""Id"");

        b.HasIndex(""ContactId"");

        b.ToTable(""ContactAddress"");

        b.HasDiscriminator<string>(""Discriminator"").HasValue(""ContactAddress"");
    });
```
 All subsequent migrations, even if no changes were made, result in the following:

```c#
protected override void Up(MigrationBuilder migrationBuilder)
{
    migrationBuilder.DropColumn(
        name: ""Discriminator"",
        table: ""ContactAddress"");
}

protected override void Down(MigrationBuilder migrationBuilder)
{
    migrationBuilder.AddColumn<string>(
        name: ""Discriminator"",
        table: ""ContactAddress"",
        nullable: false,
        defaultValue: """");
}
```

If you run dotnet ef database update it gives the error:
```
ALTER TABLE DROP COLUMN failed because column 'Discriminator' does not exist in table 'ContactAddress'
```

### Expected Behavior
The ContextModelSnapshot would not have any reference to a Discriminator column for an Owned Type, and migrations would not continuously `DropColumn(name: ""Discriminator"")` and `AddColumn(name: ""Discriminator"")`

### Steps to reproduce
1. Clone [Test Case Project](https://github.com/SharpSeeEr/EFCoreOwnedTypeInheritance)
1. Run the following commands:
```powershell
dotnet restore
dotnet ef migrations add Initial
dotnet database update
dotnet ef migrations add Second
dotnet database update
```
1. View the .\Migrations\*_Second.cs migration file.

### Further technical details
EF Core version: 2.0.0
Database Provider: Microsoft.EntityFrameworkCore.SqlServer 2.0.0
Operating system: Microsoft Windows 10 Pro Version 1709 OS Build 16299.19
IDE: Visual Studio 2017 15.4.1, VS Code 1.17.2","Mix of owned and normal entity types in hierarchy should cause validation error  ### Observed Behavior
Using the following setup with an Address class that is used as an Owned Entity and as a base class for the ContactAddress class:
```c#
public class",10842,AndriySvyryd,efcore
10715,Inheritance validation should allow setting base to null,"","Inheritance validation should allow setting base to null  ",10842,AndriySvyryd,efcore
242,Support for custom type mapping and data store to CLR type conversions,"There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are supported. E.g.:
  -  `char` can map to the database exactly as a `string` of size 1 (see #8656) 
  -  `byte` can map to the database exactly the same as a `byte[]` 
  - signed or unsigned small integers can fit in the nearest wider signed or unsigned integer
- [x] Allow providers to supply their own additional type mappings for types they don't support, e.g. if a database engine doesn't have native support for bool, it can decide to use a small integer representation
- [x] Allow specific well known scenarios that are commonly demanded, like mapping enum types to strings
- [ ] Allow for conversions to be performed on the server (vs. only on the client) for cases in which there isn't a viable CLR representation for the server type - see #10434 and #10861 
- [x] Allow for user provided conversions 

They all probably require extending the reach of the type mapper to be able to participate of the generation of:
- [x] Parameters
- [x] Expressions for value access in materialization
- [ ] Expressions for equality and inequality comparisons - see #10265
   1. Equality on the server should be equivalent to equality on the client as long as the conversion is deterministic and bijective. 
- [ ] Order comparisons and sorting - see #10265
   1. Comparisons and sorting are equivalent as long as the conversion is a monotonic function (although reversed if it is decreasing)
   2. For non order-preserving conversions, we may need to differentiate the scenarios in which we introduce sorting just to get the order of two or more results to be deterministic so we can zip them together, vs. explicit ordering requested by user, which we may need to evaluate on the client after the conversion is performed.
- [ ] Operator and function translation - see #10434 


","Support for custom type mapping and data store to CLR type conversions  There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are s",10615,ajcvickers,efcore
10090,Add overloads of HasColumnType that take CLR types,"(This may sound strange, but stay with it. 😸)

With the introduction of type conversions it has become possible to map the same CLR types to different types of database column. A good example of this is enums, where the database column can be a numeric type (store numbers) or a string type (store the enum string values). The way to tell EF to store strings instead of numbers is to explicitly map the property to a string column. For example:
```C#
Property(e => e.ShipmentType).HasColumnType(""nvarchar(max)"");
```
But this is database-specific since the type name is database-specific. To do this in a database-agnostic way I should just have to tell EF that even though the property is of type X, I want to convert and store it as if it was type Y. For example:
```C#
Property(e => e.ShipmentType).HasColumnType(typeof(string));
```
Now the type mapper can pick the appropriate type of ""string"" column in the normal way without the application code being database-specific.","Add overloads of HasColumnType that take CLR types  (This may sound strange, but stay with it. 😸)

With the introduction of type conversions it has become possible to map the same CLR types to different types of database column. A good example of this",10615,ajcvickers,efcore
9585,Implement useful mappings in EF.Functions,"@divega Creating this as a placeholder as discussed in triage. We should figure out what more information to add and how to encourage people to contribute these.

(Updated by @divega) 

EF Core 2.0 includes `EF.Functions` as an entry point for adding support for invoking database functions in LINQ queries. Here are a few details about how this works: 

1. Someone adding support for a new function would define an extension method for `DbFunctions` that represents the database function, and then create and register a translator for it. See the `Like()` method in [DbFunctionsExtensions](https://github.com/aspnet/EntityFrameworkCore/blob/master/src/EFCore/DbFunctionsExtensions.cs) and   [LikeTranslator](https://github.com/aspnet/EntityFrameworkCore/blob/master/src/EFCore.Relational/Query/ExpressionTranslators/Internal/LikeTranslator.cs) as an example.

2. The extension method should preferably be declared in the Microsoft.EntityFrameworkCore namespace, so that application developers don't need to include any additional namespaces.

3. The location of the method (e.g. the sponsor class) will depend on the applicability of the method, e.g. 
   1. If it is general, contribute it to the same `DbFunctionsExtensions` class where `Like()` is declared. 
   2. If it is specific to relational, we can discuss creating a relational-specific sponsor class. 
   3. If it is specific to provider it should go in a sponsor class in the provider.  
  
4. Preferably extension methods should contain an in-memory implementation. If an adequate in-memory implementation is too complex we can discuss adding an implementation that throws.

5. If well-known patterns exist which involve invoking methods or properties on types of the .NET base class library that have the same semantics of database functions, adding support for translating these should have precedence over adding an extension method to `EF.Functions`, i.e. they idea is not to create an extremely long list of extension methods that represent all the built-in functions on a specific database, but to add a few methods that represent functionality that would not otherwise be available. Things like `DATEDIFF()` (see https://github.com/aspnet/EntityFrameworkCore/issues/9549) or `DATEADD()` may be an exception if supporting translation for equivalent cases based on `DateTime`/`TimeSpan` arithmetic becomes too complex.

6. A few places to look for inspiration: 
   1. EF6's `DbFunctions` and `SqlFunctions`
   2. LINQ to SQL's `SqlMethods`

Open issues:

1. What to do with nullable value types? Makes sense to have multiple overloads?","Implement useful mappings in EF.Functions  @divega Creating this as a placeholder as discussed in triage. We should figure out what more information to add and how to encourage people to contribute these.

(Updated by @divega) 

EF Core 2.0 includes `",10528,smitpatel,efcore
4108,SQLite Query: Translate more methods,"Comparing the [method translation support in our SQL Server provider](https://github.com/aspnet/EntityFramework/tree/substringOffByOne/src/EntityFramework.MicrosoftSqlServer/Query/ExpressionTranslators/Internal) with [what we have in our SQLite provider](https://github.com/aspnet/EntityFramework/tree/substringOffByOne/src/EntityFramework.Sqlite/Query/ExpressionTranslators/Internal) and [the functions that SQLite can support](http://www.sqlite.org/lang_corefunc.html) it seems to me that there a few translations that should be inexpensive to add to SQLite because it should be a matter of copying the SQL Server implementation and tests, in some cases generating a different function name.

Note that I am not trying to make any value judgement on the things that are missing in SQL Server or [on relational](https://github.com/aspnet/EntityFramework/tree/substringOffByOne/src/EntityFramework.Relational/Query/ExpressionTranslators). That is a separate conversation and as everybody knows ""LINQ is never done"" :trollface: ",SQLite Query: Translate more methods  Comparing the [method translation support in our SQL Server provider](https://github.com/aspnet/EntityFramework/tree/substringOffByOne/src/EntityFramework.MicrosoftSqlServer/Query/ExpressionTranslators/Internal) with,10528,smitpatel,efcore
10468,Implement DateDiff translation,"I'd like to order rows by an integer + number of days passed since today.

However this:

```
var now = DateTime.UtcNow;
   
db.Items.OrderBy(x => x.SomeInteger + (x.Date - now).Days);
```

Gives the following warning:

```
The LINQ expression 'orderby' could not be translated and will be evaluated locally.
```

In .NET framework it was possible to use this: `DbFunctions.DiffDays`

It seems that there isn't any equivalent in ASP.NET Core.","Implement DateDiff translation  I'd like to order rows by an integer + number of days passed since today.

However this:

```
var now = DateTime.UtcNow;
   
db.Items.OrderBy(x => x.SomeInteger + (x.Date - now).Days);
```

Gives the following war",10528,smitpatel,efcore
10370,Query: Add support for instance based SqlFunction,"Part of #10109
","Query: Add support for instance based SqlFunction  Part of #10109
",10423,smitpatel,efcore
10421,DbFunction schema not output if any arguments are nullable navigation properties,"When calling a UDF as described in #7368, if the argument being passed to the UDF is a property of a nullable navigation property, the schema prefix is not being output in the generated query despite being properly specified in a DbFunction annotation.

For example:

`context.Widgets.Select(w => context.Foo(w.SomeNullableNavigationProperty.Name)) ;`

 If the nav prop is NOT nullable, the schema is output and the query succeeds:

`context.Widgets.Select(w => context.Foo(w.SomeNOTNullableNavigationProperty.Name)) ;`

I have tried doing a null check on the nav prop, but it doesn't resolve the issue:

`context.Widgets.Select(w => context.Foo(w.SomeNullableNavigationProperty != null ? w.SomeNullableNavigationProperty.Name : string.Empty)) ;`

In all other respects the query is generated correctly.  If I cut and paste from the debug window, and manually add the schema prefix, the query runs without any issues. 

Please let me know if there is another workaround I can try, as I won't be able to use UDFs in my solution if this scenario is not currently supported.

I am using the latest stable version of EF Core (2.0.1).","DbFunction schema not output if any arguments are nullable navigation properties  When calling a UDF as described in #7368, if the argument being passed to the UDF is a property of a nullable navigation property, the schema prefix is not being output in t",10423,smitpatel,efcore
4553,Cleanup SqlServerTestStore.CreateDatabase(),"The `SqlServerTestStore.CreateDatabase()` method (and the async version) in our tests has [some funky code](https://github.com/aspnet/EntityFramework/blob/2a8fbe32e6948003ae2eea49cfa70a107d8aab7b/test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/Utilities/SqlServerTestStore.cs#L126-L136) to probe for SQL files. After we've fully transitioned to the .NET Core CLI, someone should cleanup this logic.",Cleanup SqlServerTestStore.CreateDatabase()  The `SqlServerTestStore.CreateDatabase()` method (and the async version) in our tests has [some funky code](https://github.com/aspnet/EntityFramework/blob/2a8fbe32e6948003ae2eea49cfa70a107d8aab7b/test/Microsoft,10371,smitpatel,efcore
8902,Test: change the location for test databases,People don't like the databases being in their user profile; investigate putting them somewhere else.,Test: change the location for test databases  People don't like the databases being in their user profile; investigate putting them somewhere else.,10371,smitpatel,efcore
9209,Customize constraint name generation on provider implementations,"Hello:

¿ What would be the best way to customize the constraint name generation ( for foreign keys, indexes, etc... ) on providers targeting servers with a given limit for identifiers ?,  for example, if i'm not wrong, PostgreSQL has a  63 bytes limit for identifiers.

I'm giving a try using custom conventions to rename the constraint when the default generated name exceeds the specific limit, but maybe there is a better way to do it.

Thanks in advance.","Customize constraint name generation on provider implementations  Hello:

¿ What would be the best way to customize the constraint name generation ( for foreign keys, indexes, etc... ) on providers targeting servers with a given limit for identifiers ?,",10323,AndriySvyryd,efcore
10213,SQL-Server : EF Generates too long index name,"When EF auto generates index of multiples column with very long name, it can be longer than 128 chars, which is not allowed by SQL Server

### Steps to reproduce
Code :

```
class Tab
    {
        public int Id { get; set; }
        public string Value1 { get; set; }
        public string Value2 { get; set; }
        public string Value3 { get; set; }
        public string Value4 { get; set; }
        public string Value5 { get; set; }
        public string Value6 { get; set; }
    }

class Ctx : DbContext
    {

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            var e = modelBuilder.Entity<Tab>().ToTable(""A_VERY_SUPER_LONG_TABLE_NAME_TO_BEGIN_WITH"");
            e.Property(t => t.Value1).HasColumnName(""MY_LONG_VALUE_1_COLUMN"");
            e.Property(t => t.Value2).HasColumnName(""MY_LONG_VALUE_2_COLUMN"");
            e.Property(t => t.Value3).HasColumnName(""MY_LONG_VALUE_3_COLUMN"");
            e.Property(t => t.Value4).HasColumnName(""MY_LONG_VALUE_4_COLUMN"");
            e.Property(t => t.Value5).HasColumnName(""MY_LONG_VALUE_5_COLUMN"");
            e.Property(t => t.Value6).HasColumnName(""MY_LONG_VALUE_6_COLUMN"");

            e.HasIndex(nameof(Tab.Value1), nameof(Tab.Value2), nameof(Tab.Value3), nameof(Tab.Value4), nameof(Tab.Value5), nameof(Tab.Value6));

        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(""Server=(localdb)\\mssqllocaldb;Database=EF_Tests;Trusted_Connection=True;MultipleActiveResultSets=true"");
        }

    }
```

Call Context.Database.EnsureCreated to see exception

### Further technical details
EF Core version: 2.0.0
Database Provider:  Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: VS 2017 15.4.2","SQL-Server : EF Generates too long index name  When EF auto generates index of multiples column with very long name, it can be longer than 128 chars, which is not allowed by SQL Server

### Steps to reproduce
Code :

```
class Tab
    {
        pu",10323,AndriySvyryd,efcore
10329,Uniquify identifiers generated by conventions,"Currently key, index and fk names are only uniquified if they collide with an explicitly-configured name.

Also start all uniquification suffixes with 1","Uniquify identifiers generated by conventions  Currently key, index and fk names are only uniquified if they collide with an explicitly-configured name.

Also start all uniquification suffixes with 1",10323,AndriySvyryd,efcore
10144,RevEng: we incorrectly warn about mapping a nullable bool column to nullable bool,"Model:

```cs
    public class MyContext : DbContext
    {
        public DbSet<MyEntity> MyEntities { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MyEntity>().Property(e => e.BoolDefaultTrue).HasDefaultValue(true);
            modelBuilder.Entity<MyEntity>().Property(e => e.BoolDefaultFalse).HasDefaultValue(false);
            modelBuilder.Entity<MyEntity>().Property(e => e.NullableBoolDefaultFalse).HasDefaultValue(false);
            modelBuilder.Entity<MyEntity>().Property(e => e.NullableBoolDefaultTrue).HasDefaultValue(true);
            modelBuilder.Entity<MyEntity>().Property(e => e.NullableBoolDefaultNull).HasDefaultValue(null);
        }
    }

    public class MyEntity
    {
        public int Id { get; set; }

        public bool BoolDefaultFalse { get; set; }
        public bool BoolDefaultTrue { get; set; }
        public bool? NullableBoolDefaultFalse { get; set; }
        public bool? NullableBoolDefaultTrue { get; set; }
        public bool? NullableBoolDefaultNull { get; set; }
        public bool Bool { get; set; }
        public bool? NullableBool { get; set; }
    }
```

When we try to rev-eng this, we the following warning is displayed:

(this one makes sense)
```
The column 'dbo.MyEntities.BoolDefaultTrue' would normally be mapped to a non-nullable bool property, but it has a default constraint. Such a column is mapped to a nullable bool property to allow a difference between setting the property to false and invoking the default constraint. See https://go.microsoft.com/fwlink/?linkid=851278 for details.
```

(this one is wrong)
```
The column 'dbo.MyEntities.NullableBoolDefaultTrue' would normally be mapped to a non-nullable bool property, but it has a default constraint. Such a column is mapped to a nullable bool property to allow a difference between setting the property to false and invoking the default constraint. See https://go.microsoft.com/fwlink/?linkid=851278 for details.
```","RevEng: we incorrectly warn about mapping a nullable bool column to nullable bool  Model:

```cs
    public class MyContext : DbContext
    {
        public DbSet<MyEntity> MyEntities { get; set; }

        protected override void OnModelCreating(M",10306,smitpatel,efcore
10305,RevEng: bool property with default is marked as nullable even if it is non-nullable in database,"Model
```C#
    public class Blog
    {
        public int Id { get; set; }
        public bool? Value { get; set; }
    }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Configure model
            var property = modelBuilder.Entity<Blog>().Property(e => e.Value);
            property.HasDefaultValue(true);
            property.IsRequired(true);

        }
```
Generated this table
```SQL
      CREATE TABLE [Blogs] (
          [Id] int NOT NULL IDENTITY,
          [Value] bit NOT NULL DEFAULT 1,
          CONSTRAINT [PK_Blogs] PRIMARY KEY ([Id])
      );
```
Which reverse engineered this model
```C#
    public partial class Blogs
    {
        public int Id { get; set; }
        public bool? Value { get; set; }
    }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blogs>(entity =>
            {
                entity.Property(e => e.Value).HasDefaultValueSql(""((1))"");
            });
        }
```

We are incorrectly making the property nullable even though it is not.","RevEng: bool property with default is marked as nullable even if it is non-nullable in database   Model
```C#
    public class Blog
    {
        public int Id { get; set; }
        public bool? Value { get; set; }
    }

        protected overrid",10306,smitpatel,efcore
6401,F# Support,"### Steps to reproduce
- dotnet new -l F#
- Add this code to program.fs

```
module Test
open System
open Microsoft.EntityFrameworkCore;
open Microsoft.EntityFrameworkCore.Metadata;
open Microsoft.EntityFrameworkCore.Metadata.Internal;
open Microsoft.Extensions.Options;

[<CLIMutable>] type Test = { Id: int; Name: string; }

let connectionString = ""User ID=postgres;Password=test;Host=localhost;Port=5432;Database=TestDb;""

type TestDb() = 
    inherit DbContext()
    member val LadderChanges = Unchecked.defaultof<DbSet<Test>> with get, set
    override this.OnConfiguring(builder) = builder.UseNpgsql(connectionString) |> ignore

```
-  Add this to project.json

```
{
  ""version"": ""1.0.0-*"",
  ""buildOptions"": {
    ""emitEntryPoint"": true,
    ""compilerName"": ""fsc"",
    ""compile"": {
      ""includeFiles"": [
        ""Program.fs""
      ]
    }
  },
  ""tools"": {
    ""dotnet-compile-fsc"": ""1.0.0-preview2-*"",
    ""Microsoft.EntityFrameworkCore.Tools"": ""1.0.0-preview2-final""
  },
  ""frameworks"": {
    ""netcoreapp1.0"": {
      ""dependencies"": {
        ""Microsoft.FSharp.Core.netcore"": ""1.0.0-alpha-160629"",
        ""Npgsql.EntityFrameworkCore.PostgreSQL"": ""1.0.0"",
        ""Microsoft.EntityFrameworkCore.Relational"": ""1.0.0"",
        ""Microsoft.EntityFrameworkCore.Tools"": ""1.0.0-preview2-final"",
        ""Microsoft.NETCore.App"": {
          ""type"": ""platform"",
          ""version"": ""1.0.0""
        }
      }
    }
  }
}
```
- dotnet ef migrations add f#1
- dotnet ef database update
### The issue

Creating a migration in an F# project produces .cs migration files.

```
Project effsharptest (.NETCoreApp,Version=v1.0) will be compiled because Input items added from last build                                                                                            
Compiling effsharptest for .NETCoreApp,Version=v1.0                                                                                                                                                   
C:\Program Files\dotnet\dotnet.exe compile-fsc @c:\Users\nickacosta\projects\effsharptest\obj\Debug\netcoreapp1.0\dotnet-compile.rsp returned Exit Code 1                                             
c:\Users\nickacosta\projects\effsharptest\error FS0226: The file extension of 'Migrations\20160824164200_f#3.cs' is not recognized. Source files must have extension .fs, .fsi, .fsx, .fsscript, .ml o
r .mli.                                                                                                                                                                                               
c:\Users\nickacosta\projects\effsharptest\error FS0226: The file extension of 'Migrations\20160824164200_f#3.Designer.cs' is not recognized. Source files must have extension .fs, .fsi, .fsx, .fsscri
pt, .ml or .mli.                                                                                                                                                                                      
c:\Users\nickacosta\projects\effsharptest\error FS0226: The file extension of 'Migrations\QueueDodgeDbModelSnapshot.cs' is not recognized. Source files must have extension .fs, .fsi, .fsx, .fsscript
, .ml or .mli.                                                                                                                                                                                        
Compilation failed.                                                                                                                                                                                   
    0 Warning(s)                                                                                                                                                                                      
    3 Error(s)                                                                                                                                                                                        
Time elapsed 00:00:02.4520082      
```

Used vscode.","F# Support  ### Steps to reproduce
- dotnet new -l F#
- Add this code to program.fs

```
module Test
open System
open Microsoft.EntityFrameworkCore;
open Microsoft.EntityFrameworkCore.Metadata;
open Microsoft.EntityFrameworkCore.Metadata.Internal",10289,bricelam,efcore
8012,VB.NET Migrations Support,"Please support VB.NET migrations.

What is the latest status?","VB.NET Migrations Support  Please support VB.NET migrations.

What is the latest status?",10289,bricelam,efcore
10225,Put System namespaces first in generated code,Because we like it that way...,Put System namespaces first in generated code  Because we like it that way...,10242,smitpatel,efcore
2467,Migrations Design: Invalid 'using' statements for default namespace,"Invalid `using ;` added to generated migration file because this simple project has no default namespace. 

Setup https://gist.github.com/natemcmaster/90e2388c0ee1d29f440a. 

Using dnx 1.0.0-beta6-12114 , EF 7.0.0-beta6-13584

`dnx . ef migration add Initial`

produces `20150624223653_Initial.Designer.cs` which includes this at the top of the file:

``` c#
using System;
using Microsoft.Data.Entity;
using Microsoft.Data.Entity.Metadata;
using Microsoft.Data.Entity.Relational.Migrations.Infrastructure;
using ;
```

The same using block appears in `ModelSnapshot.cs`","Migrations Design: Invalid 'using' statements for default namespace  Invalid `using ;` added to generated migration file because this simple project has no default namespace. 

Setup https://gist.github.com/natemcmaster/90e2388c0ee1d29f440a. 

Using d",10242,smitpatel,efcore
9446,One-to-one relationship swaps principal/dependent moving from 1.1 to 2.0,"The model below makes one end principal in 1.1 and the other end principal in 2.0.

```C#
public class ProductsTable
 {
     [Key]
     public int id { get; set; }
     public virtual ProductsInventoryTable ProductsInventory { get; set; }
 }

 public class ProductsInventoryTable
 {
     [Key]
     public int id { get; set; }
     public virtual ProductsTable Product { get; set; }
 }

 public class TestContext : DbContext
 {
     public DbSet<ProductsTable> ProductsTable { get; set; }
     public DbSet<ProductsInventoryTable> ProductsInventoryTable { get; set; }

     protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
         => optionsBuilder.UseSqlServer(
             @""Server=(localdb)\mssqllocaldb;Database=Test;Trusted_Connection=True;ConnectRetryCount=0"");
 }
```

1.1.2:
```
EntityType: ProductsInventoryTable
  Properties: 
    id (int) Required PK ReadOnlyAfterSave RequiresValueGenerator ValueGenerated.OnAdd 0 0 0 -1 0
  Navigations: 
    Product (<Product>k__BackingField, ProductsTable) ToDependent ProductsTable Inverse: ProductsInventory 0 -1 1 -1 -1
  Keys: 
    id PK
EntityType: ProductsTable
  Properties: 
    id (int) Required PK FK ReadOnlyAfterSave 0 0 0 -1 0
  Navigations: 
    ProductsInventory (<ProductsInventory>k__BackingField, ProductsInventoryTable) ToPrincipal ProductsInventoryTable Inverse: Product 0 -1 1 -1 -1
  Keys: 
    id PK
  Foreign keys: 
    id -> ProductsInventoryTable.id Unique ToDependent: Product ToPrincipal: ProductsInventory

```

2.0:
```
EntityType: ProductsInventoryTable
  Properties: 
    id (int) Required PK FK AfterSave:Throw 0 0 0 -1 0
  Navigations: 
    Product (<Product>k__BackingField, ProductsTable) ToPrincipal ProductsTable Inverse: ProductsInventory 0 -1 1 -1 -1
  Keys: 
    id PK
  Foreign keys: 
    ProductsInventoryTable {'id'} -> ProductsTable {'id'} Unique ToDependent: ProductsInventory ToPrincipal: Product
EntityType: ProductsTable
  Properties: 
    id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd 0 0 0 -1 0
  Navigations: 
    ProductsInventory (<ProductsInventory>k__BackingField, ProductsInventoryTable) ToDependent ProductsInventoryTable Inverse: Product 0 -1 1 -1 -1
  Keys: 
    id PK
```","One-to-one relationship swaps principal/dependent moving from 1.1 to 2.0  The model below makes one end principal in 1.1 and the other end principal in 2.0.

```C#
public class ProductsTable
 {
     [Key]
     public int id { get; set; }
     publi",9541,AndriySvyryd,efcore
9510,Ambiguous one-to-one relationship doesn't throw in validation,"```C#
public class ProductsTable
 {
     [Key]
     public int id { get; set; }
     public virtual ProductsInventoryTable ProductsInventory { get; set; }
 }

 public class ProductsInventoryTable
 {
     [Key]
     public int id { get; set; }
     public virtual ProductsTable Product { get; set; }
 }

 public class TestContext : DbContext
 {
     public DbSet<ProductsTable> ProductsTable { get; set; }
     public DbSet<ProductsInventoryTable> ProductsInventoryTable { get; set; }

     protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
         => optionsBuilder.UseSqlServer(
             @""Server=(localdb)\mssqllocaldb;Database=Test;Trusted_Connection=True;ConnectRetryCount=0"");
 }
```
See https://github.com/aspnet/EntityFrameworkCore/issues/9446","Ambiguous one-to-one relationship doesn't throw in validation  ```C#
public class ProductsTable
 {
     [Key]
     public int id { get; set; }
     public virtual ProductsInventoryTable ProductsInventory { get; set; }
 }

 public class ProductsInv",9541,AndriySvyryd,efcore
9188,Scaffolding broken for nvarchar(4000),"When using SQL Server and a table has a column type of nvarchar(4000) (which is the maximum), the scaffolding outputs .HasColumnType(""nvarchar""). This causes an exception when accessing the context for the model.

Believe it's a bug in the scaffolding code. 

```
Exception message: System.ArgumentException: Data type 'nvarchar' is not supported in this form. Either specify the length explicitly in the type name, for example as 'nvarchar(16)', or remove the data type and use APIs such as HasMaxLength to allow EF choose the data type. 
Stack trace: at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerTypeMapper.ValidateTypeName(String storeType)
   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateDataTypes(IModel model)
   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.Validate(IModel model)
   at Microsoft.EntityFrameworkCore.Internal.SqlServerModelValidator.Validate(IModel model)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()
```

Thrown on line 236 at https://github.com/aspnet/EntityFramework/blob/dev/src/EFCore.SqlServer/Storage/Internal/SqlServerTypeMapper.cs
This is because the HasColumnType is set to nvarchar which is in the _disallowedMappings HashSet.

### Steps to reproduce
Create a new database containing a single table. Ensure there is a nvarchar(4000) column.
Scaffold the dbContext and create a controller/view and try and load the page.
The following should be scaffolded:
```c#
entity.Property(e => e.Notes)
                    .HasColumnName(""notes"")
                    .HasColumnType(""nvarchar"");
```

The issue appears to be `GetStoreType` in _EFCore.SqlServer/Scaffolding/Internal/SqlServerDatabaseModelFactory.cs_ where it is not returning ""nvarchar(max)"" because the `maxLength` parameter isn't set to -1.

### Further technical details
EF Core version: 2
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: W10
IDE:Visual Studio 2017 Preview 2","Scaffolding broken for nvarchar(4000)  When using SQL Server and a table has a column type of nvarchar(4000) (which is the maximum), the scaffolding outputs .HasColumnType(""nvarchar""). This causes an exception when accessing the context for the model.
",9474,smitpatel,efcore
9473,RevEng: SqlServer: Type aliasing ignores type facets of aliased type,"Our code to read information about type aliases does not read facets information for types so for alias like this `CREATE TYPE dbo.TestTypeAlias FROM nvarchar(max);`, we would get underlying type as `nvarchar` instead of `nvarchar(max)` which would throw later. The information is available in metadata, we need to update our SQL to parse the information and apply similar processing to current type processing to store actual type for alias.","RevEng: SqlServer: Type aliasing ignores type facets of aliased type  Our code to read information about type aliases does not read facets information for types so for alias like this `CREATE TYPE dbo.TestTypeAlias FROM nvarchar(max);`, we would get under",9474,smitpatel,efcore
9074,Query isn't detecting concurrency reliably,See `Throws_on_concurrent_query_first` test in https://github.com/aspnet/EntityFramework/pull/8865,Query isn't detecting concurrency reliably  See `Throws_on_concurrent_query_first` test in https://github.com/aspnet/EntityFramework/pull/8865,9454,smitpatel,efcore
9404,Investigate tests failing without MARS,See SqlServerTestStore.cs,Investigate tests failing without MARS  See SqlServerTestStore.cs,9454,smitpatel,efcore
9323,RevEng: Default/Computed Value processing,"At present, DefaultValueSql does not set ValueGenerated on DatabaseColumn but ComputedValueSql sets it to AddOrUpdate.
If we are assuming that calling `HasDefaultValueSql` will set ValueGenerated by itself then same should also be true for `HasComputedValueSql` hence setting ValueGenerated for it is redundant. 
If it is incorrect assumption then, DefaultValue should set to ValueGenerated.OnAdd.

Identity must set ValueGenerated.OnAdd & rowversion must set OnAddOrUpdate.","RevEng: Default/Computed Value processing  At present, DefaultValueSql does not set ValueGenerated on DatabaseColumn but ComputedValueSql sets it to AddOrUpdate.
If we are assuming that calling `HasDefaultValueSql` will set ValueGenerated by itself then",9363,smitpatel,efcore
9333,RevEng: Warnings for null names for objects which requires name,"We have ""warnings"" for sequence/column/index not having names but it is impossible to create them without name. There seem to be no way to actually hit that code path. Should we have warnings for them?","RevEng: Warnings for null names for objects which requires name  We have ""warnings"" for sequence/column/index not having names but it is impossible to create them without name. There seem to be no way to actually hit that code path. Should we have warning",9363,smitpatel,efcore
9334,RevEng: Warnings for skipped table,"At present when we encounter index/fk from a table which is not included by user, we generate ""warning"" that we couldn't find the table. That means for a skipped table we would generate multiple warnings even though that was user intent. Should we remove this unnecessary warnings?","RevEng: Warnings for skipped table  At present when we encounter index/fk from a table which is not included by user, we generate ""warning"" that we couldn't find the table. That means for a skipped table we would generate multiple warnings even though tha",9363,smitpatel,efcore
9111,Add more test coverage for tooling/RevEng,"","Add more test coverage for tooling/RevEng  ",9335,smitpatel,efcore
9324,RevEng: Scaffold Non clustered for PK,"This work is opposite of #8687 

The comment https://github.com/aspnet/EntityFramework/pull/8950/files#r123785377 was correct.
Using migrations on generated code causes issues.

The issue is as follows:
SqlServer by default creates clustered PK if there is no other ""constraint"" which is marked as unique. Emphasize on constraint because constraints can be declared in create table but indexes cannot be.
Since Create index is not part of create table, if there is a clustered index then SqlServer wouldn't know about it while creating table and create a clustered PK by default and later adding clustered index throws.
Since we scaffold index even for constraints, we need to have non-clustered on PK always marked so that migrations can generate correct SQL later.","RevEng: Scaffold Non clustered for PK  This work is opposite of #8687 

The comment https://github.com/aspnet/EntityFramework/pull/8950/files#r123785377 was correct.
Using migrations on generated code causes issues.

The issue is as follows:
SqlServ",9335,smitpatel,efcore
9277,Get output parameter value of a stored procedure using EF Core FromSql(...) is always null.,"Describe what is not working as expected.

Store procedure output parameter is not working as expected. The output value is always null.
I have an statement like this. I've removed other parameters except this `OUTPUT` param to pointing out the issue. The records are came but the the value of this `OUTPUT` parameter is null without the exception. Executing the proc in SSMS works just fine but with this `FromSql(...)` isn't doing anything for output parameter.

```sql
-- other param are working as expected but the OUTPUT is not so i hide them.

@todoCounts VARCHAR(MAX) OUTPUT
```
```c#
var items = _context.Set<T>().FromSql(""Sp_Todo @todoCounts OUTPUT"", 
 new SqlParameter(""@todoCounts"", SqlDbType.VarChar)
 { Direction = ParameterDirection.Output}).ToList() // no luck
```
If i add this too, then the output value coming but this is not the correct idea here. I am not seeing any exceptions. 
```c#
  _context.Database.ExecuteSqlCommand(""Sp_Todo @todoCounts OUTPUT"", 
 new SqlParameter(""@todoCounts"", SqlDbType.VarChar)
 { Direction = ParameterDirection.Output});
```


If you are seeing an exception, include the full exceptions details (message and stack trace).

```
none
```

### Steps to reproduce

- Create a store procedure with output parameter.

```sql
 @todoCounts VARCHAR(MAX) OUTPUT
```

- Execute the StoreProc like this.

```c#
// records retrieved except OUTPUT parameter. 
context.set<MyModel>().FromSql(""Sp_Todo @todoCounts OUTPUT"", 
 new SqlParameter(""@todoCounts"", SqlDbType.VarChar)
 { Direction = ParameterDirection.Output}).ToList() 

```

### Further technical details
EF Core version: `1.1.2`
Database Provider: `1.1.2`
Operating system: Windows 10
IDE:  Visual Studio 2017 `15.2(2643.16) release`","Get output parameter value of a stored procedure using EF Core FromSql(...) is always null.   Describe what is not working as expected.

Store procedure output parameter is not working as expected. The output value is always null.
I have an statement l",9308,smitpatel,efcore
6249,FromSql and SqlParameter issue when calling by 2 ways the query,"Hi,
Since the SQL LIKE is not already available, with linq queries,I tried to use the FromSql function but it leads to some problems when I want to paginate my results.
### Steps to reproduce

```
var emprunteurs = contextDoti.Emprunteur.FromSql(@""select distinct Emprunteur.*
                                                    from credit.Emprunteur
                                                        left join credit.Pret on Pret.EmprunteurId = Emprunteur.EmprunteurId
                                                    where (NumeroCompte is NULL and @NumeroCompte = '' OR NumeroCompte like '%' + @NumeroCompte + '%')
                                                            and (NumeroSiren is NULL and @NumeroSiren = '' OR NumeroSiren like '%' + @NumeroSiren + '%')
                                                            and (DesignationSociale is NULL and @Designation = '' or DesignationSociale like '%' + @Designation + '%')"",
                                                            new SqlParameter(""@NumeroCompte"", System.Data.SqlDbType.NVarChar) { Value = numeroCompte ?? """" },
                                                            new SqlParameter(""@NumeroSiren"", System.Data.SqlDbType.NVarChar) { Value = numeroRcs ?? """" },
                                                            new SqlParameter(""@Designation"", System.Data.SqlDbType.NVarChar) { Value = designation ?? """" });

return new
            {
                Resultats = emprunteurs.Skip((page - 1) * nombreAffiche).Take(nombreAffiche).ToArray(),
                Total = emprunteurs.Count()
            };
```
### The issue

It seems that the query is executed two times with the same parameters which leads to the following error.

```
Exception message: The SqlParameter element is already contained in another SqlParameterCollection (originally in french: L'élément SqlParameter est déjà contenu dans un autre SqlParameterCollection).
Stack trace:    à System.Data.SqlClient.SqlParameterCollection.Validate(Int32 index, Object value)
   à System.Data.SqlClient.SqlParameterCollection.Add(Object value)
   à Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter.AddDbParameter(DbCommand command, Object value)
   à Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter.AddDbParameter(DbCommand command, Object value)
   à Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.CreateCommand(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   à Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, String executeMethod, IReadOnlyDictionary`2 parameterValues, Boolean openConnection, Boolean closeConnection)
   à Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues, Boolean manageConnection)
   à Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable.Enumerator.MoveNext()
   à Microsoft.EntityFrameworkCore.Query.QueryMethodProvider.GetResult[TResult](IEnumerable`1 valueBuffers)
   à lambda_method(Closure , QueryContext )
   à Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass19_1`1.<CompileQuery>b__1(QueryContext qc)
   à Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   à Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   à GestionCredit.Controllers.EmprunteurController.Get(String numeroCompte, String numeroPersonne, String numeroRcs, String designation, Int32 page, Int32 nombreAffiche) dans C:\Dev\Gestion Credit\GestionCredit\src\GestionCredit\Controllers\EmprunteurController.cs:ligne 75
   à lambda_method(Closure , Object , Object[] )
   à Microsoft.AspNetCore.Mvc.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)
   à Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionFilterAsync>d__28.MoveNext()
```
### Things tried

I tried to use linq to entity with the contains() method instead of SQL LIKE and it is working but it has worse performance and not the wanted behaviour. 
This makes me think that the problem is related to the FromSql function.
Here is the code.

```
 var emprunteurs3 = contextDoti.Emprunteur.Where(x => ((numeroRcs??"""") == """" || x.NumeroSiren.Contains(numeroRcs)) &&
                                                                ((numeroPersonne??"""") == """" || x.NumeroPersonne.ToString().Contains(numeroPersonne)) &&
                                                                ((numeroCompte??"""") == """" || x.Prets.Any(y => y.NumeroCompte.ToString().Contains(numeroCompte))));

return new
            {
                Resultats = emprunteurs.Skip((page - 1) * nombreAffiche).Take(nombreAffiche).ToArray(),
                Total = emprunteurs.Count()
            };
```
### Further technical details

EF Core version: 1.0.0
Operating system: Win 7 X64
Visual Studio version: VS2015 update 3","FromSql and SqlParameter issue when calling by 2 ways the query  Hi,
Since the SQL LIKE is not already available, with linq queries,I tried to use the FromSql function but it leads to some problems when I want to paginate my results.
### Steps to reprod",9308,smitpatel,efcore
6946,Logging: Use template based format string to log structured DbCommand log data,"At present EF logging of Db Command uses `DbCommandLogData` object with custom formatter which would generate a plain string message for logger to log. This blocks structured logging since logger would get only `DbCommandLogData` object instead of different parts of log messages (for querying). During #6096, we overcame this gap by implementing `IEnumerable<KeyValuePair<string,object>>` in #6201 which means that `DbCommandLogData` can be queried.

Current logging framework allows generation of structured log using template based string. The template string contains placeholders to fill the values of arguments and provides ability to query the log data without requiring any additional code. (See https://github.com/aspnet/EntityFramework/pull/6201#issuecomment-236076125
and example in MVC at https://github.com/aspnet/Mvc/blob/a78f77afde003c4a3fcf5dd7b6dc13dd9c85f825/src/Microsoft.AspNetCore.Mvc.Razor/Internal/MvcRazorLoggerExtensions.cs#L23)

This saves us trouble of creating custom formatter and extra type to store the state of DbCommandLog.
`DbCommandLogData` which is marked as obsolete at present would be removed when logging is implemented this way.",Logging: Use template based format string to log structured DbCommand log data  At present EF logging of Db Command uses `DbCommandLogData` object with custom formatter which would generate a plain string message for logger to log. This blocks structured,8457,ajcvickers,efcore
218,Logging: Design all up logging approach,"","Logging: Design all up logging approach  ",8457,ajcvickers,efcore
8456,Make query parameter format for logging consistent,"In our tests, parameters were logged like this:
`[param: 17]`

In production logs, they were logged like this:
`[param='17']`

This is because we had different code generating the strings in each case. With the fix for #6946, there is only now one piece of code. It generates logs like we have been doing for our tests, because doing otherwise would result in massive baseline updates. However, if we decide to go with a different format, then we can do the work. 👷 ","Make query parameter format for logging consistent  In our tests, parameters were logged like this:
`[param: 17]`

In production logs, they were logged like this:
`[param='17']`

This is because we had different code generating the strings in each c",8457,ajcvickers,efcore
7885,Inheritance does not discover Id as PK by conventions,"TPH add-migration exception 

Model:
```C#
   public class AppUser
    {
        public string Id { get; set; }
    }
    public class Employee : AppUser{}
```
Exception message:
System.InvalidOperationException: The entity type 'AppUser' requires a primary key to be defined.
Stack trace:
System.InvalidOperationException: The entity type 'AppUser' requires a primary key to be defined.
   at Microsoft.EntityFrameworkCore.Internal.ModelValidator.ShowError(String message)
   at Microsoft.EntityFrameworkCore.Internal.ModelValidator.Validate(IModel model)
   at Microsoft.EntityFrameworkCore.Internal.RelationalModelValidator.Validate(IModel model)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass16_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite transientCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite transientCallSite, ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass16_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigrationImpl(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.<>c__DisplayClass3_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)

### Steps to reproduce
Include a complete code listing (or project/solution) that we can run to reproduce the issue.

Partial code listings, or multiple fragments of code, will slow down our response or cause us to push the issue back to you to provide code to repoduce the issue.

```c#
<code listing>
```

### Further technical details
EF Core version: 1.1.0
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: 
IDE: Visual Studio 2015","Inheritance does not discover Id as PK by conventions  TPH add-migration exception 

Model:
```C#
   public class AppUser
    {
        public string Id { get; set; }
    }
    public class Employee : AppUser{}
```
Exception message:
System.Inv",8411,smitpatel,efcore
6919,ModelBuilder: Do not silently remove key when a property is made optional,"If I run the following SQL in SSMS it successfully creates the Section table and associated IX_Section_ApplicationName_SectionName_Aspect_Descriminator index.

``` SQL
CREATE TABLE [Configuration].[Section](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ApplicationName] [nvarchar](50) NOT NULL,
	[Aspect] [nvarchar](50) NULL,
	[Descriminator] [nvarchar](450) NULL,
	[SectionName] [nvarchar](50) NOT NULL,
	[Modified] [datetime2](7) NULL,
	[ModifiedUser] [nvarchar](50) NULL,
	[Timestamp] [timestamp] NOT NULL,
    CONSTRAINT [PK_Section] PRIMARY KEY CLUSTERED 
    (
	    [Id] ASC
    ),
    CONSTRAINT [IX_Section_ApplicationName_SectionName_Aspect_Descriminator] UNIQUE NONCLUSTERED 
	(
		[ApplicationName] ASC,
		[Aspect] ASC,
		[SectionName] ASC,
		[Descriminator] ASC
	)
)
```

The following fluent config should produce the same result, however the IX_Section_ApplicationName_Aspect_SectionName_Descriminator index does not get generated. If I set IsRequired to true for the Descriminator field it does get created. **Should this not produce the same result as the SQL outlined above?**

``` C#
        public override void Map(EntityTypeBuilder<SectionEntity> b)
        {
            b.ToTable(""Section"", ""Configuration"").HasKey(e => e.Id);

            b.HasAlternateKey(e => new {e.ApplicationName, e.Aspect, e.SectionName, e.Descriminator})
                .HasName(""IX_Section_ApplicationName_Aspect_SectionName_Descriminator"");

            b.Property(e => e.Descriminator)
                .IsRequired(false)
                .HasMaxLength(450);

            b.Property(e => e.ApplicationName)
                .IsRequired()
                .HasMaxLength(50);

            b.Property(e => e.Aspect).HasMaxLength(50);

            b.Property(e => e.Modified).HasDefaultValueSql(""getdate()"");

            b.Property(e => e.ModifiedUser).HasMaxLength(50);

            b.Property(e => e.SectionName)
                .IsRequired()
                .HasMaxLength(50);

            b.Property(e => e.Timestamp)
                .IsRequired()
                .HasColumnType(""timestamp"")
                .ValueGeneratedOnAddOrUpdate();
        }
```","ModelBuilder: Do not silently remove key when a property is made optional  If I run the following SQL in SSMS it successfully creates the Section table and associated IX_Section_ApplicationName_SectionName_Aspect_Descriminator index.

``` SQL
CREATE TA",8411,smitpatel,efcore
7939,What's the intended use pattern of RelationalDiagnosticSource* messages?,"I'm trying to hook [MiniProfiler](https://github.com/MiniProfiler/dotnet) up to Entity Framework Core, but I'm not really understanding what the intended interface is. My understanding is that my best (supported) route is [DiagnosticSource](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md), called via [`RelationalDiagnostics`](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Internal/RelationalDiagnostics.cs). That's the only path I see to get my hands on the `DbCommand`, `DbConnection`, etc. needed for various scenarios.

But [the `.Write()` call for DiagnosticSource](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs#L35) is:
```c#
public abstract void Write(string name, object value);
```
The way RelationalDiagnostics uses this passes in a typed object (good), [example here](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Internal/RelationalDiagnostics.cs#L45-L53):
```c#
diagnosticSource.Write(
    BeforeExecuteCommand,
    new RelationalDiagnosticSourceBeforeMessage
    {
        ConnectionId = connectionId,
        Command = command,
        ExecuteMethod = executeMethod,
        InstanceId = instanceId,
        Timestamp = startTimestamp,
        IsAsync = async
    });
```
...but those types passed are internal, for example here's [RelationalDiagnosticSourceBeforeMessage](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Storage/RelationalConnection.cs): 
```c#
namespace Microsoft.EntityFrameworkCore.Internal
{
    // TODO revert to anonymous types when https://github.com/dotnet/corefx/issues/4672 is fixed
    internal class RelationalDiagnosticSourceBeforeMessage
    {
        public Guid ConnectionId { get; set; }
        public DbCommand Command { get; set; }
        public string ExecuteMethod { get; set; }
        public bool IsAsync { get; set; }
        public Guid InstanceId { get; set; }
        public long Timestamp { get; set; }
    }
}
```
...and some other calls *are* anonymous objects, for example: [`WriteConnectionOpening()`](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Internal/RelationalDiagnostics.cs#L125-L133). So the usage pattern is inconsistent.

How am I supposed to get at the members in an inexpensive way? I'm *hoping* it's hot intended that everyone use reflection here to get the members, and I can't cast because they're `internal`. The TODO scares me because that means we have to use the DLR in what should be a code path as cheap as possible. Note: [the #4672 issue](https://github.com/dotnet/corefx/issues/4672) has since been closed.

Currently I see as far as creating a DiagnosticSource for MiniProfiler and hooking up to logging that way, but not how to use the object passed to the write methods, since I'm unable to access those types. I sincerely hope I'm being an idiot - is there a way to go about this that's not ""reflect everything""?","What's the intended use pattern of RelationalDiagnosticSource* messages?  I'm trying to hook [MiniProfiler](https://github.com/MiniProfiler/dotnet) up to Entity Framework Core, but I'm not really understanding what the intended interface is. My understand",8351,ajcvickers,efcore
8007,Feature request: add instanceId (Guid) to RelationalDataReader for DiagnosticSource,"Related issues: #8001 and #7939

In RelationalDiagnostics there's an `instanceId` (a `Guid`) added to each event type so that things like `WriteCommandBefore` and `WriteCommandAfter` can be tracked together in the linear logging format that is DiagnosticSource. 

For reference, the DiagnosticsListener bits are here: [RelationalDiagnostics.cs](https://github.com/aspnet/EntityFramework/blob/69d25a0b89a62cba4b74f8530941b67211108fc3/src/EFCore.Relational/Internal/RelationalDiagnostics.cs) and an example usage here: [RelationalConnection#298-329](https://github.com/aspnet/EntityFramework/blob/7e177106f08f788539107fd9165ecf92cb0229f6/src/EFCore.Relational/Storage/RelationalConnection.cs#L298-L329). The gist of it is:

```c#
var instanceId = Guid.NewGuid();
DiagnosticSource.WriteConnectionOpening(_connection.Value,
    ConnectionId,
    instanceId,
    startTimestamp,
    async: false);

try
{
    _connection.Value.Open();
    wasOpened = true;

    var currentTimestamp = Stopwatch.GetTimestamp();
    DiagnosticSource.WriteConnectionOpened(_connection.Value, 
        ConnectionId,
        instanceId,
        startTimestamp, 
        currentTimestamp,
        async: false);
}
catch (Exception e)
{
    var currentTimestamp = Stopwatch.GetTimestamp();
    DiagnosticSource.WriteConnectionError(_connection.Value, 
        ConnectionId, 
        e,
        instanceId,
        startTimestamp,
        currentTimestamp,
        async: false);
    throw;
}
```

That `instanceId` allows a DiagnosticSource listener to tie these two events together. In my case of MiniProfiler, I can time these things and log them as a profiling step. However, `RelationalDataReader` is missing this. Where it's created in `RelationalCommand` [via the `Execute()` call](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Storage/Internal/RelationalCommand.cs#L226-L231), there's no ID given, so when [`DataReaderDisposing` is fired](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Storage/RelationalDataReader.cs#L79-L85), there's no ID to go off of:
```c#
_diagnosticSource.WriteDataReaderDisposing(
    _connection.DbConnection,
    _connection.ConnectionId,
    _reader,
    _reader.RecordsAffected,
    _startTimestamp,
    currentTimestamp);
```

Ultimately, this results in a `BeforeExecuteCommand `, `AfterExecuteCommand`, and `CommandExecutionError` events that you can't correlate to  the `DataReaderDisposing` event. So it's both inconsistent and without a way to resolve what's open vs. complete. A connection can have multiple readers (e.g. MARS connections), so the `connectionId` isn't useful, ordered, or unique. But the command `instanceId` already allocated is unique and 1:1.

### Proposed Solution
1. Add a `Guid InstanceId` property to `RelationalDataReader`
2. Assign `InstanceId` from the one already present when creating it ([here](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Storage/Internal/RelationalCommand.cs#L189))
    - via new constructor? (non-breaking)
    - via `internal` property setter? (also non-breaking)
    - add to existing constructor **(breaking)**
3. Add  `instanceId` to [the `WriteDataReaderDisposing` call](https://github.com/aspnet/EntityFramework/blob/69d25a0b89a62cba4b74f8530941b67211108fc3/src/EFCore.Relational/Internal/RelationalDiagnostics.cs#L338) (internal, so non-breaking)
4. Add `instanceId` to the anonymous object [inside the `WriteDataReaderDisposing` call](https://github.com/aspnet/EntityFramework/blob/69d25a0b89a62cba4b74f8530941b67211108fc3/src/EFCore.Relational/Internal/RelationalDiagnostics.cs#L350-L358) for consumers

If this is a welcomed change, please advise on the options for Item 2 about backwards compatibility preferences and I'm happy to submit a PR.","Feature request: add instanceId (Guid) to RelationalDataReader for DiagnosticSource  Related issues: #8001 and #7939

In RelationalDiagnostics there's an `instanceId` (a `Guid`) added to each event type so that things like `WriteCommandBefore` and `Writ",8351,ajcvickers,efcore
7939,What's the intended use pattern of RelationalDiagnosticSource* messages?,"I'm trying to hook [MiniProfiler](https://github.com/MiniProfiler/dotnet) up to Entity Framework Core, but I'm not really understanding what the intended interface is. My understanding is that my best (supported) route is [DiagnosticSource](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md), called via [`RelationalDiagnostics`](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Internal/RelationalDiagnostics.cs). That's the only path I see to get my hands on the `DbCommand`, `DbConnection`, etc. needed for various scenarios.

But [the `.Write()` call for DiagnosticSource](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs#L35) is:
```c#
public abstract void Write(string name, object value);
```
The way RelationalDiagnostics uses this passes in a typed object (good), [example here](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Internal/RelationalDiagnostics.cs#L45-L53):
```c#
diagnosticSource.Write(
    BeforeExecuteCommand,
    new RelationalDiagnosticSourceBeforeMessage
    {
        ConnectionId = connectionId,
        Command = command,
        ExecuteMethod = executeMethod,
        InstanceId = instanceId,
        Timestamp = startTimestamp,
        IsAsync = async
    });
```
...but those types passed are internal, for example here's [RelationalDiagnosticSourceBeforeMessage](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Storage/RelationalConnection.cs): 
```c#
namespace Microsoft.EntityFrameworkCore.Internal
{
    // TODO revert to anonymous types when https://github.com/dotnet/corefx/issues/4672 is fixed
    internal class RelationalDiagnosticSourceBeforeMessage
    {
        public Guid ConnectionId { get; set; }
        public DbCommand Command { get; set; }
        public string ExecuteMethod { get; set; }
        public bool IsAsync { get; set; }
        public Guid InstanceId { get; set; }
        public long Timestamp { get; set; }
    }
}
```
...and some other calls *are* anonymous objects, for example: [`WriteConnectionOpening()`](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Internal/RelationalDiagnostics.cs#L125-L133). So the usage pattern is inconsistent.

How am I supposed to get at the members in an inexpensive way? I'm *hoping* it's hot intended that everyone use reflection here to get the members, and I can't cast because they're `internal`. The TODO scares me because that means we have to use the DLR in what should be a code path as cheap as possible. Note: [the #4672 issue](https://github.com/dotnet/corefx/issues/4672) has since been closed.

Currently I see as far as creating a DiagnosticSource for MiniProfiler and hooking up to logging that way, but not how to use the object passed to the write methods, since I'm unable to access those types. I sincerely hope I'm being an idiot - is there a way to go about this that's not ""reflect everything""?","What's the intended use pattern of RelationalDiagnosticSource* messages?  I'm trying to hook [MiniProfiler](https://github.com/MiniProfiler/dotnet) up to Entity Framework Core, but I'm not really understanding what the intended interface is. My understand",8000,NickCraver,efcore
8001,RelationalDiagnostics: Naming inconsistencies,"I'm working on a `DiagnosticListener` approach in #7939 and noticed some inconsistencies in [`RelationalDiagnostics.cs`](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Internal/RelationalDiagnostics.cs):

1. ConnectionError is incorrect, `nameof(ConnectionClosed)` (repeated)` should be `nameof(ConnectionError)`. I've submitted PR #8000 to correct this.

```c#
public const string ConnectionClosed = NamePrefix + nameof(ConnectionClosed);
public const string ConnectionError = NamePrefix + nameof(ConnectionClosed);
```

2. ""TransactionRolledBack"" isn't title cased:
```c#
public const string TransactionRolledback = NamePrefix + nameof(TransactionRolledback);
```
^ this should have a capital `B` to be consistent with all other events. in the class, e.g. 
```c#
public const string TransactionRolledBack = NamePrefix + nameof(TransactionRolledBack);
```

1 is an obvious bug (unless I'm nuts) and causing active harm re-firing the closed event on errors, not just closes. While there's a workaround of using the `exception` arg on the close listener and seeing if it's null, this is both a) not ensure to be reliable, and b) just plain wrong.

2 is minor, but a breaking change to listeners all the same. At the same time, I can't find anyone even using this yet (or someone would have noticed these things?) - should we fix it properly now?

See https://github.com/aspnet/EntityFramework/issues/7939#issuecomment-288206394 for additional concerns I have about the stability of these APIs. Since everyone is (as far as I know) copying these strings because they are internally restricted, there's no scenario fixed by a simple recompile. Issues like this would be better served in the event names were exposed and compilationally reliable.",RelationalDiagnostics: Naming inconsistencies  I'm working on a `DiagnosticListener` approach in #7939 and noticed some inconsistencies in [`RelationalDiagnostics.cs`](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1,8000,NickCraver,efcore
6998,Fix to #6937 - Query: Contains on element coming from optional navigation doesn't get server-evaluated,"Problem was that when trying to translate contains ResultOperator we assumed that the translatable expression would always be member access or a EF.Property method call.
However in some cases (e.g. when item is part of an optional navigation) this is not the case, and the underlying member/EF.Property is wrapped around Convert and/or NullConditional.
Fix is to perform translation on the item before before checking what shape it is. This simplifies the code and protects from similar situations, because SqlTranslatingExpressionVisitor already optimizes out a lot of redundant nodes in the expression tree.",Fix to #6937 - Query: Contains on element coming from optional navigation doesn't get server-evaluated  Problem was that when trying to translate contains ResultOperator we assumed that the translatable expression would always be member access or a EF.Pro,7965,smitpatel,efcore
7922,Query: Contains method on client list of nullable guid/int fails to translate to server,"When a nullable Guid and a non-nullable Guid are compared using the Contains() method I get a log message: ""could not be translated and will be evaluated locally"". Unfortunately this is then downloading a big table to perform the comparison causing a performance problem. This occurs whether the nullable is an argument to or the caller of .Contains() as will be shown in the four cases below.

This may be related to https://github.com/aspnet/EntityFramework/issues/7616

### Steps to reproduce
Here is a cut-down version of the entity:
```c#
public class Skill
{
	public Guid SkillId { get; set; }
	public Guid? PrimarySkillId { get; set; }

	// Navigation (self-join)
	public Skill PrimarySkill {get;set;}
}
```

Here are the four cases with resulting log messages and MySQL

```c#
//nullable Guid list, nullable field - works
List<Guid?> primarySkills = ...;
var outerQuery = dc.Skills.Where(s => primarySkills.Contains(s.PrimarySkillId));
var result = await outerQuery.ToListAsync();
```
SELECT `s`.`SkillId`, `s`.`Name`, `s`.`PrimarySkillId`, `s`.`Source`, `s`.`SourceId`
FROM `Skills` AS `s`
WHERE `s`.`PrimarySkillId` IN (...)
```c#
//nullable Guid list, non-nullable field - fails
List<Guid?> primarySkills = ...;
var outerQuery = dc.Skills.Where(s => primarySkills.Contains(s.SkillId) );
var result = await outerQuery.ToListAsync();
```
The LINQ expression '{__primarySkills_0 => Contains(Convert([s].SkillId))}' could not be translated and will be evaluated locally.
The LINQ expression 'Contains(Convert([s].SkillId))' could not be translated and will be evaluated locally.
SELECT `s`.`SkillId`, `s`.`Name`, `s`.`PrimarySkillId`, `s`.`Source`, `s`.`SourceId`
FROM `Skills` AS `s`

and the inverse is true:

```c#
//non-nullable Guid list, non-nullable field - works
List<Guid> primarySkills = ...; 
var outerQuery = dc.Skills.Where(s => primarySkills.Contains(s.SkillId));
var result = await outerQuery.ToListAsync();
```
SELECT `s`.`SkillId`, `s`.`Name`, `s`.`PrimarySkillId`, `s`.`Source`, `s`.`SourceId`
FROM `Skills` AS `s`
WHERE `s`.`SkillId` IN (...)

```c#
//non-nullable Guid, nullable field - fails
List<Guid> primarySkills = ...;
var outerQuery = dc.Skills.Where(s => /*primarySkills.Contains(s.SkillId) ||*/ s.PrimarySkillId != null && primarySkills.Contains(s.PrimarySkillId.Value));
var result = await outerQuery.ToListAsync();
```
The LINQ expression '{__primarySkills_0 => Contains(Convert([s].PrimarySkillId))}' could not be translated and will be evaluated locally.
The LINQ expression 'Contains(Convert([s].PrimarySkillId))' could not be translated and will be evaluated locally.
SELECT `s`.`SkillId`, `s`.`Name`, `s`.`PrimarySkillId`, `s`.`Source`, `s`.`SourceId`
FROM `Skills` AS `s`
WHERE `s`.`PrimarySkillId` IS NOT NULL

Unfortunately what I need to do is compare to both fields at once - so I can't get away from the nullable problem so easily. Ideally what I want is: 
```c#
.Where(s => primarySkills.Contains(s.PrimarySkillId ?? s.SkillId));
```

### Further technical details
These are my relevant project references:
PackageReference Include=""Microsoft.EntityFrameworkCore"" Version=""1.1.1"" 
PackageReference Include=""Microsoft.EntityFrameworkCore.Design"" Version=""1.1.1"" 
PackageReference Include=""Microsoft.EntityFrameworkCore.Tools.DotNet"" Version=""1.1.0-preview4-final"" 
PackageReference Include=""Pomelo.EntityFrameworkCore.MySql"" Version=""1.1.0-*"" 
PackageReference Include=""Pomelo.EntityFrameworkCore.MySql.Design"" Version=""1.1.0-*"" 

### Workaround
Having written all this up I realised a stupidly simple workaround, and this works fine, but I'm thinking this is still something that'd be useful for you to know about.
```c#
List<Guid> primarySkills = ...;
List<Guid?> primarySkillsNullable = primarySkills.Cast<Guid?>().ToList();
var outerQuery = dc.Skills.Where(s => 
	primarySkills.Contains(s.SkillId) || primarySkillsNullable.Contains(s.PrimarySkillId));
```
SELECT `s`.`SkillId`, `s`.`Name`, `s`.`PrimarySkillId`, `s`.`Source`, `s`.`SourceId`
FROM `Skills` AS `s`
WHERE `s`.`SkillId` IN (...) OR `s`.`PrimarySkillId` IN (...)


","Query: Contains method on client list of nullable guid/int fails to translate to server  When a nullable Guid and a non-nullable Guid are compared using the Contains() method I get a log message: ""could not be translated and will be evaluated locally"". Un",7965,smitpatel,efcore
7909,PVS-Studio: fixed the potential vulnerability CWE-670 (Always-Incorrect Control Flow Implementation),"**We have found and fixed a vulnerability CWE-670 (Always-Incorrect Control Flow Implementation) using PVS-Studio tool.**
Analyzer warnings: [V3014](https://www.viva64.com/en/w/V3014/), [V3015](https://www.viva64.com/en/w/V3015/) and [V3081](https://www.viva64.com/en/w/V3081/).
PVS-Studio is a static code analyzer for C, C++ and C#.

**Fixes:**

 - When comparing two statements through ExpressionEqualityComparer, the method GetHashCode was returning incorrect result for the expressions of the MemberInit with a list of arguments.
   We have written a unit test that proves that (See ExpressionCompareByHashCodeTest)
>    - [V3014](https://www.viva64.com/en/w/V3014/) It is likely that a wrong variable is being incremented inside the 'for' operator. Consider reviewing 'i'. EFCore ExpressionEqualityComparer.cs 214
>    - [V3015](https://www.viva64.com/en/w/V3015/) It is likely that a wrong variable is being compared inside the 'for' operator. Consider reviewing 'i' EFCore ExpressionEqualityComparer.cs 214
  
 - Also, we have corrected one of the unit tests, that was working incorrectly, to our mind.
>   - [V3081](https://www.viva64.com/en/w/V3081/) The 'j' counter is not used inside a nested loop. Consider inspecting usage of 'i' counter. EFCore.Specification.Tests ComplexNavigationsQueryTestBase.cs 2393","PVS-Studio: fixed the potential vulnerability CWE-670 (Always-Incorrect Control Flow Implementation)  **We have found and fixed a vulnerability CWE-670 (Always-Incorrect Control Flow Implementation) using PVS-Studio tool.**
Analyzer warnings: [V3014](htt",7963,smitpatel,efcore
7927,Analyse functional impact of loop error,PR #7909 fixes a bug where the wrong variable is being used in a for loop. We should analyse what functional impact this change makes and then make a call as to whether to port this to 1.1.2,Analyse functional impact of loop error  PR #7909 fixes a bug where the wrong variable is being used in a for loop. We should analyse what functional impact this change makes and then make a call as to whether to port this to 1.1.2,7963,smitpatel,efcore
7844,Query: Query containing subquery with annonymous type fails to translate to server,"With #7843 We introduced optimization to lift subqueries when outer QM has selector only and it can be pushed down into subquery model.
Query
```C#
AssertQuery<Employee, Order>((es, os) =>
    from e in es.Take(9).Select(e => new { e })
    from o in os.Take(1000).Select(o => new { o })
    where e.e.EmployeeID == o.o.EmployeeID
    select new { e, o });
```
generates query model from parser like this
```
  Compiling query model: 
  'from Employee e in 
      (from Employee <generated>_1 in DbSet<Employee>
      select <generated>_1)
      .Take(__p_0)
  from <>f__AnonymousType15<Order> o in 
      from Order o in 
          (from Order <generated>_1 in DbSet<Order>
          select <generated>_1)
          .Take(1000)
      select new <>f__AnonymousType15<Order>(o)
  where (Nullable<int>) e.EmployeeID == o.o.EmployeeID
  select new <>f__AnonymousType14<<>f__AnonymousType13<Employee>, <>f__AnonymousType15<Order>>(
      new <>f__AnonymousType13<Employee>(e), 
      o
  )'
```
which is being optimized into this now
```
  'from Employee e in 
      (from Employee <generated>_1 in DbSet<Employee>
      select <generated>_1)
      .Take(__p_0)
  from <>f__AnonymousType15<Order> o in 
      (from Order o in DbSet<Order>
      select new <>f__AnonymousType15<Order>(o))
      .Take(1000)
  where (Nullable<int>) e.EmployeeID == o.o.EmployeeID
  select new <>f__AnonymousType14<<>f__AnonymousType13<Employee>, <>f__AnonymousType15<Order>>(
      new <>f__AnonymousType13<Employee>(e), 
      o
  )'
```
Since the AdditionalFromClause has anonymous type projection, we fail to translate the whole query as cross join.

The root cause here seems to be QueryParser. Even though MainFromClause & AdditionalFromClause both have same structure, the where predicate for MainFromClause is optimized from `new { e }.e.EmployeeID` to `e.EmployeeId`. While same optimization does not happen for AdditionalFromClause.","Query: Query containing subquery with annonymous type fails to translate to server  With #7843 We introduced optimization to lift subqueries when outer QM has selector only and it can be pushed down into subquery model.
Query
```C#
AssertQuery<Employee",7950,smitpatel,efcore
7520,Query: List of refactoring ideas,"Brain dump of potential refactorings in the query pipeline captured from a discussion today with @smitpatel and @maumar.

~- [ ] Immutable SelectExpression via facade/visitors~ Not worth
- [x] AliasExpressions everywhere or ColumnRefExpressions for referentially consistent SQL tree. (@smitpatel) #7950 
- [x] Include via QueryModel (@anpete) #7974 
~- [ ] Include/nav-prop synergy via early QM rewrites.~
~- [ ] Immutable QueryModel~
~- [ ] First-class * expression (perhaps via exploded column containment idea)~ We do not have * projection for now. We can introduce it in future.
- [x] SearchConditionTranslatingVisitor rewrite (#7554)
- [x] Subquery lifting at query model level (#7613)
- [x] Consistentize use of visitors/extension nodes, VisitChildren etc.
- [x] Apply CompositePredicateExpressionVisitor to other parts of the SelectExpression (#7608)
~- [ ] Evaluate ClientEval flags.~ We do not have client eval flag. 
- [x] Investigate NullConditionalExpression processing in RequiresMaterializationExpressionVisitor (#7746)
- [ ] clean up Nav + Entity Equality rewriting visitors (#7773)
- [ ] Clean up & Improve QueryOptimizer (#7831)
- [ ] Avoid unnecessary pushdown of subqueries (#8094)
~- [ ] Investigate DRYing up null expressions (NullableExpression and NullConditionalExpression)~ Removed NullableExpression
~- [ ] Clean-up logic around RemoveConvert (#8318)~ Nomore RemoveConvert
- [ ] Rename and clean-up EQMV.OptimizeQueryModel
- [x] log contents of compiled code (#9455)

@smitpatel, @maumar Feel free to add more detail here.


","Query: List of refactoring ideas  Brain dump of potential refactorings in the query pipeline captured from a discussion today with @smitpatel and @maumar.

~- [ ] Immutable SelectExpression via facade/visitors~ Not worth
- [x] AliasExpressions everywhe",7950,smitpatel,efcore
6703,Query: Simplify aliases for complex projection if being used in order by clause,"For query like this

``` C#
selection = db.Nodes.Include(x => x.NodeRecords)
        .Select(s => new HighNode()
        {
            Name = s.Name,
            Change = s.NodeRecords.OrderByDescending(o => o.NodeRecordId).Skip(days).FirstOrDefault().Change
        }).OrderByDescending(t => t.Change).Take(100).ToList();
```

We generate Sql like this

``` SQL
SELECT TOP(@__p_1) [x].[Name], (
    SELECT [o0].[Change]
    FROM [NodeRecords] AS [o0]
    WHERE [x].[Name] = [o0].[Node_Name]
    ORDER BY [o0].[NodeRecordId] DESC
    OFFSET @__days_0 ROWS FETCH NEXT 1 ROWS ONLY
)
FROM [Nodes] AS [x]
ORDER BY (
    SELECT [o].[Change]
    FROM [NodeRecords] AS [o]
    WHERE [x].[Name] = [o].[Node_Name]
    ORDER BY [o].[NodeRecordId] DESC
    OFFSET @__days_0 ROWS FETCH NEXT 1 ROWS ONLY
) DESC
```

We can just alias the subquery in projection and use alias in order by clause as enhancement.

For model and more info see #6257 ","Query: Simplify aliases for complex projection if being used in order by clause  For query like this

``` C#
selection = db.Nodes.Include(x => x.NodeRecords)
        .Select(s => new HighNode()
        {
            Name = s.Name,
            Chang",7950,smitpatel,efcore
7624,Infrastructure: Bring back Tools,"Once Tools RTW, their releases will be back in step with the runtime. We can merge the [aspnet/EntityFramework.Tools](https://github.com/aspnet/EntityFramework.Tools) repo back into this one.","Infrastructure: Bring back Tools  Once Tools RTW, their releases will be back in step with the runtime. We can merge the [aspnet/EntityFramework.Tools](https://github.com/aspnet/EntityFramework.Tools) repo back into this one.",7865,bricelam,efcore
56,Metadata: Refactor a bunch of stuff around keys and fks.,"","Metadata: Refactor a bunch of stuff around keys and fks.  ",7865,bricelam,efcore
6924,Infrastructure: Convert more services to be singletons,"There are currently some services that could be registered as singletons, reducing the number of allocations we have to make for each `DbContext` instance:
1. Services that no longer need to be scoped, such as `IInternalEntityEntryFactory` 
1. Services that have no mutable state, but use scoped services like `ICurrentDbContext` or `IDbContextOptions` in one of the methods and can be refactored to pass the required services in the method call itself, such as `IChangeTrackerFactory` (we should measure the performance/memory benefit of this in a case by case basis and understand if the breaking change and possibly more coupled or complex code is worth it)
1. Services that have a cache and could be refactored to use `DbContextServices.MemoryCache`, such as  `IValueGeneratorSelector` (already tracked by #5322)
1. Services that depend on one or more of the above, such as `IKeyPropagator`

Doing this would allow us to cache these services and not use DI to get them. On the other hand the DI resolution can be significantly sped up by not using delegates with `GetService` calls in them for registration, see #4133.","Infrastructure: Convert more services to be singletons  There are currently some services that could be registered as singletons, reducing the number of allocations we have to make for each `DbContext` instance:
1. Services that no longer need to be scop",7853,ajcvickers,efcore
218,Logging: Design all up logging approach,"","Logging: Design all up logging approach  ",7853,ajcvickers,efcore
7220,Query: Selecting column from wrong table when filtering on navigation property and using skip/take,"When filtering on a navigation property and then paging results using Skip/Take, incorrect SQL is generated.  This causes a SQL exception (in both SQL Server and SQLite).

```
Exception message: 
    SQLite Error 1: 'no such column: q.Book.MysteryBook.AuthorID'.
Stack trace:
       at Microsoft.Data.Sqlite.Interop.MarshalEx.ThrowExceptionForRC(Int32 rc, Sqlite3Handle db)
   at Microsoft.Data.Sqlite.SqliteCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, String executeMethod, IReadOnlyDictionary`2 parameterValues, Boolean closeConnection)
   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable.Enumerator.BufferlessMoveNext(Boolean buffer)
   at Microsoft.EntityFrameworkCore.Query.QueryMethodProvider.<_ShapedQuery>d__3`1.MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at IncorrectSQLGeneration.Program.Main(String[] args) in C:\Users\ablake\Documents\Visual Studio 2015\Projects\IncorrectSQLGeneration\src\IncorrectSQLGeneration\Program.cs:line 51
```

### Steps to reproduce
Project that reproduces this issue can be found at: https://github.com/austinleroy/EFCore_IncorrectSQLGeneration

Source also attached to this issue.
[IncorrectSQLGeneration.zip](https://github.com/aspnet/EntityFramework/files/642647/IncorrectSQLGeneration.zip)


Console application that describes this issue:
#### Program.cs
```c#
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace IncorrectSQLGeneration
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var connectionStringBuilder = new SqliteConnectionStringBuilder
            {
                DataSource = "":memory:""
            };
            string connectionString = connectionStringBuilder.ToString();
            var connection = new SqliteConnection(connectionString);
            connection.Open();

            DbContextOptionsBuilder<DataContext> builder = new DbContextOptionsBuilder<DataContext>();
            //Issue appears when generating SQL for SQLite
            builder.UseSqlite(connection);
            //Issue appears when generating SQL for SQL Server
            //builder.UseSqlServer(""Data Source=localhost;Initial Catalog=EFCoreBroke;Integrated Security=true;"");

            //Issue is not a problem with an in-memory database
            //builder.UseInMemoryDatabase();

            var log = new Microsoft.Extensions.Logging.LoggerFactory();
            log.AddConsole(LogLevel.Debug);
            log.AddDebug();
            builder.UseLoggerFactory(log);

            using (var context = new DataContext(builder.Options))
            {
                context.Database.EnsureCreated();

                IQueryable<Quote> quotes =
                    context.Quotes
                    .Include(q => q.Book).ThenInclude(b => b.MysteryBook);

                //Commenting out filter on navigation property causes SQL to be generated correctly
                quotes = quotes.Where(q => q.Book.MysteryBook.Hero == ""Sherlock"");
                quotes = quotes.OrderBy(q => q.ID);
                //Commenting out Skip/Take causes SQL to be generated correctly
                quotes = quotes.Skip(0).Take(10);

                var authorIDs = quotes.Select(q => q.AuthorID).ToList();

                foreach(var id in authorIDs)
                {
                    Console.WriteLine(id);
                }
            }
        }
    }
}
```

#### Context & Models
```c#
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace IncorrectSQLGeneration
{
    public class DataContext : DbContext
    {
        public DataContext(DbContextOptions<DataContext> builder)
            :base(builder)
        { }

        public DbSet<Quote> Quotes { get; set; }
        public DbSet<Book> Books { get; set; }
        public DbSet<MysteryBook> Publishers { get; set; }
    }

    [Table(""Quote"")]
    public partial class Quote
    {
        [Key]
        public int ID { get; set; }

        public int AuthorID { get; set; }

        public int? BookID { get; set; }

        [ForeignKey(""BookID"")]
        public virtual Book Book { get; set; }
    }

    [Table(""Book"")]
    public partial class Book
    {
        [Key]
        public int ID { get; set; }
        public virtual ICollection<Quote> Quotes { get; set; }
        public virtual MysteryBook MysteryBook { get; set; }
    }

    [Table(""MysteryBook"")]
    public partial class MysteryBook
    {
        [Key]
        public int BookID { get; set; }
        public string Hero { get; set; }

        [ForeignKey(""BookID"")]
        public virtual Book Book { get; set; }
    }
}

```

### Further technical details
EF Core version: 1.1.0
Database Provider: 
    ""Microsoft.EntityFrameworkCore.Sqlite"": ""1.1.0""
    ""Microsoft.EntityFrameworkCore.SqlServer"": ""1.1.0""
Operating system: Windows 10
IDE: Visual Studio 2015","Query: Selecting column from wrong table when filtering on navigation property and using skip/take  When filtering on a navigation property and then paging results using Skip/Take, incorrect SQL is generated.  This causes a SQL exception (in both SQL Serv",7670,smitpatel,efcore
7451,Query: Relational OfType op selects unnecessary columns,"Given a hierarchy like:
```
   A
 /   \
B     C
```
the following query will select the columns from B:
```c#
context.As.OfType<C>();
```","Query: Relational OfType op selects unnecessary columns  Given a hierarchy like:
```
   A
 /   \
B     C
```
the following query will select the columns from B:
```c#
context.As.OfType<C>();
```",7628,smitpatel,efcore
7312,Query: Reference Include in derived type with siblings throws invalid cast expression,"I have a problem with simple query:
```C#
            var leaves = _context.Proposal.OfType<ProposalLeave>()
                .Include(l => l.Creator).ThenInclude(e => e.User)
                .Include(l=>l.LeaveType)
                .Include(l => l.ProposalLeaveStatuses).ThenInclude(l => l.ProposalLeaveStatus)
                .AsQueryable();
```
 Because of `.Include(l=>l.LeaveType)` I'm getting exception:

```
InvalidCastException: Unable to cast object of type 'System.DateTime' to type 'System.Int32'
```

### Steps to reproduce
Yesterday I reported the problem on Stack Overflow .
[Here](http://stackoverflow.com/questions/41320728/include-causes-invalidcastexception) you can find whole details of the problem with helpful answer of Ivan Stoev.
I made also VS 2015 project that reproduce this issue.
The project is available for download [here](https://1drv.ms/u/s!AtgBak8wmGjhhAxEmMKDwO1laALG).

### Further technical details
EF Core version: 1.1.0
Database Provider: Microsoft.EntityFrameworkCore.SqlServer 1.1.0
Operating system: Windows 10 Pro
IDE: Visual Studio 2015","Query: Reference Include in derived type with siblings throws invalid cast expression  I have a problem with simple query:
```C#
            var leaves = _context.Proposal.OfType<ProposalLeave>()
                .Include(l => l.Creator).ThenInclude(e =",7628,smitpatel,efcore
7543,"Group By and Outer Apply and Query Optimizations and, and...","Okay, please don't be mad at me -- I'm feeling kind 👨‍🍳 of scrambled after my deep dive into this. It's a pretty big PR and touches a lot of things. I didn't plan on it being this way but as I was working on my initial goal (getting `GROUP BY` to work) I ended up breaking some things, and in order to fix them, other things broke, and I had to fix them, ad nauseum. 

Now I've finally got the tests all passing (save for one SQLite oddity, but I will cover that in a sec) and successfully rebased onto the last month's worth of commits.

The gist of what I've done:

- Added `GROUP BY` support
- Added `LEFT JOIN LATERAL`/`OUTER APPLY` support
- Optimized generated queries to avoid materialization whenever possible, resulting in much smaller SQL statements, less data over the wire, etc.

Now, there are several points I know still need to be covered:

- [x] Complex `GroupBy` keys
- [x] I'm suspicious of some of the test SQL output changes surrounding discriminator columns and would like to double-check
- [x] I think the whole `QueryFlattener` class and its factory could disappear, it's only used for one call now
- [x] Plenty more tests for `GROUP BY`

...I just thought that for as long as this has already taken, and for as large of a changeset as this is, I would get some kind of ball rolling here.","Group By and Outer Apply and Query Optimizations and, and...  Okay, please don't be mad at me -- I'm feeling kind 👨‍🍳 of scrambled after my deep dive into this. It's a pretty big PR and touches a lot of things. I didn't plan on it being this way but as",7587,tuespetre,efcore
5230,Query: Optimize predicate on discriminator,"Current visiting FromClause adds predicate on discriminator column. If WhereClause (or any other way) another predicate on discriminator column is added then we should combine them in some way to improve readability.
`Can_use_is_kiwi` test
Generated SQL:

```
SELECT [a].[Species], [a].[CountryId], [a].[Discriminator], [a].[Name], [a].[EagleId], [a].[IsFlightless], [a].[Group], [a].[FoundOn]
FROM [Animal] AS [a]
WHERE [a].[Discriminator] IN (N'Kiwi', N'Eagle') AND ([a].[Discriminator] = N'Kiwi')
```

This is just readability improvement. Sql Server optimize the predicate by self for perf.",Query: Optimize predicate on discriminator  Current visiting FromClause adds predicate on discriminator column. If WhereClause (or any other way) another predicate on discriminator column is added then we should combine them in some way to improve readabi,7587,tuespetre,efcore
7569,Navigations: Projected collection navigations tracking/fixup issues.,"Given the following query:
```c#
var results
    = context.Customers
        .Where(c => c.CustomerID == ""ALFKI"")
        .Select(c => c.Orders);
```
we would expect the Orders to be tracked, but they are not.

Additionally, given this variation:
```c#
var results
    = context.Customers
        .Where(c => c.CustomerID == ""ALFKI"")
        .Select(c => new { c, c.Orders });
```
the Customer is tracked and its Orders collection is populated. But:
- The inverse nav-prop (Order.Customer) is null.
- The Orders are not being tracked.

","Navigations: Projected collection navigations tracking/fixup issues.  Given the following query:
```c#
var results
    = context.Customers
        .Where(c => c.CustomerID == ""ALFKI"")
        .Select(c => c.Orders);
```
we would expect the Orders t",7574,anpete,efcore
7573,Query: Navigations: Inverse one-to-one references not rewritten,"In the following queries, the second nav. in each projection (ParentBackNavigation) is not processed during nav. rewrite. In the first case, it triggers a null-ref at execution time, and in the second, the EF.Property call is present in the final compiled query tree.
```c#
context.Children
	.Select(c => new
	{
		c.SelfReferenceBackNavigation,
		c.SelfReferenceBackNavigation.ParentBackNavigation
	});


context.Children
	.Select(c => new
	{
		SelfReferenceBackNavigation
		= EF.Property<IChild3409>(c, ""SelfReferenceBackNavigation""),
		ParentBackNavigationB
		= EF.Property<IParent3409>(
			EF.Property<IChild3409>(c, ""SelfReferenceBackNavigation""),
			""ParentBackNavigation"")
	});
```","Query: Navigations: Inverse one-to-one references not rewritten  In the following queries, the second nav. in each projection (ParentBackNavigation) is not processed during nav. rewrite. In the first case, it triggers a null-ref at execution time, and in",7574,anpete,efcore
1100,Support Spatial Data Types on SQL Server and SQLite,"how to use Spatial Data types (e.g. DbGeography) in model (code-first method) to save points, shapes etc.

e.g.

public DbGeography gps_points {get; set;}

i'm unable to use ""DbGeography"".","Support Spatial Data Types on SQL Server and SQLite  how to use Spatial Data types (e.g. DbGeography) in model (code-first method) to save points, shapes etc.

e.g.

public DbGeography gps_points {get; set;}

i'm unable to use ""DbGeography"".",10110,ajcvickers,efcore
10108,Figure out testing for EF use of Microsoft.SqlServer.Types,"Testing for Microsoft.SqlServer.Types is problematic because:
* The types are not available on .NET Core
* Setting up a machine to have the correct versions of the correct types in the correct places is fragile and has traditionally causes C.I./build issues.

For now I have been using this little test app for most of my functional testing:
```C#
public class Program
{
    public static void Main()
    {
        var loggerProvider = new MyLoggerProvider();

        using (var context = new TestDbContext())
        {
            // Create UDT columns
            context.Database.EnsureDeleted();
            context.GetService<ILoggerFactory>().AddProvider(loggerProvider);
            context.Database.EnsureCreated();

            // Single save
            context.AddRange(NewFoo(0));
            context.SaveChanges();

            // Batch save
            context.AddRange(NewFoo(1), NewFoo(2));
            context.SaveChanges();
        }

        using (var context = new TestDbContext())
        {
            // Simple query
            var foos = context.Foos.OrderBy(e => e.Id).ToList();
            AssertFoo(foos[0], 0);
            AssertFoo(foos[1], 1);
            AssertFoo(foos[2], 2);

            // Equals translation works for HierarchyId but not for spatial types
            var foo = context.Foos.Single(e => e.HierarchyId.Equals(SqlHierarchyIds[1]));
            AssertFoo(foo, 1);

            // Simple prjection
            var projection = context.Foos.OrderBy(e => e.Id).Skip(1).Select(e => new {foo.Id, foo.Geography1}).First();
            Debug.Assert(projection.Geography1.STEquals(SqlGeographies[1]).IsTrue);

            // FromSql query using spatial function
            var bars = context.Bars.FromSql(""SELECT [Id], [Geography1].STDistance([Geography2]) as [Distance] From [Foos]"").OrderBy(e => e.Id).ToList();
            AssertDistance(bars[0].Distance, 0);
            AssertDistance(bars[1].Distance, 1);
            AssertDistance(bars[2].Distance, 2);

            // Manipulate and send database updates
            for (var i = 0; i < 3; i++)
            {
                foos[i].Geography1 = SqlGeographies[(i + 1) % 3];
                foos[i].Geography2 = SqlGeographies[(i + 2) % 3];
                foos[i].Geometry = SqlGeometries[(i + 1) % 3];
                foos[i].HierarchyId = SqlHierarchyIds[(i + 1) % 3];
            }
            AssertFoo(foos[0], 0, 1);
            AssertFoo(foos[1], 1, 1);
            AssertFoo(foos[2], 2, 1);

            context.SaveChanges();
        }

        using (var context = new TestDbContext())
        {
            // Query after update
            var foos = context.Foos.OrderBy(e => e.Id).ToList();
            AssertFoo(foos[0], 0, 1);
            AssertFoo(foos[1], 1, 1);
            AssertFoo(foos[2], 2, 1);
        }
    }

    private static void AssertFoo(Foo foo, int index, int offset = 0)
    {
        Debug.Assert((foo.HierarchyId == SqlHierarchyIds[(index + offset) % 3]).IsTrue);
        Debug.Assert(foo.Geometry.STEquals(SqlGeometries[(index + offset) % 3]).IsTrue);
        Debug.Assert(foo.Geography1.STEquals(SqlGeographies[(index + offset) % 3]).IsTrue);
        Debug.Assert(foo.Geography2.STEquals(SqlGeographies[(index + offset + 1) % 3]).IsTrue);
    }

    private static void AssertDistance(double distance, int index) 
        => Debug.Assert(
            Math.Abs(SqlGeographies[index].STDistance(SqlGeographies[(index + 1) % 3]).Value - distance) < 1);

    private static Foo NewFoo(int index)
        => new Foo
        {
            HierarchyId = SqlHierarchyIds[index],
            Geometry = SqlGeometries[index],
            Geography1 = SqlGeographies[index],
            Geography2 = SqlGeographies[(index + 1) % 3]
        };

    public class Bar
    {
        public int Id { get; set; }
        public double Distance { get; set; }
    }

    public class Foo
    {
        public int Id { get; set; }
        public SqlHierarchyId HierarchyId { get; set; }
        public SqlGeometry Geometry { get; set; }
        public SqlGeography Geography1 { get; set; }
        public SqlGeography Geography2 { get; set; }
    }

    public class TestDbContext : DbContext
    {
        public DbSet<Foo> Foos { get; set; }
        public DbSet<Bar> Bars { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder
                .EnableSensitiveDataLogging()
                .UseSqlServer(
                    @""Server=(localdb)\mssqllocaldb;Database=TestTypeEF;ConnectRetryCount=0"");
        }
    }

    private static readonly SqlHierarchyId[] SqlHierarchyIds =
    {
        SqlHierarchyId.Parse(""/1/1/3/""),
        SqlHierarchyId.Parse(""/1/2/3/""),
        SqlHierarchyId.Parse(""/2/1/3/"")
    };

    private static readonly SqlGeometry[] SqlGeometries =
    {
        SqlGeometry.Point(1, 2, 32768),
        SqlGeometry.Point(10, 12, 32768),
        SqlGeometry.Point(20, 22, 32768)
    };

    private static readonly SqlGeography[] SqlGeographies =
    {
        SqlGeography.Point(77, 88, 4326),
        SqlGeography.Point(7, 8, 4326),
        SqlGeography.Point(45, 21, 4326)
    };
}

public class MyLoggerProvider : ILoggerProvider
{
    public ILogger CreateLogger(string categoryName) => new MyLogger();

    public void Dispose()
    {
    }

    private class MyLogger : ILogger
    {
        public bool IsEnabled(LogLevel logLevel) => true;

        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception,
            Func<TState, Exception, string> formatter) 
            => Console.WriteLine(formatter(state, exception));

        public IDisposable BeginScope<TState>(TState state) => null;
    }
}
```","Figure out testing for EF use of Microsoft.SqlServer.Types  Testing for Microsoft.SqlServer.Types is problematic because:
* The types are not available on .NET Core
* Setting up a machine to have the correct versions of the correct types in the correct",10110,ajcvickers,efcore
10109,Better LINQ support for Microsoft.SqlServer.Types,"Methods like STDistance are not easy to translate right now because they are t-sql ""instance"" methods called like this:
```sql
SELECT [Id], [Geography1].STDistance([Geography2]) as [Distance] From [Foos]
```

Function registration and method call translation does not support this out-of-the-box, but it shouldn't be too hard to add support. Once this is done, we should consider whether to write the common translations and ship them somewhere or maybe publish them as a sample.","Better LINQ support for Microsoft.SqlServer.Types  Methods like STDistance are not easy to translate right now because they are t-sql ""instance"" methods called like this:
```sql
SELECT [Id], [Geography1].STDistance([Geography2]) as [Distance] From [Foos",10110,ajcvickers,efcore
10081,QUery: Contains(entity) on closure variable throws exception,"### Description

I have a simple query which worked fine in EF Core 1.1, but is not working anymore in EF Core 2.0. This is a blocker for our project in order to migrate to ASP.NET 2.0 / EF Core 2.0. Do you plan to release a bugfix release soon? I have seen that there are quite some issues with Includes (which is a very fundamental functionality). Therefore it would be really appreciated if you could consider relasing a bugfix version before the next bigger version 2.1 which is announced for somewhen in Q1 2018. 

### Steps to reproduce

Entities:

```C#
    public class Author
    {
        public int AuthorId { get; set; }
        public string Name { get; set; }
        public List<Blog> Blogs { get; set; }
    }

    public class Blog
    {
        public int BlogId { get; set; }
        public string Url { get; set; }
        public List<Post> Posts { get; set; }
    }

    public class Post
    {
        public int PostId { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }
        public int BlogId { get; set; }
        public Blog Blog { get; set; }
    }
```

Sample Data:

```C#
    var myBlog = new Blog { Url = ""http://blogs.msdn.com/adonet"" };
    var myFirstPost = new Post { Blog = myBlog, Title = ""Title 1"", Content = ""Hello 1"" };
    var mySecondPost = new Post { Blog = myBlog, Title = ""Title 2"", Content = ""Hello 2"" };
    var myBlogList = new List<Blog>();
    myBlogList.Add(myBlog);
    var myAuthor = new Author { Name = ""Steven"", Blogs = myBlogList };

    db.Authors.Add(myAuthor);
    db.Blogs.Add(myBlog);
    db.Posts.Add(myFirstPost);
    db.Posts.Add(mySecondPost);
    var count = db.SaveChanges();
```

Query:

```C#
    // query author
    var author = db.Authors.Include(x => x.Blogs).Where(x => x.Name.Equals(""Steven"")).Single();
    // query posts of author
    var postsOfAuthor = db.Posts.Where(x => author.Blogs.Contains(x.Blog));
    // next line....
    postsOfAuthor.ToList();
    // ...results in: Unhandled Exception: System.InvalidOperationException: No mapping to a relational type can be found for the CLR type 'Blog'

```

This was working perfectly in EF Core 1.1.

What happening is that db.Posts do not have the Blog as navigation property. Even when including Blogs like in the following line it is not working in EF Core 2.0.

```C#
var postsOfAuthor = db.Posts.Include(x => x.Blog).Where(x => author.Blogs.Contains(x.Blog));
```

```C#
Exception message: System.InvalidOperationException occurred
  HResult=0x80131509
  Message=No mapping to a relational type can be found for the CLR type 'Blog'.
  Source=Microsoft.EntityFrameworkCore.Relational
StackTrace:
   at Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(IRelationalTypeMapper typeMapper, Type clrType)
   at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(ConstantExpression constantExpression)
   at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessExpressionList[T](IReadOnlyList`1 items, Action`1 itemAction, Action`1 joinAction)
   at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessExpressionList(IReadOnlyList`1 expressions, Action`1 joinAction)
   at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIn(InExpression inExpression)
   at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GeneratePredicate(Expression predicate)
   at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(SelectExpression selectExpression)
   at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.GetRelationalCommand(IReadOnlyDictionary`2 parameters)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)
   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.<_TrackEntities>d__17`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Tests.Program.Main(String[] args) in 
```

### Further technical details
EF Core version: 2.0.0
Database Provider: Microsoft.EntityFrameworkCore.SqlServer
Operating system: Windows 10
IDE: Visual Studio Enterprise 2017, version 15.3.5","QUery: Contains(entity) on closure variable throws exception  ### Description

I have a simple query which worked fine in EF Core 1.1, but is not working anymore in EF Core 2.0. This is a blocker for our project in order to migrate to ASP.NET 2.0 / EF C",10092,smitpatel,efcore
9424,.Contains on a tuple collection doesn't work,"This works in 1.1.2.

Add this test to SimpleQueryTestBase.ResultOperators.cs:

```C#
[ConditionalFact]
public virtual void Contains_with_local_tuple_array_closure()
{
    var ids = new[] { Tuple.Create(1, 2), Tuple.Create(10248, 11) };

    AssertQuery<OrderDetail>(
        cd => cd.Where(c => ids.Contains(new Tuple<int, int>(c.OrderID, c.ProductID))), entryCount: 1);

    ids = new[] { Tuple.Create(1, 2) };

    AssertQuery<OrderDetail>(
        cd => cd.Where(c => ids.Contains(new Tuple<int, int>(c.OrderID, c.ProductID))));
}
```

>System.InvalidOperationException : No mapping to a relational type can be found for the CLR type 'Expression[]'.
	at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
	at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
	at System.Threading.Tasks.Task.Wait()
	C:\enlistments\Universe\EntityFramework\src\EFCore.Specification.Tests\Query\QueryTestBase.cs(83,0): at Microsoft.EntityFrameworkCore.Query.QueryTestBase`1.AssertQuery[TItem1](Func`2 query, Func`2 elementSorter, Action`2 elementAsserter, Boolean assertOrder, Int32 entryCount)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Specification.Tests\Query\SimpleQueryTestBase.ResultOperators.cs(678,0): at Microsoft.EntityFrameworkCore.Query.SimpleQueryTestBase`1.Contains_with_local_tuple_array_closure()
	C:\enlistments\Universe\EntityFramework\test\EFCore.SqlServer.FunctionalTests\Query\SimpleQuerySqlServerTest.ResultOperators.cs(13,0): at Microsoft.EntityFrameworkCore.Query.SimpleQuerySqlServerTest.Contains_with_local_tuple_array_closure()
	----- Inner Stack Trace -----
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Storage\RelationalTypeMapperExtensions.cs(80,0): at Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(IRelationalTypeMapper typeMapper, Type clrType)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Storage\RelationalTypeMapperExtensions.cs(27,0): at Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMappingForValue(IRelationalTypeMapper typeMapper, Object value)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Sql\DefaultQuerySqlGenerator.cs(589,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GetTypeMapping(Object value)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Sql\DefaultQuerySqlGenerator.cs(1448,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(ConstantExpression constantExpression)
	at System.Linq.Expressions.ConstantExpression.Accept(ExpressionVisitor visitor)
	at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Sql\DefaultQuerySqlGenerator.cs(725,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIn(InExpression inExpression)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Expressions\InExpression.cs(106,0): at Microsoft.EntityFrameworkCore.Query.Expressions.InExpression.Accept(ExpressionVisitor visitor)
	at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Sql\DefaultQuerySqlGenerator.cs(359,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GeneratePredicate(Expression predicate)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Sql\DefaultQuerySqlGenerator.cs(236,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(SelectExpression selectExpression)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Expressions\SelectExpression.cs(1041,0): at Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Accept(ExpressionVisitor visitor)
	at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Sql\DefaultQuerySqlGenerator.cs(130,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(IReadOnlyDictionary`2 parameterValues)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Internal\ShaperCommandContext.cs(118,0): at Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.GetRelationalCommand(IReadOnlyDictionary`2 parameters)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Internal\QueryingEnumerable.cs(131,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)
	C:\enlistments\Universe\EntityFramework\src\EFCore\Extensions\ExecutionStrategyExtensions.cs(337,0): at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.<>c__DisplayClass12_0`2.<Execute>b__0(DbContext c, TState s)
	C:\enlistments\Universe\EntityFramework\src\EFCore.SqlServer\Storage\Internal\SqlServerExecutionStrategy.cs(39,0): at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
	C:\enlistments\Universe\EntityFramework\src\EFCore\Extensions\ExecutionStrategyExtensions.cs(335,0): at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, Func`2 operation, Func`2 verifySucceeded, TState state)
	C:\enlistments\Universe\EntityFramework\src\EFCore\Extensions\ExecutionStrategyExtensions.cs(285,0): at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func`2 operation)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Relational\Query\Internal\QueryingEnumerable.cs(75,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
	C:\enlistments\Universe\EntityFramework\src\EFCore\Query\Internal\LinqOperatorProvider.cs(173,0): at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.<_TrackEntities>d__17`2.MoveNext()
	C:\enlistments\Universe\EntityFramework\src\EFCore\Query\Internal\LinqOperatorProvider.cs(137,0): at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
	at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
	at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
	C:\enlistments\Universe\EntityFramework\src\EFCore.Specification.Tests\TestUtilities\QueryAsserter.cs(333,0): at Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserter`1.<AssertQuery>d__18`1.MoveNext()",".Contains on a tuple collection doesn't work  This works in 1.1.2.

Add this test to SimpleQueryTestBase.ResultOperators.cs:

```C#
[ConditionalFact]
public virtual void Contains_with_local_tuple_array_closure()
{
    var ids = new[] { Tuple.Creat",10092,smitpatel,efcore
242,Support for custom type mapping and data store to CLR type conversions,"There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are supported. E.g.:
  -  `char` can map to the database exactly as a `string` of size 1 (see #8656) 
  -  `byte` can map to the database exactly the same as a `byte[]` 
  - signed or unsigned small integers can fit in the nearest wider signed or unsigned integer
- [x] Allow providers to supply their own additional type mappings for types they don't support, e.g. if a database engine doesn't have native support for bool, it can decide to use a small integer representation
- [x] Allow specific well known scenarios that are commonly demanded, like mapping enum types to strings
- [ ] Allow for conversions to be performed on the server (vs. only on the client) for cases in which there isn't a viable CLR representation for the server type - see #10434 and #10861 
- [x] Allow for user provided conversions 

They all probably require extending the reach of the type mapper to be able to participate of the generation of:
- [x] Parameters
- [x] Expressions for value access in materialization
- [ ] Expressions for equality and inequality comparisons - see #10265
   1. Equality on the server should be equivalent to equality on the client as long as the conversion is deterministic and bijective. 
- [ ] Order comparisons and sorting - see #10265
   1. Comparisons and sorting are equivalent as long as the conversion is a monotonic function (although reversed if it is decreasing)
   2. For non order-preserving conversions, we may need to differentiate the scenarios in which we introduce sorting just to get the order of two or more results to be deterministic so we can zip them together, vs. explicit ordering requested by user, which we may need to evaluate on the client after the conversion is performed.
- [ ] Operator and function translation - see #10434 


","Support for custom type mapping and data store to CLR type conversions  There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are s",10088,ajcvickers,efcore
1381,Enums Stored as Strings,"Will EF7 have optional (or default) support for storing the enum string values instead of the numeric values in the database?","Enums Stored as Strings  Will EF7 have optional (or default) support for storing the enum string values instead of the numeric values in the database?",10088,ajcvickers,efcore
242,Support for custom type mapping and data store to CLR type conversions,"There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are supported. E.g.:
  -  `char` can map to the database exactly as a `string` of size 1 (see #8656) 
  -  `byte` can map to the database exactly the same as a `byte[]` 
  - signed or unsigned small integers can fit in the nearest wider signed or unsigned integer
- [x] Allow providers to supply their own additional type mappings for types they don't support, e.g. if a database engine doesn't have native support for bool, it can decide to use a small integer representation
- [x] Allow specific well known scenarios that are commonly demanded, like mapping enum types to strings
- [ ] Allow for conversions to be performed on the server (vs. only on the client) for cases in which there isn't a viable CLR representation for the server type - see #10434 and #10861 
- [x] Allow for user provided conversions 

They all probably require extending the reach of the type mapper to be able to participate of the generation of:
- [x] Parameters
- [x] Expressions for value access in materialization
- [ ] Expressions for equality and inequality comparisons - see #10265
   1. Equality on the server should be equivalent to equality on the client as long as the conversion is deterministic and bijective. 
- [ ] Order comparisons and sorting - see #10265
   1. Comparisons and sorting are equivalent as long as the conversion is a monotonic function (although reversed if it is decreasing)
   2. For non order-preserving conversions, we may need to differentiate the scenarios in which we introduce sorting just to get the order of two or more results to be deterministic so we can zip them together, vs. explicit ordering requested by user, which we may need to evaluate on the client after the conversion is performed.
- [ ] Operator and function translation - see #10434 


","Support for custom type mapping and data store to CLR type conversions  There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are s",10079,ajcvickers,efcore
6480,"Support mapping ulong, uint, ushort, sbyte, and char on SQL Server","I have the following enum:

```
    [Flags]
    public enum Factor : long
    {
        Parent = ( 1 >> 0 ),
        PastSupporter = ( 1 >> 1 ),
    }

```

When I utilize the enum in an entity class, dotnet ef migrations add has a problem:

> dotnet : System.InvalidOperationException: The property 'Voter.Factors' is of type 'Factor' which is not supported by current database provider. Either change the 
> property CLR type or manually configure the database type for it.
> At line:1 char:1
> - dotnet ef migrations add SimplifyContactsFactors
> - ```
>   ```
>   - CategoryInfo          : NotSpecified: (System.InvalidO...se type for it.:String) [], RemoteException
>   - FullyQualifiedErrorId : NativeCommandError
>   
>   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.Apply(InternalModelBuilder modelBuilder)
>   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnModelBuilt(InternalModelBuilder modelBuilder)
>   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
>   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
>   
>   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()
>   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
>   
>   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()
>   
>   at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)
>   
>   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)
>   
>   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)
>   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)
>   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)
>   
>   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
>   
>   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)
>   
>   at Microsoft.EntityFrameworkCore.Design.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)
>   
>   at Microsoft.EntityFrameworkCore.Tools.Cli.MigrationsAddCommand.Execute(CommonOptions commonOptions, String name, String outputDir, String context, String 
>   environment, Action`1 reporter)
>   
>   at Microsoft.EntityFrameworkCore.Tools.Cli.MigrationsAddCommand.<>c__DisplayClass0_0.<Configure>b__0()
>   at Microsoft.Extensions.CommandLineUtils.CommandLineApplication.Execute(String[] args)
>   at Microsoft.EntityFrameworkCore.Tools.Cli.Program.Main(String[] args)
> 
> The property 'Voter.Factors' is of type 'Factor' which is not supported by current database provider. Either change the property CLR type or manually configure the 
> database type for it.

By experimentation I've determined that it's the unsigned portion of the spec that's causing a problem (i.e., long works just fine).

Are unsigneds not supported? I ask because I'm looking to have as large a bitfield as I can to store options.","Support mapping ulong, uint, ushort, sbyte, and char on SQL Server  I have the following enum:

```
    [Flags]
    public enum Factor : long
    {
        Parent = ( 1 >> 0 ),
        PastSupporter = ( 1 >> 1 ),
    }

```

When I utilize the",10079,ajcvickers,efcore
9711,"Relational: Investigate OracleRelationalCommandBuilderFactory ""hacks"" in Oracle sample",Some ad hoc type mapping was required in OracleRelationalCommandBuilderFactory. We should make corresponding improvements to Relational/Core to remove the need for these changes.,"Relational: Investigate OracleRelationalCommandBuilderFactory ""hacks"" in Oracle sample  Some ad hoc type mapping was required in OracleRelationalCommandBuilderFactory. We should make corresponding improvements to Relational/Core to remove the need for the",10076,ajcvickers,efcore
242,Support for custom type mapping and data store to CLR type conversions,"There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are supported. E.g.:
  -  `char` can map to the database exactly as a `string` of size 1 (see #8656) 
  -  `byte` can map to the database exactly the same as a `byte[]` 
  - signed or unsigned small integers can fit in the nearest wider signed or unsigned integer
- [x] Allow providers to supply their own additional type mappings for types they don't support, e.g. if a database engine doesn't have native support for bool, it can decide to use a small integer representation
- [x] Allow specific well known scenarios that are commonly demanded, like mapping enum types to strings
- [ ] Allow for conversions to be performed on the server (vs. only on the client) for cases in which there isn't a viable CLR representation for the server type - see #10434 and #10861 
- [x] Allow for user provided conversions 

They all probably require extending the reach of the type mapper to be able to participate of the generation of:
- [x] Parameters
- [x] Expressions for value access in materialization
- [ ] Expressions for equality and inequality comparisons - see #10265
   1. Equality on the server should be equivalent to equality on the client as long as the conversion is deterministic and bijective. 
- [ ] Order comparisons and sorting - see #10265
   1. Comparisons and sorting are equivalent as long as the conversion is a monotonic function (although reversed if it is decreasing)
   2. For non order-preserving conversions, we may need to differentiate the scenarios in which we introduce sorting just to get the order of two or more results to be deterministic so we can zip them together, vs. explicit ordering requested by user, which we may need to evaluate on the client after the conversion is performed.
- [ ] Operator and function translation - see #10434 


","Support for custom type mapping and data store to CLR type conversions  There is a continuum of scenarios that can be supported here:

- [x] Allow for simple hard coded conversions between types that are related in a well-know manner to types that are s",10076,ajcvickers,efcore
6196,SQL Server RevEng: Honor -Schemas when scaffolding sequences,"The SqlServer sequence scaffolding code doesn't seem to take the table selection set into account when scaffolding sequences: https://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.EntityFrameworkCore.SqlServer.Design/Internal/SqlServerDatabaseModelFactory.cs#L186

The result is that when the user runs `dotnet ef dbcontext scaffold` with `--schema`, their scaffolded context will include sequences from schemas other than the requested one.

Opened after fixing the same issue for Npgsql: #77",SQL Server RevEng: Honor -Schemas when scaffolding sequences  The SqlServer sequence scaffolding code doesn't seem to take the table selection set into account when scaffolding sequences: https://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.En,10051,smitpatel,efcore
9473,RevEng: SqlServer: Type aliasing ignores type facets of aliased type,"Our code to read information about type aliases does not read facets information for types so for alias like this `CREATE TYPE dbo.TestTypeAlias FROM nvarchar(max);`, we would get underlying type as `nvarchar` instead of `nvarchar(max)` which would throw later. The information is available in metadata, we need to update our SQL to parse the information and apply similar processing to current type processing to store actual type for alias.","RevEng: SqlServer: Type aliasing ignores type facets of aliased type  Our code to read information about type aliases does not read facets information for types so for alias like this `CREATE TYPE dbo.TestTypeAlias FROM nvarchar(max);`, we would get under",10051,smitpatel,efcore
9526,"RevEng: decimal/numeric(38,5) is scaffolded incorrectly","```
CREATE TABLE [dbo].[INSTOREITEMTRANSFER](
[INSTOREITEMTRANSFERID] char NOT NULL,
[INBINIDFROM] char NOT NULL,
[INBINIDTO] char NOT NULL,
[TRANSFERQUANTITY] [numeric](38, 5) NOT NULL,
[ITEMID] char NOT NULL,
CONSTRAINT [PK_INStoreItemTransfer] PRIMARY KEY CLUSTERED
(
[INSTOREITEMTRANSFERID] ASC
))
```

Generates
```

                entity.Property(e => e.Transferquantity)
                    .HasColumnName(""TRANSFERQUANTITY"")
                    .HasColumnType(""numeric(, 5)"");
```
😞","RevEng: decimal/numeric(38,5) is scaffolded incorrectly  ```
CREATE TABLE [dbo].[INSTOREITEMTRANSFER](
[INSTOREITEMTRANSFERID] char NOT NULL,
[INBINIDFROM] char NOT NULL,
[INBINIDTO] char NOT NULL,
[TRANSFERQUANTITY] [numeric](38, 5) NOT NULL,
[ITEM",10051,smitpatel,efcore
9568,RevEng: SqlServer: Use correct scripts and restrictive queries to fetch database model metadata,"The SQL being used to fetch metadata in `SqlServerDatabaseModelFactory` haven't been much updated since initial release.
 - At present, it fetch all metadata from database even for the tables/schemas we don't need. 
 - Further we are finding multiple cases of their inaccuracies lately.

We should redesign `SqlServerDatabaseModelFactory` (just the way we did with `SqliteDatabaseModelFactory`) and make it robust enough to avoid bugs.

Bugs to verify when this is fixed
https://github.com/aspnet/EntityFrameworkCore/issues/9530
https://github.com/aspnet/EntityFrameworkCore/issues/9526
https://github.com/aspnet/EntityFrameworkCore/issues/9473

This work would allow us to implement https://github.com/aspnet/EntityFrameworkCore/issues/1667 in future when #1862 is ready.","RevEng: SqlServer: Use correct scripts and restrictive queries to fetch database model metadata  The SQL being used to fetch metadata in `SqlServerDatabaseModelFactory` haven't been much updated since initial release.
 - At present, it fetch all metadata",10051,smitpatel,efcore
10034,RevEng: SqlServer Sequences can use aliased type,"","RevEng: SqlServer Sequences can use aliased type  ",10051,smitpatel,efcore
9277,Get output parameter value of a stored procedure using EF Core FromSql(...) is always null.,"Describe what is not working as expected.

Store procedure output parameter is not working as expected. The output value is always null.
I have an statement like this. I've removed other parameters except this `OUTPUT` param to pointing out the issue. The records are came but the the value of this `OUTPUT` parameter is null without the exception. Executing the proc in SSMS works just fine but with this `FromSql(...)` isn't doing anything for output parameter.

```sql
-- other param are working as expected but the OUTPUT is not so i hide them.

@todoCounts VARCHAR(MAX) OUTPUT
```
```c#
var items = _context.Set<T>().FromSql(""Sp_Todo @todoCounts OUTPUT"", 
 new SqlParameter(""@todoCounts"", SqlDbType.VarChar)
 { Direction = ParameterDirection.Output}).ToList() // no luck
```
If i add this too, then the output value coming but this is not the correct idea here. I am not seeing any exceptions. 
```c#
  _context.Database.ExecuteSqlCommand(""Sp_Todo @todoCounts OUTPUT"", 
 new SqlParameter(""@todoCounts"", SqlDbType.VarChar)
 { Direction = ParameterDirection.Output});
```


If you are seeing an exception, include the full exceptions details (message and stack trace).

```
none
```

### Steps to reproduce

- Create a store procedure with output parameter.

```sql
 @todoCounts VARCHAR(MAX) OUTPUT
```

- Execute the StoreProc like this.

```c#
// records retrieved except OUTPUT parameter. 
context.set<MyModel>().FromSql(""Sp_Todo @todoCounts OUTPUT"", 
 new SqlParameter(""@todoCounts"", SqlDbType.VarChar)
 { Direction = ParameterDirection.Output}).ToList() 

```

### Further technical details
EF Core version: `1.1.2`
Database Provider: `1.1.2`
Operating system: Windows 10
IDE:  Visual Studio 2017 `15.2(2643.16) release`","Get output parameter value of a stored procedure using EF Core FromSql(...) is always null.   Describe what is not working as expected.

Store procedure output parameter is not working as expected. The output value is always null.
I have an statement l",9781,smitpatel,efcore
9309,Query: Output parameter in FromSql is always null,"This issue is to track porting of #9277 for patch.

Impact: Using `FromSql` with out parameters on SqlServer will never return value of out parameter. All such scenarios are broken.
Work-around:None
","Query: Output parameter in FromSql is always null  This issue is to track porting of #9277 for patch.

Impact: Using `FromSql` with out parameters on SqlServer will never return value of out parameter. All such scenarios are broken.
Work-around:None
",9781,smitpatel,efcore
9742,Query: Navigation rewrite throws null check on navigation,"```c#
        [Theory]
        [InlineData(false)]
        [InlineData(true)]
        public virtual void Include_collection_with_multiple_conditional_order_by(bool useString)
        {
            using (var context = CreateContext())
            {
                var orders
                    = useString
                        ? context.Orders
                            .Include(""OrderDetails"")
                            .OrderBy(o => o.OrderID > 0)
                            .ThenBy(o => o.Customer != null ? o.Customer.City : String.Empty)
                            .Take(5)
                            .ToList()
                        : context.Orders
                            .Include(c => c.OrderDetails)
                            .OrderBy(o => o.OrderID > 0)
                            .ThenBy(o => o.Customer != null ? o.Customer.City : String.Empty)
                            .Take(5)
                            .ToList();

                foreach (var order in orders)
                {
                    CheckIsLoaded(
                        context,
                        order,
                        orderDetailsLoaded: true,
                        productLoaded: false,
                        customerLoaded: false,
                        ordersLoaded: false);
                }
            }
        }
```
```
Output from Microsoft.EntityFrameworkCore.Query.IncludeSqlServerTest.Include_collection_with_multiple_conditional_order_by(useString: False):
  Entity Framework Core 2.1.0-preview1 initialized 'NorthwindRelationalContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: SensitiveDataLoggingEnabled CommandTimeout=600
  
  Compiling query model: 
  '(from Order o in 
      (from Order c in DbSet<Order>
      select [c]).Include(""OrderDetails"")
  order by [o].OrderID > 0 asc, [o].Customer != null ? [o].Customer.City : __Empty_0 asc
  select [o]).Take(__p_1)'
  
  Including navigation: '[c].OrderDetails'
Test 'Microsoft.EntityFrameworkCore.Query.IncludeSqlServerTest.Include_collection_with_multiple_conditional_order_by(useString: True)' failed:
	System.InvalidOperationException : The operands for operator 'NotEqual' do not match the parameters of method 'op_Inequality'.
	at System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(ExpressionType binaryType, Expression left, Expression right, MethodInfo method, Boolean liftToNull)
	at System.Linq.Expressions.Expression.NotEqual(Expression left, Expression right, Boolean liftToNull, MethodInfo method)
	at System.Linq.Expressions.Expression.MakeBinary(ExpressionType binaryType, Expression left, Expression right, Boolean liftToNull, MethodInfo method, LambdaExpression conversion)
	at System.Linq.Expressions.Expression.MakeBinary(ExpressionType binaryType, Expression left, Expression right, Boolean liftToNull, MethodInfo method)
	D:\code\EntityFrameworkCore\src\EFCore\Query\ExpressionVisitors\Internal\NavigationRewritingExpressionVisitor.cs(372,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitBinary(BinaryExpression node)
	at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)
	at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
	D:\code\EntityFrameworkCore\src\EFCore\Query\ExpressionVisitors\Internal\NavigationRewritingExpressionVisitor.cs(381,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitConditional(ConditionalExpression node)
	at System.Linq.Expressions.ConditionalExpression.Accept(ExpressionVisitor visitor)
	at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
	at Remotion.Linq.Clauses.Ordering.TransformExpressions(Func`2 transformation)
	at Remotion.Linq.Clauses.OrderByClause.TransformExpressions(Func`2 transformation)
	D:\code\EntityFrameworkCore\src\EFCore\Query\ExpressionVisitors\Internal\ExpressionTransformingQueryModelVisitor.cs(76,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitOrderByClause(OrderByClause orderByClause, QueryModel queryModel, Int32 index)
	D:\code\EntityFrameworkCore\src\EFCore\Query\ExpressionVisitors\Internal\NavigationRewritingExpressionVisitor.cs(1439,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.NavigationRewritingQueryModelVisitor.VisitOrderByClause(OrderByClause orderByClause, QueryModel queryModel, Int32 index)
	at Remotion.Linq.Clauses.OrderByClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel, Int32 index)
	at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)
	at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)
	D:\code\EntityFrameworkCore\src\EFCore\Query\ExpressionVisitors\Internal\NavigationRewritingExpressionVisitor.cs(238,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.Rewrite(QueryModel queryModel, QueryModel parentQueryModel)
	D:\code\EntityFrameworkCore\src\EFCore\Query\EntityQueryModelVisitor.cs(288,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)
	D:\code\EntityFrameworkCore\src\EFCore.Relational\Query\RelationalQueryModelVisitor.cs(1161,0): at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)
	D:\code\EntityFrameworkCore\src\EFCore\Query\EntityQueryModelVisitor.cs(165,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)
	D:\code\EntityFrameworkCore\src\EFCore\Storage\Database.cs(70,0): at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](QueryModel queryModel)
	--- End of stack trace from previous location where exception was thrown ---
	at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
	D:\code\EntityFrameworkCore\src\EFCore\Query\Internal\QueryCompiler.cs(164,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)
	D:\code\EntityFrameworkCore\src\EFCore\Query\Internal\QueryCompiler.cs(103,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_0`1.<Execute>b__0()
	D:\code\EntityFrameworkCore\src\EFCore\Query\Internal\CompiledQueryCache.cs(69,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)
	D:\code\EntityFrameworkCore\src\EFCore\Query\Internal\CompiledQueryCache.cs(44,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
	D:\code\EntityFrameworkCore\src\EFCore\Query\Internal\QueryCompiler.cs(99,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
	D:\code\EntityFrameworkCore\src\EFCore\Query\Internal\EntityQueryProvider.cs(62,0): at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
	at Remotion.Linq.QueryableBase`1.GetEnumerator()
	at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
	at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
	D:\code\EntityFrameworkCore\src\EFCore.Specification.Tests\Query\IncludeTestBase.cs(3109,0): at Microsoft.EntityFrameworkCore.Query.IncludeTestBase`1.Include_collection_with_multiple_conditional_order_by(Boolean useString)
	D:\code\EntityFrameworkCore\test\EFCore.SqlServer.FunctionalTests\Query\IncludeSqlServerTest.cs(1429,0): at Microsoft.EntityFrameworkCore.Query.IncludeSqlServerTest.Include_collection_with_multiple_conditional_order_by(Boolean useString)
```","Query: Navigation rewrite throws null check on navigation  ```c#
        [Theory]
        [InlineData(false)]
        [InlineData(true)]
        public virtual void Include_collection_with_multiple_conditional_order_by(bool useString)
        {",9743,smitpatel,efcore
9735,A column has been specified more than once in the order by list (MSSQL),"var res =
                ctx.B.Include(b => b.Cs).
                OrderBy(b => b.A.AId > 0).ThenBy(b => b.D != null ? b.D.Name : string.Empty).
                Take(2).ToList();

Generates the invalid SQL:
```SQL
SELECT [b.Cs].[CId], [b.Cs].[BId], [b.Cs].[Name]
FROM [C] AS [b.Cs]
INNER JOIN (
    SELECT DISTINCT [t].*
    FROM (
        SELECT TOP(@__p_1) [b0].[BId], CASE
            WHEN [b0].[AId] > 0
            THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)
        END AS [c], CASE
            WHEN [b0].[DId] IS NOT NULL
            THEN [b.D0].[Name] ELSE @__Empty_0
        END AS [c0], [b0].[AId], [b0].[DId], [b.D0].[Name]
        FROM [B] AS [b0]
        LEFT JOIN [D] AS [b.D0] ON [b0].[DId] = [b.D0].[DId]
        ORDER BY CASE
            WHEN [b0].[AId] > 0
            THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)
        END, [c], [b0].[BId]
    ) AS [t]
) AS [t0] ON [b.Cs].[BId] = [t0].[BId]
ORDER BY [t0].[c], [t0].[c0], [t0].[BId]
```

The inner order by uses the wrong alias. Should be
        ORDER BY CASE
            WHEN [b0].[AId] > 0
            THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)
        END, [c0], [b0].[BId]

```c#
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;

namespace EFDebug
{
    class Program
    {
        static void Main(string[] args)
        {
            var loggerFactory = new LoggerFactory();
            loggerFactory.AddDebug();
            var connection = @"""";
            var ctx = new MyContext(new DbContextOptionsBuilder().UseSqlServer(connection).UseLoggerFactory(loggerFactory).Options);
            var res =
                ctx.B.Include(b => b.Cs).
                OrderBy(b => b.A.AId > 0).ThenBy(b => b.D != null ? b.D.Name : string.Empty).
                Take(2).ToList();
        }
    }
    public class A
    {
        public int AId { get; set; }
        public string Name { get; set; }
    }

    public class B
    {
        public int BId { get; set; }
        public string Name { get; set; }


        public int AId { get; set; }
        public virtual A A { get; set; }

        public virtual List<C> Cs { get; set; }
        public virtual D D { get; set; }
        public int? DId { get; set; }

        //This works
        //public int DId { get; set; }
    }

    public class C
    {
        public int CId { get; set; }
        public string Name { get; set; }
        public int BId { get; set; }
        public virtual B B { get; set; }
    }

    public class D
    {
        public int DId { get; set; }
        public string Name { get; set; }
    }

    public class MyContext : DbContext
    {
        public MyContext(DbContextOptions options)
            : base(options)
        {

        }        
        public DbSet<B> B { get; set; }        
    }


//Create Table A(
//    AId int identity primary key,
//    name varchar(255)
//)
//create table D(
//        DId int identity primary key,
//        name varchar(255),
//)
//create Table B(
//    BId int identity primary key,
//    name varchar(255),
//	AId int not null references A(Aid),
//	DId int references D(Did),
//)
//create table C(
//        CId int identity primary key,
//        name varchar(255),
//		BId int references B(Bid)
//)
//insert into A(name) values('An A');
//    insert into B(name, AId) values('A B',1);
}

```
The exception is not thrown when making B.DId not nullable

### Further technical details
EF Core 2 and 2.1.0-preview1-26938
Windows, core 2.0 and .net 4.7","A column has been specified more than once in the order by list (MSSQL)          var res =
                ctx.B.Include(b => b.Cs).
                OrderBy(b => b.A.AId > 0).ThenBy(b => b.D != null ? b.D.Name : string.Empty).
                Take(2).T",9743,smitpatel,efcore
8499,Move and rename IDbContextFactory,"We've talked about this recently. I'm submitting an issue for us to make a decision.

The two points of dislike are:
1. It doesn't convey anything about design time
2. It's tucked away in the Infrastructure namespace","Move and rename IDbContextFactory  We've talked about this recently. I'm submitting an issue for us to make a decision.

The two points of dislike are:
1. It doesn't convey anything about design time
2. It's tucked away in the Infrastructure namespace",8520,bricelam,efcore
8553,API Review: Make DbContextFactoryOptions obsolete,"Make obsolete as error anything that is used by IDbContextFactory that will not longer work in 2.0. This will result in compile time errors with a message indicating what to do, instead of just an error that the types are missing.","API Review: Make DbContextFactoryOptions obsolete  Make obsolete as error anything that is used by IDbContextFactory that will not longer work in 2.0. This will result in compile time errors with a message indicating what to do, instead of just an error t",8520,bricelam,efcore
5350,modelBuilder.Entity<AnEntity>(e => { }) can cause StackOverflowException in some cases,"I use EntityFrameworkCore version: 1.0.0-rc3-20831, .Net Framework: 4.6, AspNet.Mvc: 5.2.3

I cannot provide certain steps to reproduce. But can point at some conditions. I have about 100 entities. And executing this code causes StackOverflowException (empty stack trace):

`modelBuilder.Entity<AnyEntity>(entity => { /* any code or empty */ })`

This bug is always reproducible on IIS Express, but on Local IIS is reproducible only in rare cases.

I found out that this bug appears only when I uncomment some navigation property in entity, but I cannot track which one nav prop causes this bug (because have large amount of entities).

EXP: If something wrong with my model (maybe some circular referencing?), could you provide more clear exception message. Without this message I can spend much time looking for 'what is wrong with my model'

EXP: Why this is reproducible only with some conditions (or not always). Seems as a bug in model builder algorithm.

By the way: in my previous version of EFCore (January 2016 (don't remember some rc2)) this bug did not exist.

Thanks in advance.","modelBuilder.Entity<AnEntity>(e => { }) can cause StackOverflowException in some cases  I use EntityFrameworkCore version: 1.0.0-rc3-20831, .Net Framework: 4.6, AspNet.Mvc: 5.2.3

I cannot provide certain steps to reproduce. But can point at some condit",5691,AndriySvyryd,efcore
4843,ModelBuilder: Shadow property introduction doesn't work without calling Property<T>(),"``` C#
class TestClass
{
    public string Name { get; set; }
}

class Test
{
    public int Id { get; set; }
    public TestClass Class { get; set; }
}
```

``` C#
modelBuilder.Entity<TestClass>(
    x =>
    {
        // NOTE: HasKey fails without this
        x.Property<string>(""AssemblyName"");

        x.HasKey(""AssemblyName"", ""Name"");
    });
modelBuilder.Entity<Test>(
    x =>
    {
        // NOTE: HasForeignKey fails without this
        x.Property<string>(""AssemblyName"");

        x.HasOne(t => t.Class).WithMany(c => c.Tests)
            .HasForeignKey(""AssemblyName"", ""ClassName"");
    });
```","ModelBuilder: Shadow property introduction doesn't work without calling Property<T>()  ``` C#
class TestClass
{
    public string Name { get; set; }
}

class Test
{
    public int Id { get; set; }
    public TestClass Class { get; set; }
}
```",5691,AndriySvyryd,efcore
5176,Need external dependencies to support .NET Standard in order to remove the requirement for imports in project.json,"Two of EF Core's dependencies, Remotion.Linq and Ix-Async currently use pre-existing portable targets to support multiple platforms. Until these packages add support for .NET Standard, libraries or applications using EF Core will need to specify additional import attributes in project.json. 

```
    Package Ix-Async 1.2.5 is not compatible with netcoreapp1.0 (.NETCoreApp,Version=v1.0). 
    Package Ix-Async 1.2.5 supports:
      - net40 (.NETFramework,Version=v4.0)
      - net45 (.NETFramework,Version=v4.5)
      - portable-net45+win8+wp8 (.NETPortable,Version=v0.0,Profile=Profile78)
    Package Remotion.Linq 2.0.2 is not compatible with netcoreapp1.0 (.NETCoreApp,Version=v1.0). 
    Package Remotion.Linq 2.0.2 supports:
      - net35 (.NETFramework,Version=v3.5)
      - net40 (.NETFramework,Version=v4.0)
      - net45 (.NETFramework,Version=v4.5)
      - portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)
```

These two issues track the necessary changes in our dependencies:

Reactive-Extensions/Rx.NET#174
https://www.re-motion.org/jira/browse/RMLNQ-98

Cc: @natemcmaster @rowanmiller ","Need external dependencies to support .NET Standard in order to remove the requirement for imports in project.json   Two of EF Core's dependencies, Remotion.Linq and Ix-Async currently use pre-existing portable targets to support multiple platforms. Until",5689,natemcmaster,efcore
2192,Many levels of AggregateException (requires update of ix-async),"[As per SO question here](http://stackoverflow.com/q/30233542/592111)

 I made a simple mistake with some linq (used Skip and forgot to include my OrderBy clause).

The exception that was thrown by this included a number of nested aggregate exceptions.

The code that generates (and catches) the exception is:

```
int[] newIds;
try
{
    newIds = await db.Products
        .Where(p => p.PortalId == portalId)
        .Skip(ids.ProductIds.Count) //Skip the rows already read
        .Take(takeTotal) //get the next block
        .Select(p => p.ProductId)
        .ToArrayAsync();
}
catch (AggregateException ex)
{
    Console.WriteLine(ex.Message);
    newIds = new int[] { };
}
```

However the aggregate exception that I got from this was (this is dumped to the immediate window from the catch block shown above):

> System.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.InvalidOperationException: A query containing the Skip operator must include at least one OrderBy operation. at Microsoft.Data.Entity.Relational.Query.Sql.DefaultSqlQueryGenerator.GenerateLimitOffset(SelectExpression selectExpression) at Microsoft.Data.Entity.Relational.Query.Sql.DefaultSqlQueryGenerator.VisitSelectExpression(SelectExpression selectExpression) at Microsoft.Data.Entity.Relational.Query.Expressions.SelectExpression.Accept(ExpressionTreeVisitor visitor) at Microsoft.Data.Entity.Relational.Query.Sql.DefaultSqlQueryGenerator.GenerateSql(SelectExpression selectExpression, IDictionary`2 parameterValues) etc etc

The code was originally running in a WebApi controller with a bunch of levels of async-await, so I thought that the AggregateException layers might be a symptom of that, however I've also tested with a console app just running the EF code, and I still get the nested exceptions. I assume that the levels of exception are due to layers of async-await within the EF code itself. 

As the the comments on the SO question, it can be worked around by using `GetBaseException()`, however I mainly wanted to query wether it was intentional that the exception exiting from the EF code would look like this or whether you'd look to wrap it/flatten it for more pleasant public consumption.","Many levels of AggregateException (requires update of ix-async)  [As per SO question here](http://stackoverflow.com/q/30233542/592111)

 I made a simple mistake with some linq (used Skip and forgot to include my OrderBy clause).

The exception that wa",5689,natemcmaster,efcore
5311,CLI Commands: support loading startup from a separate project,"Add support for supplying a project as a parameter in `--startup-project` that is different than the current project.

This is explicitly disabled in code. See https://github.com/aspnet/EntityFramework/issues/4577#issuecomment-217496222 for background and https://github.com/aspnet/EntityFramework/pull/5312.","CLI Commands: support loading startup from a separate project   Add support for supplying a project as a parameter in `--startup-project` that is different than the current project.

This is explicitly disabled in code. See https://github.com/aspnet/Ent",5680,natemcmaster,efcore
5320,Tools: Support .NET Core Class Library projects,"Add support for running ""dotnet ef"" on a .NET Standard and desktop .NET class library project.

This is blocked by https://github.com/dotnet/cli/issues/2645 ~~and/or https://github.com/dotnet/cli/issues/4005 (depending on our implementation approach)~~.
### Short explanation

If you cannot do `dotnet run`, you also cannot use `dotnet ef` on your project. 
### More explanation

.NET Core, unlike .NET Framework, does not have a globally installed framework. All .NET Core apps need to reference an app framework (e.g. Microsoft.NETCore.App) in order to run. .NET Core class library projects are built without a framework, so dotnet-ef cannot run on these projects.
### Workarounds

See https://docs.efproject.net/en/latest/miscellaneous/cli/dotnet.html#targeting-class-library-projects-is-not-supported for workarounds.","Tools: Support .NET Core Class Library projects  Add support for running ""dotnet ef"" on a .NET Standard and desktop .NET class library project.

This is blocked by https://github.com/dotnet/cli/issues/2645 ~~and/or https://github.com/dotnet/cli/issues/4",5680,natemcmaster,efcore
5188,CLI Commands: usability improvements,"Some ideas for improving the usability of dotnet ef.
- [x] `dotnet ef database update` doesn't list the migrations being applied/reverted
- [ ] Don't require building to get output of `--help`. We can show help dialog without dispatching to inside-man.
- [x] Support `--json` on all subcommands
- [ ] Allow top-level arguments in any order. E.g. currently `dotnet ef dbcontext list --no-build` throws, but `dotnet ef --no-build dbcontext list` works. ~~Part of this is just the way that [Microsoft.Extensions.CommandLineUtils](https://github.com/aspnet/Common/tree/dev/src/Microsoft.Extensions.CommandLineUtils) works.~~ https://github.com/aspnet/Common/pull/131. We still can't completely do this with the way we invoke ef.exe from dotnet-ef.dll.
- [x] ~~Depending on the outcome of https://github.com/dotnet/cli/issues/2514, we may be able to remove ""inside-man"" dispatch for RTM.~~ NVM. We've pivoted away from ProjectDependencyCommandFactory to our own thing.
- [x] ~~Depending on the resolution to https://github.com/dotnet/cli/issues/2645, we may need to change Ms.EfCore.Tools to also target class libraries. (Support this by cross-compiling the library to netstandard1.5)~~ tracked here: https://github.com/aspnet/EntityFramework/issues/5320
- [x] ~~Help dialog should show options top-level args (`--framework`) even when listing args for subcommands.~~ Fixed in CommandLineUtils.","CLI Commands: usability improvements  Some ideas for improving the usability of dotnet ef.
- [x] `dotnet ef database update` doesn't list the migrations being applied/reverted
- [ ] Don't require building to get output of `--help`. We can show help dial",5680,natemcmaster,efcore
4739,UseRowNumberPaging causes NRE in complex queries,"Repro:
ComplexNavigationsQuerySqlServerTest.Include_with_groupjoin_skip_and_take

Change ComplexNavigationsQuerySqlServerFixture to use row number paging.

Expected:
Instead of offset/fetch, the query generated should use row number paging.

Result:

```
    System.NullReferenceException : Object reference not set to an instance of an object.
    at lambda_method(Closure , ValueBuffer )
    Query\EntityLoadInfo.cs(27,0): at Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.Materialize()
    Query\Internal\QueryBuffer.cs(70,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.GetEntity(IKey key, EntityLoadInfo entityLoadInfo, Boolean queryStateManager, Boolean throwOnNullKey)
    Query\ExpressionVisitors\Internal\BufferedEntityShaper`.cs(32,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.BufferedEntityShaper`1.Shape(QueryContext queryContext, ValueBuffer valueBuffer)
    Query\ExpressionVisitors\Internal\BufferedOffsetEntityShaper.cs(26,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.BufferedOffsetEntityShaper`1.Shape(QueryContext queryContext, ValueBuffer valueBuffer)
    Query\QueryMethodProvider.cs(255,0): at Microsoft.EntityFrameworkCore.Query.QueryMethodProvider.<_GroupJoin>d__26`4.MoveNext()
    at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
    Query\Internal\LinqOperatorProvider.cs(125,0): at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
    at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
    at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
    ComplexNavigationsQueryTestBase.cs(1938,0): at Microsoft.EntityFrameworkCore.FunctionalTests.ComplexNavigationsQueryTestBase`2.Include_with_groupjoin_skip_and_take()
    ComplexNavigationsQuerySqlServerTest.cs(887,0): at Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ComplexNavigationsQuerySqlServerTest.Include_with_groupjoin_skip_and_take()
```

The test throws on this query:

``` c#
(from l1 in context.LevelOne
    .Include(e => e.OneToMany_Optional)
    .ThenInclude(e => e.OneToOne_Optional_FK)
join l2 in context.LevelTwo.Include(e => e.OneToOne_Required_PK)
on (int?)l1.Id equals (l2 != null ? l2.Level1_Optional_Id : null) into grouping
where l1.Name != ""L1 03""
select new { l1, grouping }).Skip(1).Take(5)
```","UseRowNumberPaging causes NRE in complex queries  Repro:
ComplexNavigationsQuerySqlServerTest.Include_with_groupjoin_skip_and_take

Change ComplexNavigationsQuerySqlServerFixture to use row number paging.

Expected:
Instead of offset/fetch, the quer",5654,maumar,efcore
5641,"RowNumberForPaging, two tables and columns with same name","### Steps to reproduce

```
optionsBuilder.UseSqlServer(""connectionString"", o=>
{
    o.UseRowNumberForPaging();
});

var orders = (from ba in dc.BestellungenArtikel
                join b in dc.Bestellungen on ba.Bestellung equals b.Id
                orderby b.Eingang descending
                select new
                {
                    OrderId = b.Id,
                    ArtId = ba.Id,
                    ArtName = ba.Name
                }).Skip(10).Take(20).ToList();
```

```
IDs equal:
{ OrderId = 387945, ArtId = 387945, ArtName = Guten Morgen } 
{ OrderId = 387944, ArtId = 387944, ArtName = Romantisches Duett }
```

```
exec sp_executesql N'SELECT [t].[ID], [t].[ID] AS [c0], [t].[name]
FROM (
    SELECT [b].[ID], [ba].[ID] AS [c0], [ba].[name], ROW_NUMBER() OVER(ORDER BY [b].[eingang] DESC) AS [__RowNumber__]
    FROM [bestellungen_artikel] AS [ba]
    INNER JOIN [bestellungen] AS [b] ON [ba].[bestellung] = [b].[ID]
) AS [t]
WHERE ([t].[__RowNumber__] > @__p_0) AND ([t].[__RowNumber__] <= (@__p_0 + @__p_1))',N'@__p_0 int,@__p_1 int',@__p_0=10,@__p_1=20
```

Without Paging:

```
var orders = (from ba in dc.BestellungenArtikel
                join b in dc.Bestellungen on ba.Bestellung equals b.Id
                orderby b.Eingang descending
                where b.Id == 387945 || b.Id == 387944
                select new
                {
                    OrderId = b.Id,
                    ArtId = ba.Id,
                    ArtName = ba.Name
                }).ToList();
```

```
IDs OK:
{ OrderId = 387945, ArtId = 758860, ArtName = Guten Morgen }
{ OrderId = 387944, ArtId = 758859, ArtName = Romantisches Duett }
```

```
SELECT [b].[ID], [ba].[ID], [ba].[name]
FROM [bestellungen_artikel] AS [ba]
INNER JOIN [bestellungen] AS [b] ON [ba].[bestellung] = [b].[ID]
WHERE [b].[ID] IN (387945, 387944)
ORDER BY [b].[eingang] DESC
```
### The issue

OrderId and ArtId is the same after using RowNumberPaging.
Select in paged query: [t].[ID], [t].[ID] AS [c0], [t].[name] VS [b].[ID], [ba].[ID], [ba].[name]
### Further technical details

EF Core version: RC2
SQL version: 2008 R2","RowNumberForPaging, two tables and columns with same name  ### Steps to reproduce

```
optionsBuilder.UseSqlServer(""connectionString"", o=>
{
    o.UseRowNumberForPaging();
});

var orders = (from ba in dc.BestellungenArtikel
                join",5654,maumar,efcore
5012,"""Done"" message was shown when running dotnet ef migrations script","I'm working on ef migrations in web tool side. I use dotnet ef migrations script to generate T-SQL file of migrations. When this command is done, it will show a ""Done"" on screen, whose the code is from src/dotnet-ef/MigrationsScriptCommand.cs  (line 74 Reporter.Error.WriteLine(""Done"");) . This ""Done"" should not be handled by ""Reporter.Error"".

When I run the whole thing by msbuild tasks, the ""Done"" will be captured by msbuild.exe and it was recognized an error message. This makes people think this command has a problem and actually it is not. 

Is there an option not showing ""Done"" on screen or some other approach to skip ""Done"" ?","""Done"" message was shown when running dotnet ef migrations script  I'm working on ef migrations in web tool side. I use dotnet ef migrations script to generate T-SQL file of migrations. When this command is done, it will show a ""Done"" on screen, whose the",5542,natemcmaster,efcore
5483,Release Build -> Yields M.E.PlatformAbstractions complications,"Posting this here since it is the only library right now that I am using in conjunction with Template10 for Sqlite support.   It appears that the Microsoft.EntityFrameworkCore.Tools are part of the problem with M.E.PlatformAbstractions, since they are the only tool that apparently references that library

1>C:\Program Files (x86)\MSBuild\Microsoft.NetNative\x86\ilc\IlcInternals.targets(936,5): warning : ILTransform_0000:       MCG : warning MCG0006: Unresolved P/Invoke method 'sysctl!libc' in assembly 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.

1>C:\Program Files (x86)\MSBuild\Microsoft.NetNative\x86\ilc\IlcInternals.targets(936,5): warning : ILTransform_0000:       MCG : warning MCG0006: Unresolved P/Invoke method 'uname!libc' in assembly 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.

1>C:\Program Files (x86)\MSBuild\Microsoft.NetNative\x86\ilc\IlcInternals.targets(936,5): warning : ILTransform_0000:       MCG : warning MCG0006: Unresolved P/Invoke method 'RtlGetVersion!ntdll' in assembly 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.

---project.lock.json --
""Microsoft.EntityFrameworkCore.Tools/1.0.0-preview1-final"": {
        ""type"": ""package"",
        ""dependencies"": {
          ""Microsoft.EntityFrameworkCore.Tools.Core"": ""1.0.0-rc2-final"",
          ""Microsoft.Extensions.PlatformAbstractions"": ""1.0.0-rc2-final"",
          ""System.Collections.NonGeneric"": ""4.0.0"",
          ""System.IO"": ""4.0.10"",
          ""System.IO.FileSystem"": ""4.0.0""
        },
        ""compile"": {
          ""lib/netcore50/Microsoft.EntityFrameworkCore.Tools.dll"": {}
        },
        ""runtime"": {
          ""lib/netcore50/Microsoft.EntityFrameworkCore.Tools.dll"": {}
        }
      },",Release Build -> Yields M.E.PlatformAbstractions complications  Posting this here since it is the only library right now that I am using in conjunction with Template10 for Sqlite support.   It appears that the Microsoft.EntityFrameworkCore.Tools are part,5542,natemcmaster,efcore
4608,Use column/property facets for parameter types in Query Pipeline,"Unless I'm missing something, parameterised queries (against SQL Server in my case) are treating all strings as NVARCHAR

I have the below table definition:

``` C#
modelBuilder.Entity<Products>(entity =>
            {
                entity.ToTable(""Products"", ""ofr"");

                entity.HasIndex(e => e.ProductId).HasName(""IX_Products_ProductId"").IsUnique();

                entity.HasIndex(e => new { e.Id, e.ProductId, e.PublicationId }).HasName(""IX_ofr_Products_PublicationId"");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)                    
                    .HasColumnType(""VARCHAR"");
            });
```

Then a query:

``` C#
 var q = from p in products

                        join sp in dbContext.SiteProducts
                        on new { Id = p.Id, ProductId = p.ProductId }
                        equals new { Id = sp.ProdId, ProductId = req.ProductId}

                        where   sp.SiteId == req.Engine.Context.SiteId                                            

                        select p;
var res = q.ToList();
```

The query generated is:

``` SQL
exec sp_executesql N'SELECT TOP(1) [p].[Id], [p].[ProductId], [p].[PublicationId]
FROM [ofr].[Products] AS [p]
INNER JOIN [ofr].[SiteProducts] AS [sp] ON ([p].[Id] = [sp].[ProdId]) AND ([p].[ProductId] = @__req_ProductId_0)
WHERE [sp].[SiteId] = @__req_Engine_Context_SiteId_1',N'@__req_ProductId_0 nvarchar(4000),@__req_Engine_Context_SiteId_1 int',@__req_ProductId_0=N'350003995',@__req_Engine_Context_SiteId_1=1
```

The ""ProductId"" parameter is therefore treated as an NVARCHAR, obviously missing the index.

I have tested with EF6 against the same database, and the query generated correctly uses a VARCHAR parameter:

``` SQL
exec sp_executesql N'SELECT 
    [Extent1].[Id] AS [Id], 
    [Extent1].[ProductId] AS [ProductId], 
    [Extent1].[PublicationId] AS [PublicationId]
    FROM  [ofr].[Products] AS [Extent1]
    INNER JOIN [ofr].[SiteProducts] AS [Extent2] ON ([Extent1].[Id] = [Extent2].[ProdId]) AND ([Extent1].[ProductId] = @p__linq__0)
    WHERE 1 = [Extent2].[SiteId]',N'@p__linq__0 varchar(8000)',@p__linq__0='324324324'
```

Is this something which is in-line to be fixed, or is there perhaps a workaround?

Thanks","Use column/property facets for parameter types in Query Pipeline  Unless I'm missing something, parameterised queries (against SQL Server in my case) are treating all strings as NVARCHAR

I have the below table definition:

``` C#
modelBuilder.Entity",5525,ajcvickers,efcore
4134,Use column/property facets for parameter types in Update Pipeline,"### Title

HasMaxLength / HasColumnType / ForSqlServerHasColumnType don't produce parameters with that size
### Functional impact

Data Types on generated parameters don't match actual sql data types and don't work as expected.  This can lead to indexes not being used properly due to size mismatches between parameters and columns.
### Minimal repro steps
1. Create an EF 7 Project with Sql Server
2. Add a model with a key and a string property
3. Configure the model's string property to use HasMaxLength(200) or HasColumnType(""nvarchar(200)"") or ForSqlServerHasColumnType(""nvarchar(200)"")
4. Query against the string column in the model (e.g. where stringcolumn == strinvalue)
5. Look at sql server profiler and see that the parameter is created with nvarchar(4000) not nvarchar(200)
6. Update the string column as savechanges 
7. Look at the sql server profile and see that the parameter is created with nvarchar(4000) not nvarchar(200)
### Expected result

Parameter is created with the size specified by HasMaxLength or HasColumnType
### Actual result

Parameter is always being created with the _maxSpecificSize in Microsoft.Data.Entity.Storage.Internal.SqlServerMaxLengthMapping
### Further technical details

There is a comment in the method Microsoft.Data.Entity.Storage.Internal.SqlServerMaxLengthMapping.ConfigureParameter 

// For strings and byte arrays, set the max length to 8000 bytes if the data will
// fit so as to avoid query cache fragmentation by setting lots of different Size
// values otherwise always set to -1 (unbounded) to avoid SQL client size inference.

I don't agree with this comment if the user is going through the trouble of telling you what size to use. ","Use column/property facets for parameter types in Update Pipeline  ### Title

HasMaxLength / HasColumnType / ForSqlServerHasColumnType don't produce parameters with that size
### Functional impact

Data Types on generated parameters don't match actua",5525,ajcvickers,efcore
5418,CLI Commands: dotnet ef for net451 throws misleading error on Linux,"I followed the workaround on the website [docef](http://go.microsoft.com/fwlink/?LinkId=798221). 
But i still have the error below

```
Could not invoke this command on the project. Check that the version of Microsoft.EntityFrameworkCore.Tools in ""tools"" and ""dependencies"" are the same. See http://go.microsoft.com/fwlink/?LinkId=798221 for more details.
```

Here the project.json, it's an aspnet mvc project with mono on debian linux

```
{
  ""version"": ""1.0.0-*"",
    ""buildOptions"": {
        ""emitEntryPoint"": true,
        ""preserveCompilationContext"": true,
        ""warningsAsErrors"": false,
        ""copyToOutput"": {
        ""include"": [
            ""Areas"",
            ""Views"",
            ""wwwroot"",
            ""config.json"",
            ""web.config""
        ]
        }
    },
    ""dependencies"": {
        ""Microsoft.EntityFrameworkCore.Tools"": {
            ""type"": ""build"",
            ""version"": ""1.0.0-preview1-final""
        },
    ""Microsoft.EntityFrameworkCore"": ""1.0.0-rc2-final"",
    ""Npgsql.EntityFrameworkCore.PostgreSQL"": ""1.0.0-rc2-*"",
        ""Npgsql.EntityFrameworkCore.PostgreSQL.design"": ""1.0.0-rc2-*"",
    ""Microsoft.AspNetCore.Server.Kestrel"": ""1.0.0-rc2-final"",
     ""Microsoft.AspNetCore.Diagnostics"": ""1.0.0-rc2-final"",
     ""Microsoft.AspNetCore.Hosting"": ""1.0.0-rc2-final"",
     ""Microsoft.AspNetCore.Mvc"": ""1.0.0-rc2-final"",
     ""Microsoft.AspNetCore.Routing"": ""1.0.0-rc2-final"",
     ""Microsoft.AspNetCore.StaticFiles"": ""1.0.0-rc2-final"",
     ""Microsoft.AspNetCore.Mvc.TagHelpers"": ""1.0.0-rc2-final"",
         ""Microsoft.Extensions.Configuration.EnvironmentVariables"": ""1.0.0-rc2-final"",
     ""Microsoft.Extensions.Configuration.CommandLine"": ""1.0.0-rc2-final"",
     ""Microsoft.Extensions.Configuration.Json"": ""1.0.0-rc2-final"",
     ""Newtonsoft.Json"": ""8.0.3""
    },
    ""frameworks"": {
        ""net451"": {
            ""buildOptions"": {
                ""emitEntryPoint"": true
            }
        }
    },
""tools"": {
    ""Microsoft.EntityFrameworkCore.Tools"": {
      ""version"": ""1.0.0-preview1-final"",
      ""imports"": ""net451""
    }
  },    
    ""scripts"": {}
}

```

the outputs of dotnet restore and build are ok.","CLI Commands: dotnet ef for net451 throws misleading error on Linux  I followed the workaround on the website [docef](http://go.microsoft.com/fwlink/?LinkId=798221). 
But i still have the error below

```
Could not invoke this command on the project.",5479,natemcmaster,efcore
5272,CLI Commands: adding more descriptive error message to help with OOB experience,"In the OOB experience for getting CLI Commands, users are likely to encounter this error:

```
PM> Add-Migration initial
Cannot execute this command because 'Microsoft.EntityFrameworkCore.Tools' is not installed in 
project 'src\ConsoleApp1'. Add 'Microsoft.EntityFrameworkCore.Tools' to the 'tools' section
in project.json.
```

Although this error helps, it does not 100% guide a user to a solution. What user must really do is:
1. Add to tools
2. Also make sure Ms.EfCore.Tools. Is a dependency of any project they need to use tools on.
3. Ensure they use the right imports.

Suggest adding a fwlink to a help page for this.

Triage: RC2 polish, non-blocking.","CLI Commands: adding more descriptive error message to help with OOB experience  In the OOB experience for getting CLI Commands, users are likely to encounter this error:

```
PM> Add-Migration initial
Cannot execute this command because 'Microsoft.En",5479,natemcmaster,efcore
5292,Show better error message when using EF tools in Powershell with version lower than 3.0,"Default version of PowerShell in windows 7 is 2.0. EF.Tools requires version 3.0+. The installation of packages run init.ps1 script which shows some error but package installation shows success. And when trying to use EF commands, 

```
PM> get-help EntityFramework
Get-Help : Cannot find Help for topic ""EntityFramework"".
At line:1 char:9
+ get-help <<<<  EntityFramework
    + CategoryInfo          : ResourceUnavailable: (:) [Get-Help], HelpNotFoundException
    + FullyQualifiedErrorId : HelpNotFound,Microsoft.PowerShell.Commands.GetHelpCommand
```

I will update the issue later once I get a machine without PS 3.0 on how `Install-Package` looks like.
But since we are running PS script from our tools, we should throw a more informative exception about PS being lower version than required. Nowhere in any failure message, it was indicated (even indirectly)",Show better error message when using EF tools in Powershell with version lower than 3.0  Default version of PowerShell in windows 7 is 2.0. EF.Tools requires version 3.0+. The installation of packages run init.ps1 script which shows some error but package,5479,natemcmaster,efcore
4677,CLI Commands: `dbcontext scaffold` has two -s options,"`--schema` and `--startup-project`","CLI Commands: `dbcontext scaffold` has two -s options  `--schema` and `--startup-project`",4733,bricelam,efcore
3925,Commands: .NET Core CLI Implementation,"DNX commands will be going away with the transition to [.NET Core CLI](https://github.com/dotnet/cli). We'll need to create a .NET Core CLI tools package instead. Like the NuGet PMC commands, any version of the command should be able to work with any version of the framework.
## Known Issues
- [x] System.DllNotFoundException: Unable to load DLL 'sni.dll': The specified module could not be found. (Exception from HRESULT: 0x8007007E) (#4953)
- [x] Unable to load DLL 'sqlite3': The specified module could not be found. (Exception from HRESULT: 0x8007007E) (dotnet/cli#2289)
- [x] Could not load file or assembly 'System.Data.SqlClient, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. (dotnet/cli#2289)
- [x] Support netcoreapp1.0 apps
- [x] Hosting environment not setup correctly. https://github.com/aspnet/EntityFramework/issues/5065
- [x] Newtonsoft.Json 7.0.0 missing at runtime https://github.com/NuGet/Home/issues/2462
- [x] Newtonsoft.Json 8.0.0 could not be loaded at runtime https://github.com/dotnet/cli/issues/2514. Workaround in #5082 
- [x] ~~Tools using ConfigurationBuilder without setting basepath cannot find config files.~~ won't fix. User's need to set base path to `IHostingEnvironment.ContentRootPath`.
- [x] Need to change to nested-dispatch model because `AssemblyLoadContext` does not provide the necessary isolation https://github.com/dotnet/cli/issues/2514
- [x] Cannot use dotnet-ef on a netstandard library or standalone app with nested-dispatch https://github.com/dotnet/cli/issues/2645
## Usage

Your `project.json` should look something like this.

``` JSON
{
    ""compilationOptions"": {
        ""emitEntryPoint"": true
    },
    ""tools"": {
        ""Microsoft.EntityFrameworkCore.Tools"": { 
            ""version"": ""1.0.0-*"",
            ""imports"": ""portable-net452+win81""
         }
    },
    ""dependencies"": {
        ""Microsoft.EntityFrameworkCore.Sqlite"": ""1.0.0-*"",
        ""Microsoft.EntityFrameworkCore.Sqlite.Design"": { ""version"": ""1.0.0-*"", ""type"": ""build"" },

        ""Microsoft.EntityFrameworkCore.Tools"": { ""version"": ""1.0.0-*"", ""type"": ""build"" }
    },
    ""frameworks"": {
        ""netcoreapp1.0"": {
            ""imports"": ""portable-net452+win81"",
            ""dependencies"": {
                ""Microsoft.NETCore.App"": { 
                     ""version"": ""1.0.0-*"",
                     ""type"": ""platform""
                 }
            }
        }
    }
}
```

Your workflow will look something like this.

```
dotnet restore
cd src\MyProject
dotnet ef migrations add MyMigration
dotnet ef database update
```","Commands: .NET Core CLI Implementation  DNX commands will be going away with the transition to [.NET Core CLI](https://github.com/dotnet/cli). We'll need to create a .NET Core CLI tools package instead. Like the NuGet PMC commands, any version of the comm",4733,bricelam,efcore
4484,Property mapping validation provides unhelpful message for primitive type that cannot be mapped,"If the entity has a property of a type that cannot be mapped by the provider and is not a primitive type, then the exception message is:
`The property '{property}' on entity type '{entityType}' has CLR type which is not supported by current provider and it has not been configured to use any supported column type.`
However, if the property is a primitive type, such as uint for SQL Server, then the message is:
`The property '{property}' on entity type '{entityType}' has not been added to the model or ignored.`

It seems to me that we should not be treating primitive types differently in this case.","Property mapping validation provides unhelpful message for primitive type that cannot be mapped  If the entity has a property of a type that cannot be mapped by the provider and is not a primitive type, then the exception message is:
`The property '{prop",4720,AndriySvyryd,efcore
4627,Exception msg for properties not included in the model,"### Title

PropertyMappingValidationConvention throws upon scaffolding a new migration in a full .NET solution.
### Functional impact

Migration cannot be created (scaffolded).
### Minimal repro steps
1. Open the [ZIP archive](https://onedrive.live.com/redir?resid=A58EF47BA9A2178B!114720&authkey=!AN-ENf-QKOU4Ly8&ithint=file%2czip) and restore the solution.
2. Within the SqlServerAccess project, restore NuGet packages.
3. In the Package Manager Console, add a new migration (e.g. `Add-Migration Migration01`).
### Expected result

New migration should be scaffolded.
### Actual result

The following error message appears in the Package Manager Console window:
System.ArgumentNullException: Value cannot be null.
Parameter name: propertyInfo
   at Microsoft.Data.Entity.Utilities.Check.NotNull[T](T value, String parameterName)
   at Microsoft.Data.Entity.Metadata.Conventions.Internal.RelationalPropertyMappingValidationConvention.FindCandidateNavigationPropertyType(PropertyInfo propertyInfo)
   at Microsoft.Data.Entity.Metadata.Conventions.Internal.PropertyMappingValidationConvention.Apply(InternalModelBuilder modelBuilder)
   at Microsoft.Data.Entity.Metadata.Conventions.Internal.ConventionDispatcher.OnModelBuilt(InternalModelBuilder modelBuilder)
   at Microsoft.Data.Entity.Metadata.Internal.InternalModelBuilder.Validate()
   at Microsoft.Data.Entity.ModelBuilder.Validate()
   at Microsoft.Data.Entity.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.Data.Entity.Infrastructure.ModelSource.<>c__DisplayClass8_0.<GetModel>b__0(Type k)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.Data.Entity.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)
   at Microsoft.Data.Entity.Internal.DbContextServices.CreateModel()
   at Microsoft.Data.Entity.Internal.LazyRef`1.get_Value()
   at Microsoft.Data.Entity.Internal.DbContextServices.get_Model()
   at Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.<>c.<AddEntityFramework>b__0_5(IServiceProvider p)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryService.Invoke(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetService[T](IServiceProvider provider)
   at Microsoft.Data.Entity.Design.Internal.DesignTimeServicesBuilder.<>c__DisplayClass7_0.<ConfigureContextServices>b__8(IServiceProvider _)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryService.Invoke(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetRequiredService[T](IServiceProvider provider)
   at Microsoft.Data.Entity.Design.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)
   at Microsoft.Data.Entity.Design.OperationExecutor.<AddMigrationImpl>d__7.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at Microsoft.Data.Entity.Design.OperationExecutor.OperationBase.<>c__DisplayClass4_0`1.<Execute>b__0()
   at Microsoft.Data.Entity.Design.OperationExecutor.OperationBase.Execute(Action action)
### Further technical details

Although it might be unrelated to the issue above, how can I 'tell EF to use specific types' if I need to use declarations with interfaces (like `public List<IDocumentPart> Parts { get; set; }`)?

Thank you.","Exception msg for properties not included in the model  ### Title

PropertyMappingValidationConvention throws upon scaffolding a new migration in a full .NET solution.
### Functional impact

Migration cannot be created (scaffolded).
### Minimal repr",4720,AndriySvyryd,efcore
4509,Remove dnx451 in all test code,"Fix https://github.com/aspnet/EntityFramework/issues/4495","Remove dnx451 in all test code  Fix https://github.com/aspnet/EntityFramework/issues/4495",4638,natemcmaster,efcore
4550,Move build to dotnet,"","Move build to dotnet  ",4638,natemcmaster,efcore
4495,Full .NET xunit is not running ConditionalTheory and ConditionalFact tests,"When we transitioned to dotnet cli, we started using `xunit.console.exe` to run full .NET tests. Currently, this is not finding tests marked with `[ConditionalTheory]` or `[ConditionalFact]`.

Example: Microsoft.EntityFrameworkCore.Commands.FunctionalTests should have 109 tests, but only 98 are discovered. The [tests](https://github.com/aspnet/EntityFramework/files/118126/tests.txt) should in include `OperationExecutorTest`, but they are not discovered.

Related: https://github.com/aspnet/Testing/issues/203 (EF implements its own discoverers, but problably requires the same fix Testing needs.)","Full .NET xunit is not running ConditionalTheory and ConditionalFact tests  When we transitioned to dotnet cli, we started using `xunit.console.exe` to run full .NET tests. Currently, this is not finding tests marked with `[ConditionalTheory]` or `[Condit",4638,natemcmaster,efcore
3925,Commands: .NET Core CLI Implementation,"DNX commands will be going away with the transition to [.NET Core CLI](https://github.com/dotnet/cli). We'll need to create a .NET Core CLI tools package instead. Like the NuGet PMC commands, any version of the command should be able to work with any version of the framework.
## Known Issues
- [x] System.DllNotFoundException: Unable to load DLL 'sni.dll': The specified module could not be found. (Exception from HRESULT: 0x8007007E) (#4953)
- [x] Unable to load DLL 'sqlite3': The specified module could not be found. (Exception from HRESULT: 0x8007007E) (dotnet/cli#2289)
- [x] Could not load file or assembly 'System.Data.SqlClient, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. (dotnet/cli#2289)
- [x] Support netcoreapp1.0 apps
- [x] Hosting environment not setup correctly. https://github.com/aspnet/EntityFramework/issues/5065
- [x] Newtonsoft.Json 7.0.0 missing at runtime https://github.com/NuGet/Home/issues/2462
- [x] Newtonsoft.Json 8.0.0 could not be loaded at runtime https://github.com/dotnet/cli/issues/2514. Workaround in #5082 
- [x] ~~Tools using ConfigurationBuilder without setting basepath cannot find config files.~~ won't fix. User's need to set base path to `IHostingEnvironment.ContentRootPath`.
- [x] Need to change to nested-dispatch model because `AssemblyLoadContext` does not provide the necessary isolation https://github.com/dotnet/cli/issues/2514
- [x] Cannot use dotnet-ef on a netstandard library or standalone app with nested-dispatch https://github.com/dotnet/cli/issues/2645
## Usage

Your `project.json` should look something like this.

``` JSON
{
    ""compilationOptions"": {
        ""emitEntryPoint"": true
    },
    ""tools"": {
        ""Microsoft.EntityFrameworkCore.Tools"": { 
            ""version"": ""1.0.0-*"",
            ""imports"": ""portable-net452+win81""
         }
    },
    ""dependencies"": {
        ""Microsoft.EntityFrameworkCore.Sqlite"": ""1.0.0-*"",
        ""Microsoft.EntityFrameworkCore.Sqlite.Design"": { ""version"": ""1.0.0-*"", ""type"": ""build"" },

        ""Microsoft.EntityFrameworkCore.Tools"": { ""version"": ""1.0.0-*"", ""type"": ""build"" }
    },
    ""frameworks"": {
        ""netcoreapp1.0"": {
            ""imports"": ""portable-net452+win81"",
            ""dependencies"": {
                ""Microsoft.NETCore.App"": { 
                     ""version"": ""1.0.0-*"",
                     ""type"": ""platform""
                 }
            }
        }
    }
}
```

Your workflow will look something like this.

```
dotnet restore
cd src\MyProject
dotnet ef migrations add MyMigration
dotnet ef database update
```","Commands: .NET Core CLI Implementation  DNX commands will be going away with the transition to [.NET Core CLI](https://github.com/dotnet/cli). We'll need to create a .NET Core CLI tools package instead. Like the NuGet PMC commands, any version of the comm",4630,bricelam,efcore
3862,System.TypeLoadException on applying migrations on sqlite [OSX],"Steps to reproduce
1. Create a fresh Web application using 'aspnet' yo generator
2. Restore and build using rc1 release of mono
3. Apply migrations for the IdentitySchema 

```
mlxxxx% dnx ef database update
System.TypeLoadException: Could not load type 'Microsoft.Data.Entity.Scaffolding.SqliteDesignTimeServices, EntityFramework.Sqlite.Design' from assembly ''.
  at Microsoft.Data.Entity.Design.Internal.DesignTimeServicesBuilder.ConfigureProviderServices (System.String provider, IServiceCollection services, Boolean throwOnError) <0x5f98d60 + 0x00023> in <filename unknown>:0
  at Microsoft.Data.Entity.Design.Internal.DesignTimeServicesBuilder.Build (Microsoft.Data.Entity.DbContext context) <0x5d72af0 + 0x00133> in <filename unknown>:0
  at Microsoft.Data.Entity.Design.MigrationsOperations.UpdateDatabase (System.String targetMigration, System.String contextType) <0x5b4a158 + 0x00039> in <filename unknown>:0
  at Microsoft.Data.Entity.Commands.Program+Executor+<>c__DisplayClass7_0.<UpdateDatabase>b__0 () <0x35c8dc8 + 0x00034> in <filename unknown>:0
  at Microsoft.Data.Entity.Commands.Program+Executor.Execute (System.Action action) <0x35c8d48 + 0x0001c> in <filename unknown>:0
Could not load type 'Microsoft.Data.Entity.Scaffolding.SqliteDesignTimeServices, EntityFramework.Sqlite.Design' from assembly ''.

Version information

mlxxxx% yo --version
1.5.0

mlxxxx% dnvm list
Active Version              Runtime Architecture OperatingSystem Alias
------ -------              ------- ------------ --------------- -----
       1.0.0-rc1-final      coreclr x64          darwin
  *    1.0.0-rc1-final      mono                 linux/osx       default

mlxxxx% dnu --version
Microsoft .NET Development Utility
 Version:      1.0.0-rc1-16202
 Type:         Mono
 Architecture: x64
 OS Name:      Darwin
 OS Version:   10.10
 Runtime Id:   osx.10.10-x64

mlxxxx% dnvm --version
1.0.0-rc2-15545

mlxxxx% dnx --version
Microsoft .NET Execution environment
 Version:      1.0.0-rc1-16202
 Type:         Mono
 Architecture: x64
 OS Name:      Darwin
 OS Version:   10.10
 Runtime Id:   osx.10.10-x64
```

Note: Switching to Coreclr-rc1-final solves the issue though. ","System.TypeLoadException on applying migrations on sqlite [OSX]  Steps to reproduce
1. Create a fresh Web application using 'aspnet' yo generator
2. Restore and build using rc1 release of mono
3. Apply migrations for the IdentitySchema 

```
mlxxxx%",4630,bricelam,efcore
4317,ToListAsync() is not handling cancellation correctly.,"With Sqlite database provider and QueryTrackingBehavior set to NoTracking, ToListAsync() does not handle cancellation correctly. On cancellation, it should either throw TaskCanceledException or complete the operation (i.e., ignore cancellation). But, it instead succeeds returning a partial list of records.

Test code attached.
[NoTrackingTests.zip](https://github.com/aspnet/EntityFramework/files/91552/NoTrackingTests.zip)","ToListAsync() is not handling cancellation correctly.  With Sqlite database provider and QueryTrackingBehavior set to NoTracking, ToListAsync() does not handle cancellation correctly. On cancellation, it should either throw TaskCanceledException or comple",4626,natemcmaster,efcore
3925,Commands: .NET Core CLI Implementation,"DNX commands will be going away with the transition to [.NET Core CLI](https://github.com/dotnet/cli). We'll need to create a .NET Core CLI tools package instead. Like the NuGet PMC commands, any version of the command should be able to work with any version of the framework.
## Known Issues
- [x] System.DllNotFoundException: Unable to load DLL 'sni.dll': The specified module could not be found. (Exception from HRESULT: 0x8007007E) (#4953)
- [x] Unable to load DLL 'sqlite3': The specified module could not be found. (Exception from HRESULT: 0x8007007E) (dotnet/cli#2289)
- [x] Could not load file or assembly 'System.Data.SqlClient, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. (dotnet/cli#2289)
- [x] Support netcoreapp1.0 apps
- [x] Hosting environment not setup correctly. https://github.com/aspnet/EntityFramework/issues/5065
- [x] Newtonsoft.Json 7.0.0 missing at runtime https://github.com/NuGet/Home/issues/2462
- [x] Newtonsoft.Json 8.0.0 could not be loaded at runtime https://github.com/dotnet/cli/issues/2514. Workaround in #5082 
- [x] ~~Tools using ConfigurationBuilder without setting basepath cannot find config files.~~ won't fix. User's need to set base path to `IHostingEnvironment.ContentRootPath`.
- [x] Need to change to nested-dispatch model because `AssemblyLoadContext` does not provide the necessary isolation https://github.com/dotnet/cli/issues/2514
- [x] Cannot use dotnet-ef on a netstandard library or standalone app with nested-dispatch https://github.com/dotnet/cli/issues/2645
## Usage

Your `project.json` should look something like this.

``` JSON
{
    ""compilationOptions"": {
        ""emitEntryPoint"": true
    },
    ""tools"": {
        ""Microsoft.EntityFrameworkCore.Tools"": { 
            ""version"": ""1.0.0-*"",
            ""imports"": ""portable-net452+win81""
         }
    },
    ""dependencies"": {
        ""Microsoft.EntityFrameworkCore.Sqlite"": ""1.0.0-*"",
        ""Microsoft.EntityFrameworkCore.Sqlite.Design"": { ""version"": ""1.0.0-*"", ""type"": ""build"" },

        ""Microsoft.EntityFrameworkCore.Tools"": { ""version"": ""1.0.0-*"", ""type"": ""build"" }
    },
    ""frameworks"": {
        ""netcoreapp1.0"": {
            ""imports"": ""portable-net452+win81"",
            ""dependencies"": {
                ""Microsoft.NETCore.App"": { 
                     ""version"": ""1.0.0-*"",
                     ""type"": ""platform""
                 }
            }
        }
    }
}
```

Your workflow will look something like this.

```
dotnet restore
cd src\MyProject
dotnet ef migrations add MyMigration
dotnet ef database update
```","Commands: .NET Core CLI Implementation  DNX commands will be going away with the transition to [.NET Core CLI](https://github.com/dotnet/cli). We'll need to create a .NET Core CLI tools package instead. Like the NuGet PMC commands, any version of the comm",4602,bricelam,efcore
4577,CLI Commands: Support .NET Framework-only projects,"Currently, in order to use the .NET Core CLI EF commands, your project must target a .NET Core-compatible framework. We could remove this requirement by starting a new net451 process to execute the commands in this case.

~~Currently **blocked** on dotnet/cli#2126~~
### Known Issues
- [ ] Cannot use dotnet-ef on net451 class library project https://github.com/dotnet/cli/issues/2919

```
No executable found matching command ""Microsoft.EntityFrameworkCore.Tools.Cli""
```
- [ ] dotnet-ef cannot load the startup assembly. See below https://github.com/aspnet/EntityFramework/issues/4577#issuecomment-217496222

```
System.IO.FileNotFoundException: Could not load file or assembly 'StartupProj' or one of its dependencies. The system cannot find the file specified. File name: 'StartupProj'
   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint,
```","CLI Commands: Support .NET Framework-only projects  Currently, in order to use the .NET Core CLI EF commands, your project must target a .NET Core-compatible framework. We could remove this requirement by starting a new net451 process to execute the comma",4602,bricelam,efcore
1051,SQL Azure: Retrying and resiliency,"Investigate porting the code from EF6.","SQL Azure: Retrying and resiliency  Investigate porting the code from EF6.",4530,bricelam,efcore
614,Null Ref when trying to delete some entities from model,"Repro is as follows:

```
public class Gear
{
    // composite key
    public string Nickname { get; set; }
    public int SquadId { get; set; }

    public string FullName { get; set; }

    public virtual Squad Squad { get; set; }

    public string LeaderNickname { get; set; }
    public int LeaderSquadId { get; set; }
}

public class Squad
{
    // non-auto generated key
    public int Id { get; set; }
    public string Name { get; set; }

    public virtual ICollection<Gear> Members { get; set; }
}

public class GearsOfWarContext : DbContext
{
    public GearsOfWarContext(DbContextOptions options)
        : base(options)
    {
    }

    public DbSet<Gear> Gears { get; set; }
    public DbSet<Squad> Squads { get; set; }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        builder.Entity<Gear>().Key(g => new { g.Nickname, g.SquadId });

        builder.Entity<Squad>().Key(s => s.Id);
        builder.Entity<Squad>().OneToMany(s => s.Members, g => g.Squad).ForeignKey(g => g.SquadId);
    }
}

class Program
{
    static void Main(string[] args)
    {
        var contextOptions = new DbContextOptions();
        contextOptions.UseSqlServer(@""Data Source=.\SQLEXPRESS;Initial Catalog=DB_NULLREF;Integrated Security=True;MultipleActiveResultSets=True"");

        using (var ctx = new GearsOfWarContext(contextOptions))
        {
            ctx.Database.EnsureDeleted();
            ctx.Database.EnsureCreated();

            var deltaSquad = new Squad
            {
                Id = 1,
                Name = ""Delta"",
                Members = new List<Gear>(),
            };

            ctx.Squads.Add(deltaSquad);
            ctx.SaveChanges();
        }

        using (var ctx = new GearsOfWarContext(contextOptions))
        {
            var squadToRemove = ctx.Squads.First();
            ctx.Squads.Remove(squadToRemove);
            ctx.SaveChanges();

        }
    }
}
```","Null Ref when trying to delete some entities from model  Repro is as follows:

```
public class Gear
{
    // composite key
    public string Nickname { get; set; }
    public int SquadId { get; set; }

    public string FullName { get; set; }
",4530,bricelam,efcore
4320,EF does not install and build on UWP,"Since dropping the ""netcore50"" TFM, we have not been able to install and build EF on UWP. Tracking progress on external blocking issues here.
- [x] EntityFramework.Sqlite - Fixed with #4343
- [x] EntityFramework.Commands","EF does not install and build on UWP  Since dropping the ""netcore50"" TFM, we have not been able to install and build EF on UWP. Tracking progress on external blocking issues here.
- [x] EntityFramework.Sqlite - Fixed with #4343
- [x] EntityFramework.Com",4338,natemcmaster,efcore
3604,Queries with shadow properties fail on .NET Native,"Any query that uses `EF.Property(e, ""SomeProperty"")` fails on UWP, .NET Native with this error:

`System.InvalidOperationException: The EF.Property<T> method may only be used within LINQ queries.`","Queries with shadow properties fail on .NET Native  Any query that uses `EF.Property(e, ""SomeProperty"")` fails on UWP, .NET Native with this error:

`System.InvalidOperationException: The EF.Property<T> method may only be used within LINQ queries.`",4338,natemcmaster,efcore
4080,Inserted entities has different ID (DB vs instance) after SaveChanges,"Hi guys...
I have problem with inserting more entities (same class).
My environment: MSSQL 2014 (this trouble may appears on MSSQL 2012+).

Situation:
Create 500 instances of one type entity a call SaveChanges.
You generate one insert with many values and identity insert into temporary table...but:
""There is no guarantee that the order in which the changes are applied to the table and the order in which the rows are inserted into the output table or table variable will correspond."" (source: https://msdn.microsoft.com/en-us/library/ms177564.aspx or http://stackoverflow.com/questions/11222043/table-valued-function-order-by-is-ignored-in-output).

I have table with identity (no big deal...default identity(1, 1)) and DbReader output is:

```
--ID int (PK, identity(1, 1)):
1. 508
2. 466
3. 462
4. 493
5. 504
6. 520
7. 496
8. 497
9. 494
10. 277
11. 281
12. 263
13. 476
...
```

**This is fatal when you need continue work with instances :(**

Thx for fix,
Milan","Inserted entities has different ID (DB vs instance) after SaveChanges  Hi guys...
I have problem with inserting more entities (same class).
My environment: MSSQL 2014 (this trouble may appears on MSSQL 2012+).

Situation:
Create 500 instances of one",4171,AndriySvyryd,efcore
4095,Duplicate variable names when batching inserts with only default values,"When attempting to add multiple instances with default values to the context, a `System.Data.SqlClient.SqlException` is thrown on `SaveChanges` with the message ""The variable name '@generated5' has already been declared. Variable names must be unique within a query batch or stored procedure.""

**Reproduction**

``` cs
    public class Program
    {
        public void Main(string[] args)
        {
            using (var Sql = new TestDataModel())
            {
                Sql.Database.EnsureDeleted();
                Sql.Database.EnsureCreated();

                var pictures = new List<Picture>();

                for (var index = 0; index < 15; index++)
                {
                    var picture = new Picture();
                    Sql.Pictures.Add(picture);
                    pictures.Add(picture);
                }

                for (var index = 0; index < 5; index++)
                {
                    var package = new PicturePackage
                    {
                        Pictures = new List<Picture>
                        {
                            pictures[3 * index],
                            pictures[3 * index + 1],
                            pictures[3 * index + 2]
                        }
                    };

                    Sql.PicturePackages.Add(package);
                }

                Sql.SaveChanges();
            }
        }
    }

    // Sample database with object relations.
    public class TestDataModel : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(
                new SqlConnectionStringBuilder
                {
                    DataSource = @""(localdb)\MSSQLLocalDB"",
                    MultipleActiveResultSets = true,
                    InitialCatalog = ""BatchingDefaults"",
                    IntegratedSecurity = true,
                    ConnectTimeout = 30
                }.ConnectionString);
        }

        public virtual DbSet<Picture> Pictures { get; set; }
        public virtual DbSet<PicturePackage> PicturePackages { get; set; }
    }

    public class Picture
    {
        public int PackageId { get; set; }

        [Required]
        [ForeignKey(nameof(PackageId))]
        public PicturePackage Package { get; set; }

        [Key]
        public int Id { get; set; }

    }

    public class PicturePackage
    {
        [InverseProperty(nameof(Picture.Package))]
        public virtual ICollection<Picture> Pictures { get; set; }

        [Key]
        public int Id { get; set; }
    }
```

**Generated SQL**

``` sql
SET NOCOUNT ON;
DECLARE @generated5 TABLE ([Id] int);
INSERT INTO [PicturePackage]
OUTPUT INSERTED.[Id]
INTO @generated5
DEFAULT VALUES;
SELECT [Id] FROM @generated5;
DECLARE @generated5 TABLE ([Id] int);
INSERT INTO [PicturePackage]
OUTPUT INSERTED.[Id]
INTO @generated5
DEFAULT VALUES;
SELECT [Id] FROM @generated5;
DECLARE @generated5 TABLE ([Id] int);
INSERT INTO [PicturePackage]
OUTPUT INSERTED.[Id]
INTO @generated5
DEFAULT VALUES;
SELECT [Id] FROM @generated5;
DECLARE @generated5 TABLE ([Id] int);
INSERT INTO [PicturePackage]
OUTPUT INSERTED.[Id]
INTO @generated5
DEFAULT VALUES;
SELECT [Id] FROM @generated5;
DECLARE @generated5 TABLE ([Id] int);
INSERT INTO [PicturePackage]
OUTPUT INSERTED.[Id]
INTO @generated5
DEFAULT VALUES;
SELECT [Id] FROM @generated5;
```","Duplicate variable names when batching inserts with only default values  When attempting to add multiple instances with default values to the context, a `System.Data.SqlClient.SqlException` is thrown on `SaveChanges` with the message ""The variable name '@",4171,AndriySvyryd,efcore
3703,Incorrect syntax generated for select new { bool },"Beta8 / SQL Server 2014
Database model:

```
public class Blog
{
        public int BlogId { get; set; }
        public string Url { get; set; }
        public bool IsHipster { get; set; } // <=
        public List<Post> Posts { get; set; }
}
```

Repository model:

```
public class RepositoryBlog
{
        public int BlogId { get; set; }
        public string Url { get; set; }
        public bool IsHippy { get; set; } // <=
        public List<Post> Posts { get; set; }
}
```

Query 1:

```
List<RepositoryBlog> x = (from b in db.Blogs
    select new RepositoryBlog
    {
        BlogId = b.BlogId,
        IsHippy = !b.IsHipster, // Note negation
        Url = b.Url
    }).ToList();
```

Generated SQL:

```
SELECT [b].[BlogId], [b].[IsHipster] = 0, [b].[Url]
FROM [Blog] AS [b]
```

SQL Server error:

```
Incorrect syntax near '='.
```

Query 2:

```
List<RepositoryBlog> x = (from b in db.Blogs
  select new RepositoryBlog
  {
      BlogId = b.BlogId,
      IsHippy = b.IsHipster ? false : true, // Attempted workaround
      Url = b.Url
  }).ToList();
```

Generated SQL:

```
SELECT [b].[BlogId], CASE
    WHEN [b].[IsHipster]
    THEN CAST(0 AS BIT) ELSE CAST(1 AS BIT)
END, [b].[Url]
FROM [Blog] AS [b]
```

SQL Server error:

```
An expression of non-boolean type specified in a context where a condition is expected, near 'THEN'.
```

Twice the fun!","Incorrect syntax generated for select new { bool }  Beta8 / SQL Server 2014
Database model:

```
public class Blog
{
        public int BlogId { get; set; }
        public string Url { get; set; }
        public bool IsHipster { get; set; } // <=",4141,smitpatel,efcore
3618,Invalid SQL when projection includes a comparison to a Nullable type,"```
int? selectedId = null;

var results = await DbContext.Departments
    .Select(x => new {Selected = x.Id == selectedId})
    .ToListAsync();
```

generates this SQL:

```
exec sp_executesql N'SELECT [x].[Id] = @__selectedId_0
FROM [Department] AS [x]',N'@__selectedId_0 int',@__selectedId_0=NULL
```

This looks to be similar to https://github.com/aspnet/EntityFramework/issues/2450 (apologies if it is a duplicate).","Invalid SQL when projection includes a comparison to a Nullable type  ```
int? selectedId = null;

var results = await DbContext.Departments
    .Select(x => new {Selected = x.Id == selectedId})
    .ToListAsync();
```

generates this SQL:

```",4141,smitpatel,efcore
649,Query: support conditional expressions,"E.g. db.Products.Select(p => new {p.Name, IsExpensive = p.Price >  100});","Query: support conditional expressions  E.g. db.Products.Select(p => new {p.Name, IsExpensive = p.Price >  100});",4141,smitpatel,efcore
3752,Better exception message when DbContext does not have default ctor,"Tested on Full .NET, in a unit test project, with EntityFramework.Commands v7.0.0-rc2-16292.

The DbContext class lives in a shared project (i.e. the glorified linked files project type) that is referenced by the unit test project, acting as the startup project.

Calling Add-Migration and providing only a name gives error:
No DbContext was found. Ensure that you're using the correct assembly and that the type is neither abstract nor generic.

Explicitly specifying the full name (includes namespace) of the DbContext with the -Context parameter and I get an error in the form:
No DbContext named 'MyNameSpace.MyDbContext' was found.

I thought at first the shared project might be causing problems, so I repeated the test in a new console project, exact same problem.  It's a public, non-abstract and non-generic class that was functioning perfectly fine in beta6 or 7 (I forget which now).","Better exception message when DbContext does not have default ctor  Tested on Full .NET, in a unit test project, with EntityFramework.Commands v7.0.0-rc2-16292.

The DbContext class lives in a shared project (i.e. the glorified linked files project type",4084,bricelam,efcore
3803,System.TypeLoadException when generating migration in UWP app,"I'm generating a migration in my existing UWP app and I get a TypeLoad exception.

I have the following nuget packages installed for SQLite

```
""EntityFramework.Commands"": ""7.0.0-rc1-final"",
""EntityFramework.SQLite"": ""7.0.0-rc1-final"",
```

The full text of the error is

```
System.TypeLoadException: Could not find Windows Runtime type 'Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl'. ---> System.NotSupportedException: Types from custom Windows Runtime components are not supported in desktop applications.
   --- End of inner exception stack trace ---
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Signature..ctor(IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeConstructorInfo.GetParametersNoCopy()
   at System.Reflection.RuntimeConstructorInfo.GetParameters()
   at System.SharedTypeExtensions.<>c.<GetConstructibleTypes>b__19_1(ConstructorInfo c)
   at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate)
   at System.SharedTypeExtensions.<>c.<GetConstructibleTypes>b__19_0(TypeInfo t)
   at System.Linq.Enumerable.<>c__DisplayClass6_0`1.<CombinePredicates>b__0(TSource x)
   at System.Linq.Enumerable.WhereArrayIterator`1.MoveNext()
   at Microsoft.Data.Entity.Design.DbContextOperations.FindContextTypes()
   at Microsoft.Data.Entity.Design.DbContextOperations.FindContextType(String name)
   at Microsoft.Data.Entity.Design.DbContextOperations.CreateContext(String contextType)
   at Microsoft.Data.Entity.Design.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)
   at Microsoft.Data.Entity.Design.OperationExecutor.<AddMigrationImpl>d__7.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at Microsoft.Data.Entity.Design.OperationExecutor.OperationBase.<>c__DisplayClass4_0`1.<Execute>b__0()
   at Microsoft.Data.Entity.Design.OperationExecutor.OperationBase.Execute(Action action)
Could not find Windows Runtime type 'Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl'.
```

If it helps, the CanvasAnimatedControl comes from the Win2D nuget package and is not local to the project.","System.TypeLoadException when generating migration in UWP app  I'm generating a migration in my existing UWP app and I get a TypeLoad exception.

I have the following nuget packages installed for SQLite

```
""EntityFramework.Commands"": ""7.0.0-rc1-fin",4084,bricelam,efcore
4074,TPH: Validate shared columns and constraints,"It is possible to share columns, foreign keys, and indexes across a hierarchy. For example:

``` C#
class Animal {
    public int Id { get; set; }
}

class Cat : Animal {
    public string Breed { get; set; }
}

class Dog: Animal {
    public string Breed { get; set; }
}
```

We should validate (or combine) the configuration on each of the properties. Because conflicts:

``` C#
modelBuilder.Entity<Cat>().Property(c => c.Breed).HasMaxLength(30);
modelBuilder.Entity<Dog>().Property(d => d.Breed).HasMaxLength(15);
```","TPH: Validate shared columns and constraints  It is possible to share columns, foreign keys, and indexes across a hierarchy. For example:

``` C#
class Animal {
    public int Id { get; set; }
}

class Cat : Animal {
    public string Breed { get;",4075,bricelam,efcore
3061,Migrations: Allow many properties mapped to one column,"This is to unblock the scenario where two derived types have properties with the same name that could be mapped to the same property in TPH.
For the first iteration we could just use the column generated from either property.
As a minimal safeguard we could throw if the generated columns are different in any way, without trying to merge the configurations.","Migrations: Allow many properties mapped to one column  This is to unblock the scenario where two derived types have properties with the same name that could be mapped to the same property in TPH.
For the first iteration we could just use the column gene",4075,bricelam,efcore
3235,Query :: include with inheritance and join doesn't work in some cases,"Repro:

```
    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public List<Order> Orders { get; set; }
    }

    public class VipCustomer : Customer
    {
        public Foo FooProp { get; set; }
    }

    public class Foo
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class Order
    {
        public int Id { get; set; }
        public int CustomerId { get; set; }
        public string Name { get; set; }
    }

    public class MyContext : DbContext
    {
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Order> Orders { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(new SqlConnectionStringBuilder { DataSource = ""."", InitialCatalog = ""Repro3235"", MultipleActiveResultSets = true, IntegratedSecurity = true }.ToString());
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>().HasMany(e => e.Orders).WithOne().ForeignKey(e => e.CustomerId);
            modelBuilder.Entity<VipCustomer>().BaseType<Customer>();
            modelBuilder.Entity<VipCustomer>().HasOne(e => e.FooProp).WithOne().Required(false);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            using (var ctx = new MyContext())
            {
                ctx.Database.EnsureDeleted();
                ctx.Database.EnsureCreated();

                var o11 = new Order { Name = ""O11"", };// OrderDetails = new List<OrderDetail> { od111, od112 } };
                var o12 = new Order { Name = ""O13"" };
                var o21 = new Order { Name = ""O21"" };
                var o22 = new Order { Name = ""O22"", };// OrderDetails = new List<OrderDetail> { od221, od222, od223 } };
                var o23 = new Order { Name = ""O23"" };
                var o3 = new Order { Name = ""O3"" };


                var c1 = new Customer { Name = ""C1"", Orders = new List<Order> { o11, o12 } };
                var c2 = new Customer { Name = ""C2"", Orders = new List<Order> { o21, o22, o23 } };

                ctx.Customers.AddRange(c1, c2);
                ctx.Orders.AddRange(o11, o12, o21, o22, o23);
                ctx.SaveChanges();

                var foo1 = new Foo { Name = ""Foo1"" };
                var c3 = new VipCustomer { Name = ""VC3"", FooProp = foo1, Orders = new List<Order> { o3 }, };
                ctx.Customers.Add(c3);
                ctx.SaveChanges();
            }


            using (var ctx = new MyContext())
            {
                var query = from o in ctx.Orders
                            join c in ctx.Customers.OfType<VipCustomer>() on o.CustomerId equals c.Id
                            select c;

// alternative - this also fails
//                var query = 
//                            from c in ctx.Customers.OfType<VipCustomer>()
//                            join o in ctx.Orders on c.Id equals o.CustomerId
//                            select c;

                query = query.Include(c => c.Orders);
                var result = query.ToList();
            }
        }
    }

```","Query :: include with inheritance and join doesn't work in some cases  Repro:

```
    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public List<Order> Orders { get; set; }
    }",4001,anpete,efcore
3317,MSSQL - incorrect sql - Where(x => subQuery.Any(y => x.xxx == y.yyy),"Hi, I have code:

``` C#
var qSrvMail = EntityContext.Current.Query<SrvMailAddress>(); // DbSet<SrvMailAddress>
var qSubMail = EntityContext.Current.Query<KontaktMail>(); // DbSet<KontaktMail>

// PROBLEM => !qSrvMail.Any(m => m.Mail == k.Mail)
string[] mails = qSubMail.Where(k => !qSrvMail.Any(m => m.Mail == k.Mail)).Select(k => k.Mail).Distinct().ToArray();
```

It's generate this SQL:

``` SQL
SELECT DISTINCT [k].[Mail]
FROM [KontaktMail] AS [k]
WHERE CASE
    WHEN (
        SELECT CASE
            WHEN EXISTS (
                SELECT 1
                FROM [SrvMailAddress] AS [m]
                WHERE [m].[Mail] = [k].[Mail])
            THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)
        END
    ) /* = 1 <<< SOMETHING LIKE THIS MISSING!!! */
    THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)
END = 0
```

This SQL statement is broken (`An expression of non-boolean type specified in a context where a condition is expected, near 'THEN'.`)

My environment:
MSSQL 2014 Developer Ed.
EF 7 - dev branch (today synced - 2015/10/3)

EF7 ROCK (is't not ironic :D)
Thx for check, Milan","MSSQL - incorrect sql - Where(x => subQuery.Any(y => x.xxx == y.yyy)  Hi, I have code:

``` C#
var qSrvMail = EntityContext.Current.Query<SrvMailAddress>(); // DbSet<SrvMailAddress>
var qSubMail = EntityContext.Current.Query<KontaktMail>(); // DbSet<K",4001,anpete,efcore
3469,"Need a discuss and review, couple fixes and changes","#3235 fix - more than a fix, actually we could allow to use types as base types without strict declaration of base on model for example if we want separated tables with the same base entity and  ignore keys/properties from base type in child.
#3317 fix - select statement in SQL couldn't result in a bool, so just check the expression if it's select on binary expression and add "" = 1""

Also MSSQL tests does have some missed parts on SQL generation if we have different FK/PK names and result SQL query was contain wrong table reference values because of small mistake. That was fixed in this commit.","Need a discuss and review, couple fixes and changes  #3235 fix - more than a fix, actually we could allow to use types as base types without strict declaration of base on model for example if we want separated tables with the same base entity and  ignore",4001,anpete,efcore
3749,Scratch databases not disposed during testing,"![image](https://cloud.githubusercontent.com/assets/2696087/11153815/5d0a703a-89f0-11e5-86cf-799a90824399.png)","Scratch databases not disposed during testing  ![image](https://cloud.githubusercontent.com/assets/2696087/11153815/5d0a703a-89f0-11e5-86cf-799a90824399.png)",3769,natemcmaster,efcore
3594,Fix the build on non-Windows platforms,"Related to https://github.com/aspnet/Universe/issues/304. EntityFramework is currently disabled because we're not able to clone and build it on Linux/OS X to then run tests on CoreCLR.","Fix the build on non-Windows platforms  Related to https://github.com/aspnet/Universe/issues/304. EntityFramework is currently disabled because we're not able to clone and build it on Linux/OS X to then run tests on CoreCLR.",3769,natemcmaster,efcore
2203,Switch test projects to use .NET 4.6,"As suggested by @divega and @bricelam in #2160, the test projects would benefit from switching to .NET 4.6 by enabling the use of .NET 4.6 APIs, e.g. setable CultureInfo.CurrentCulture/CurrentUICulture properties.","Switch test projects to use .NET 4.6  As suggested by @divega and @bricelam in #2160, the test projects would benefit from switching to .NET 4.6 by enabling the use of .NET 4.6 APIs, e.g. setable CultureInfo.CurrentCulture/CurrentUICulture properties.",2326,bricelam,efcore
1682,Use project.json for .csproj package references via kpm list,"This gets rid of our silly `<PackageReference>` elements and makes `project.json` the source of truth for both csproj and kproj-based solutions. It also enables us to use some of the newer contracts like `System.IO.FileSystem` from the csproj-based solution.

Unfortunately, there is a bug in .NET Framework 4.6 that prevents the tests from running in the csproj-based solution. We probably want to wait until the fix is released publicly before merging.",Use project.json for .csproj package references via kpm list  This gets rid of our silly `<PackageReference>` elements and makes `project.json` the source of truth for both csproj and kproj-based solutions. It also enables us to use some of the newer cont,2326,bricelam,efcore
2219,Use start-up project for  ConfigureServices,"I am trying to set up a project where the business logic (including data model) is separated from UI/web. The context has only a ctor that takes only `DbContextOptions` because I want to use `InMemoryStore` for tests and SqlServer when actually running the app. I am trying to add a migration from the ""engine"" project and provide the web project as the start up project since this is where I configure EF to use SqlServer (in the `ConfigureServices` method). This is on Beta4 bits.

`dnx . ef migration add initial -s StarTrader`

```
Information: [LoaderContainer]: Load name=EntityFramework.Relational
Information: [NuGetAssemblyLoader]: Loaded name=EntityFramework.Relational in 3ms
System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.Data.Entity.Commands.Program.GetProjectPath(String projectName)
   at Microsoft.Data.Entity.Commands.Program.ExecuteInDirectory(String startupProject, Func`1 invoke)
   at Microsoft.Data.Entity.Commands.Program.AddMigration(String name, String context, String startupProject)
   at Microsoft.Data.Entity.Commands.Program.<>c__DisplayClass7_1.<Main>b__6()
   at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)
   at Microsoft.Data.Entity.Commands.Program.Main(String[] args)
```

There is a recent [change](#f3749bd69672d1bcb0e2d977f5509471b0faf4d9) that touched this code so it might be already fixed in beta5",Use start-up project for  ConfigureServices   I am trying to set up a project where the business logic (including data model) is separated from UI/web. The context has only a ctor that takes only `DbContextOptions` because I want to use `InMemoryStore` fo,2288,bricelam,efcore
2024,Flow IServiceProvider to ContextTool,"src/EntityFramework.Commands/ContextTool.cs needs the ISP to avoid relying on CallContextServiceLocator for Hosting","Flow IServiceProvider to ContextTool  src/EntityFramework.Commands/ContextTool.cs needs the ISP to avoid relying on CallContextServiceLocator for Hosting",2288,bricelam,efcore
284,Adds early filtering support.,"Introduces some basic relational filtering support and query parameterization.","Adds early filtering support.  Introduces some basic relational filtering support and query parameterization.",2288,bricelam,efcore
578,Commands: Help/Documentation,"Add `about_EntityFramework` and individual command help.

Notify user of help on install.

Mention the magic _0_ migration.","Commands: Help/Documentation  Add `about_EntityFramework` and individual command help.

Notify user of help on install.

Mention the magic _0_ migration.",2150,bricelam,efcore
975,Migrations: Log more info,"We should log more in Migraitons:
- What database we're targeting (verbose)
  
  > Target database is: 'ConsoleApplication1.Context' (DataSource: (localdb)\mssqllocaldb, Provider: System.Data.SqlClient, Origin: Convention).
- Success messages
- What namespace is used for a migration (verbose)
- Where a migration is scaffolded (verbose)
- If data loss was scaffolded (warning)","Migrations: Log more info  We should log more in Migraitons:
- What database we're targeting (verbose)
  
  > Target database is: 'ConsoleApplication1.Context' (DataSource: (localdb)\mssqllocaldb, Provider: System.Data.SqlClient, Origin: Convention).",2150,bricelam,efcore
1044,Commands: Review what info we print on error,"Currently we just print the exception message in as an error and that is all. For some messages this kind of works but for some it's not clear:

```
PM>  Apply-Migration 
Keyword not supported: 'databaseabc'.
```

In the EF6 we wrote out Exception.ToString() and then the exception message as an error. We could either do this, or add some context to the start `ArgumentException occurred while applying migrations: Keyword not supported: 'databaseabc'.` and tell folks to use `-verbose` for more info.

In other cases we also print the stack trace when it's not needed (which detracts from the useful info):

```
System.InvalidOperationException: More than one DbContext was found. Specify which one to use.
   at Microsoft.Data.Entity.Commands.ContextTool.SelectType(IEnumerable`1 types, String name)
   at Microsoft.Data.Entity.Commands.MigrationTool.GetContextType(String name)
   at Microsoft.Data.Entity.Commands.MigrationTool.GetMigrations(String contextTypeName)
   at Microsoft.Data.Entity.Commands.Program.ListMigrations(String context)
   at Microsoft.Data.Entity.Commands.Program.<>c__DisplayClass8_3.<Main>b__10()
   at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)
   at Microsoft.Data.Entity.Commands.Program.Main(String[] args)
```

As part of this we should also make sure we print solutions to the problems. For example, in the above error message there is no info on how to specify which context to use.","Commands: Review what info we print on error  Currently we just print the exception message in as an error and that is all. For some messages this kind of works but for some it's not clear:

```
PM>  Apply-Migration 
Keyword not supported: 'databaseab",2150,bricelam,efcore
1280,Implement Migrations Idempotent script option,"The option exists for the k ef migration script command, but the -i flag does not currently have any effect","Implement Migrations Idempotent script option  The option exists for the k ef migration script command, but the -i flag does not currently have any effect",1746,bricelam,efcore
1281,Migrations: Implement Script-Migration ranges,"``` PowerShell
Script-Migration Version1 Version2
```

Should output a script to take the database from v1 to v2.","Migrations: Implement Script-Migration ranges  ``` PowerShell
Script-Migration Version1 Version2
```

Should output a script to take the database from v1 to v2.",1746,bricelam,efcore
1271,Make all key properties have the GenerateValueOnAdd flag set by convention,"We are making a change so that the default behavior for properties that are part if keys is to have value generation enabled. Several points:
- Even with this flag set values will only be generated if the value of the property has not been set (is the default) when the entity is added. This means that use of non-generated keys where values have been set should not be affected.
- There is chance of collision of real key space and temporary key space, but we think this is unlikely to be a problem in the wild. Where collisions might occur they can be avoided by always setting key values explicitly so value generation never kicks in or by configuring different value generators that do not collide.
- Always generating keys provides a more flexible experience for dealing with disconnected graphs since temporary values will be used which can then be changed before saving
- An exception will be thrown if key generation is needed but no key generator is configured This can be avoided by setting the values explicitly before add or adding a new value generator.
- An exception will be thrown if a temporary key value is still set when the state of the object is changed to Unchanged, Modified, or Deleted. This will happen if SaveChanges is given temp values and doesn't generate real values.","Make all key properties have the GenerateValueOnAdd flag set by convention  We are making a change so that the default behavior for properties that are part if keys is to have value generation enabled. Several points:
- Even with this flag set values wil",1741,smitpatel,efcore
1271,Make all key properties have the GenerateValueOnAdd flag set by convention,"We are making a change so that the default behavior for properties that are part if keys is to have value generation enabled. Several points:
- Even with this flag set values will only be generated if the value of the property has not been set (is the default) when the entity is added. This means that use of non-generated keys where values have been set should not be affected.
- There is chance of collision of real key space and temporary key space, but we think this is unlikely to be a problem in the wild. Where collisions might occur they can be avoided by always setting key values explicitly so value generation never kicks in or by configuring different value generators that do not collide.
- Always generating keys provides a more flexible experience for dealing with disconnected graphs since temporary values will be used which can then be changed before saving
- An exception will be thrown if key generation is needed but no key generator is configured This can be avoided by setting the values explicitly before add or adding a new value generator.
- An exception will be thrown if a temporary key value is still set when the state of the object is changed to Unchanged, Modified, or Deleted. This will happen if SaveChanges is given temp values and doesn't generate real values.","Make all key properties have the GenerateValueOnAdd flag set by convention  We are making a change so that the default behavior for properties that are part if keys is to have value generation enabled. Several points:
- Even with this flag set values wil",1741,jamesqo,corert
1126,SqlServer: Autogenerated integer values for composite PK,"In present implementation SqlServer auto generates values for integer columns even if its a part of composite primary key which is not desirable by design.","SqlServer: Autogenerated integer values for composite PK  In present implementation SqlServer auto generates values for integer columns even if its a part of composite primary key which is not desirable by design.",1741,smitpatel,efcore
1126,SqlServer: Autogenerated integer values for composite PK,"In present implementation SqlServer auto generates values for integer columns even if its a part of composite primary key which is not desirable by design.","SqlServer: Autogenerated integer values for composite PK  In present implementation SqlServer auto generates values for integer columns even if its a part of composite primary key which is not desirable by design.",1741,jamesqo,corert
1116,Code First: Relational: Invalid database schema created when one-to-one association,"The dependent table gets created with an Identity key, which doesn't work because it's an FK.

More generally, it is typically invalid to have a store generated FK. How should we handle? Check in model? Check in update pipeline? No explicit check?","Code First: Relational: Invalid database schema created when one-to-one association  The dependent table gets created with an Identity key, which doesn't work because it's an FK.

More generally, it is typically invalid to have a store generated FK. How",1741,smitpatel,efcore
1116,Code First: Relational: Invalid database schema created when one-to-one association,"The dependent table gets created with an Identity key, which doesn't work because it's an FK.

More generally, it is typically invalid to have a store generated FK. How should we handle? Check in model? Check in update pipeline? No explicit check?","Code First: Relational: Invalid database schema created when one-to-one association  The dependent table gets created with an Identity key, which doesn't work because it's an FK.

More generally, it is typically invalid to have a store generated FK. How",1741,jamesqo,corert
1286,Mapping : Error depending on order of Required/ForeignKey,"Consider the following:

```
public class Person
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public House SummerHouse { get; set; }
        public int? SummerHouseId { get; set; }
    }

    public class House
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public Person Owner { get; set; }
    }

    public class MyContext : DbContext
    {
        public DbSet<Person> People { get; set; }

        public DbSet<House> Houses { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<House>().Property(h => h.Id);
            modelBuilder.Entity<Person>().Property(h => h.Id);
            modelBuilder.Entity<Person>().OneToOne(p => p.SummerHouse, h => h.Owner).Required(false).ForeignKey<Person>(h => h.SummerHouseId);
        }

        protected override void OnConfiguring(DbContextOptions options)
        {
            options.UseSqlServer(new SqlConnectionStringBuilder { DataSource = ""."", InitialCatalog = ""NullableOneToOne"", IntegratedSecurity = true }.ToString());
        }
    }
```

this throws the following:

Unhandled Exception: System.InvalidOperationException: The property 'Id' on entity type 'House' cannot be marked as nullable/optional because the type of the property is 'Int32' which is not a nullable type. Any property can be marked as non-nullable/required, but only properties of nullable types can be marked as nullable/optional.
   at Microsoft.Data.Entity.Metadata.Property.set_IsNullable(Nullable`1 value)
   at Microsoft.Data.Entity.Metadata.ForeignKey.set_IsRequired(Nullable`1 value)

   at Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder.Requir
ed(Boolean required)
   at Microsoft.Data.Entity.Metadata.ModelBuilder.EntityBuilder.OneToOneBuilder.
Required(Boolean required)
   at NullableOneToOne.MyContext.OnModelCreating(ModelBuilder modelBuilder) in D
:\Projects\NullableOneToOne\NullableOneToOne\Program.cs:line 41
   at Microsoft.Data.Entity.Infrastructure.ModelSourceHelpers.OnModelCreating(Db
Context context, ModelBuilder modelBuilder)
   at Microsoft.Data.Entity.Infrastructure.DefaultModelSource.CreateModel(DbCont
ext context, IModelBuilderFactory modelBuilderFactory)
   at Microsoft.Data.Entity.Infrastructure.DefaultModelSource.<>c__DisplayClass0
.<GetModel>b__1(Type k)
   at Microsoft.Data.Entity.Utilities.ThreadSafeDictionaryCache`2.GetOrAdd(TKey
key, Func`2 factory)
   at Microsoft.Data.Entity.Infrastructure.DefaultModelSource.GetModel(DbContext
 context, IModelBuilderFactory modelBuilderFactory)
   at Microsoft.Data.Entity.Infrastructure.DbContextServices.CreateModel()
   at Microsoft.Data.Entity.Utilities.LazyRef`1.get_Value()
   at Microsoft.Data.Entity.Infrastructure.DbContextServices.get_Model()
   at Microsoft.Data.Entity.Infrastructure.DbContextServices.<>c__DisplayClass7.
<get_ModelFactory>b__9()
   at Microsoft.Data.Entity.Utilities.LazyRef`1.get_Value()
   at Microsoft.Data.Entity.Infrastructure.DbContextService`1.get_Service()
   at Microsoft.Data.Entity.Infrastructure.Database.get_Model()
   at Microsoft.Data.Entity.Infrastructure.Database.EnsureDeleted()
   at NullableOneToOne.Program.Main(String[] args) in D:\Projects\NullableOneToO
ne\NullableOneToOne\Program.cs:line 57

<!---
@huboard:{""order"":1374.0,""milestone_order"":1286,""custom_state"":""""}
-->","Mapping : Error depending on order of Required/ForeignKey  Consider the following:

```
public class Person
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public House SummerHouse { get; set; }
        p",1575,AndriySvyryd,efcore
1555,OneToOneBuilder will add a property if Required() is called before ForeignKey(),"I don't know if this is by design, if not, it's a regression, previous version doesn't have this problem.

```
        modelBuilder.Entity(""EF7Test.Contacts"").HasOne(""EF7Test.Users"", ""User2"").WithOne().
            Required(false).
            ForeignKey(""EF7Test.Contacts"", ""UserSID"").ReferencedKey(""EF7Test.Users"", ""SID"");
```

After this a property is forcefully added to entity ""Contacts"", named ""User2SID"".
But this works as expected:

```
        modelBuilder.Entity(""EF7Test.Contacts"").HasOne(""EF7Test.Users"", ""User2"").WithOne().
            ForeignKey(""EF7Test.Contacts"", ""UserSID"").ReferencedKey(""EF7Test.Users"", ""SID"").
            Required(false);
```

Maybe we require that Required() must be called last, then it's by design.","OneToOneBuilder will add a property if Required() is called before ForeignKey()  I don't know if this is by design, if not, it's a regression, previous version doesn't have this problem.

```
        modelBuilder.Entity(""EF7Test.Contacts"").HasOne(""EF7T",1575,AndriySvyryd,efcore
1347,Migrations do not scaffold index create or drop for new tables,"Working through the code first blog sample (http://msdn.microsoft.com/en-us/data/jj591621), when adding the Post class migration, the scaffold code does not include index code for BlogId

``` cs
    public partial class AddPostClass : Migration
    {
        public override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn(""Blog"", ""Rating"", c => c.Int(nullable: false));

            migrationBuilder.CreateTable(""Post"",
                c => new
                    {
                        PostId = c.Int(nullable: false, identity: true),
                        Content = c.String(),
                        Title = c.String(),
                        BlogId = c.Int(nullable: false)
                    })
                .PrimaryKey(""PK_Post"", t => t.PostId);

            migrationBuilder.AddForeignKey(
                ""Post"",
                ""FK_Post_Blog_BlogId"",
                new[] { ""BlogId"" },
                ""Blog"",
                new[] { ""BlogId"" },
                cascadeDelete: false);
        }

        public override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(""Blog"", ""Rating"");

            migrationBuilder.DropTable(""Post"");
        }
    }
```","Migrations do not scaffold index create or drop for new tables  Working through the code first blog sample (http://msdn.microsoft.com/en-us/data/jj591621), when adding the Post class migration, the scaffold code does not include index code for BlogId

`",1569,bricelam,efcore
1283,Migrations: Custom MigrationCodeGenerator,"There is currently no way for users to provide their own implementation of `MigrationCodeGenerator`; it is hardcoded to `CSharpMigrationCodeGenerator`.

This is particularly tricky because we no longer have `DbMigrationsConfiguration` and it may not make sense to add a design-time dependency in `OnConfiguring()`.","Migrations: Custom MigrationCodeGenerator  There is currently no way for users to provide their own implementation of `MigrationCodeGenerator`; it is hardcoded to `CSharpMigrationCodeGenerator`.

This is particularly tricky because we no longer have `Db",1569,bricelam,efcore
1240,Migrations: Make database creation part of migration code,"We should scaffold an API that does the CreateDatabaseIfNotExists operation (that way it can be removed, customized, etc.)

<!---
@huboard:{""order"":1264.75}
-->","Migrations: Make database creation part of migration code  We should scaffold an API that does the CreateDatabaseIfNotExists operation (that way it can be removed, customized, etc.)

<!---
@huboard:{""order"":1264.75}
-->",1569,bricelam,efcore
1212,"UseMigrationAssembly should take string, not Assembly","The dependency direction is always from your migrations assembly to your context assembly. Therefore, you always have to call `Assembly.Load` before `UseMigrationAssembly`.

We should change it to just take a string instead and call `Assembly.Load` for the user.","UseMigrationAssembly should take string, not Assembly  The dependency direction is always from your migrations assembly to your context assembly. Therefore, you always have to call `Assembly.Load` before `UseMigrationAssembly`.

We should change it to j",1569,bricelam,efcore
1178,Consider changes to Migrations to allow creation resiliency to be used,"See Issue #985. This mechanism doesn't currently kick in when ApplyMigrations causes the database to be created. This is because the mechanism is implemented outside of the migration operation, which is in turn because migrations operations cannot execute some arbitrary code as oppose to just generating SQL that can be executed.",Consider changes to Migrations to allow creation resiliency to be used  See Issue #985. This mechanism doesn't currently kick in when ApplyMigrations causes the database to be created. This is because the mechanism is implemented outside of the migration,1569,bricelam,efcore
1107,Migrations: ModelDiffer.CreateSchema and ModelDiffer.FindCreatedTables improvements.,"These two methods add separate AddForeignKey operations, in addition to the CreateTable operations, to the output operation collection. This is done to solve the problem of circular fk references on SqlServer. Instead they could simply create the CreateTable operations, while their associated AddForeignKey operations can be handled in the SqlServer operation processor. Either way works, but doing this seems nicer.","Migrations: ModelDiffer.CreateSchema and ModelDiffer.FindCreatedTables improvements.  These two methods add separate AddForeignKey operations, in addition to the CreateTable operations, to the output operation collection. This is done to solve the problem",1569,bricelam,efcore
1108,Migrations: Figure out if the isDestructiveChange argument of AlterColumnOperation constructor is useful.,"Remove if not useful.
Otherwise add code to compute it in the differ where possible.","Migrations: Figure out if the isDestructiveChange argument of AlterColumnOperation constructor is useful.  Remove if not useful.
Otherwise add code to compute it in the differ where possible.",1569,bricelam,efcore
1067,Invalid names for migrations,"If C# keyword is used for the name of the migration like this

```
k ef migration add new
```

then the generated file for migration is as follows

``` C#
namespace BloggingSample.Migrations
{
    public partial class new : Migration
    {
        public override void Up(MigrationBuilder migrationBuilder)
        {
        }

        public override void Down(MigrationBuilder migrationBuilder)
        {
        }
    }
}
```

which is invalid C# code therefore any further use of ""**k ef**"" throws an error.","Invalid names for migrations  If C# keyword is used for the name of the migration like this

```
k ef migration add new
```

then the generated file for migration is as follows

``` C#
namespace BloggingSample.Migrations
{
    public partial cl",1569,bricelam,efcore
879,"Migrations: Clustered, Identity & Computed columns are SQL Server specific","Note that this is different from sequences which are relational everywhere but are currently only used in a SQL Server specific way.

<!---
@huboard:{""order"":10.234375,""milestone_order"":879,""custom_state"":""""}
-->","Migrations: Clustered, Identity & Computed columns are SQL Server specific  Note that this is different from sequences which are relational everywhere but are currently only used in a SQL Server specific way.

<!---
@huboard:{""order"":10.234375,""milesto",1569,bricelam,efcore
851,Decide on default sequence name,"Current behavior is that if you don't specify a specific sequence name to use then all sequences will share a single sequence called ""EntityFrameworkDefaultSequence"".","Decide on default sequence name  Current behavior is that if you don't specify a specific sequence name to use then all sequences will share a single sequence called ""EntityFrameworkDefaultSequence"".",1569,bricelam,efcore
666,Cleanup generated migrations code,"A few things I've noticed:
- [ ] Place 'System' directives first when sorting usings
- [ ] `MigrationId` getter should be on a single line
- [ ] ~~Don't explicitly implement IMigrationMetadata (No longer needed thanks to `MigrationBuilder`)~~
- [ ] Don't create space-only lines (#654)","Cleanup generated migrations code  A few things I've noticed:
- [ ] Place 'System' directives first when sorting usings
- [ ] `MigrationId` getter should be on a single line
- [ ] ~~Don't explicitly implement IMigrationMetadata (No longer needed thanks",1569,bricelam,efcore
1181,ModelBuilder is not dynamically selected by provider in the correct way,"ModelBuilder is added as a common service in AddEntityFramework but an attempt is made to specialize in AddAzureTableStorage.

If the ModelBuilder needs to be specialized, then it needs to be dynamically selected as part of the provider services such that multiple providers can register different model differs without one hiding another.

Note that the cross-store functional tests are not currently catching this issue.","ModelBuilder is not dynamically selected by provider in the correct way  ModelBuilder is added as a common service in AddEntityFramework but an attempt is made to specialize in AddAzureTableStorage.

If the ModelBuilder needs to be specialized, then it",1523,AndriySvyryd,efcore
1510,Change DI contracts to stateless types with parameterless constructor,"The service contracts should be represented by field-less classes without non-default constructors. Default implementations should be separated to base classes
Pros:
• We can make some API changes without breaking implementation
• We can add helper methods inline instead of using extensions
• They can be mocked easily
• Implementations can have different fields and constructor parameters
Cons:
• Cannot implement more than one service in a single class

Proposed changes summary:
IValueGeneratorFactory -> 
SimpleValueGeneratorFactory<TValueGenerator> -> ValueGeneratorFactory<TValueGenerator>
IValueGenerator -> ValueGenerator
ValueGeneratorSelector -> ValueGeneratorSelector, ValueGeneratorSelectorBase
ValueGeneratorCache -> ValueGeneratorCache, ValueGeneratorCacheBase
IValueReader -> ValueReader
DbSetFinder -> DbSetFinder, CachingDbSetFinder
DbSetSource -> DbSetSource, CachingDbSetSource
DbSetInitializer -> DbSetInitializer, DbSetInitializerBase
EntityKeyFactorySource -> EntityKeyFactorySource, EntityKeyFactorySourceBase
ClrPropertyGetterSource -> IClrPropertyGetterSource
ClrPropertySetterSource -> IClrPropertySetterSource
ClrCollectionAccessorSource -> IClrCollectionAccessorSource, ClrAccessorSource
ClrAccessorSource<IClrPropertyGetter> -> ClrAccessorSource
EntityMaterializerSource -> EntityMaterializerSource, EntityMaterializerSourceBase
MemberMapper -> MemberMapper, MemberMapperBase
ICompiledQueryCache -> CompiledQueryCache
CompiledQueryCache -> CompiledQueryCacheBase
ForeignKeyValuePropagator -> ForeignKeyValuePropagatorBase
DataStoreSelector -> DataStoreSelector, DataStoreSelectorBase
StateEntryFactory -> StateEntryFactory, StateEntryFactoryBase
NavigationFixer -> NavigationFixer, NavigationFixerBase
ChangeDetector -> ChangeDetector, ChangeDetectorBase
StateEntryNotifier -> StateEntryNotifier, StateEntryNotifierBase
StateEntrySubscriber -> StateEntrySubscriberBase
IDbContextOptions -> IDbContextOptions, DbContextOptions
DbContextOptions -> DbContextOptionsBase
StateManager -> StateManager, StateManagerBase
ValueGenerationManager -> ValueGenerationManager, ValueGenerationManagerBase
EntityQueryExecutor -> EntityQueryExecutor, EntityQueryExecutorBase
EntityQueryProvider -> EntityQueryProvider, EntityQueryProviderBase
ChangeTracker -> ChangeTracker, ChangeTrackerBase
EntityEntryGraphIterator -> EntityEntryGraphIterator, EntityEntryGraphIteratorBase
DataStore -> DataStore, DataStoreBase
IQueryBuffer -> QueryBuffer
QueryBuffer -> QueryBufferBase
DataStoreConnection -> DataStoreConnection, DataStoreConnectionBase
IModelSource -> ModelSource
DefaultModelSource -> ModelSourceBase
IModelBuilderFactory ->

Migrations:
MigrationAssembly -> MigrationAssembly, MigrationAssemblyBase
HistoryRepository -> HistoryRepository, HistoryRepositoryBase
Migrator -> Migrator, MigratorBase

Relational:
ParameterNameGenerator
ModificationCommandComparer -> SaveChangesCommandSorter

Provider-specific?","Change DI contracts to stateless types with parameterless constructor  The service contracts should be represented by field-less classes without non-default constructors. Default implementations should be separated to base classes
Pros:
• We can make so",1523,AndriySvyryd,efcore
1461,Investigate IModel caching behavior,"A couple of things to consider:

1) Should models be cached per provider?
2) Models are currently only cached by the DefaultModelSource, should we instead cache the result of IModelSource.GetModel?","Investigate IModel caching behavior  A couple of things to consider:

1) Should models be cached per provider?
2) Models are currently only cached by the DefaultModelSource, should we instead cache the result of IModelSource.GetModel?",1497,AndriySvyryd,efcore
1089,Testing: Decisions from Design Meeting,"Implement decisions on fixtures etc. from design meeting","Testing: Decisions from Design Meeting  Implement decisions on fixtures etc. from design meeting",1497,AndriySvyryd,efcore
1383,Relationship API changes,"We have feedback both from within our team and our customers that the new relationship API isn't super intuitive. After some discussion it seems like a hybrid of the EF6 API and the new one is probably a good solution:

```
modelBuilder.Entity<Order>()
    .HasOne(o => o.Product)
    .WithMany(p => p.Orders)
    .Required(false)
    .ForeignKey(o => o.ProductId);
```

Required and ForeignKey would still be optional.

We wouldn't do all the matching up of partial specifications from each end of the relationship that we did in EF6.","Relationship API changes  We have feedback both from within our team and our customers that the new relationship API isn't super intuitive. After some discussion it seems like a hybrid of the EF6 API and the new one is probably a good solution:

```
mo",1410,AndriySvyryd,efcore
1152,Code First: Nav apis permit zero nav props to be specified,"builder.Entity<Genre>().OneToMany<Album>();

Probably need to switch to overloads instead of default args.","Code First: Nav apis permit zero nav props to be specified  builder.Entity<Genre>().OneToMany<Album>();

Probably need to switch to overloads instead of default args.",1410,AndriySvyryd,efcore
1391,Connection configuration allows multiple definitions,"When a connection string is defined with the DbContext ""ConnectionString"" and ""ConnectionStringKey"" keys, the last defined connection is used. This definition is ambiguous and should probably throw.

``` cs
    public class MyContext : DbContext
    {
        public MyContext(IServiceProvider serviceProvider)
            : base(serviceProvider)
        {
        }
    }
```

``` cs
        public void Main(string[] args)
        {
            var configuration = new Configuration();
            configuration.AddJsonFile(""config.json"");

            var serviceProvider = new ServiceCollection()
                .AddEntityFramework(configuration)
                .AddSqlServer()
                .AddDbContext<MyContext>()
                .ServiceCollection
                .BuildServiceProvider();

            using (var context = new MyContext(serviceProvider))
            {
                context.Database.EnsureCreated();
                Console.WriteLine(context.Database.AsRelational().Connection.ConnectionString);
                Console.ReadLine();
            }
        }
```

``` json
{
    ""Data"": {
        ""DefaultConnection"": {
            ""ConnectionString"": ""Data Source=(localdb)\\v11.0;Initial Catalog=MyDBSecond;Integrated Security=True;MultipleActiveResultSets=True;Connect Timeout=30""
        }
    },

    ""EntityFramework"": {
        ""MyContext"": {
            ""ConnectionString"": ""Data Source=(localdb)\\v11.0;Initial Catalog=MyDBFirst;Integrated Security=True;MultipleActiveResultSets=True;Connect Timeout=30"",
            ""ConnectionStringKey"": ""Data:DefaultConnection:ConnectionString""
        }
    }
}
```","Connection configuration allows multiple definitions  When a connection string is defined with the DbContext ""ConnectionString"" and ""ConnectionStringKey"" keys, the last defined connection is used. This definition is ambiguous and should probably throw.
",1409,smitpatel,efcore
1395,Connection configuration always chooses configuration with full name,"When using multiple configuration files, if one configuration file specifies a connection string using the full name of the DbContext and the other uses the short name, the configuration from the file with the full name is always selected regardless of the order of the configuration files.

``` cs
namespace FullName
{
    public class MyContext : DbContext
    {
        public MyContext(IServiceProvider serviceProvider)
            : base(serviceProvider)
        {
        }
    }

    public class Program
    {
        public void Main(string[] args)
        {
            var configuration = new Configuration();
            configuration.AddIniFile(""config1.ini"");
            configuration.AddIniFile(""config2.ini"");

            var serviceProvider = new ServiceCollection()
                .AddEntityFramework(configuration)
                .AddSqlServer()
                .AddDbContext<MyContext>()
                .ServiceCollection
                .BuildServiceProvider();

            using (var context = new MyContext(serviceProvider))
            {
                context.Database.EnsureCreated();
                Console.WriteLine(context.Database.AsRelational().Connection.ConnectionString);
                Console.ReadLine();
            }
        }
    }
}
```

config1.ini:

``` ini
[EntityFramework]
FullName.MyContext:ConnectionString = Data Source=(localdb)\v11.0;Initial Catalog=MyDBFull;Integrated Security=True;MultipleActiveResultSets=True;Connect Timeout=30
```

config2.ini

``` ini
[EntityFramework]
MyContext:ConnectionString = Data Source=(localdb)\v11.0;Initial Catalog=MyDBShort;Integrated Security=True;MultipleActiveResultSets=True;Connect Timeout=30
```","Connection configuration always chooses configuration with full name  When using multiple configuration files, if one configuration file specifies a connection string using the full name of the DbContext and the other uses the short name, the configuratio",1409,smitpatel,efcore
213,Model Definition: Implement Default Model Builder Conventions,"- [x] Entity type conventions
  - [x] Property discovery
    - [x] Support for Ignore on property
  - [x] Navigation/relationship discovery
    - [x] Support for Ignore on entity type
    - [x] Support for Ignore on navigation property
    - [x] ~~Do not discover entity types if no relationships to it can be created~~ (Relationships can always be created to non-shadow entity types)
  - [x] Key properties discovery
- [x] FK conventions
  - [x] Determine the principal in 1-1 deterministically using the entity type/navigation order
  - [x] FK properties discovery
  - [x] ~~New property triggers FK convention~~ (Not needed yet, will revisit after RTM)
- [x] Key conventions
  - [x] New PK triggers FK creation on already discovered relationships
  - [x] ~~New CK triggers FK properties discovery for any referencing FKs~~ (Existing CKs aren't used for relationships by convention)
- [x] Provider-specific conventions
  - [x] ~~MaxLength~~ (The default MaxLength will be determined by the TypeMapper and not stored in the model)
  - [x] ~~FK facet propagation~~ (This will be handled by the RelationalTypeMapper, see #2455)
  - [x] SqlServer Identity
- [x] ~~Internal builder wrappers for conventions~~ (Convention API polish will happen after RTM)","Model Definition: Implement Default Model Builder Conventions  - [x] Entity type conventions
  - [x] Property discovery
    - [x] Support for Ignore on property
  - [x] Navigation/relationship discovery
    - [x] Support for Ignore on entity type",1317,AndriySvyryd,efcore
213,Model Definition: Implement Default Model Builder Conventions,"- [x] Entity type conventions
  - [x] Property discovery
    - [x] Support for Ignore on property
  - [x] Navigation/relationship discovery
    - [x] Support for Ignore on entity type
    - [x] Support for Ignore on navigation property
    - [x] ~~Do not discover entity types if no relationships to it can be created~~ (Relationships can always be created to non-shadow entity types)
  - [x] Key properties discovery
- [x] FK conventions
  - [x] Determine the principal in 1-1 deterministically using the entity type/navigation order
  - [x] FK properties discovery
  - [x] ~~New property triggers FK convention~~ (Not needed yet, will revisit after RTM)
- [x] Key conventions
  - [x] New PK triggers FK creation on already discovered relationships
  - [x] ~~New CK triggers FK properties discovery for any referencing FKs~~ (Existing CKs aren't used for relationships by convention)
- [x] Provider-specific conventions
  - [x] ~~MaxLength~~ (The default MaxLength will be determined by the TypeMapper and not stored in the model)
  - [x] ~~FK facet propagation~~ (This will be handled by the RelationalTypeMapper, see #2455)
  - [x] SqlServer Identity
- [x] ~~Internal builder wrappers for conventions~~ (Convention API polish will happen after RTM)","Model Definition: Implement Default Model Builder Conventions  - [x] Entity type conventions
  - [x] Property discovery
    - [x] Support for Ignore on property
  - [x] Navigation/relationship discovery
    - [x] Support for Ignore on entity type",1317,jeremylindsayni,sdk
1117,Code First: FK convention for one-to-ones,"We should not include dependent PK columns when trying to match FK columns in a one-to-one dependent. The reason is because we don't want to accidentally introduce an identifying FK because the dependent PK matched the convention at a higher priority than some other potential FK.",Code First: FK convention for one-to-ones  We should not include dependent PK columns when trying to match FK columns in a one-to-one dependent. The reason is because we don't want to accidentally introduce an identifying FK because the dependent PK match,1317,AndriySvyryd,efcore
1117,Code First: FK convention for one-to-ones,"We should not include dependent PK columns when trying to match FK columns in a one-to-one dependent. The reason is because we don't want to accidentally introduce an identifying FK because the dependent PK matched the convention at a higher priority than some other potential FK.",Code First: FK convention for one-to-ones  We should not include dependent PK columns when trying to match FK columns in a one-to-one dependent. The reason is because we don't want to accidentally introduce an identifying FK because the dependent PK match,1317,jeremylindsayni,sdk
1123,Code First: Strange FK introduction for one-to-one,"Given:

``` c#
public class Person2
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Address2 Address { get; set; }
    }

    public class Address2
    {
        public string Id { get; set; }
        public string Street { get; set; }
        public string City { get; set; }
        public Person2 Resident { get; set; }
    }

modelBuilder
    .Entity<Person2>(e => e.OneToOne(p => p.Address, a => a.Resident));
```

Code First produces

string Person2.IdKey (unique key)
string Address2.Id (pk, fk -> IdKey)

Seems wrong. I would expect a shadow unique int FK to be introduced on Address2 and reference Person2.Id.","Code First: Strange FK introduction for one-to-one  Given:

``` c#
public class Person2
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Address2 Address { get; set; }
    }

    public class Addr",1317,AndriySvyryd,efcore
1123,Code First: Strange FK introduction for one-to-one,"Given:

``` c#
public class Person2
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Address2 Address { get; set; }
    }

    public class Address2
    {
        public string Id { get; set; }
        public string Street { get; set; }
        public string City { get; set; }
        public Person2 Resident { get; set; }
    }

modelBuilder
    .Entity<Person2>(e => e.OneToOne(p => p.Address, a => a.Resident));
```

Code First produces

string Person2.IdKey (unique key)
string Address2.Id (pk, fk -> IdKey)

Seems wrong. I would expect a shadow unique int FK to be introduced on Address2 and reference Person2.Id.","Code First: Strange FK introduction for one-to-one  Given:

``` c#
public class Person2
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Address2 Address { get; set; }
    }

    public class Addr",1317,jeremylindsayni,sdk
1125,Code First: One-to-one FK discovery of shadow prop,"Given:

``` c#
modelBuilder.Entity<Address2>().Property<int>(""PersonId"");

modelBuilder
    .Entity<Person2>(
        e => e.OneToOne(p => p.Address, a => a.Resident));
```

We should discover PersonId as the FK.","Code First: One-to-one FK discovery of shadow prop  Given:

``` c#
modelBuilder.Entity<Address2>().Property<int>(""PersonId"");

modelBuilder
    .Entity<Person2>(
        e => e.OneToOne(p => p.Address, a => a.Resident));
```

We should discover",1317,AndriySvyryd,efcore
1125,Code First: One-to-one FK discovery of shadow prop,"Given:

``` c#
modelBuilder.Entity<Address2>().Property<int>(""PersonId"");

modelBuilder
    .Entity<Person2>(
        e => e.OneToOne(p => p.Address, a => a.Resident));
```

We should discover PersonId as the FK.","Code First: One-to-one FK discovery of shadow prop  Given:

``` c#
modelBuilder.Entity<Address2>().Property<int>(""PersonId"");

modelBuilder
    .Entity<Person2>(
        e => e.OneToOne(p => p.Address, a => a.Resident));
```

We should discover",1317,jeremylindsayni,sdk
1134,ForeignKeyConvention shouldn't create shadow PKs,"ModelBuilder should throw if no PK has been defined on the principal entity type.","ForeignKeyConvention shouldn't create shadow PKs  ModelBuilder should throw if no PK has been defined on the principal entity type.",1317,AndriySvyryd,efcore
1134,ForeignKeyConvention shouldn't create shadow PKs,"ModelBuilder should throw if no PK has been defined on the principal entity type.","ForeignKeyConvention shouldn't create shadow PKs  ModelBuilder should throw if no PK has been defined on the principal entity type.",1317,jeremylindsayni,sdk
1271,Make all key properties have the GenerateValueOnAdd flag set by convention,"We are making a change so that the default behavior for properties that are part if keys is to have value generation enabled. Several points:
- Even with this flag set values will only be generated if the value of the property has not been set (is the default) when the entity is added. This means that use of non-generated keys where values have been set should not be affected.
- There is chance of collision of real key space and temporary key space, but we think this is unlikely to be a problem in the wild. Where collisions might occur they can be avoided by always setting key values explicitly so value generation never kicks in or by configuring different value generators that do not collide.
- Always generating keys provides a more flexible experience for dealing with disconnected graphs since temporary values will be used which can then be changed before saving
- An exception will be thrown if key generation is needed but no key generator is configured This can be avoided by setting the values explicitly before add or adding a new value generator.
- An exception will be thrown if a temporary key value is still set when the state of the object is changed to Unchanged, Modified, or Deleted. This will happen if SaveChanges is given temp values and doesn't generate real values.","Make all key properties have the GenerateValueOnAdd flag set by convention  We are making a change so that the default behavior for properties that are part if keys is to have value generation enabled. Several points:
- Even with this flag set values wil",1304,ajcvickers,efcore
1207,Should be able to add a dependent entity with identifying FK before the principal,"If a dependent entity with identifying FK is added before the principal it is referencing then the state manager should add the principal to allow its PK to be generated.

Related to #323","Should be able to add a dependent entity with identifying FK before the principal  If a dependent entity with identifying FK is added before the principal it is referencing then the state manager should add the principal to allow its PK to be generated.",1304,ajcvickers,efcore
498,Easier state entry access when adding entities,"Consider changing DbSet.Add to return the EntityEntry so that it's easier to specify shadow values.

E.g. context.Set<Employee>().Add(employee)[""ShadowProp""] = ""Foo"";","Easier state entry access when adding entities  Consider changing DbSet.Add to return the EntityEntry so that it's easier to specify shadow values.

E.g. context.Set<Employee>().Add(employee)[""ShadowProp""] = ""Foo"";",1193,ajcvickers,efcore
193,Finish implementation of DbContext API surface,"<!---
@huboard:{""order"":193.0,""milestone_order"":193,""custom_state"":""""}
-->","Finish implementation of DbContext API surface  <!---
@huboard:{""order"":193.0,""milestone_order"":193,""custom_state"":""""}
-->",1193,ajcvickers,efcore
956,Coupling introduced by change to add missing required services in AddEntityFramework,"The fix for #890 introduces coupling between EF and the implementation of other framework libraries such as Logging, DI and Options, e.g. EF code now contains hardcoded knowledge about what exact services are needed and how they should be registered. These details which could change in the future if e.g. TypeActivator could take a dependency on some other service, Options could replace TypeActivator, etc and hence EF could be broken. 

One way to reduce the coupling would be to abstract the services that are added, e.g. those libraries could implement the DI idiom we have implemented in some of the upper-level frameworks and then you could so something like:

``` C#
services.AddDependencyInjection();
services.AddLogging();
services.AddOptions();
```

Furthermore, it might be that the coupling cannot be ever completely addressed with this approach, e.g. what happens if Logging acquires a dependency on a completely different library? Unless Logging itself starts adding its missing required services in a similar fashion as EF does by a consequence of this change, things will still be broken for EF. 

For the latter reason I think we should make a decision: either adding missing required services implicitly is a good idea and all libraries should do it, or we should stay away from it and push instead for all required services to be super easy to add explicitly to the service collection in application and test code.","Coupling introduced by change to add missing required services in AddEntityFramework  The fix for #890 introduces coupling between EF and the implementation of other framework libraries such as Logging, DI and Options, e.g. EF code now contains hardcoded",1182,ajcvickers,efcore
1129,React to GetDefaultServices -> AddXXX changes,"EF can probably switch to just adding required services now that AddXXX is safe to call multiple times and no-ops if already there.

Should be able to just AddOptions/AddTypeActivator/AddLogging now.  I didn't make this change for EF since it wasn't immediately clear what code could be removed safely","React to GetDefaultServices -> AddXXX changes  EF can probably switch to just adding required services now that AddXXX is safe to call multiple times and no-ops if already there.

Should be able to just AddOptions/AddTypeActivator/AddLogging now.  I did",1182,ajcvickers,efcore
965,ATS: Query: Problem materializing after adding Discontinued flag to Product,"Looks like a query result binding issue:

Test 'Microsoft.Data.Entity.AzureTableStorage.FunctionalTests.NorthwindQueryTest.Where_bool_member_shadow' failed: Microsoft.WindowsAzure.Storage.StorageException : Cannot read value of type 'Nullable`1' from '3'
---- System.TypeAccessException : Cannot read value of type 'Nullable`1' from '3'
    at Microsoft.WindowsAzure.Storage.Core.Executor.Executor.ExecuteSync[T](RESTCommand`1 cmd, IRetryPolicy policy, OperationContext operationContext)
    at Microsoft.WindowsAzure.Storage.Table.TableQuery.ExecuteQuerySegmented[TResult](TableContinuationToken token, CloudTableClient client, CloudTable table, EntityResolver`1 resolver, TableRequestOptions requestOptions, OperationContext operationContext)
    at Microsoft.WindowsAzure.Storage.Table.TableQuery.<>c__DisplayClass6`1.<Execute>b__5(IContinuationToken continuationToken)
    at Microsoft.WindowsAzure.Storage.Core.Util.CommonUtility.<LazyEnumerable>d__0`1.MoveNext()
    at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
    at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
    Query\AtsQueryContext.cs(54,0): at Microsoft.Data.Entity.AzureTableStorage.Query.AtsQueryContext.<>c__DisplayClass1`1.<GetOrAddQueryResults>b__0(QueryKey q)
    Utilities\ThreadSafeDictionaryCache.cs(23,0): at Microsoft.Data.Entity.Utilities.ThreadSafeDictionaryCache`2.GetOrAdd(TKey key, Func`2 factory)
    Query\AtsQueryContext.cs(53,0): at Microsoft.Data.Entity.AzureTableStorage.Query.AtsQueryContext.GetOrAddQueryResults[TResult](QueryTableRequest`1 request)
    Query\AtsQueryModelVisitor.cs(106,0): at Microsoft.Data.Entity.AzureTableStorage.Query.AtsQueryModelVisitor.ExecuteSelectExpression[TResult](QueryContext queryContext, IEntityType entityType, SelectExpression selectExpression)
    at lambda_method(Closure , QuerySourceScope )
    at System.Linq.Enumerable.<SelectManyIterator>d__14`2.MoveNext()
    at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
    Query\LinqOperatorProvider.cs(29,0): at Microsoft.Data.Entity.Query.LinqOperatorProvider.<_TrackEntities>d__0`2.MoveNext()
    Query\EntityQueryExecutor.cs(176,0): at Microsoft.Data.Entity.Query.EntityQueryExecutor.EnumerableExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
    at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
    at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
    NorthwindQueryTestBase.cs(1926,0): at Microsoft.Data.Entity.FunctionalTests.NorthwindQueryTestBase.AssertQuery[TItem](Func`2 query, Boolean assertOrder, Int32 stateEntryCount)
    NorthwindQueryTestBase.cs(423,0): at Microsoft.Data.Entity.FunctionalTests.NorthwindQueryTestBase.Where_bool_member_shadow()
    ----- Inner Stack Trace -----
    Query\AtsObjectArrayValueReader.cs(47,0): at Microsoft.Data.Entity.AzureTableStorage.Query.AtsObjectArrayValueReader.ReadValue[T](Int32 index)
    at lambda_method(Closure , IValueReader )
    Query\QueryBuffer.cs(98,0): at Microsoft.Data.Entity.Query.QueryBuffer.GetEntity(IEntityType entityType, IValueReader valueReader)
    Query\AtsQueryModelVisitor.cs(103,0): at Microsoft.Data.Entity.AzureTableStorage.Query.AtsQueryModelVisitor.<>c__DisplayClass4`1.<ExecuteSelectExpression>b__3(AtsNamedValueBuffer s)
    Requests\QueryTableRequest.cs(77,0): at Microsoft.Data.Entity.AzureTableStorage.Requests.QueryTableRequest`1.<Execute>b__0(String key, String rowKey, DateTimeOffset timestamp, IDictionary`2 properties, String etag)
    at Microsoft.WindowsAzure.Storage.Table.Protocol.TableOperationHttpResponseParsers.ReadAndResolve[T](ODataEntry entry, Func`6 resolver)
    at Microsoft.WindowsAzure.Storage.Table.Protocol.TableOperationHttpResponseParsers.TableQueryPostProcessGeneric[TElement,TQueryType](Stream responseStream, Func`6 resolver, HttpWebResponse resp, TableRequestOptions options, OperationContext ctx, String accountName)
    at Microsoft.WindowsAzure.Storage.Table.TableQuery.<>c__DisplayClass11`1.<QueryImpl>b__10(RESTCommand`1 cmd, HttpWebResponse resp, OperationContext ctx)
    at Microsoft.WindowsAzure.Storage.Core.Executor.Executor.ProcessEndOfRequest[T](ExecutionState`1 executionState)
    at Microsoft.WindowsAzure.Storage.Core.Executor.Executor.ExecuteSync[T](RESTCommand`1 cmd, IRetryPolicy policy, OperationContext operationContext)","ATS: Query: Problem materializing after adding Discontinued flag to Product  Looks like a query result binding issue:

Test 'Microsoft.Data.Entity.AzureTableStorage.FunctionalTests.NorthwindQueryTest.Where_bool_member_shadow' failed: Microsoft.WindowsAz",1005,AndriySvyryd,efcore
789,Why couldn't we use a standard DbContext empty constructor to create DB for SQLite tests,"Issue raised to track notes from @ajcvickers (copied from #724) below.

For example, in this case why do we need the scratch database instead of just having the built-in EF mechanisms create the database? Also, why do we need a test fixture here? Is that because we can't do Redis and/or ATS stuff without a fixture since I can't see how it is needed for SQL Server or SQLite? Having a method that throws with a ""don't use for SQLite"" comment smells bad and seems to indicate that if we are using shared infrastructure for running the same tests everywhere then there is a problem with that infrastructure. I'll discuss with @divega how we should move forward with answering these questions.","Why couldn't we use a standard DbContext empty constructor to create DB for SQLite tests  Issue raised to track notes from @ajcvickers (copied from #724) below.

For example, in this case why do we need the scratch database instead of just having the bu",1005,AndriySvyryd,efcore
900,Remove TryGetService now that DI behavior does this,"GetService is being updated to return null if the service is not registered, which means we no longer need TryGetService. Conversely, if there are places we were relying on getting an exception then these whould be fixed, but I don't think we have any such cases.","Remove TryGetService now that DI behavior does this  GetService is being updated to return null if the service is not registered, which means we no longer need TryGetService. Conversely, if there are places we were relying on getting an exception then the",939,ajcvickers,efcore
127,Declare NeutralResourcesLanguage,"Without this, win81 apps can't load resources properly.","Declare NeutralResourcesLanguage  Without this, win81 apps can't load resources properly.",939,ajcvickers,efcore
937,Testing around and some tweaks to EF DI/options infrastructure,"Or: What's on the end of the stick ,Vic?

This is mostly testing making use of the new patterns for service provider and options injection, including:
- Multiple context types
- Multiple providers
- Constructor injection of OptionsContext
- Readining config (indrectly) from IConfiguration or inline

Also, added the ability to auto-configure a provider if it is the only provider regsitered, which also paves the way for auto-configuring from file-based configuration only.","Testing around and some tweaks to EF DI/options infrastructure  Or: What's on the end of the stick ,Vic?

This is mostly testing making use of the new patterns for service provider and options injection, including:
- Multiple context types
- Multiple",939,ajcvickers,efcore
130,Implement Alpha Initial API Review Decisions,"I've emailed the capture from the API Review tool to @ajcvickers ","Implement Alpha Initial API Review Decisions  I've emailed the capture from the API Review tool to @ajcvickers ",143,ajcvickers,efcore
123,Check extension method namespaces,"AddEntityFramework
AddSqlServer
AddInMemory
builder.SqlServerConnectionString","Check extension method namespaces  AddEntityFramework
AddSqlServer
AddInMemory
builder.SqlServerConnectionString",143,ajcvickers,efcore
138,bool not supported in Database.Create,"Having a bool property in your poco results in:
                public bool Flag { get; set; }

```
  System.NotSupportedException : Specified method is not supported.
  Stack Trace:
        at Microsoft.Data.SqlServer.SqlServerMigrationOperationSqlGenerator.GenerateDataType(Column column)
        at Microsoft.Data.Migrations.MigrationOperationSqlGenerator.GenerateColumn(Column column, IndentedStringBuil
```

der stringBuilder)
            at Microsoft.Data.Migrations.MigrationOperationSqlGenerator.GenerateColumns(IReadOnlyList`1 columns, Indente
dStringBuilder stringBuilder)
            at Microsoft.Data.Migrations.MigrationOperationSqlGenerator.Generate(CreateTableOperation createTableOperati
on, IndentedStringBuilder stringBuilder, Boolean generateIdempotentSql)
            at Microsoft.Data.SqlServer.SqlServerMigrationOperationSqlGenerator.Generate(CreateTableOperation createTabl
eOperation, IndentedStringBuilder stringBuilder, Boolean generateIdempotentSql)
            at Microsoft.Data.Migrations.Model.CreateTableOperation.GenerateSql(MigrationOperationSqlGenerator generator
, IndentedStringBuilder stringBuilder, Boolean generateIdempotentSql)
            at Microsoft.Data.Migrations.MigrationOperationSqlGenerator.<Generate>d__0.MoveNext()
            at Microsoft.Data.Relational.SqlStatementExecutor.ExecuteNonQuery(DbConnection connection, IEnumerable`1 sta
tements)
            at Microsoft.Data.SqlServer.SqlServerDataStoreCreator.Create(IModel model)
            at Microsoft.Data.Entity.Database.Create()
            at Microsoft.AspNet.Identity.Entity.Test.UserStoreTest.<Can_create_two_artists>d__1.MoveNext() in C:\Github\","bool not supported in Database.Create  Having a bool property in your poco results in:
                public bool Flag { get; set; }

```
  System.NotSupportedException : Specified method is not supported.
  Stack Trace:
        at Microsoft.Data.S",140,ajcvickers,efcore
103,Support basic set of data types in DDL,"From Rowan's notes on this: 

_The biggest limitation at the moment is that it only handles int, string, decimal, and DateTime. This is primarily about padding out SqlServerMigrationOperationSqlGenerator.GenerateDataType, although I’m not sure that this is the best place to be filling in underspecified data types as we’ll also need that in the updated and query pipelines._","Support basic set of data types in DDL  From Rowan's notes on this: 

_The biggest limitation at the moment is that it only handles int, string, decimal, and DateTime. This is primarily about padding out SqlServerMigrationOperationSqlGenerator.GenerateD",140,ajcvickers,efcore
136,"""connection's current state is open"" exception on operation after using DDL methods","Calling one of the DDL methods (Exists and/or Delete) must be leaving something open with the connection as we get an error when any subsequent database operation is performed.

```
using Microsoft.Data.Entity;
using Microsoft.Data.SqlServer;

namespace ConsoleApplication54
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var db = new MyContext())
            {
                if(!db.Database.Exists())
                {
                    db.Database.Create();
                }

                db.Blogs.Add(new Blog { Name = ""Test"", Url = ""test.com"" });
                db.SaveChanges();
            }
        }
    }

    public class MyContext : DbContext
    {
        public DbSet<Blog> Blogs { get; set; }

        protected override void OnConfiguring(EntityConfigurationBuilder builder)
        {
            builder.SqlServerConnectionString(@""Server=(localdb)\v11.0;Database=MyDatabase;Trusted_Connection=True;"");
        }
    }

    public class Blog
    {
        public int BlogId { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
    }
}
```

```
System.AggregateException was unhandled
  _HResult=-2146233088
  _message=One or more errors occurred.
  HResult=-2146233088
  IsTransient=false
  Message=One or more errors occurred.
  Source=mscorlib
  StackTrace:
       at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
       at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
       at System.Threading.Tasks.Task`1.get_Result()
       at Microsoft.Data.Entity.DbContext.SaveChanges()
       at ConsoleApplication54.Program.Main(String[] args) in c:\Users\rowmil\Documents\Visual Studio 2013\Projects\ConsoleApplication54\ConsoleApplication54\Program.cs:line 18
       at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)
       at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
       at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
       at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
       at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
       at System.Threading.ThreadHelper.ThreadStart()
  InnerException: System.InvalidOperationException
       _HResult=-2146233079
       _message=The connection was not closed. The connection's current state is open.
       HResult=-2146233079
       IsTransient=false
       Message=The connection was not closed. The connection's current state is open.
       Source=System.Data
       StackTrace:
            at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
            at System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
            at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
            at System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken cancellationToken)
         --- End of stack trace from previous location where exception was thrown ---
            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
            at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
            at Microsoft.Data.Relational.RelationalConnection.<OpenAsync>d__1.MoveNext()
         --- End of stack trace from previous location where exception was thrown ---
            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
            at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
            at Microsoft.Data.Relational.RelationalDataStore.<SaveChangesAsync>d__1.MoveNext()
         --- End of stack trace from previous location where exception was thrown ---
            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
            at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
            at Microsoft.Data.Entity.ChangeTracking.StateManager.<SaveChangesAsync>d__1.MoveNext()
       InnerException: 
```","""connection's current state is open"" exception on operation after using DDL methods  Calling one of the DDL methods (Exists and/or Delete) must be leaving something open with the connection as we get an error when any subsequent database operation is perf",140,ajcvickers,efcore
23,Are you the Keymaster?,"Are you the Keymaster? (First attempt at wiring up change tracker to identity generation)

The idea here is to allow the change tracker to generate a key for new entities when added. Whether or not a key should be generated is determined by metadata on the property in the model. If it is known that key generation is required then the provider must be involved in selecting the appropriate key generator for the type of the property. Providers register an IdentityGeneratorFactory to handle this. However, the user can also register an IdentityGeneratorFactory to override the behavior for some or all properties of a given type.

We could also allow for an identity generator to be registered directly in the model, but this has implications for serialization of the model which is needed for both Migrations and compiled model state. It may be that there is some hook that allows runtime annotation of the model even if it has been compiled.

The configuration keeps the collection of active identity generators so that they can be shared by multiple context instances. This can also be changed in the configuration to allow for different levels of sharing.

Some additional testing still required.","Are you the Keymaster?  Are you the Keymaster? (First attempt at wiring up change tracker to identity generation)

The idea here is to allow the change tracker to generate a key for new entities when added. Whether or not a key should be generated is de",11,bricelam,efcore
1,"Added inital solution structure, early metadata support, and utilities.","","Added inital solution structure, early metadata support, and utilities.  ",11,bricelam,efcore
