<PullRequests>
  <PullRequest>
    <IssueID>32455</IssueID>
    <RepoID>corefx</RepoID>
    <Title>[release/2.1] Read SSL_CERT_FILE contents before SSL_CERT_DIR contents</Title>
    <Description>The OpenSSL commandline utility (openssl verify) uses the "single file" lookup
before the directory contents lookup in both OpenSSL 1.0.2 and 1.1.0.  Normally,
this doesn't matter, as the contents between the two are normally not in conflict.

SLES 15, Fedora 28, and possibly other distro(-versions) now use the plain X509
data ("BEGIN CERTIFICATE") as the "by file" multi-PEM, and use
trust-specified certificates ("BEGIN TRUSTED CERTIFICATE") contents in the
directory lookup.

When a certificate gets loaded with explicit trust settings, any trust not
explicitly permitted is implicitly denied.  Our X509Chain class uses the default
trust for the trust decision (X509_TRUST_DEFAULT), which means it does a
check for the "any extended key usage" trust.  That purpose is not present
in the certificates we're seeing now, meaning we get
X509_V_ERR_CERT_REJECTED as the response from the chain, but the CLI
tool gets a successful response.

By changing the order to be "file first" we match the behavior of the CLI tool,
and the previous version of those distros.

Port of #32283 to release/2.1.
Fixes #32224.</Description>
    <CreatedDate>25/09/2018</CreatedDate>
    <ClosedDate>02/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>32455</PullRequestID>
        <IssueID>32283</IssueID>
        <Title>Handle recursive patterns in IOperation based GetValueUsageInfo method</Title>
        <Description>Added unit tests for remove unused values analyzer/fix, which invokes this method, and was asserting with the repro in the issue.
Fixes #32271</Description>
        <CreatedDate>09/01/2019</CreatedDate>
        <ClosedDate>09/01/2019</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>32455</PullRequestID>
        <IssueID>32224</IssueID>
        <Title>Edit and Continue debugger bug with async Task Main in VS 2017</Title>
        <Description>copies from https://github.com/dotnet/corefx/issues/31241

The debugger does not display values correctly after "Edit and Continue" when called directly within async Task Main.

In each example there are 2 lines of code commented out. While executing a particular snippet, debug up to var x = 5 and then uncomment the commented lines, save, and proceed to step over. In the "Examples that fail", after editing and continuing and stepping over y, it will appear as 0, and if you click the "evaluate now" button in the local or watch windows, you will receive the error, The debugger is unable to evaluate this expression. I included the Console.WriteLine to demonstrate that the value is still correctly printed to console, it's just not viewable while debugging.

Examples that work:

//works
static Task Main(string[] args)
{
    var x = 5;
    //var y = 6;
    //Console.WriteLine(y);
    return Task.FromResult(0);
}

//works
static async Task Main(string[] args)
{
    await Task.Yield();
    Helper();

    void Helper()
    {
        var x = 5;
        //var y = 6;
        //Console.WriteLine(y);
    }
}
Examples that fail:

//fails
static async Task Main(string[] args)
{
    var x = 5;
    //var y = 6;
    //Console.WriteLine(y);
}

//fails
static async Task Main(string[] args)
{
    await Task.Yield();
    var x = 5;
    //var y = 6;
    //Console.WriteLine(y);
} </Description>
        <CreatedDate>08/01/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>32455</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/PEAssemblyBuilder.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/CompilationEmitTests.cs</File>
      <File>src/Compilers/Core/Portable/EmbeddedText.cs</File>
      <File>src/Compilers/Core/Portable/Emit/CommonPEModuleBuilder.cs</File>
      <File>src/EditorFeatures/CSharpTest/UseExpressionBody/Analyzer/UseExpressionBodyForAccessorsAnalyzerTests.cs</File>
      <File>src/Features/CSharp/Portable/UseExpressionBody/Helpers/UseExpressionBodyForIndexersHelper.cs</File>
      <File>src/Test/Utilities/Portable/Compilation/CompilationExtensions.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>32329</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Make test drop container name stable</Title>
    <Description># Stable Container Name

Current convention for test uploads to Helix is to not specify a name for the container, which results in containers with names like `build-&lt;random GUID&gt;` (this is the default behavior of `CloudTest.Helix.targets`).  This works well for one time consumption by Helix, but is problematic for reuse and long term accessibility since Helix does not maintain a mapping of GUIDs to build ids for perpetuity.

The proposed stable name is built to uniquely identify an official build orchestration for all OS x Architecture configurations:
```
corefx-tests/$(Branch)/$(PreReleaseLabel)-$(BuildNumberMajor)-$(BuildNumberMinor)/$(TargetGroup)/$(OS)-$(Arch)

ex: corefx-tests/master/beta-12345-04/netcoreapp/osx-x64
```

The changes to the container name and blob prefix won't change Helix functionality since it operates by following the links specified in metadata sent along with the job dispatch.

# `HelixBlobPrefix`

This PR is dependent on dotnet/buildtools#2169 being merged in and having dotnet/corefx updated via maestro-bot.  The `HelixBlobPrefix` kicks in for official builds and places all the artifacts into a single directory inside a container named after the prerelease label and build numbers, i.e., the stable naming convention described above.

# Public Test Drop

For use with dotnet/buildtools#2164.  The `IsDropPublic` property in `upload-tests.proj` has been set to true for official builds in order to expose the test upload container to the public.  This will allow for consumption by the CoreCLR CI system and developers hoping to rerun CI tests locally.

# Intent

This work is meant to make corefx tests easily consumable during coreclr ci builds and local testing.

CC - @sergiy-k @MattGal @weshaggard @adityamandaleeka @AaronRobinsonMSFT @mmitche 

dotnet/coreclr#19690</Description>
    <CreatedDate>17/09/2018</CreatedDate>
    <ClosedDate>09/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>32329</PullRequestID>
        <IssueID>2169</IssueID>
        <Title>Add support for "dynamic" in the expression compiler</Title>
        <Description>This is the second of a sequence of changes.  (The first was 3dd1f2b.)  In
this change we start returning custom type info (effectively just the
flags of DynamicAttribute packed into a byte array) from calls to the
expression compiler so that they can be consumed by the result provider.

TODO: This change does not associate custom type info with locals declared
in the Immediate window.
</Description>
        <CreatedDate>22/04/2015</CreatedDate>
        <ClosedDate>23/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>32329</PullRequestID>
        <IssueID>2164</IssueID>
        <Title>Move CustomTypeInfo to hang from LocalVariableQuery to LocalVariableInfo...</Title>
        <Description>Move CustomTypeInfo to hang from LocalVariableQuery to LocalVariableInfo in Concord API. Rearrange parameter ordering and fix parameter capitalization on DkmInspectionContext.GetTypeName().
</Description>
        <CreatedDate>21/04/2015</CreatedDate>
        <ClosedDate>22/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>32329</PullRequestID>
        <IssueID>19690</IssueID>
        <Title>Merge master to features/ioperation</Title>
        <Description>
This is an automatically generated pull request from master into features/ioperation.

``` bash
git fetch --all
git checkout merges/master-to-features/ioperation-20170522-070019
git reset --hard upstream/features/ioperation
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/ioperation-20170522-070019 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>22/05/2017</CreatedDate>
        <ClosedDate>23/05/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>32329</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/ForEachLoopBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/InMethodBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MethodTypeInference.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncIteratorMethodToStateMachineRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_ForEachStatement.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_UsingStatement.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/StateMachineRewriter.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncIteratorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAwaitForeachTests.cs</File>
      <File>src/Dependencies/PooledObjects/ArrayBuilder.cs</File>
      <File>src/EditorFeatures/CSharpTest/RemoveUnusedParametersAndValues/RemoveUnusedParametersTests.cs</File>
      <File>src/Workspaces/Core/Portable/FlowAnalysis/SymbolUsageAnalysis/SymbolUsageAnalysis.Walker.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>32297</IssueID>
    <RepoID>corefx</RepoID>
    <Title>rework connection pool cancellation to avoid deadlock</Title>
    <Description>Fixes #32262 
Fixes #32000 (hopefully)

We have an issue where cancelling a request while it's waiting for a connection (due to MaxConnectionsPerServer being set) can cause deadlock. See issue #32262 for full details.

To fix this, rework the cancellation handling for requests that are waiting for connections. In particular, we cancel the ConnectionWaiter task but we don't remove the waiter from the waiter queue, so we don't need to take the pool lock on cancellation. Instead, we just throw away any cancelled waiters later when we retrieve them.

Additionally, the logic for transferring a connection count (i.e. an existing connection is being closed, so the waiter should create a new one) is changed so that we don't have to worry about whether the waiter is cancelled by the time the connection is actually created.

I confirmed that this fixes the repro in #32262.

We should consider this for 2.1.x backport.

@dotnet/ncl 

It would be great to get a review from @stephentoub if/when he's available, since he knows this code best.
</Description>
    <CreatedDate>14/09/2018</CreatedDate>
    <ClosedDate>28/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>32297</PullRequestID>
        <IssueID>32262</IssueID>
        <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
        <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>09/01/2019</CreatedDate>
        <ClosedDate>09/01/2019</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>32297</PullRequestID>
        <IssueID>32000</IssueID>
        <Title>Merge master to features/editorconfig-in-compiler</Title>
        <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>22/12/2018</CreatedDate>
        <ClosedDate>22/12/2018</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>32297</PullRequestID>
        <IssueID>32262</IssueID>
        <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
        <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>09/01/2019</CreatedDate>
        <ClosedDate>09/01/2019</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>32297</PullRequestID>
        <IssueID>32262</IssueID>
        <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
        <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>09/01/2019</CreatedDate>
        <ClosedDate>09/01/2019</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>32297</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Statements.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/ForEachLoopBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/ControlFlowPass.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncExceptionHandlerRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_Block.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_UsingStatement.cs</File>
      <File>src/Compilers/CSharp/Test/IOperation/IOperation/IOperationTests_ILocalFunctionStatement.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UsingDeclarationTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/StatementParsingTests.cs</File>
      <File>src/Compilers/Core/Portable/Operations/OperationNodes.cs</File>
      <File>src/EditorFeatures/CSharp/Highlighting/KeywordHighlighters/AsyncAwaitHighlighter.cs</File>
      <File>src/EditorFeatures/CSharpTest/GenerateFromMembers/GenerateEqualsAndGetHashCodeFromMembers/GenerateEqualsAndGetHashCodeFromMembersTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/RenameTracking/RenameTrackingDiagnosticAnalyzer.cs</File>
      <File>src/Features/CSharp/Portable/AddObsoleteAttribute/CSharpAddObsoleteAttributeCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/AddObsoleteAttribute/AbstractAddObsoleteAttributeCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/OrderModifiers/AbstractOrderModifiersDiagnosticAnalyzer.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/Documentation/XmlDocumentationProvider.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>28439</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Sgen parameter conversion change: replace colon with space in arguments</Title>
    <Description>#26902
@huanwu @zhenlan @mconnew

See #27332 for more information.</Description>
    <CreatedDate>24/03/2018</CreatedDate>
    <ClosedDate>29/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>28439</PullRequestID>
        <IssueID>26902</IssueID>
        <Title>Add VerifyDiagnostics overload that compares full diagnostic messages for C#</Title>
        <Description>Similar to the format used for VB tests with `CompilationUtils.AssertTheseDiagnostics`:

Current format:
```c#
comp.VerifyDiagnostics(
    // (4,17): error CS1910: Argument of type 'Type' is not applicable for DefaultParameterValue
    //     void Test1([DefaultParameterValue(typeof(int))]object t);   // CS1910
    Diagnostic(ErrorCode.ERR_DefaultValueBadValueType, "DefaultParameterValue").
        WithArguments("Type").WithLocation(4, 17));
```

Proposed format:
```c#
comp.VerifyDiagnostics(@"
(4,17): error CS1910: Argument of type 'Type' is not applicable for DefaultParameterValue
    void Test1([DefaultParameterValue(typeof(int))]object t);   // CS1910
                ~~~~~~~~~~~~~~~~~~~~~
");
```</Description>
        <CreatedDate>16/05/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>28439</PullRequestID>
        <IssueID>27332</IssueID>
        <Title>Add public API for "BlockStructure"</Title>
        <Description>The current BlockStructure API is internal, which means we have to write ugly reflection code to consume it in OmniSharp. Please consider creating a public version so that consumers of Roslyn can use its outlining functionality. cc @DustinCampbell 
In reference to: https://github.com/OmniSharp/omnisharp-roslyn/pull/1209 and https://github.com/dotnet/roslyn/blob/master/src/Features/Core/Portable/Structure/BlockStructureService.cs</Description>
        <CreatedDate>01/06/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>28439</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder.ValueChecks.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Expressions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Invocation.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Operators.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Statements.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/DataFlowPass.LocalFunctions.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/DataFlowPass.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/ReadWriteWalker.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/SyntheticBoundNodeFactory.cs</File>
      <File>src/Compilers/CSharp/Portable/Operations/CSharpOperationFactory.cs</File>
      <File>src/Compilers/CSharp/Portable/Operations/CSharpOperationFactory_Methods.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/RefKindExtensions.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceAssemblySymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncSpillTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenStructsAndEnum.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/FixedSizeBufferTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/UnsafeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBEmbeddedSourceTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Diagnostics/DiagnosticAnalyzerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/FlowAnalysis/RegionAnalysisTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_IAnonymousObjectCreationOperation.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_IForEachLoopStatement.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_IForLoopStatement.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_InvalidStatement.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/QueryTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/RefLocalsAndReturnsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SpanStackSafetyTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UnsafeTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/Diagnostics/OperationTests.cs</File>
      <File>src/Compilers/Core/Portable/CodeAnalysisResources.Designer.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContextHelpers.cs</File>
      <File>src/Compilers/Core/Portable/Operations/BinaryOperatorKind.cs</File>
      <File>src/Compilers/Core/Portable/Operations/CaseKind.cs</File>
      <File>src/Compilers/Core/Portable/Operations/ControlFlowGraph.cs</File>
      <File>src/Compilers/Core/Portable/Operations/ControlFlowGraphBuilder.cs</File>
      <File>src/Compilers/Core/Portable/Operations/OperationKind.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/RefKind.cs</File>
      <File>src/EditorFeatures/CSharpTest/CodeActions/Preview/ErrorCases/ExceptionInCodeAction.cs</File>
      <File>src/EditorFeatures/CSharpTest/CodeActions/Preview/PreviewTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/SpellCheck/SpellCheckTests.cs</File>
      <File>src/EditorFeatures/Core.Wpf/SymbolSearch/SymbolSearchUpdateEngine.Update.cs</File>
      <File>src/EditorFeatures/Core/FindUsages/AbstractFindUsagesService.ProgressAdapter.cs</File>
      <File>src/EditorFeatures/Core/FindUsages/FindUsagesContext.cs</File>
      <File>src/EditorFeatures/Core/FindUsages/SimpleFindUsagesContext.cs</File>
      <File>src/EditorFeatures/Core/IDebuggerTextView.cs</File>
      <File>src/EditorFeatures/Core/Implementation/BraceMatching/BraceHighlightingViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SemanticClassificationBufferTaggerProvider.Tagger.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SemanticClassificationViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/CodeFixes/CodeFixService.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractDiagnosticsTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/Completion/Controller_Commit.cs</File>
      <File>src/EditorFeatures/Core/Implementation/MetadataAsSource/MetadataAsSourceFileService.cs</File>
      <File>src/EditorFeatures/Core/Implementation/MetadataAsSource/MetadataAsSourceGeneratedFileInfo.cs</File>
      <File>src/EditorFeatures/Core/Implementation/RenameTracking/AbstractRenameTrackingCodeFixProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/TodoComment/TodoCommentIncrementalAnalyzer.cs</File>
      <File>src/EditorFeatures/Core/ReferenceHighlighting/ReferenceHighlightingViewTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Shared/Threading/AsynchronousSerialWorkQueue.cs</File>
      <File>src/EditorFeatures/Core/Shared/Utilities/ForegroundThreadAffinitizedObject.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.TagSource_ProduceTags.cs</File>
      <File>src/EditorFeatures/Core/Tagging/AbstractAsynchronousTaggerProvider.cs</File>
      <File>src/EditorFeatures/Test/CodeFixes/CodeFixServiceTests.cs</File>
      <File>src/EditorFeatures/Test/FindReferences/FindReferencesCommandHandlerTests.cs</File>
      <File>src/EditorFeatures/Test/SolutionCrawler/WorkCoordinatorTests.cs</File>
      <File>src/EditorFeatures/Test/Tagging/AsynchronousTaggerTests.cs</File>
      <File>src/Features/CSharp/Portable/AddAccessibilityModifiers/CSharpAddAccessibilityModifiersDiagnosticAnalyzer.cs</File>
      <File>src/Features/CSharp/Portable/AddBraces/CSharpAddBracesCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/CodeFixes/RemoveUnnecessaryCast/RemoveUnnecessaryCastCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/InlineDeclaration/CSharpInlineDeclarationCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/InvokeDelegateWithConditionalAccess/InvokeDelegateWithConditionalAccessCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/RemoveUnreachableCode/CSharpRemoveUnreachableCodeCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/RemoveUnusedLocalFunction/CSharpRemoveUnusedLocalFunctionCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/SpellCheck/CSharpSpellcheckCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/TypeStyle/UseExplicitTypeCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/TypeStyle/UseImplicitTypeCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/UseDeconstruction/CSharpUseDeconstructionCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/UseDefaultLiteral/CSharpUseDefaultLiteralCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/UseIsNullCheck/CSharpUseIsNullCheckForCastAndEqualityOperatorCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/UseLocalFunction/CSharpUseLocalFunctionCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/UsePatternMatching/CSharpAsAndNullCheckCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/UsePatternMatching/CSharpIsAndCastCheckCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/UsePatternMatching/CSharpIsAndCastCheckWithoutNameCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/AddAccessibilityModifiers/AbstractAddAccessibilityModifiersCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/AddRequiredParentheses/AddRequiredParenthesesCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/CodeFixes/PreferFrameworkType/PreferFrameworkTypeCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/CodeRefactorings/CodeRefactoringService.cs</File>
      <File>src/Features/Core/Portable/Completion/MatchPriority.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/Analyzers/PreferFrameworkTypeDiagnosticAnalyzerBase.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/DefaultDiagnosticAnalyzerService.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/DiagnosticAnalyzerService_BuildSynchronization.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer_IncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Portable/EditAndContinue/EditAndContinueService.cs</File>
      <File>src/Features/Core/Portable/EditAndContinue/EditSession.cs</File>
      <File>src/Features/Core/Portable/FeaturesResources.Designer.cs</File>
      <File>src/Features/Core/Portable/IncrementalCaches/SyntaxTreeInfoIncrementalAnalyzerProvider.cs</File>
      <File>src/Features/Core/Portable/MakeFieldReadonly/AbstractMakeFieldReadonlyCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/MakeMethodSynchronous/AbstractMakeMethodSynchronousCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/Notification/SemanticChangeNotificationService.cs</File>
      <File>src/Features/Core/Portable/OrderModifiers/AbstractOrderModifiersCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/PopulateSwitch/PopulateSwitchCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/RemoveUnnecessaryImports/AbstractRemoveUnnecessaryImportsCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/RemoveUnnecessaryParentheses/AbstractRemoveUnnecessaryParenthesesCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/SolutionCrawler/GlobalOperationAwareIdleProcessor.cs</File>
      <File>src/Features/Core/Portable/SolutionCrawler/IdleProcessor.cs</File>
      <File>src/Features/Core/Portable/SolutionCrawler/IncrementalAnalyzerBase.cs</File>
      <File>src/Features/Core/Portable/SolutionCrawler/SolutionCrawlerProgressReporter.cs</File>
      <File>src/Features/Core/Portable/SolutionCrawler/WorkCoordinator.HighPriorityProcessor.cs</File>
      <File>src/Features/Core/Portable/SolutionCrawler/WorkCoordinator.NormalPriorityProcessor.cs</File>
      <File>src/Features/Core/Portable/SpellCheck/AbstractSpellCheckCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseAutoProperty/AbstractUseAutoPropertyCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseCoalesceExpression/UseCoalesceExpressionCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseCoalesceExpression/UseCoalesceExpressionForNullableCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseCollectionInitializer/AbstractUseCollectionInitializerCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseConditionalExpression/ForAssignment/AbstractUseConditionalExpressionForAssignmentCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseConditionalExpression/ForReturn/AbstractUseConditionalExpressionForReturnCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseExplicitTupleName/UseExplicitTupleNameCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseInferredMemberName/AbstractUseInferredMemberNameCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseIsNullCheck/AbstractUseIsNullForReferenceEqualsCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseNullPropagation/AbstractUseNullPropagationCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseObjectInitializer/AbstractUseObjectInitializerCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/UseThrowExpression/UseThrowExpressionCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/Workspace/ProjectCacheService.SimpleMRUCache.cs</File>
      <File>src/Interactive/EditorFeatures/CSharp/Interactive/CSharpInteractiveEvaluator.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/CSharpVBResetCommand.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/IResettableInteractiveEvaluator.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveEvaluator.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveEvaluatorResetOptions.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/ResetInteractive.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.LazyRemoteService.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHostOptions.cs</File>
      <File>src/Interactive/Host/InteractiveHostEntryPoint.cs</File>
      <File>src/Interactive/HostTest/AbstractInteractiveHostTests.cs</File>
      <File>src/Interactive/HostTest/InteractiveHostTests.cs</File>
      <File>src/Interactive/HostTest/StressTests.cs</File>
      <File>src/Scripting/Core/Hosting/CommandLine/CommandLineRunner.cs</File>
      <File>src/Scripting/Core/Hosting/CommandLine/ConsoleIO.cs</File>
      <File>src/Scripting/CoreTestUtilities/TestConsoleIO.cs</File>
      <File>src/Test/Utilities/Portable/Assert/ConditionalFactAttribute.cs</File>
      <File>src/Test/Utilities/Portable/Compilation/OperationTreeVerifier.cs</File>
      <File>src/Test/Utilities/Portable/Compilation/TestOperationVisitor.cs</File>
      <File>src/Test/Utilities/Portable/Mocks/TestReferences.cs</File>
      <File>src/Test/Utilities/Portable/TargetFrameworkUtil.cs</File>
      <File>src/Tools/BuildUtil/FindNuGetAssetsForVsix.cs</File>
      <File>src/VisualStudio/CSharp/Repl/CSharpVsResetInteractiveCommand.cs</File>
      <File>src/VisualStudio/CSharp/Test/Interactive/Commands/ResetInteractiveTests.cs</File>
      <File>src/VisualStudio/CSharp/Test/Interactive/Commands/TestResetInteractive.cs</File>
      <File>src/VisualStudio/CSharp/Test/Interactive/TestInteractiveEvaluator.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/DebuggerIntelliSense/AbstractDebuggerIntelliSenseContext.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/DebuggerIntelliSense/DebuggerTextView.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/DesignerAttribute/DesignerAttributeIncrementalAnalyzer.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Experimentation/KeybindingResetDetector.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/FindReferences/Contexts/AbstractTableDataSourceFindUsagesContext.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/FindReferences/Contexts/WithoutReferencesFindUsagesContext.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Options/RoamingVisualStudioProfileOptionPersister.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Remote/RemotableDataJsonRpcEx.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/SymbolSearch/VisualStudioSymbolSearchService.ProgressService.cs</File>
      <File>src/VisualStudio/Core/Def/ServicesVSResources.Designer.cs</File>
      <File>src/VisualStudio/Core/Def/SymbolSearch/VisualStudioSymbolSearchService.LogService.cs</File>
      <File>src/VisualStudio/Core/Def/Telemetry/ProjectTelemetryIncrementalAnalyzerProvider.cs</File>
      <File>src/VisualStudio/Core/Impl/CodeModel/CodeModelIncrementalAnalyzer.cs</File>
      <File>src/VisualStudio/Core/Test.Next/Remote/RemoteHostClientServiceFactoryTests.cs</File>
      <File>src/VisualStudio/Core/Test.Next/Services/SolutionServiceTests.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpChangeSignatureDialog.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpInteractiveDirectives.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/InProcess/InteractiveWindow_InProc.cs</File>
      <File>src/VisualStudio/InteractiveServices/Interactive/AbstractResetInteractiveCommand.cs</File>
      <File>src/VisualStudio/InteractiveServices/Interactive/VsInteractiveWindowPackage.cs</File>
      <File>src/VisualStudio/InteractiveServices/Interactive/VsInteractiveWindowProvider.cs</File>
      <File>src/VisualStudio/InteractiveServices/Interactive/VsResetInteractive.cs</File>
      <File>src/VisualStudio/VisualStudioInteractiveComponents/AssemblyRedirects.cs</File>
      <File>src/VisualStudio/Xaml/Impl/CodeFixes/RemoveUnnecessaryUsings/XamlRemoveUnnecessaryUsingsCodeFixProvider.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/Rules/TokenBasedFormattingRule.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpSemanticFactsService.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpSyntaxFactsService.cs</File>
      <File>src/Workspaces/CSharp/Portable/Rename/CSharpRenameRewriterLanguageService.cs</File>
      <File>src/Workspaces/CSharpTest/Formatting/FormattingTests.cs</File>
      <File>src/Workspaces/Core/Desktop/Workspace/SQLite/SQLitePersistentStorage_WriteBatching.cs</File>
      <File>src/Workspaces/Core/Desktop/Workspace/SolutionSize/SolutionSizeTracker.cs</File>
      <File>src/Workspaces/Core/Portable/CodeFixes/FixAllOccurrences/BatchFixAllProvider.cs</File>
      <File>src/Workspaces/Core/Portable/Differencing/LongestCommonSubsequence.cs</File>
      <File>src/Workspaces/Core/Portable/Editing/SymbolEditor.cs</File>
      <File>src/Workspaces/Core/Portable/Execution/AbstractReferenceSerializationService.cs</File>
      <File>src/Workspaces/Core/Portable/Execution/CustomAsset.cs</File>
      <File>src/Workspaces/Core/Portable/Execution/RemotableData.cs</File>
      <File>src/Workspaces/Core/Portable/Execution/SolutionAsset.cs</File>
      <File>src/Workspaces/Core/Portable/ExtensionManager/IExtensionManagerExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/Finders/AbstractReferenceFinder.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/Finders/OrdinaryMethodReferenceFinder.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/StreamingFindReferencesProgress.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex.ContextInfo.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex_Create.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex_Forwarders.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex_Persistence.cs</File>
      <File>src/Workspaces/Core/Portable/Formatting/TaskExecutor.cs</File>
      <File>src/Workspaces/Core/Portable/LanguageServices/SemanticsFactsService/ISemanticFactsService.cs</File>
      <File>src/Workspaces/Core/Portable/LanguageServices/SyntaxFactsService/ISyntaxFactsService.cs</File>
      <File>src/Workspaces/Core/Portable/NamingStyles/NamingStyle.cs</File>
      <File>src/Workspaces/Core/Portable/Notification/GlobalOperationNotificationService.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Utilities/StreamingProgressTracker.cs</File>
      <File>src/Workspaces/Core/Portable/SymbolSearch/ISymbolSearchProgressService.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/SimpleTaskQueue.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/SpecializedTasks.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/ValuesSources/RecoverableWeakValueSource.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Host/TemporaryStorage/TrivialTemporaryStorageService.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Workspace_Events.cs</File>
      <File>src/Workspaces/CoreTest/Host/WorkspaceServices/TestTemporaryStorageService.cs</File>
      <File>src/Workspaces/Remote/Core/Diagnostics/DiagnosticComputer.cs</File>
      <File>src/Workspaces/Remote/Core/Services/SolutionCreator.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>28421</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Refactor FileSystem recursive directory tests</Title>
    <Description>Fixes #28411 
Fixes #28414 </Description>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>28421</PullRequestID>
        <IssueID>28411</IssueID>
        <Title>Merge dev15.8-preview4-vs-deps to dev15.8.x-vs-deps</Title>
        <Description>
This is an automatically generated pull request from dev15.8-preview4-vs-deps into dev15.8.x-vs-deps.

``` bash
git fetch --all
git checkout merges/dev15.8-preview4-vs-deps-to-dev15.8.x-vs-deps
git reset --hard upstream/dev15.8.x-vs-deps
git merge upstream/dev15.8-preview4-vs-deps
# Fix merge conflicts
git commit
git push merges/dev15.8-preview4-vs-deps-to-dev15.8.x-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>10/07/2018</CreatedDate>
        <ClosedDate>10/07/2018</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>28421</PullRequestID>
        <IssueID>28414</IssueID>
        <Title>MSBuildWorkspace opens the solution wrongly.</Title>
        <Description>**Steps to Reproduce**:

1.  I use the latest roslyn sdk: https://github.com/dotnet/roslyn-sdk/tree/dev15.8.x
2.  Then create xUnit Test Project (.NET Core) from the new project wizard see screencast https://www.screencast.com/t/CotFlvZK04zR
3. Run the SolutionExplorer project from samples and open the test solution
4. If Visual Studio Professional 2017 is installed on the computer then the Project element contains the References. But if Visual Studio Enterprise 2017 if installed, the metadata references list is empty.

**Expected Behavior**:
Opened solution should contain the metadata references 

**Actual Behavior**:
Opened solution does not contain the references.

See the screencast: https://www.screencast.com/t/fYVnH57Xk1qg</Description>
        <CreatedDate>10/07/2018</CreatedDate>
        <ClosedDate>07/08/2018</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>28421</PullRequestID>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_WellKnownAttributes.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>28340</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Adding UAP RS3 configurations for System.Buffers, System.Memory and System.Reflection.DispatchProxy</Title>
    <Description>This PR supersedes #26420.

fixes #25024

A few packages need to have to be crosscompiled against uap RS3 in order to have the packages provide an asset that will work for people targetting RS3. These changes will make that possible.

cc: @ericstj @weshaggard </Description>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>22/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>28340</PullRequestID>
        <IssueID>26420</IssueID>
        <Title>Enable rule RS1022 for Roslyn.sln</Title>
        <Description>Follow-up on https://github.com/dotnet/roslyn/pull/26399#pullrequestreview-115685345</Description>
        <CreatedDate>26/04/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>28340</PullRequestID>
        <IssueID>25024</IssueID>
        <Title>Lifetime of locals introduced for discards is wrong (too short)</Title>
        <Description>In short, if you do `ref int i = ref M(out _);` it is possible for the local to reference the discard outside of the discard's lifetime. Another scenario is `M(out _).N()` where `M` returns a ref to its parameter.

I'll let @VSadov add details.</Description>
        <CreatedDate>23/02/2018</CreatedDate>
        <ClosedDate>29/03/2018</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>28340</PullRequestID>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveEvaluator.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.LazyRemoteService.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.RemoteService.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.cs</File>
      <File>src/Interactive/HostTest/InteractiveHostTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>25329</IssueID>
    <RepoID>corefx</RepoID>
    <Title>[release/1.0.0] Port WinRT WebSockets Client fix (#21600)</Title>
    <Description>Port WinRT WebSockets Client fix (#21600) to UWP servicing (netcore50) branch

Contributes to #24802</Description>
    <CreatedDate>18/11/2017</CreatedDate>
    <ClosedDate>20/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>25329</PullRequestID>
        <IssueID>21600</IssueID>
        <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
        <Description>
        </Description>
        <CreatedDate>18/08/2017</CreatedDate>
        <ClosedDate>18/08/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>25329</PullRequestID>
        <IssueID>24802</IssueID>
        <Title>Merge dev15.7.x to dev15.7.x-vs-deps</Title>
        <Description>
This is an automatically generated pull request from dev15.7.x into dev15.7.x-vs-deps.

``` bash
git fetch --all
git checkout merges/dev15.7.x-to-dev15.7.x-vs-deps
git reset --hard upstream/dev15.7.x-vs-deps
git merge upstream/dev15.7.x
# Fix merge conflicts
git commit
git push merges/dev15.7.x-to-dev15.7.x-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>13/02/2018</CreatedDate>
        <ClosedDate>15/02/2018</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>25329</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder.ValueChecks.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Conversions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Expressions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Invocation.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Operators.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/ForEachLoopBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/InMethodBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/Conversions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/Operators/BinaryOperatorOverloadResolution.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MemberAnalysisResult.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MemberResolutionKind.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MethodTypeInference.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/OverloadResolution.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/OverloadResolutionResult.cs</File>
      <File>src/Compilers/CSharp/Portable/BoundTree/Formatting.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/CodeGen/EmitArrayInitializer.cs</File>
      <File>src/Compilers/CSharp/Portable/CodeGen/EmitConversion.cs</File>
      <File>src/Compilers/CSharp/Portable/CodeGen/EmitExpression.cs</File>
      <File>src/Compilers/CSharp/Portable/CommandLine/CSharpCommandLineParser.cs</File>
      <File>src/Compilers/CSharp/Portable/Compilation/BuiltInOperators.cs</File>
      <File>src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.NodeMapBuilder.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorFacts.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageID.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/CSharpDataFlowAnalysis.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/DataFlowPass.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/PreciseAbstractFlowPass.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/ReadWriteWalker.cs</File>
      <File>src/Compilers/CSharp/Portable/Generated/ErrorFacts.Generated.cs</File>
      <File>src/Compilers/CSharp/Portable/LanguageVersion.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/SynthesizedClosureEnvironment.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_Conversion.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/IteratorAndAsyncCaptureWalker.cs</File>
      <File>src/Compilers/CSharp/Portable/SymbolDisplay/SymbolDisplayVisitor.Members.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/PublicSymbols/AnonymousType.TypePublicSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/SynthesizedSymbols/AnonymousType.TemplateSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Compilation_WellKnownMembers.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ConstraintsHelper.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ErrorTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PENamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/NamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/FieldSymbolWithAttributesAndModifiers.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/IAttributeTargetSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/ImplicitNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceModuleSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourcePropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Symbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedBackingFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedContainer.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedEmbeddedAttributeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TupleTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/CommandLineTests.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/TouchedFileLoggingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_Dynamic.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_Locations.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_MarshalAs.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_StructLayout.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_WellKnownAttributes.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncEHTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncLocalsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenDeconstructTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenExprLambdaTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenReadOnlySpanConstructionTest.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenRefReturnTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTupleTest.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/ForeachTest.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/SwitchTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/CompilationEmitTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/DeterministicTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinuePdbTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueStateMachineTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/EditAndContinueTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EditAndContinue/LocalSlotMappingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/CheckSumTest.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBAsyncTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBConstantTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBDynamicLocalsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBEmbeddedSourceTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBIteratorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBLambdaTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBLocalFunctionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBTupleTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBUsingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PortablePdbTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Diagnostics/MethodGroupConversion.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/FlowAnalysis/PatternsVsRegions.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/FlowAnalysis/RegionAnalysisTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_ArrayCreationAndInitializer.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_IDelegateCreationExpression.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_IInvocationOperation.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/BetterCandidates.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/BindingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ConditionalOperatorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/DynamicTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ForEachTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/InheritanceBindingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/LocalFunctionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ObjectAndCollectionInitializerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/OverloadResolutionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/QueryTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/RefEscapingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ScriptSemanticsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticAnalyzerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/StackAllocSpanExpressionsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/TargetTypedDefaultTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UnsafeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/BadSymbolReference.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/GetSemanticInfoTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/SemanticModelGetDeclaredSymbolAPITests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/SemanticModelGetSemanticInfoTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/SymbolDisplay/SymbolDisplayTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/AnonymousTypesSemanticsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/ConversionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/ExtensionMethodTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/GenericConstraintTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Metadata/PE/NoPia.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/MissingSpecialMember.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/MockNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Retargeting/RetargetingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/BaseClassTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/DelegateTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolDistinguisherTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Diagnostics/DiagnosticTest.cs</File>
      <File>src/Compilers/Core/MSBuildTask/CopyRefAssembly.cs</File>
      <File>src/Compilers/Core/MSBuildTask/ErrorString.Designer.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/ILBuilderEmit.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/DataFlowAnalysis.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Platform.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticInfo.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/DebugDirectoryExtensions.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/PeWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/UsedNamespaceOrType.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs</File>
      <File>src/Compilers/Core/Portable/WellKnownMember.cs</File>
      <File>src/Compilers/Core/Portable/WellKnownMembers.cs</File>
      <File>src/Compilers/Extension/AssemblyRedirects.cs</File>
      <File>src/Compilers/Server/VBCSCompilerTests/TouchedFileLoggingTests.cs</File>
      <File>src/Compilers/Shared/BuildServerConnection.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/CSharpTestBase.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/MockCSharpCompiler.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/TestOptions.cs</File>
      <File>src/EditorFeatures/CSharp/QuickInfo/SemanticQuickInfoProvider.cs</File>
      <File>src/EditorFeatures/CSharp/UseAutoProperty/UseAutoPropertyAnalyzer.cs</File>
      <File>src/EditorFeatures/CSharp/UseAutoProperty/UseAutoPropertyCodeFixProvider.cs</File>
      <File>src/EditorFeatures/CSharpTest/Classification/AbstractCSharpClassifierTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Classification/SemanticClassifierTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Classification/SyntacticClassifierTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Classification/SyntacticClassifierTests_Preprocessor.cs</File>
      <File>src/EditorFeatures/CSharpTest/Classification/TotalClassifierTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Classification/TotalClassifierTests_Dynamic.cs</File>
      <File>src/EditorFeatures/CSharpTest/CodeActions/ExtractMethod/ExtractMethodTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/ConditionalExpressionInStringInterpolation/CSharpAddParenthesesAroundConditionalExpressionInInterpolatedStringCodeFixProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/UpgradeProject/UpgradeProjectTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/UseAutoProperty/UseAutoPropertyTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/ExtractMethod/ExtractMethodTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/QuickInfo/SemanticQuickInfoSourceTests.cs</File>
      <File>src/EditorFeatures/Core.Wpf/QuickInfo/Converters/QuickInfoDisplayDeferredContentConverter.cs</File>
      <File>src/EditorFeatures/Core.Wpf/QuickInfo/QuickInfoDisplayPanel.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/ClassificationUtilities.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/QuickInfo/DeferredContent/QuickInfoDisplayDeferredContent.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/QuickInfo/Providers/AbstractQuickInfoProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/QuickInfo/Providers/AbstractSemanticQuickInfoProvider.cs</File>
      <File>src/EditorFeatures/Test/Extensions/SourceTextContainerExtensionsTests.cs</File>
      <File>src/EditorFeatures/Test/TextEditor/TryGetDocumentTests.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/AbstractClassifierTests.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/ClassificationBuilder.OperatorClassificationTypes.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/ClassificationBuilder.PunctuationClassificationTypes.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/ClassificationBuilder.XmlDocClassificationTypes.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/ClassificationBuilder.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/ClassificationTestHelper.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/FormattedClassification.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/FormattedClassifications.Operators.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/FormattedClassifications.Punctuation.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/FormattedClassifications.XmlDoc.cs</File>
      <File>src/EditorFeatures/TestUtilities/Classification/FormattedClassifications.cs</File>
      <File>src/EditorFeatures/TestUtilities/QuickInfo/AbstractSemanticQuickInfoSourceTests.cs</File>
      <File>src/EditorFeatures/TestUtilities/ServiceTestExportProvider.cs</File>
      <File>src/EditorFeatures/TestUtilities/Traits.cs</File>
      <File>src/EditorFeatures/Text/Extensions.SnapshotSourceText.cs</File>
      <File>src/EditorFeatures/Text/Extensions.TextBufferContainer.cs</File>
      <File>src/EditorFeatures/Text/Extensions.TextBufferMapper.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EENamedTypeSymbol.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ExpressionCompilerTests.cs</File>
      <File>src/Features/CSharp/Portable/CSharpFeaturesResources.Designer.cs</File>
      <File>src/Features/CSharp/Portable/CodeFixes/ConditionalExpressionInStringInterpolation/CSharpAddParenthesesAroundConditionalExpressionInInterpolatedStringCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/LanguageServices/CSharpSymbolDisplayService.SymbolDescriptionBuilder.cs</File>
      <File>src/Features/CSharp/Portable/UpgradeProject/CSharpUpgradeProjectCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/CodeFixes/PredefinedCodeFixProviderNames.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.CompilationManager.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.Executor.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.InProcOrRemoteHostAnalyzerRunner.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer_IncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/ICodeAnalysisDiagnosticAnalyzerExecutor.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/IRemoteDiagnosticAnalyzerService.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/Log/DiagnosticAnalyzerLogger.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/Log/DiagnosticLogAggregator.cs</File>
      <File>src/Features/Core/Portable/ExtractMethod/ExtractMethodMatrix.cs</File>
      <File>src/Features/Core/Portable/ExtractMethod/MethodExtractor.VariableSymbol.cs</File>
      <File>src/Features/Core/Portable/ExtractMethod/SelectionValidator.cs</File>
      <File>src/Features/Core/Portable/LanguageServices/SymbolDisplayService/AbstractSymbolDisplayService.AbstractSymbolDescriptionBuilder.cs</File>
      <File>src/Features/Core/Portable/LanguageServices/SymbolDisplayService/SymbolDescriptionGroups.cs</File>
      <File>src/Features/Core/Portable/MetadataAsSource/AbstractMetadataAsSourceService.WrappedNamedTypeSymbol.cs</File>
      <File>src/Test/PdbUtilities/Pdb/PdbValidation.cs</File>
      <File>src/VisualStudio/Core/Def/HACK_ThemeColorFixer.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/VisualStudioActiveStatementProvider.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Utilities/AutomationDelegatingListView.cs</File>
      <File>src/VisualStudio/Core/Test.Next/Remote/JsonConverterTests.cs</File>
      <File>src/VisualStudio/Core/Test.Next/Services/PerformanceTrackerServiceTests.cs</File>
      <File>src/VisualStudio/Core/Test.Next/Services/VisualStudioDiagnosticAnalyzerExecutorTests.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/AbstractEditorTest.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/AbstractIntegrationTest.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpBuild.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpChangeSignatureDialog.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpCodeActions.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpExtractMethod.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpFindReferences.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpGenerateTypeDialog.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpInteractive.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpReplIdeFeatures.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicFindReferences.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicGenerateTypeDialog.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/DialogHelpers.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/InProcess/InteractiveWindow_InProc.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/InProcess/TextViewWindow_InProc.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/ChangeSignatureDialog_OutOfProc.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/Dialog_OutOfProc.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/ExtractInterfaceDialog_OutOfProc.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/GenerateTypeDialog_OutOfProc.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/PreviewChangesDialog_OutOfProc.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstance.cs</File>
      <File>src/Workspaces/CSharp/Portable/Classification/ClassificationHelpers.cs</File>
      <File>src/Workspaces/CSharp/Portable/Classification/SyntaxClassification/NameSyntaxClassifier.cs</File>
      <File>src/Workspaces/Core/Portable/Classification/ClassificationTypeNames.cs</File>
      <File>src/Workspaces/Core/Portable/Classification/Classifier.cs</File>
      <File>src/Workspaces/Core/Portable/CodeGeneration/Symbols/CodeGenerationTypeSymbol.cs</File>
      <File>src/Workspaces/Core/Portable/Log/FunctionId.cs</File>
      <File>src/Workspaces/Core/Portable/Log/KeyValueLogMessage.cs</File>
      <File>src/Workspaces/Core/Portable/Remote/RemoteHostClientExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/Remote/WellKnownServiceHubServices.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/SemanticModelExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/WorkspacesResources.Designer.cs</File>
      <File>src/Workspaces/Remote/Core/Diagnostics/DiagnosticComputer.cs</File>
      <File>src/Workspaces/Remote/Core/Diagnostics/IPerformanceTrackerService.cs</File>
      <File>src/Workspaces/Remote/Core/Diagnostics/PerformanceQueue.cs</File>
      <File>src/Workspaces/Remote/Core/Diagnostics/PerformanceTrackerService.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Services/CodeAnalysisService_Diagnostics.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Services/RemoteHostService.PerformanceReporter.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Services/RemoteHostService.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Shared/RoslynJsonConverter.RoslynOnly.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Shared/RoslynJsonConverter.SolutionIdConverters.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Shared/RoslynJsonConverter.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Telemetry/WatsonReporter.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>25274</IssueID>
    <RepoID>corefx</RepoID>
    <Title>[release/1.1.x] Port WinRT WebSockets Client fix to UWP/netcore50 servicing</Title>
    <Description>Port WinRT WebSockets Client fix (#21600) to UWP servicing (netcore50) branch

Fixes #24802</Description>
    <CreatedDate>15/11/2017</CreatedDate>
    <ClosedDate>20/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>25274</PullRequestID>
        <IssueID>21600</IssueID>
        <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
        <Description>
        </Description>
        <CreatedDate>18/08/2017</CreatedDate>
        <ClosedDate>18/08/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>25274</PullRequestID>
        <IssueID>24802</IssueID>
        <Title>Merge dev15.7.x to dev15.7.x-vs-deps</Title>
        <Description>
This is an automatically generated pull request from dev15.7.x into dev15.7.x-vs-deps.

``` bash
git fetch --all
git checkout merges/dev15.7.x-to-dev15.7.x-vs-deps
git reset --hard upstream/dev15.7.x-vs-deps
git merge upstream/dev15.7.x
# Fix merge conflicts
git commit
git push merges/dev15.7.x-to-dev15.7.x-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>13/02/2018</CreatedDate>
        <ClosedDate>15/02/2018</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>25274</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder.ValueChecks.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Conversions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Expressions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Invocation.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Operators.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/ForEachLoopBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/InMethodBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/Conversions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/Operators/BinaryOperatorOverloadResolution.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MemberAnalysisResult.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MemberResolutionKind.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MethodTypeInference.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/OverloadResolution.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/OverloadResolutionResult.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/Compilation/BuiltInOperators.cs</File>
      <File>src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.NodeMapBuilder.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorFacts.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageID.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/CSharpDataFlowAnalysis.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/DataFlowPass.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/PreciseAbstractFlowPass.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/ReadWriteWalker.cs</File>
      <File>src/Compilers/CSharp/Portable/Generated/ErrorFacts.Generated.cs</File>
      <File>src/Compilers/CSharp/Portable/LanguageVersion.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/SynthesizedClosureEnvironment.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/IteratorAndAsyncCaptureWalker.cs</File>
      <File>src/Compilers/CSharp/Portable/SymbolDisplay/SymbolDisplayVisitor.Members.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/PublicSymbols/AnonymousType.TypePublicSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/SynthesizedSymbols/AnonymousType.TemplateSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ConstraintsHelper.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ErrorTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PENamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/NamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/FieldSymbolWithAttributesAndModifiers.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/IAttributeTargetSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/ImplicitNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourcePropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Symbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedBackingFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedContainer.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedEmbeddedAttributeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TupleTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/CommandLineTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_Dynamic.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_Locations.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_MarshalAs.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_StructLayout.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_WellKnownAttributes.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenDeconstructTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenExprLambdaTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenRefReturnTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTupleTest.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Diagnostics/MethodGroupConversion.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/FlowAnalysis/PatternsVsRegions.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/FlowAnalysis/RegionAnalysisTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_ArrayCreationAndInitializer.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_IDelegateCreationExpression.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/IOperation/IOperationTests_IInvocationOperation.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/BetterCandidates.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/BindingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ConditionalOperatorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/DynamicTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ForEachTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/InheritanceBindingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/LocalFunctionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ObjectAndCollectionInitializerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/OverloadResolutionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/QueryTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ScriptSemanticsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticAnalyzerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/TargetTypedDefaultTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UnsafeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/BadSymbolReference.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/GetSemanticInfoTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/SemanticModelGetDeclaredSymbolAPITests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/SemanticModelGetSemanticInfoTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/SymbolDisplay/SymbolDisplayTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/AnonymousTypesSemanticsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/ConversionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/ExtensionMethodTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/GenericConstraintTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Metadata/PE/NoPia.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/MockNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Retargeting/RetargetingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/BaseClassTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/DelegateTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolDistinguisherTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Diagnostics/DiagnosticTest.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/DataFlowAnalysis.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/CSharpTestBase.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/TestOptions.cs</File>
      <File>src/EditorFeatures/CSharp/QuickInfo/SemanticQuickInfoProvider.cs</File>
      <File>src/EditorFeatures/CSharpTest/CodeActions/ExtractMethod/ExtractMethodTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/UpgradeProject/UpgradeProjectTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/QuickInfo/SemanticQuickInfoSourceTests.cs</File>
      <File>src/EditorFeatures/Core.Wpf/QuickInfo/Converters/QuickInfoDisplayDeferredContentConverter.cs</File>
      <File>src/EditorFeatures/Core.Wpf/QuickInfo/QuickInfoDisplayPanel.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/QuickInfo/DeferredContent/QuickInfoDisplayDeferredContent.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/QuickInfo/Providers/AbstractQuickInfoProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/QuickInfo/Providers/AbstractSemanticQuickInfoProvider.cs</File>
      <File>src/EditorFeatures/TestUtilities/QuickInfo/AbstractSemanticQuickInfoSourceTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EENamedTypeSymbol.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ExpressionCompilerTests.cs</File>
      <File>src/Features/CSharp/Portable/LanguageServices/CSharpSymbolDisplayService.SymbolDescriptionBuilder.cs</File>
      <File>src/Features/CSharp/Portable/UpgradeProject/CSharpUpgradeProjectCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/LanguageServices/SymbolDisplayService/AbstractSymbolDisplayService.AbstractSymbolDescriptionBuilder.cs</File>
      <File>src/Features/Core/Portable/LanguageServices/SymbolDisplayService/SymbolDescriptionGroups.cs</File>
      <File>src/Features/Core/Portable/MetadataAsSource/AbstractMetadataAsSourceService.WrappedNamedTypeSymbol.cs</File>
      <File>src/Workspaces/Core/Portable/CodeGeneration/Symbols/CodeGenerationTypeSymbol.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/SemanticModelExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/WorkspacesResources.Designer.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>24469</IssueID>
    <RepoID>corefx</RepoID>
    <Title>[release/2.0.0] Port missing System.Net.Http NETFX fixes</Title>
    <Description>Issue #23702 showed some Http test failures on NETFX. This was because
PRs, #21325 and #21373 are missing from the release/2.0.0 branch.

These fixes are needed for the OOB System.Net.Http.dll that is being
built for the NETStandard Support Package.  This package is used when
NETStandard is targeted and the platform is NETFX but less than .NET
4.7.1.</Description>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>30/10/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>24469</PullRequestID>
        <IssueID>23702</IssueID>
        <Title>Warning reported returning `null` from async `Task&lt;object?&gt;`</Title>
        <Description>`return null;` results in `warning: cannot convert null to non-nullable reference`:
```
using System.Threading.Tasks;
class C
{
    static async Task&lt;object?&gt; F()
    {
        return null;
    }
}
```</Description>
        <CreatedDate>10/12/2017</CreatedDate>
        <ClosedDate>11/12/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>24469</PullRequestID>
        <IssueID>21325</IssueID>
        <Title>Use 15.3 Preview 7 for VSI CI machines</Title>
        <Description>
        </Description>
        <CreatedDate>04/08/2017</CreatedDate>
        <ClosedDate>04/08/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>24469</PullRequestID>
        <IssueID>21373</IssueID>
        <Title>'IntroduceVariableCodeRefactoringProvider' encountered an error and has been disabled</Title>
        <Description>**Version Used**: 15.0.26228.9

:link: Originally reported by [Guy Haskell](https://developercommunity.visualstudio.com/users/8032/7704a496-8f92-43bd-9ee4-c54f69646e52.html) on [developer community](https://developercommunity.visualstudio.com/content/problem/35938/introducevariablecoderefactoringprovider-encounter.html).

**Steps to Reproduce**:

1. Add the following to a VB module:

    ```vb
    &lt;Example(3 + 3)&gt;
    Public Property NewProperty()
    ```

2. Select the expression `3 + 3`

3. Drop down the light bulb

See the following image:

![image](https://user-images.githubusercontent.com/1408396/29082869-8e284bee-7c2c-11e7-9e11-12c453713250.png)
</Description>
        <CreatedDate>08/08/2017</CreatedDate>
        <ClosedDate>12/11/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>24469</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Statements.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/CodeGen/EmitExpression.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageID.cs</File>
      <File>src/Compilers/CSharp/Portable/Generated/BoundNodes.xml.Generated.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_ConditionalAccess.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_FixedStatement.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/UnsafeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/TargetTypedDefaultTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UnsafeTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>24322</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Add more parameters support in SGEN.</Title>
    <Description>Add following four parameters.

nologo - Prevents displaying of logo.
silent - Prevents displaying of success messages.
verbose - List types from the target assembly that cannot be serialized. This is related to #22938
parsableerrors - Print errors in a format similar to those reported by compilers.

Fix #22931 
Fix #22938

@shmao @zhenlan @mconnew </Description>
    <CreatedDate>29/09/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>24322</PullRequestID>
        <IssueID>22938</IssueID>
        <Title>Make all Lazy&lt;IOperation&gt;(() =&gt; null) Singletons</Title>
        <Description>One technique would be to use a similar approach to SpecializedCollections/SpecializedTasks in Workspaces.</Description>
        <CreatedDate>31/10/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>24322</PullRequestID>
        <IssueID>22931</IssueID>
        <Title>Enum type appears as Class when referenced in another project</Title>
        <Description>**Version Used**: 
2.4.0

**Steps to Reproduce**:

1.  Create Enum in classlib
2.  Reference Enum in another assembly
3.  TypeKind appears as Class, not Enum

**Expected Behavior**:
TypeKind should be Enum in both projects

**Actual Behavior**:
TypeKind is Enum in classlib project, but appears as Class in other project that references the classlib.

Here is classlib project:

```
﻿using System;
namespace bug1
{
    public enum TestEnum { v1, v2, v3 };
    public class Bug1 {
        public void func() {
            TestEnum x = TestEnum.v2;
        }
    }
}

```

When you print out SyntaxNode tree, the 'x' TypeKind is Enum as it should be.

Here is console project that references bug1:

```
using System;
using bug1;
namespace bug2
{
    class Program
    {
        static void Main(string[] args)
        {
            TestEnum y = TestEnum.v1;
        }
    }
}

```

When you print out SyntaxNode tree, the 'y' TypeKind is Class, should be Enum.
</Description>
        <CreatedDate>31/10/2017</CreatedDate>
        <ClosedDate>07/11/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>24322</PullRequestID>
        <IssueID>22938</IssueID>
        <Title>Make all Lazy&lt;IOperation&gt;(() =&gt; null) Singletons</Title>
        <Description>One technique would be to use a similar approach to SpecializedCollections/SpecializedTasks in Workspaces.</Description>
        <CreatedDate>31/10/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>24322</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncMethodBuilderMemberCollection.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncMethodToStateMachineRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncRewriter.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenAsyncTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/BindingAsyncTasklikeMoreTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>23861</IssueID>
    <RepoID>corefx</RepoID>
    <Title>release/2.0.0 backport of REGEX_DEFAULT_MATCH_TIMEOUT (#23666)</Title>
    <Description>Change #23666
Fixed #15173

waiting for shiproom approval</Description>
    <CreatedDate>07/09/2017</CreatedDate>
    <ClosedDate>08/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>23861</PullRequestID>
        <IssueID>23666</IssueID>
        <Title>C# - A breakpoint cound not be inserted at this location because of comments and #regions</Title>
        <Description>The following source code does compile and run, but it is not possible to set a breakpoint in VS 2017.
It seems to be related to the extra line break in the comment within a #region.

Here is the code:
```
using System;

namespace NoBreakpointSet
    {    
    public class Program
        {

        #region Methods

        /// &amp;lt;param name=&amp;quot;args&amp;quot;&amp;gt;      

        ///&amp;lt;/param&amp;gt;             
        public static void Main(string[] args)
            {
            Console.WriteLine(&amp;quot;Unable to set breakpoint here.&amp;quot;);
            }
    
        #endregion
        }
    }
```

WIthout the line-break between the two ///-comments everything is ok.

Intellisense also shows an error message &amp;quot;CS1028	Unexpected preprocessor directive&amp;quot;
at the #endregion line.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/137023/c-a-breakpoint-cound-not-be-inserted-at-this-locat.html
VSTS ticketId: 513856_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 10/26/2017, 07:10 PM (42 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>08/12/2017</CreatedDate>
        <ClosedDate>15/12/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23861</PullRequestID>
        <IssueID>15173</IssueID>
        <Title>[TEST ONLY, NO REVIEW] Merge dev15-rc2 into master</Title>
        <Description>This is an automatically generated pull request from dev15-rc2 into master.

### TODO: remove the space so the following mention works
@ dotnet/roslyn-infrastructure:

``` bash
git remote add brettfo-roslyn "https://github.com/brettfo/roslyn.git"
git fetch brettfo-roslyn
git fetch upstream
git checkout merge-dev15-rc2-into-master-20161111-180700
git reset --hard upstream/master
git merge upstream/dev15-rc2
# Fix merge conflicts
git commit
git push brettfo-roslyn merge-dev15-rc2-into-master-20161111-180700 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>11/11/2016</CreatedDate>
        <ClosedDate>11/11/2016</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>23861</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_Call.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PEParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SignatureOnlyParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceClonedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceComplexParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceSimpleParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/ThisParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_CallerInfoAttributes.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/PEModule.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/Attributes/AttributeDescription.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/Attributes/CallerInfoAttributeData.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/Attributes/CommonAttributeData.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/Attributes/CommonParameterEarlyWellKnownAttributeData.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>23787</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Ported a missing SqlParameter constructor</Title>
    <Description>I've added a missing SqlParameter constructor per discussion on #17126. This is a direct port of the constructor located [here](https://msdn.microsoft.com/en-us/library/5a10hy4y(v=vs.110).aspx?cs-save-lang=1&amp;cs-lang=csharp#code-snippet-2) from reference source located [here](https://github.com/dotnet/corefx/blob/master/src/shims/ApiCompatBaseline.netcoreapp.netfx461.txt). I tried to mirror my work off the similar PR #19544.

@danmosemsft had originally suggested that I attempt to port the rest of SqlParameter's missing items as well, but since this is my first attempt at open source contribution I'm going to start small. (Plus, some of that work looked a bit out of my league.)

I'm happy to make any changes or additions as necessary - please let me know!
</Description>
    <CreatedDate>04/09/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>23787</PullRequestID>
        <IssueID>17126</IssueID>
        <Title>Inline temporary variable unindents new statement with comment</Title>
        <Description>**Version Used**: VS2017RC.4

**Steps to Reproduce**:

1. Add code

```C#
using System;
namespace N {
	class Program {
		public static void Main() {
			object o = null;
			if (o is int)
				Console.WriteLine();
			else if (o is string) {
				// some comment
				var s = (string)o;
				Console.WriteLine(s);
			}
		}
	}
}
```

2. `Ctrl+.` and `Enter` at `var`


**Expected Behavior**:

Indented code, something like this or perhaps the comment should stay where it was (inside the block)

```C#
using System;
namespace N {
	class Program {
		public static void Main() {
			object o = null;
			if (o is int)
				Console.WriteLine();
			// some comment
			else if (o is string s) {
				Console.WriteLine(s);
			}
		}
	}
}
```

**Actual Behavior**:

```C#
using System;
namespace N {
	class Program {
		public static void Main() {
			object o = null;
			if (o is int)
				Console.WriteLine();
			else // some comment
if (o is string s) {
				Console.WriteLine(s);
			}
		}
	}
}
```
</Description>
        <CreatedDate>14/02/2017</CreatedDate>
        <ClosedDate>20/02/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23787</PullRequestID>
        <IssueID>19544</IssueID>
        <Title>update groovy files</Title>
        <Description>Update groovy files
</Description>
        <CreatedDate>16/05/2017</CreatedDate>
        <ClosedDate>16/05/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>23787</PullRequestID>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>23772</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Disable some networking tests</Title>
    <Description>Disabling tests.
#23765 #23766 #23767 #23768 #23769 #23770 #23771</Description>
    <CreatedDate>02/09/2017</CreatedDate>
    <ClosedDate>03/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>23772</PullRequestID>
        <IssueID>23765</IssueID>
        <Title>found a race where we might double start progress bar for solution cr…</Title>
        <Description>…awler (error list)

### Customer scenario

User sees "ErrorList" title contains "..." and it never goes away. and it can confuse users that error list is still updating while it is already done.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/23764

### Workarounds, if any

there is no workaround.

### Risk

low risk. not something that can cause crash.

### Performance impact

Low

### Is this a regression from a previous update?

Yes.

### Root cause analysis

this fix introduced this race - https://github.com/dotnet/roslyn/pull/23623

basically, previously, we didn't account work that are still running (ex, last work that is running). we start and stop progress bar as first work is enqueued to the work queue and as last work is dequeued. which can be misleading since last work might still running even if progress bar said work is done. so the PR above changed progress bar to consider work still running, but failed to change logic on when we start progress bar since now even if queue is empty, progress bar might still not done yet. restarting progress bar while it is still running will mess up its state tracking. this fix that issue.

### How was the bug found?

dogfooding.

</Description>
        <CreatedDate>13/12/2017</CreatedDate>
        <ClosedDate>13/12/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23772</PullRequestID>
        <IssueID>23766</IssueID>
        <Title>OOP crashes with unrecoverable error after installing FxCop analyzers VSIX and NuGet</Title>
        <Description>**Version Used**: VS2017 Version 15.5.0 RTW

**Steps to Reproduce**:

1.	Install the below FxCop analyzers VSIX: `&lt;%internal_build_drops%&gt;\Roslyn\RoslynAnalyzers\20171213.3\VSSetup\Microsoft.CodeAnalysis.FxCopAnalyzers.Setup.vsix`
2.	Create a new C#/VB class library project and verify analyzers run fine
3.	Install the latest analyzer beta2 NuGet package: https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers/2.6.0-beta2

**Expected Behavior**:
VS de-dupes the analyzers from VSIX and NuGet and runs from any one source.

**Actual Behavior**:
I get the below gold bar for unrecoverable VS error:
![image](https://user-images.githubusercontent.com/10605811/33960547-ed5361ee-dfff-11e7-8cac-064a001d2cc3.png)

4. Close and re-open VS and open the same solution

**Actual Behavior**:
You again get the same gold bar. Only uninstalling the NuGet will avoid the OOP crash.
</Description>
        <CreatedDate>13/12/2017</CreatedDate>
        <ClosedDate>29/12/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23772</PullRequestID>
        <IssueID>23767</IssueID>
        <Title>VBCSCompiler needs to respond to restart manager</Title>
        <Description>The VBCSCompiler process needs to respond to shut down requests from the Windows Restart Manager. This is how Visual Studio asks processes to shut down before issuing an update. VBCSCompiler doesn't respond to this event and hence can block setup from occuring until the process is manually killed / times out. 

https://msdn.microsoft.com/en-us/library/windows/desktop/aa373653(v=vs.85).aspx</Description>
        <CreatedDate>13/12/2017</CreatedDate>
        <ClosedDate>03/04/2018</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23772</PullRequestID>
        <IssueID>23768</IssueID>
        <Title>VS 15.5 option strict error</Title>
        <Description>There is some bug, that VS do not recognize that Option Strict is OFF
Steps to reproduce
- in VS create VB console app,, make sure that Option Strict is Off in project page -&gt; Compile, and write code
` Dim x As Integer = "0"`
- aave project and solution, exit VS
- run VS again, load console project, and error will appear</Description>
        <CreatedDate>13/12/2017</CreatedDate>
        <ClosedDate>14/12/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23772</PullRequestID>
        <IssueID>23769</IssueID>
        <Title>Migrate command handlers to the new editor commanding</Title>
        <Description>&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

This change migrates all Roslyn command handlers to the new editor commanding system, which is based on Roslyn's commanding, see [Modern Editor Commanding API Spec](https://github.com/Microsoft/vs-editor-api/wiki/Modern-Editor-Commanding-API-Revisited).

Besides other benefits, migrating to the new editor commanding allows the editor to diagnose typing performance in a more fine grained way, for example it will be now possible to measure/collect traces of individual command handlers introducing typing delays.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/24194 
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/513714
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/511623

### Risk

This change affects execution of every Roslyn commands handler, but the risk is mitigated by the fact that the new editor commanding is designed and implemented based on existing Roslyn commanding and preserves command handling semantics and design principles as is so most command handlers are migrated by just changing the namespace of interface they implement and the way they are exported.

### Performance impact

According to RPS results, this change introduces a _below degrade bar_ regression in C# typing scenario, caused by the new editor commanding infrastructure:
1. Half the regression is the cost of initialization/disposal of VS threaded wait dialog which is RPS machine setup specific issue (code markers writing to a file) and will not affect customers.
2. We are doing a bit more work in the new editor commanding than Roslyn used to because of a more generalized projection-aware approach to ordering command handlers. We plan to address that by making focused optimizations on the editor side in Preview 4.

### Validation
The following validation was performed:
1. Roslyn unit, integration tests are passing
2. DDRITs are passing
3. RPS is passing (see perf impact notes above)
4. Manual regression testing by the Editor, Roslyn, TypeScript, WebTools, F# and XAML teams on a validation build, no regressions found.
5. I prototyped migrating VS for Mac to the new editor bits + Roslyn build of this PR and confirmed no issues or leaked WPF dependencies. Current Razor support in VS for Mac can be straightforwardly migrated from using Roslyn commanding to the new editor commanding.

&lt;/details&gt;

-------------------------------------
This change migrates all Roslyn command handlers to the new platform's commanding system, which is based on Roslyn's commanding, see [Modern Editor Commanding API Spec](https://github.com/Microsoft/vs-editor-api/wiki/Modern-Editor-Commanding-API-Revisited).

 The migration strategy is to keep Roslyn commanding infrastructure in place as is, but migrate all C#/VB command handlers over. Given that the migration mostly required pretty boilerplate changes:
1. Namespace changes, e.g. all common editor *CommandArgs classes are now in Microsoft.VisualStudio.Text.Editor.Commanding.Commands namespace.
2. Different way to export a command handler
3. Independent command handlers are migrated to a simpler ICommandHandler interface that doesn't require dealing with next handler chain.
4. Command handlers requiring access to the next handler are migrated to IChainedCommandHandler with no change in semantics.
5. Existing Roslyn commanding infrastructure is left intact as languages such as TypeScript still depend on it. That unfortunately required a lot of verbose name qualifications to resolve name conflicts, any suggestions to improve readability are welcome.
6. Platform command handlers are required to provide their display name.
7. Platform's command handlers are executed in a shared wait context that is provided to handlers via CommandExecutionContext argument. It contains cancellation token and also allows handlers to push a wait scope with their own cancellability flag, description and progress tracker. So all _waitIndicator.Wait() are replaced with context.WaitContext.AddScope().
8. Some Roslyn commands are Roslyn specific and stay in Roslyn (e.g. SortAndRemoveUnnecessaryImportsCommandArgs). Those required creating new CommandArgs classes deriving from Platform's EditorCommandArgs and exporting VS specific command bindings.


  </Description>
        <CreatedDate>13/12/2017</CreatedDate>
        <ClosedDate>18/01/2018</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23772</PullRequestID>
        <IssueID>23770</IssueID>
        <Title>Opening up the pattern matcher?</Title>
        <Description>We currently have a copy of the pattern matching source and all of its supporting code in the Visual F# tools codebase: https://github.com/Microsoft/visualfsharp/tree/master/vsintegration/src/FSharp.LanguageService.Base/PatternMatcher

There are a two problems with this:

1. The source uses Roslyn-isms which necessarily tie it to only one part of our codebase; we cannot port this over to our own language service, because our language service is used in other editors which don't use Roslyn.
2. We likely won't be getting any future bug fixes in this.

Can we open this up for consumption? cc @DustinCampbell </Description>
        <CreatedDate>13/12/2017</CreatedDate>
        <ClosedDate>14/12/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>23772</PullRequestID>
        <IssueID>23771</IssueID>
        <Title>[Question/Bug] Possible bugs in AnalyzeDataFlow?</Title>
        <Description>I was somewhat confused as to what the properties of `DataFlowAnalysis` represent. I've been looking through the unit tests, which so far have only confused me more. For example, I can't tell why [this test](https://github.com/dotnet/roslyn/blob/94ab292d2c79b1675de0d6ff0a7361ecfbf20cfb/src/Compilers/CSharp/Test/Semantic/FlowAnalysis/TryLockUsingStatementTests.cs#L201) includes `para` in `DataFlowsIn`, yet [this test](https://github.com/dotnet/roslyn/blob/94ab292d2c79b1675de0d6ff0a7361ecfbf20cfb/src/Compilers/CSharp/Test/Semantic/FlowAnalysis/TryLockUsingStatementTests.cs#L532) does not, when `para` is a ref parameter in both circumstances. Also, why does [this test](https://github.com/dotnet/roslyn/blob/94ab292d2c79b1675de0d6ff0a7361ecfbf20cfb/src/Compilers/CSharp/Test/Semantic/FlowAnalysis/TryLockUsingStatementTests.cs#L260) not include `para` when it is clearly assigned to before the bound region?</Description>
        <CreatedDate>13/12/2017</CreatedDate>
        <ClosedDate>22/04/2018</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>23772</PullRequestID>
      <File>src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticAnalyzerExecutor.cs</File>
      <File>src/VisualStudio/Core/Test.Next/Services/VisualStudioDiagnosticAnalyzerExecutorTests.cs</File>
      <File>src/Workspaces/Remote/Core/Diagnostics/DiagnosticComputer.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>21466</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Add ClientWebSocket client certificate test</Title>
    <Description>Adding new test case that pins the UWP shortcoming tracked by issue #21393. This test case requires [special setup](https://github.com/dotnet/corefx/blob/master/src/Common/tests/System/Net/Prerequisites/README.md) that is checked inside its ConditionalFact attribute.

I've confirmed that it consistently passes in .NET Framework test runs and
fails in UWP and .NET Core test runs (as expected). I'll enable it for UWP as part of the #21393 fix.

Contributes to #21393</Description>
    <CreatedDate>23/06/2017</CreatedDate>
    <ClosedDate>26/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>21466</PullRequestID>
        <IssueID>21393</IssueID>
        <Title>Dummy PR</Title>
        <Description>This is to validate CI</Description>
        <CreatedDate>08/08/2017</CreatedDate>
        <ClosedDate>09/08/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>21466</PullRequestID>
        <IssueID>21393</IssueID>
        <Title>Dummy PR</Title>
        <Description>This is to validate CI</Description>
        <CreatedDate>08/08/2017</CreatedDate>
        <ClosedDate>09/08/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>21466</PullRequestID>
        <IssueID>21393</IssueID>
        <Title>Dummy PR</Title>
        <Description>This is to validate CI</Description>
        <CreatedDate>08/08/2017</CreatedDate>
        <ClosedDate>09/08/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>21466</PullRequestID>
      <File>src/Compilers/Core/Portable/Emit/EditAndContinue/EmitBaseline.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReference/ModuleMetadata.cs</File>
      <File>src/EditorFeatures/Test/EditAndContinue/DebuggeeModuleMetadataCacheTests.cs</File>
      <File>src/Features/Core/Portable/EditAndContinue/DebuggeeModuleMetadataCache.cs</File>
      <File>src/Features/Core/Portable/EditAndContinue/IDebuggeeModuleMetadataProvider.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/DebuggeeModuleMetadataProvider.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/VsENCRebuildableProjectImpl.cs</File>
      <File>src/VisualStudio/Core/Def/ServicesVSResources.Designer.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/InProcess/Debugger_InProc.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>21454</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fix embedded resources in System.Drawing.Common</Title>
    <Description>Fixes #21451
Fixes #21310

I've added tests for ToolboxBitmapAttribute with this PR, as they failed before for a similar reason to #21310</Description>
    <CreatedDate>23/06/2017</CreatedDate>
    <ClosedDate>30/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>21454</PullRequestID>
        <IssueID>21451</IssueID>
        <Title>IOperation.IsImplicit for param arrays and default value arguments</Title>
        <Description>https://github.com/dotnet/roslyn/pull/21363/files adds `IOperation.IsImplicit`, but doesn't handle setting it correctly for param arrays and default value arguments.</Description>
        <CreatedDate>11/08/2017</CreatedDate>
        <ClosedDate>23/10/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>21454</PullRequestID>
        <IssueID>21310</IssueID>
        <Title>Tagging VB/C# Ioperation tests</Title>
        <Description>fixes https://github.com/dotnet/roslyn/issues/20652

@jcouv , @dotnet/analyzer-ioperation </Description>
        <CreatedDate>03/08/2017</CreatedDate>
        <ClosedDate>08/08/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>21454</PullRequestID>
        <IssueID>21310</IssueID>
        <Title>Tagging VB/C# Ioperation tests</Title>
        <Description>fixes https://github.com/dotnet/roslyn/issues/20652

@jcouv , @dotnet/analyzer-ioperation </Description>
        <CreatedDate>03/08/2017</CreatedDate>
        <ClosedDate>08/08/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>21454</PullRequestID>
      <File>src/EditorFeatures/CSharpTest/CodeActions/InlineTemporary/InlineTemporaryTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>20236</IssueID>
    <RepoID>corefx</RepoID>
    <Title>release/2.0: Fix off-by-one error in NetEventSource.WriteEvent</Title>
    <Description>Port #20235 to release/2.0.0 branch.
cc: @janvorli, @steveharter 

Fixes #20199</Description>
    <CreatedDate>24/05/2017</CreatedDate>
    <ClosedDate>24/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>20236</PullRequestID>
        <IssueID>20235</IssueID>
        <Title>Merge master to features/ioperation</Title>
        <Description>
This is an automatically generated pull request from master into features/ioperation.

``` bash
git fetch --all
git checkout merges/master-to-features/ioperation-20170615-070018
git reset --hard upstream/features/ioperation
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/ioperation-20170615-070018 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>15/06/2017</CreatedDate>
        <ClosedDate>15/06/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20236</PullRequestID>
        <IssueID>20199</IssueID>
        <Title>Optimize fast path for "Use 'var'" code style</Title>
        <Description>| Scenario | Improvement (sec) | Improvement (%) |
| --- | --- | --- |
| Use `IsVar` instead of `IsTypeInferred` (original attempt) | 0.1 | 0.1% |
| Avoid analysis altogether (current attempt) | 20 | 15% |

## Ask Mode

**Customer scenario**

Apply a Fix All operation related to type style (Use `var`, or avoid `var`). The operation takes a long time in large solutions.

**Bugs this fixes:**

This is a measurable, observable improvement to [Code fix for solution is really slow](https://developercommunity.visualstudio.com/content/problem/67372/code-fix-for-solution-is-really-slow.html). @onovotny provided additional clarification that "Use 'var'" was the code fix in question.

**Workarounds, if any**

Wait longer.

**Risk**

Low. This change eliminates an analysis for a case where it is readily observed that the analysis is unnecessary.

**Performance impact**

15% improvement to Fix All in solution for this code fix; details provided above.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Failure to profile code fixes on large solutions.

**How was the bug found?**

Reported by @onovotny on VS Feedback.
</Description>
        <CreatedDate>13/06/2017</CreatedDate>
        <ClosedDate>19/06/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>20236</PullRequestID>
      <File>src/EditorFeatures/CSharpTest/RemoveUnreachableCode/RemoveUnreachableCodeTests.cs</File>
      <File>src/EditorFeatures/TestUtilities/Traits.cs</File>
      <File>src/Features/CSharp/Portable/RemoveUnreachableCode/CSharpRemoveUnreachableCodeCodeFixProvider.cs</File>
      <File>src/Features/CSharp/Portable/RemoveUnreachableCode/CSharpRemoveUnreachableCodeDiagnosticAnalyzer.cs</File>
      <File>src/Features/CSharp/Portable/RemoveUnreachableCode/RemoveUnreachableCodeHelpers.cs</File>
      <File>src/Features/Core/Portable/CodeFixes/PredefinedCodeFixProviderNames.cs</File>
      <File>src/Features/Core/Portable/CodeStyle/AbstractCodeStyleDiagnosticAnalyzer.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/Analyzers/IDEDiagnosticIds.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/Analyzers/RemoveUnnecessaryCastDiagnosticAnalyzerBase.cs</File>
      <File>src/Features/Core/Portable/Fading/FadingOptions.cs</File>
      <File>src/Features/Core/Portable/FeaturesResources.Designer.cs</File>
      <File>src/Features/Core/Portable/RemoveUnnecessaryImports/AbstractRemoveUnnecessaryImportsDiagnosticAnalyzer.cs</File>
      <File>src/VisualStudio/CSharp/Impl/CSharpVSResources.Designer.cs</File>
      <File>src/VisualStudio/CSharp/Impl/Options/AdvancedOptionPageControl.xaml.cs</File>
      <File>src/VisualStudio/CSharp/Impl/Options/AdvancedOptionPageStrings.cs</File>
      <File>src/VisualStudio/Core/Def/ServicesVSResources.Designer.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>20221</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fix HttpListener product typo causing test failures with netfx</Title>
    <Description>Fixes #20098

Contributes to #19967</Description>
    <CreatedDate>24/05/2017</CreatedDate>
    <ClosedDate>24/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>20221</PullRequestID>
        <IssueID>20098</IssueID>
        <Title>Merge master to dev15.6</Title>
        <Description>
This is an automatically generated pull request from master into dev15.6.

``` bash
git fetch --all
git checkout merges/master-to-dev15.6-20170608-070013
git reset --hard upstream/dev15.6
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev15.6-20170608-070013 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>08/06/2017</CreatedDate>
        <ClosedDate>09/06/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20221</PullRequestID>
        <IssueID>19967</IssueID>
        <Title>Skip projects with failed design time builds when populating Roslyn for or DPL</Title>
        <Description>**Customer scenario**

A customer with Lightweight solution load enabled opens a solution containing a project where anycode's design time build fails (including any project where the targeting pack isn't installed, or a .NET Core project that targets multiple frameworks). 

**Bugs this fixes:**

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/432432

**Workarounds, if any**

Disable DPL.  It might be hard to know what triggered this crash

**Risk**

Low - we just check for invalid project information and skip it.  This restores previous behavior, because `GetManagedCommandLineInfoAsync()` didn't use to return these projects.

**Performance impact**

Low - just adding null checks before passing data along.

**Is this a regression from a previous update?**

Yes - the platform deliberately started passing these through so that we can trigger a full load in these cases, but that change is still pending and not in Preview 2.  (See https://github.com/dotnet/roslyn/pull/19606).

**Root cause analysis:**

Planned change that wasn't complete.

**How was the bug found?**

Internal test cases, and a couple of ad-hoc testing results.
</Description>
        <CreatedDate>01/06/2017</CreatedDate>
        <ClosedDate>06/06/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>20221</PullRequestID>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpReplClassification.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpReplIdeFeatures.cs</File>
      <File>src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpReplIntellisense.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>20167</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Add HttpListenerResponse cookie and header tests</Title>
    <Description>Contributes to #13618

Fixes #20162
Fixes #20161
Fixes #20160 
Fixes #20159 </Description>
    <CreatedDate>23/05/2017</CreatedDate>
    <ClosedDate>23/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>20167</PullRequestID>
        <IssueID>13618</IssueID>
        <Title>Use appropriate telemetry key.</Title>
        <Description>
        </Description>
        <CreatedDate>06/09/2016</CreatedDate>
        <ClosedDate>06/09/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20167</PullRequestID>
        <IssueID>20162</IssueID>
        <Title>Suppress IDE0004 for switch case label when casting is required</Title>
        <Description>Fixes #19987

**Customer scenario**

Explicit casting used in `switch` case label is sometimes incorrectly given IDE0004 (Cast is redundant) in Visual Studio, and users could incorrectly follow the suggestion, which changes the behaviour of the program.
A specific scenario described at #19987  

**Bugs this fixes:**

#19987 

**Workarounds, if any**

Ignore IDE suggestion.

**Risk**


**Performance impact**

Low, as there is no complexity change. Only an additional check for switch case label. 

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

There was no unit test for this specific case before (probably rarely used scenario). Tests added in this PR branch.

**How was the bug found?**

#19987 (🔗Originally reported by [Thomas Castiglione](https://developercommunity.visualstudio.com/users/21348/873dad1a-b02f-4f5a-8da9-37ef170c009b.html))</Description>
        <CreatedDate>11/06/2017</CreatedDate>
        <ClosedDate>02/08/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20167</PullRequestID>
        <IssueID>20161</IssueID>
        <Title>Duplication in Restore command.</Title>
        <Description>**Version Used**: 

**Steps to Reproduce**:

1.  In the VS Cmd Prompt `cd ...roslyn folder path.. `
2.  Type 'restore'

**Expected Behavior**:
```
**********************************************************************
** Visual Studio 2017 Developer Command Prompt v15.0.26606.0
** Copyright (c) 2017 Microsoft Corporation
**********************************************************************

C:\Users\Adam\Source&gt;cd C:\Users\Adam\Source\Repos\roslyn-AdamSpeight2008

C:\Users\Adam\Source\Repos\roslyn-AdamSpeight2008&gt;restore
Using existing NuGet.exe at version 4.1.0
Restore using MSBuild at C:\Program Files (x86)\Microsoft Visual Studio\Preview\Enterprise\\MSBuild\15.0\bin
Restoring Base Toolset
Restoring Closed Toolset
Restoring Roslyn

```
**Actual Behavior**:
```
**********************************************************************
** Visual Studio 2017 Developer Command Prompt v15.0.26606.0
** Copyright (c) 2017 Microsoft Corporation
**********************************************************************

C:\Users\Adam\Source&gt;cd C:\Users\Adam\Source\Repos\roslyn-AdamSpeight2008

C:\Users\Adam\Source\Repos\roslyn-AdamSpeight2008&gt;restore
Using existing NuGet.exe at version 4.1.0
Using existing NuGet.exe at version 4.1.0
Restore using MSBuild at C:\Program Files (x86)\Microsoft Visual Studio\Preview\Enterprise\\MSBuild\15.0\bin
Restoring Base Toolset
Restoring Closed Toolset
Restoring Roslyn

```</Description>
        <CreatedDate>11/06/2017</CreatedDate>
        <ClosedDate>31/10/2018</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20167</PullRequestID>
        <IssueID>20160</IssueID>
        <Title>New Refactoring Request: auto-property to property with backing field</Title>
        <Description>It would be really nice if I could right-click on an auto-property and select:
Quick Actions &amp; Refactorings &gt; Convert to Standard Property

This would convert a line of code FROM:
public long TemplateId {get; set;} = 0;

TO:

private long __TemplateId = 0;
public long TemplateId {
get {
return __TemplateId;
}
set {
__TemplateId = value;
}
}

</Description>
        <CreatedDate>11/06/2017</CreatedDate>
        <ClosedDate>12/06/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20167</PullRequestID>
        <IssueID>20159</IssueID>
        <Title>Merge dev15.6 into dev16</Title>
        <Description>
        </Description>
        <CreatedDate>11/06/2017</CreatedDate>
        <ClosedDate>11/06/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>20167</PullRequestID>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/DynamicTests.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.AnalyzerExecutionContext.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.cs</File>
      <File>src/EditorFeatures/CSharpTest/AddUsing/AddUsingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/ActiveStatementTests.Methods.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/ActiveStatementTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/ActiveStatementTrackingServiceTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/Helpers/EditingTestBase.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/LineEditTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/StatementEditingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/StatementMatchingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/TopLevelEditingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/GenerateDefaultConstructors/GenerateDefaultConstructorsTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Squiggles/ErrorSquiggleProducerTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/SuggestionTags/SuggestionTagProducerTests.cs</File>
      <File>src/EditorFeatures/Core/FindUsages/AbstractFindUsagesService.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/DiagnosticsSuggestionTaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/SuggestionAdornmentManagerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/SuggestionTag.cs</File>
      <File>src/EditorFeatures/Test/Diagnostics/DiagnosticsSquiggleTaggerProviderTests.cs</File>
      <File>src/EditorFeatures/Test/Preview/PreviewWorkspaceTests.cs</File>
      <File>src/EditorFeatures/TestUtilities/CodeActions/AbstractCodeActionOrUserDiagnosticTest.cs</File>
      <File>src/EditorFeatures/TestUtilities/Diagnostics/AbstractDiagnosticProviderBasedUserDiagnosticTest.cs</File>
      <File>src/EditorFeatures/TestUtilities/Diagnostics/DiagnosticTaggerWrapper.cs</File>
      <File>src/EditorFeatures/TestUtilities/InProcRemoteHostClientFactory.cs</File>
      <File>src/EditorFeatures/TestUtilities/NavigateTo/AbstractNavigateToTests.cs</File>
      <File>src/EditorFeatures/TestUtilities/Squiggles/AbstractSquiggleProducerTests.cs</File>
      <File>src/Features/CSharp/Portable/GenerateMember/GenerateDefaultConstructors/CSharpGenerateDefaultConstructorsService.cs</File>
      <File>src/Features/Core/Portable/AddImport/AbstractAddImportCodeFixProvider.cs</File>
      <File>src/Features/Core/Portable/AddImport/AbstractAddImportFeatureService.cs</File>
      <File>src/Features/Core/Portable/AddImport/IAddImportFeatureService.cs</File>
      <File>src/Features/Core/Portable/AddImport/Remote/AbstractAddImportFeatureService_Remote.cs</File>
      <File>src/Features/Core/Portable/AddImport/Remote/IRemoteAddImportFeatureService.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticAnalyzerExecutor.cs</File>
      <File>src/Features/Core/Portable/GenerateMember/GenerateDefaultConstructors/AbstractGenerateDefaultConstructorsService.AbstractCodeAction.cs</File>
      <File>src/Features/Core/Portable/GenerateMember/GenerateDefaultConstructors/AbstractGenerateDefaultConstructorsService.CodeAction.cs</File>
      <File>src/Features/Core/Portable/GenerateMember/GenerateDefaultConstructors/AbstractGenerateDefaultConstructorsService.State.cs</File>
      <File>src/Features/Core/Portable/GenerateMember/GenerateDefaultConstructors/AbstractGenerateDefaultConstructorsService.cs</File>
      <File>src/Features/Core/Portable/NavigateTo/AbstractNavigateToSearchService.Remote.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/VisualStudioProjectTracker.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/VisualStudioWorkspaceImpl_IVsSolutionEvents.cs</File>
      <File>src/VisualStudio/Core/Next/ProjectSystem/DeferredProjectWorkspaceService.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/IntegrationHelper.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/LightBulbHelper.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/Settings.Designer.cs</File>
      <File>src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstanceFactory.cs</File>
      <File>src/Workspaces/Core/Portable/Execution/AbstractOptionsSerializationService.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/IRemoteSymbolFinder.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/SymbolFinder_FindLiteralReferences.cs</File>
      <File>src/Workspaces/Core/Portable/Remote/RemoteFeatureOptions.cs</File>
      <File>src/Workspaces/Core/Portable/SymbolKey/SymbolKey.TupleTypeSymbolKey.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Services/CodeAnalysisService_AddImport.cs</File>
      <File>src/Workspaces/Remote/ServiceHub/Services/CodeAnalysisService_SymbolFinder.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>20153</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Port to 2.0: Test change - Increasing mutex time, ensuring the mutex is released. </Title>
    <Description>Fixes #19430.
Port #20028</Description>
    <CreatedDate>23/05/2017</CreatedDate>
    <ClosedDate>24/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>20153</PullRequestID>
        <IssueID>19430</IssueID>
        <Title>Obsolete constructor doesn't produce warning when used to satisfy a constructor constraint</Title>
        <Description>**Version Used**: current

**Steps to Reproduce**:
```cs
public class C {
    [Obsolete]
    public C() {}
    public void M&lt;T&gt;() where T : new() =&gt; M&lt;C&gt;();
}
```
**Expected Behavior**: warning: C() is obsolete

**Actual Behavior**: no warnings


EDIT: As @sharwell pointed out, warnings for obsolete members are not reported when the use is itself enclosed in a construct which is marked obsolete. so the following should be compiled without any warnings.
```cs
class C&lt;T&gt; where T : new() {
  [Obsolete]
  public C() =&gt; new C&lt;C&lt;T&gt;&gt;();
}
```
</Description>
        <CreatedDate>11/05/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20153</PullRequestID>
        <IssueID>20028</IssueID>
        <Title>Copy IEditorClassificationService down to the workspaces layer.</Title>
        <Description>
        </Description>
        <CreatedDate>05/06/2017</CreatedDate>
        <ClosedDate>13/06/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>20153</PullRequestID>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/CommandLine/CSharpCommandLineParser.cs</File>
      <File>src/Compilers/CSharp/Portable/CommandLine/CSharpCompiler.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageID.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/CommandLineTests.cs</File>
      <File>src/Compilers/Core/Portable/CommandLine/CommonCommandLineArguments.cs</File>
      <File>src/Compilers/Core/Portable/CommandLine/CommonCompiler.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>20111</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Associate #19965 with existing test</Title>
    <Description>There is a PR to fix the behavior in FileStream in CoreCLR. This
test will pass as per the Windows OS block once that change is taken.
Disabling and tracking to allow taking a new drop.

#19965, https://github.com/dotnet/coreclr/pull/11757

The primary issue is #19850.</Description>
    <CreatedDate>22/05/2017</CreatedDate>
    <ClosedDate>22/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>20111</PullRequestID>
        <IssueID>19965</IssueID>
        <Title>IOperation - IOperation API for BoundMethodGroup and BoundPropertyGroup</Title>
        <Description>Would be valuable for things like INameOfExpression: https://github.com/dotnet/roslyn/issues/19954

Probably also want this for IBadInvocationExpression where the member group can specify the members that the compiler considered.</Description>
        <CreatedDate>01/06/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>20111</PullRequestID>
        <IssueID>19850</IssueID>
        <Title>Add a specific WorkspaceKind for test workspaces.</Title>
        <Description>
        </Description>
        <CreatedDate>29/05/2017</CreatedDate>
        <ClosedDate>30/05/2017</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>20111</PullRequestID>
      <File>src/Compilers/Core/Portable/CommandLine/CommonCompiler.cs</File>
      <File>src/Compilers/Server/ServerShared/Connection.cs</File>
      <File>src/Compilers/Server/VBCSCompiler/NamedPipeClientConnection.cs</File>
      <File>src/Compilers/Shared/BuildServerConnection.cs</File>
      <File>src/Interactive/Features/Interactive/Core/InteractiveHost.LazyRemoteService.cs</File>
      <File>src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs</File>
      <File>src/Tools/Source/RunTests/ProcessRunner.cs</File>
      <File>src/Tools/Source/RunTests/Program.cs</File>
      <File>src/Workspaces/Core/Desktop/Workspace/MSBuild/ProjectFile/ProjectFile.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>14628</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Port System.Security.Cryptography.Xml from netfx</Title>
    <Description>Staging port for community; compile errors exist.

Contributes to #4278 (SignedXml) and #1132 (EncryptedXml).</Description>
    <CreatedDate>19/12/2016</CreatedDate>
    <ClosedDate>20/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>14628</PullRequestID>
        <IssueID>4278</IssueID>
        <Title>Only perform semantic classification for what's actually in view.</Title>
        <Description>This helps cut down on both CPU and memory by not bothering to produce
tags for all the portions of the view that hte user does not see.

As the user scrolls up/down, or otherwise changes what is in view, we
will then classify those new regions.
</Description>
        <CreatedDate>01/08/2015</CreatedDate>
        <ClosedDate>20/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>14628</PullRequestID>
        <IssueID>1132</IssueID>
        <Title>Add support for compilation end code fix.</Title>
        <Description>now code fix should support diagnostics from compilation end action.

a few options are added to test experience which can be changed from Tools/Options/Roslyn/Diagnostic pane.
</Description>
        <CreatedDate>09/03/2015</CreatedDate>
        <ClosedDate>10/03/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>14628</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceDelegateMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenOverridingAndHiding.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/FlowAnalysis/FlowDiagnosticTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/AccessCheckTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/OverriddenOrHiddenMembersTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolErrorTests.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/DiagnosticTestUtilities.cs</File>
      <File>src/Features/Core/Portable/Completion/CompletionServiceWithProviders.cs</File>
      <File>src/Features/Core/Portable/DocumentationComments/AbstractDocumentationCommentFormattingService.cs</File>
      <File>src/VisualStudio/CSharp/Impl/ProjectSystemShim/CSharpProjectShim.cs</File>
      <File>src/VisualStudio/Core/Def/Packaging/PackageInstallerServiceFactory_UndoRedo.cs</File>
      <File>src/VisualStudio/Core/Impl/Options/AbstractRadioButtonViewModel.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>13841</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Throw null when null is passed to debug proxies.</Title>
    <Description>Fixes #13840 with the exception of two types covered in #13839 so the fix can live with appropriate tests.</Description>
    <CreatedDate>20/11/2016</CreatedDate>
    <ClosedDate>23/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>13841</PullRequestID>
        <IssueID>13840</IssueID>
        <Title>BoundMethodGroup node sometimes survives local lowering phase </Title>
        <Description>@gafter 

This can be seen in the following bugs / prs
- https://github.com/dotnet/roslyn/pull/13832
- https://github.com/dotnet/roslyn/issues/13734
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>23/02/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>13841</PullRequestID>
        <IssueID>13839</IssueID>
        <Title>Parse error in not-quite-ambiguity around "as"</Title>
        <Description>The following should parse without a problem

``` cs
        M(e as A &lt; B, C &gt; D);
```

and mean the same thing as this

``` cs
        M((e as A) &lt; B, C &gt; D);
```

but Roslyn gives a syntax error.

Here is a more complete context in which there should be no syntactic or semantic errors

``` cs
class Program
{
    const int B = 2;
    const int C = 3;
    const int D = 4;
    static void Main(string[] args)
    {
        object e = null;
        M((e as A) &lt; B, C &gt; D);
        M(e as A&lt;B, C&gt; D);
    }
    static void M(bool b, bool c)
    {
    }
}

class A
{
    public static bool operator &lt;(A a, int B) =&gt; true;
    public static bool operator &gt;(A a, int B) =&gt; false;
}
```
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>13841</PullRequestID>
      <File>src/Features/Core/Portable/Diagnostics/DiagnosticAnalyzerService_IncrementalAnalyzer.cs</File>
      <File>src/Workspaces/CSharp/Portable/CodeStyle/CSharpCodeStyleOptions.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>12470</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Port a couple of minor changes to Concat from #12343</Title>
    <Description>This does not modify the main `Concat` logic for the most part. There are only a couple of (trivial) changes in this PR ported from #12343:
- Renamed `Concatenate.cs` to `Concat.cs`-- it no longer houses Append/Prepend and the test file is named `ConcatTests.cs`
- Fix bug in `Concat2CollectionIterator.CopyTo` where we ignore arrayIndex. Luckily, this is currently dormant since for behaving collections that don't return different Counts on different invocations this will always get passed 0.
- Port the tests from #12343-- although they are not really testing any new paths any more, they still seem useful to have. (They failed on the aforementioned bug when all of the other tests passed, although that is no longer the case.)

@stephentoub 
</Description>
    <CreatedDate>07/10/2016</CreatedDate>
    <ClosedDate>09/10/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>12470</PullRequestID>
        <IssueID>12343</IssueID>
        <Title>Fix span mapping in completion commit</Title>
        <Description>
        </Description>
        <CreatedDate>05/07/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>12470</PullRequestID>
        <IssueID>12343</IssueID>
        <Title>Fix span mapping in completion commit</Title>
        <Description>
        </Description>
        <CreatedDate>05/07/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>12470</PullRequestID>
      <File>src/Compilers/CSharp/Portable/CommandLine/CSharpCommandLineParser.cs</File>
      <File>src/Compilers/CSharp/Test/CommandLine/CommandLineTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>11481</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fix WinHttpHandler to deal with nonstandard HTTP auth responses</Title>
    <Description>WinHTTP returns an error from WinHttpQueryAuthSchemes if a server sends back a response with a scheme that isn't handled by WinHTTP. Many servers use custom auth schemes. A few don't even send a `WWW-Authenticate` header in the response at all (technically against RFC7235). To handle these cases and to match Desktop behavior, we ignore the error from WinHttpQueryAuthSchemes.

Fixes #11452 and #11456.
</Description>
    <CreatedDate>06/09/2016</CreatedDate>
    <ClosedDate>07/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>11481</PullRequestID>
        <IssueID>11452</IssueID>
        <Title>CI failing due to failure to publish HTML (looking in wrong dir)</Title>
        <Description>http://dotnet-ci.cloudapp.net/job/Private/job/dotnet_roslyn-internal/job/master/job/windows_debug_eta_prtest/1/console

```
03:35:52 ERROR: Specified HTML directory 'd:\j\workspace\windows_debug---34d39bc5\Open\Binaries\Release\ETAIntegrationTestLogs' does not exist.
03:35:52 Build step 'Publish HTML reports' changed build result to FAILURE
```

@jaredpar, might this have anything to do with recent Jenkins change?
</Description>
        <CreatedDate>20/05/2016</CreatedDate>
        <ClosedDate>20/05/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11481</PullRequestID>
        <IssueID>11456</IssueID>
        <Title>Crash after starting WebDeploy</Title>
        <Description>**Version Used**: VS2015.2

**Steps to Reproduce** (not reproduceable):
1. Develop a web application in Debug|AnyCPU, finish a feature, test it, git commit
2. Open Web Deploy for test system; Release|AnyCPU
3. Klick deploy button
4. Visual Studio shows "Build started..."
5. Visual Studio stopped working (right before the automatic opening of the output window to show build progress)

**Expected Behavior**:
Visual Studio should never crash

**Actual Behavior**:
This time it did

```
Message: System.ArrayTypeMismatchException: Attempted to access an element as a type incompatible with the array.
   at System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(TKey key, TValue&amp; value)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NonMissingAssemblySymbol.LookupTopLevelMetadataTypeInCache(MetadataTypeName&amp; emittedName)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NonMissingAssemblySymbol.LookupTopLevelMetadataTypeWithCycleDetection(MetadataTypeName&amp; emittedName, ConsList`1 visitedAssemblies, Boolean digThroughForwardedTypes)
   at Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol.GetTopLevelTypeByMetadataName(AssemblySymbol assembly, MetadataTypeName&amp; metadataName, AssemblyIdentity assemblyOpt)
   at Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol.GetTopLevelTypeByMetadataName(MetadataTypeName&amp; metadataName, AssemblyIdentity assemblyOpt, Boolean includeReferences, Boolean isWellKnownType, DiagnosticBag warnings)
   at Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol.GetTypeByMetadataName(String metadataName, Boolean includeReferences, Boolean isWellKnownType, Boolean useCLSCompliantNameArityEncoding, DiagnosticBag warnings)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetWellKnownType(WellKnownType type)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.IsEqualOrDerivedFromWellKnownClass(TypeSymbol type, WellKnownType wellKnownType, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckAttributeTypeViability(Symbol symbol, Boolean diagnose, DiagnosticInfo&amp; diagInfo)
   at Microsoft.CodeAnalysis.CSharp.Binder.IsSingleViableAttributeType(LookupResult result, Symbol&amp; symbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.LookupAttributeType(LookupResult result, NamespaceOrTypeSymbol qualifierOpt, String name, Int32 arity, ConsList`1 basesBeingResolved, LookupOptions options, Boolean diagnose, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node, DiagnosticBag diagnostics, ConsList`1 basesBeingResolved, Boolean suppressUseSiteDiagnostics, NamespaceOrTypeSymbol qualifierOpt, Boolean isNameofArgument, ArrayBuilder`1 symbols)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindSimpleNamespaceOrTypeOrAliasSymbol(SimpleNameSyntax syntax, DiagnosticBag diagnostics, ConsList`1 basesBeingResolved, Boolean suppressUseSiteDiagnostics, NamespaceOrTypeSymbol qualifierOpt)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindQualifiedName(ExpressionSyntax leftName, SimpleNameSyntax rightName, DiagnosticBag diagnostics, ConsList`1 basesBeingResolved, Boolean suppressUseSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax, DiagnosticBag diagnostics, ConsList`1 basesBeingResolved, Boolean suppressUseSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindTypeOrAlias(ExpressionSyntax syntax, DiagnosticBag diagnostics, ConsList`1 basesBeingResolved)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindType(ExpressionSyntax syntax, DiagnosticBag diagnostics, ConsList`1 basesBeingResolved)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindAttributeTypes(ImmutableArray`1 binders, ImmutableArray`1 attributesToBind, Symbol ownerSymbol, NamedTypeSymbol[] boundAttributeTypes, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbol.LoadAndValidateAttributes(OneOrMany`1 attributesSyntaxLists, CustomAttributesBag`1&amp; lazyCustomAttributesBag, AttributeLocation symbolPart, Boolean earlyDecodingOnly)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.EnsureAttributesAreBound()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.GetSourceDecodedWellKnownAttributeData()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.get_AssemblyVersionAttributeSetting()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ComputeIdentity()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.get_Identity()
   at Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolveMetadataReferences(TCompilation compilation, Dictionary`2 assemblyReferencesBySimpleName, ImmutableArray`1&amp; references, IDictionary`2&amp; boundReferenceDirectiveMap, ImmutableArray`1&amp; boundReferenceDirectives, ImmutableArray`1&amp; assemblies, ImmutableArray`1&amp; modules, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateSourceAssemblyForCompilation(CSharpCompilation compilation)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetAssemblyOrModuleSymbol(MetadataReference reference)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetAssemblyOrModuleSymbol(MetadataReference reference)
   at Microsoft.CodeAnalysis.Solution.CompilationTracker.HasMissingReferences(Compilation compilation, IReadOnlyList`1 metadataReferences)
   at Microsoft.CodeAnalysis.Solution.CompilationTracker.&lt;FinalizeCompilationAsync&gt;d__29.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker+&lt;FinalizeCompilationAsync&gt;d__29.MoveNext()
   at System.Collections.Concurrent.ConcurrentDictionary`2[[Microsoft.CodeAnalysis.MetadataTypeName+Key, Microsoft.CodeAnalysis, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TryGetValue(Key, System.__Canon ByRef)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NonMissingAssemblySymbol.LookupTopLevelMetadataTypeInCache(Microsoft.CodeAnalysis.MetadataTypeName ByRef)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NonMissingAssemblySymbol.LookupTopLevelMetadataTypeWithCycleDetection(Microsoft.CodeAnalysis.MetadataTypeName ByRef, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol&gt;, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol.GetTopLevelTypeByMetadataName(Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol, Microsoft.CodeAnalysis.MetadataTypeName ByRef, Microsoft.CodeAnalysis.AssemblyIdentity)
   at Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol.GetTopLevelTypeByMetadataName(Microsoft.CodeAnalysis.MetadataTypeName ByRef, Microsoft.CodeAnalysis.AssemblyIdentity, Boolean, Boolean, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol.GetTypeByMetadataName(System.String, Boolean, Boolean, Boolean, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetWellKnownType(Microsoft.CodeAnalysis.WellKnownType)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.IsEqualOrDerivedFromWellKnownClass(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.WellKnownType, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckAttributeTypeViability(Microsoft.CodeAnalysis.CSharp.Symbol, Boolean, Microsoft.CodeAnalysis.DiagnosticInfo ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.IsSingleViableAttributeType(Microsoft.CodeAnalysis.CSharp.LookupResult, Microsoft.CodeAnalysis.CSharp.Symbol ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.LookupAttributeType(Microsoft.CodeAnalysis.CSharp.LookupResult, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol, System.String, Int32, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;, Microsoft.CodeAnalysis.CSharp.LookupOptions, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;, Boolean, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol, Boolean, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindSimpleNamespaceOrTypeOrAliasSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;, Boolean, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindNamespaceOrTypeOrAliasSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindTypeOrAlias(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindType(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Roslyn.Utilities.ConsList`1&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt;)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindAttributeTypes(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Binder&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt;, Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol[], Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Symbol.LoadAndValidateAttributes(Roslyn.Utilities.OneOrMany`1&lt;Microsoft.CodeAnalysis.SyntaxList`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;&gt;, Microsoft.CodeAnalysis.CustomAttributesBag`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.CSharpAttributeData&gt; ByRef, Microsoft.CodeAnalysis.CSharp.Symbols.AttributeLocation, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.EnsureAttributesAreBound()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.GetSourceDecodedWellKnownAttributeData()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.get_AssemblyVersionAttributeSetting()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ComputeIdentity()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.get_Identity()
   at Microsoft.CodeAnalysis.CommonReferenceManager`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ResolveMetadataReferences(System.__Canon, System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;ReferencedAssemblyIdentity&lt;System.__Canon,System.__Canon&gt;&gt;&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.MetadataReference&gt; ByRef, System.Collections.Generic.IDictionary`2&lt;Roslyn.Utilities.ValueTuple`2&lt;System.String,System.String&gt;,Microsoft.CodeAnalysis.MetadataReference&gt; ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.MetadataReference&gt; ByRef, System.Collections.Immutable.ImmutableArray`1&lt;AssemblyData&lt;System.__Canon,System.__Canon&gt;&gt; ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.PEModule&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation+ReferenceManager.CreateAndSetSourceAssemblyFullBind(Microsoft.CodeAnalysis.CSharp.CSharpCompilation)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation+ReferenceManager.CreateSourceAssemblyForCompilation(Microsoft.CodeAnalysis.CSharp.CSharpCompilation)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker.HasMissingReferences(Microsoft.CodeAnalysis.Compilation, System.Collections.Generic.IReadOnlyList`1&lt;Microsoft.CodeAnalysis.MetadataReference&gt;)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker+&lt;FinalizeCompilationAsync&gt;d__29.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Solution+CompilationTracker+CompilationInfo, Microsoft.CodeAnalysis.Workspaces, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Start[[Microsoft.CodeAnalysis.Solution+CompilationTracker+&lt;FinalizeCompilationAsync&gt;d__29, Microsoft.CodeAnalysis.Workspaces, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;FinalizeCompilationAsync&gt;d__29 ByRef)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker.FinalizeCompilationAsync(Microsoft.CodeAnalysis.Solution, Microsoft.CodeAnalysis.Compilation, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker.BuildCompilationInfoAsync(Microsoft.CodeAnalysis.Solution, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker+&lt;GetOrBuildCompilationInfoAsync&gt;d__21.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Solution+CompilationTracker+CompilationInfo, Microsoft.CodeAnalysis.Workspaces, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Start[[Microsoft.CodeAnalysis.Solution+CompilationTracker+&lt;GetOrBuildCompilationInfoAsync&gt;d__21, Microsoft.CodeAnalysis.Workspaces, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetOrBuildCompilationInfoAsync&gt;d__21 ByRef)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker.GetOrBuildCompilationInfoAsync(Microsoft.CodeAnalysis.Solution, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Solution+CompilationTracker.GetCompilationAsync(Microsoft.CodeAnalysis.Solution, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Solution.GetCompilationAsync(Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Host.BackgroundCompiler+&lt;&gt;c__DisplayClass14_0.&lt;BuildCompilationsAsync&gt;b__2(Microsoft.CodeAnalysis.Project)
   at System.Linq.Enumerable+WhereSelectEnumerableIterator`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Linq.Buffer`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]..ctor(System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;)
   at System.Linq.Enumerable.ToArray[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Host.BackgroundCompiler.BuildCompilationsAsync(Microsoft.CodeAnalysis.Solution, Microsoft.CodeAnalysis.ProjectId, System.Collections.Generic.ISet`1&lt;Microsoft.CodeAnalysis.ProjectId&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Host.BackgroundCompiler+&lt;&gt;c__DisplayClass13_0.&lt;BuildCompilationsAsync&gt;b__0()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```
</Description>
        <CreatedDate>20/05/2016</CreatedDate>
        <ClosedDate>29/12/2016</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>11481</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/ForEachLoopBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/AccessCheck.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/Operators/BinaryOperatorAnalysisResult.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MemberAnalysisResult.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MemberResolutionResult.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorFacts.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageProvider.cs</File>
      <File>src/Compilers/CSharp/Portable/GlobalSuppressions.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceAssemblySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/InternalsVisibleToAndStrongNameTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/DynamicTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ForEachTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/CompilationAPITests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/BaseClassTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Diagnostics/DiagnosticTest.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/Diagnostics/CompilationWithAnalyzersTests.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/CompilationOptions.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/CommonMessageProvider.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs</File>
      <File>src/Compilers/Core/Portable/GlobalSuppressions.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/SequencePoint.cs</File>
      <File>src/Compilers/Core/Portable/StrongName/DesktopStrongNameProvider.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.Enumerator.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxList`1.Enumerator.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTokenList.Enumerator.cs</File>
      <File>src/Compilers/Core/Portable/Syntax/SyntaxTokenList.Reversed.cs</File>
      <File>src/Compilers/Core/Portable/Text/TextLineCollection.cs</File>
      <File>src/Compilers/Shared/DesktopBuildClient.cs</File>
      <File>src/EditorFeatures/CSharpTest/Formatting/Indentation/SmartTokenFormatterFormatRangeTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/EditAndContinue/EditAndContinueDiagnosticUpdateSource.cs</File>
      <File>src/EditorFeatures/Core/Implementation/EditorLayerExtensionManager.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Workspaces/EditorErrorReportingService.cs</File>
      <File>src/EditorFeatures/Test/Workspaces/NoCompilationDocumentDiagnosticAnalyzer.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/Analyzers/IDocumentDiagnosticAnalyzer.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/Analyzers/RudeEditUserDiagnosticAnalyzer.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV1/DiagnosticAnalyzerDriver.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.StateManager.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.Executor.cs</File>
      <File>src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateManager.cs</File>
      <File>src/Features/Core/Portable/EditAndContinue/EditSession.cs</File>
      <File>src/Features/Core/Portable/Shared/Options/RuntimeOptions.cs</File>
      <File>src/Features/Core/Portable/Shared/Options/RuntimeOptionsProvider.cs</File>
      <File>src/Features/Core/Portable/SolutionCrawler/WorkCoordinator.cs</File>
      <File>src/InteractiveWindow/Editor/IInteractiveWindow2.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindow.UIThreadOnly.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindow.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindowResources.Designer.cs</File>
      <File>src/InteractiveWindow/EditorTest/InteractiveWindowTests.cs</File>
      <File>src/Scripting/CSharpTest.Desktop/InteractiveSessionTests.cs</File>
      <File>src/Scripting/CSharpTest/InteractiveSessionTests.cs</File>
      <File>src/Scripting/CSharpTest/ScriptTests.cs</File>
      <File>src/Test/Perf/util/ILogger.cs</File>
      <File>src/Test/Perf/util/ITraceManager.cs</File>
      <File>src/Test/Perf/util/Logger.cs</File>
      <File>src/Test/Perf/util/NoOpTraceManager.cs</File>
      <File>src/Test/Perf/util/PerfTestBase.cs</File>
      <File>src/Test/Perf/util/RelativeDirectory.cs</File>
      <File>src/Test/Perf/util/ScenarioGenerator.cs</File>
      <File>src/Test/Perf/util/TestUtilities.cs</File>
      <File>src/Test/Perf/util/Tools.cs</File>
      <File>src/Test/Perf/util/TraceManager.cs</File>
      <File>src/Test/Perf/util/TraceManagerFactory.cs</File>
      <File>src/Test/Utilities/Desktop/ConditionalFactAttribute.cs</File>
      <File>src/Test/Utilities/Desktop/ThrowingTraceListener.cs</File>
      <File>src/Test/Utilities/Portable/ConditionalFactAttribute.cs</File>
      <File>src/Test/Utilities/Shared/Mocks/TestMessageProvider.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/EditAndContinue/VsENCRebuildableProjectImpl.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/VisualStudioDiagnosticListTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/VirtualMemoryNotificationListener.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Workspace/VisualStudioErrorReportingService.cs</File>
      <File>src/VisualStudio/Core/Def/ServicesVSResources.Designer.cs</File>
      <File>src/VisualStudio/Core/Impl/Options/AbstractOptionPageControl.cs</File>
      <File>src/Workspaces/CSharp/Portable/Extensions/ContextQuery/SyntaxTokenExtensions.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/FormattingHelpers.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/Rules/IndentBlockFormattingRule.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/Rules/NewLineUserSettingFormattingRule.cs</File>
      <File>src/Workspaces/CSharp/Portable/Utilities/FormattingRangeHelper.cs</File>
      <File>src/Workspaces/Core/Portable/ExtensionManager/IErrorReportingService.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/TaskExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/TaskFactoryExtensions.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>11219</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fix some of the failing tests on full framework net46 helix runs.</Title>
    <Description>On desktop, the implementation assembly from GAC is loaded to memory, and
the tests specific to corefx implementation fail on Desktop run. Or in some cases, the tests were not compiled against the supported netstandard contracts for net46.

cc @danmosemsft @weshaggard @karajas 

fixes #10836 #10837 #10839 #10831 #10782 #10774 #10876 
</Description>
    <CreatedDate>29/08/2016</CreatedDate>
    <ClosedDate>31/08/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>11219</PullRequestID>
        <IssueID>10836</IssueID>
        <Title>Proposal: warning flag for implicit numeric widening</Title>
        <Description>I propose a compiler flag that issues a warning on implicit numeric widening.

ML-derived languages understand that these implicit conversions are error-prone and make reasoning harder, therefore there is no implicit numeric widening in OCaml, F# or Haskell, and Scala added a compiler flag `-Ywarn-numeric-widen` to issue a warning when it does this (and with warnings-as-errors one can turn this into an error). I propose that C# and VB.NET implement a similar flag.
</Description>
        <CreatedDate>25/04/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11219</PullRequestID>
        <IssueID>10837</IssueID>
        <Title>Xamarin Not compatible with NetStandard</Title>
        <Description>**Version Used**: 

**Steps to Reproduce**:

Create a new Class Library (Xamarin.Forms) 
By default it will support following TFM 

![x1](https://cloud.githubusercontent.com/assets/12449387/14792333/9c51d350-0ace-11e6-93e9-1bbc5846374f.JPG)

Now create a new portable class library (PCL) , pick the same TFM's to match the above class library

![b](https://cloud.githubusercontent.com/assets/12449387/14792424/f7b6a608-0ace-11e6-8429-ea478c9a10ab.JPG)

Reference PCL from Xamarin Class Library , every thing works.
Now remove the reference and change the PCL to target .NetStandard (.NetStandard1.1) 
Again reference the PCL from xamarin Class Library this time it throws compatibility issue.

![c](https://cloud.githubusercontent.com/assets/12449387/14792661/24f2f184-0ad0-11e6-9588-954556bb25b2.JPG)

**Expected Behavior**:

Xamarin Class Library should be able to reference PCL with .NetStandard

**Actual Behavior**:

Incompatibility Issue 
</Description>
        <CreatedDate>25/04/2016</CreatedDate>
        <ClosedDate>26/05/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11219</PullRequestID>
        <IssueID>10839</IssueID>
        <Title>VB nameof called with an byref param inside of a lambda fails.</Title>
        <Description>This is a sister-issue to #10467 which had the C# side fixed by https://github.com/dotnet/roslyn/pull/10776

Tracked separately because the VB fix is different.
### Repro as a test case

``` vb
        Public Sub NameOfLambda()
            Dim compilationDef =
                &lt;compilation&gt;
                    &lt;file name="a.vb"&gt;
Module Program
    Sub DoSomething(ByRef x As Integer)
        Dim f = Function()
                    Return NameOf(x)
                End Function
        System.Console.WriteLine(f())
    End Sub
    Sub Main()
        Dim x =  5
        DoSomething(x)
    End Sub
End Module
                &lt;/file&gt;
                &lt;/compilation&gt;
            Dim comp = CreateCompilationWithMscorlibAndVBRuntime(compilationDef, TestOptions.DebugExe)
            CompileAndVerify(comp, expectedOutput:="x").VerifyDiagnostics()
        End Sub
```
</Description>
        <CreatedDate>25/04/2016</CreatedDate>
        <ClosedDate>03/02/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11219</PullRequestID>
        <IssueID>10831</IssueID>
        <Title>Remove references inherited via NuGet</Title>
        <Description>These were causing warnings in the error list, as the NuGet build task removes them.
</Description>
        <CreatedDate>25/04/2016</CreatedDate>
        <ClosedDate>25/04/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11219</PullRequestID>
        <IssueID>10782</IssueID>
        <Title>Enable Edit.GoToBrace (Ctrl+]) for #region/#endregion pairs</Title>
        <Description>I was pleasantly surprised that Ctrl+Shift+Up/Down works for #region/#endregion pairs. Ctrl+] didn't work though. I'm imagining plumbing the command through should be easy now that Highlight References already works.

Would be nice for completeness/intuitiveness.
</Description>
        <CreatedDate>22/04/2016</CreatedDate>
        <ClosedDate>22/04/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11219</PullRequestID>
        <IssueID>10774</IssueID>
        <Title>Internal unit test jobs are not publishing artifacts</Title>
        <Description>The internal unit32/unit64 are not publishing artifacts - making it very hard to figure out what's going wrong.

Looks like we've turned on the "Archive artifacts only if build is successful" check.
</Description>
        <CreatedDate>21/04/2016</CreatedDate>
        <ClosedDate>21/04/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11219</PullRequestID>
        <IssueID>10876</IssueID>
        <Title>Also up the ulimit on Linux during restore (#10768)</Title>
        <Description>Port from master
</Description>
        <CreatedDate>26/04/2016</CreatedDate>
        <ClosedDate>26/04/2016</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>11219</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Expressions.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/DynamicTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>11136</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Improving ConstantCheck with support for Default</Title>
    <Description>This addresses issue #11096 by adding a case for `ExpressionType.Default` to `ConstantCheck.IsNull`. Also adding some tests to cover these cases.

Note that this branch builds on top of the PR for #11097; if we decide to take these changes, we could do that one first.
</Description>
    <CreatedDate>25/08/2016</CreatedDate>
    <ClosedDate>06/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>11136</PullRequestID>
        <IssueID>11096</IssueID>
        <Title>Windows Phone Silverlight projects does't work in MsBuildWorkspace</Title>
        <Description>**Version Used**: 1.2.1 - 2.0.0-beta1 03/31/2016

**Steps to Reproduce**: 
1. Use VS2013 or VS2015
2. create new c# project 'Windows Phone Silverlight' 8.0 or 8.1 - app or library
3. try to open and compile the created solution or project within a MsBuildWorkspace

**Expected Behavior**:
getting a compilation with CS8019 (usings) only diagnostics

**Actual Behavior**:
CS0518 (predefined type not defined) and much more diagnostics
</Description>
        <CreatedDate>05/05/2016</CreatedDate>
        <ClosedDate>27/05/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11136</PullRequestID>
        <IssueID>11097</IssueID>
        <Title>provide generic text analyzers that can analyze any text file involved in running app</Title>
        <Description>current analyzer design is code centric. 

we support this scenario but not the other way around.
- analyzer check additional file, and tell users "you need to change code A to B since you have C in the additional file"

but not support scenarios such as 
- analyzer check additional file, and tell users "you need to change string in additional file A to B since you have C in the code"

or
- analyzer check just additional file, and tell users "you need to change string in additional file A to B since it has C problem"

but we are getting customer feedback saying running app in reality involves more than code such as config files, resource files, designer files and etc. and they want to report issues on all these places not just on code.

we might need to think about adding general text analyzers at least in IDE layer (since it will definitely have all context, information needed).

**Proposed features:**
1. [Analysis] Passing down all the non-source files in the msbuild project file as additional files down to the compiler, not just the ones specifically tagged as additional file: This enables additional file analyzers on all projects without end user needing to explicitly change his project file to get this feature.
2. [Analysis] First class analysis support for additional files: XXXAnalysisContext.RegisterAdditionalFileAction(), which could be implemented similar to syntax tree actions in both CompilationWithAnalyzers and IDE layer.
3. [Code fixes] Support light bulb and code fixes for diagnostics in additional file. This should automatically add support for suppression and fix all occurrences.
4. [IDE presentation] Support squiggles and error list navigation on double click for additional file diagnostics.
</Description>
        <CreatedDate>05/05/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>11136</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Conversions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/AccessCheck.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/PEModuleBuilder.cs</File>
      <File>src/Compilers/CSharp/Portable/SymbolDisplay/SymbolDisplayVisitor.Types.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AbstractTypeMap.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/EventSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/PropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ReducedExtensionMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingEventSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingPropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingTypeParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedEventSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedPropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedTypeParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TupleEventSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TupleFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TupleMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TupleParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TuplePropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Tuples/TupleTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/TypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedEventSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedPropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Wrapped/WrappedTypeParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTupleTest.cs</File>
      <File>src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>11091</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Probe for sufficient stack during expression tree compilation recursion</Title>
    <Description>When compiling deep expression trees, we run into `StackOverflowException` which terminates the process. There are four recursive algorithms used for compilation/interpretation:
- Stack spilling, a custom visitor with recursive method `RewriteExpression`
- Variable binding, a classic expression visitor with recursive method `Visit`
- Lambda compiler,  a custom tree traversal with recursive method `EmitExpression`
- Light compiler, a custom tree traversal with recursive methods `CompileExpression[AsVoid]`

A repro is compiling a deep expression tree, such as a binary expression:

``` csharp
var e = (Expression)Expression.Constant(0);  

var n = 10000;  

for (var i = 0; i &lt; n; i++)  
    e = Expression.Add(e, Expression.Constant(1));  

var f = Expression.Lambda&lt;Func&lt;int&gt;&gt;(e).Compile(useInterpreter);
```

This fails regardless of the `useInterpreter` flag. There are three possible approaches:
- Don't do anything; these trees could be considered rare enough to warrant a change. However, it seems EF has run into this (see #7953 for more info) and the outcome is process termination triggered by a carefully crafted web request (DoS attack potential). It'd still be interesting to see whether the generated EF tree can be flattened.
- Trade the `StackOverflowException` for another exception type that can be caught by users, so it doesn't terminate the process. This is similar to what WPF does in e.g. `Control.FindControl` by using `RuntimeHelpers.EnsureSufficientExecutionStack`, or what Roslyn does when it raises compilation error `ERR_InsufficientStack`.
- Use the mechanism used to detect an upcoming stack overflow (e.g. by counting levels of recursion or by using `RuntimeHelpers.EnsureSufficientExecutionStack`) and mitigate the issue by borrowing the stack of another thread. This is similar to `TrySetFromResult` in https://github.com/dotnet/corefx/blob/d0dc5fc099946adc1035b34a8b1f6042eddb0c75/src/System.Threading.Tasks/src/System/Threading/Tasks/TaskExtensions.CoreCLR.cs

This PR uses the latter approach and hardens the four places where unbounded recursion can lead to stack overflow conditions by using `RuntimeHelpers.EnsureSufficientExecutionStack` and jumping to another thread to continue the computation when this condition is met. Ideally, we'd see the `TryEnsureSufficientExecutionStack` method become public so we can do away with the exception handling logic (see #11090).
</Description>
    <CreatedDate>24/08/2016</CreatedDate>
    <ClosedDate>07/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>11091</PullRequestID>
        <IssueID>7953</IssueID>
        <Title>Would it be possible to support finding extension methods at runtime?</Title>
        <Description>here is my scenario:

``` csharp
dynamic myTable = db.Send(RelationshipName);
var myInclude = myTable.Include(i =&gt; ((object)i).Send(relationship));
```

`myTable.Include` throws a compile-time error, due to dynamics currently not being able to find extension methods.

Since dynamic stuff is all run-time anyway, couldn't the extension method just be looked up at runtime?
or, why can't it?

Could there be an implementation that would allow finding extensions methods at runtime?

Originally / Incorrectly posted here: https://github.com/aspnet/dnx/issues/3310
</Description>
        <CreatedDate>14/01/2016</CreatedDate>
        <ClosedDate>24/03/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>11091</PullRequestID>
        <IssueID>11090</IssueID>
        <Title>[Test failure] AddImportTests+NuGet.TestSimpleWhereClause is flaky</Title>
        <Description>See http://dotnet-ci.cloudapp.net/job/roslyn-internal_prtest_win_dbg_unit32/1365/testReport/junit/Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.CodeActions.AddImport/AddImportTests+NuGet/TestSimpleWhereClause/

```
Regression

Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.CodeActions.AddImport.AddImportTests+NuGet.TestSimpleWhereClause (from Roslyn.Services.Editor.VisualBasic.UnitTests) 

Failing for the past 1 build (Since Failed#1365 ) 

Took 63 ms.



add description

Stacktrace
MESSAGE:
Assert.NotNull() Failure
+++++++++++++++++++
STACK TRACE:
at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;VerifyInputsAndGetOperationsAsync&gt;d__21.MoveNext() in d:\j\workspace\roslyn-intern---4cf810ea\Open\src\EditorFeatures\Test\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 316 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestActionsAsync&gt;d__16.MoveNext() in d:\j\workspace\roslyn-intern---4cf810ea\Open\src\EditorFeatures\Test\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 222 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestAsync&gt;d__15.MoveNext() in d:\j\workspace\roslyn-intern---4cf810ea\Open\src\EditorFeatures\Test\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 208 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestAsync&gt;d__13.MoveNext() in d:\j\workspace\roslyn-intern---4cf810ea\Open\src\EditorFeatures\Test\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 171 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.CodeActions.AddImport.AddImportTests.VB$StateMachine_39_TestSimpleWhereClause.MoveNext() in d:\j\workspace\roslyn-intern---4cf810ea\Open\src\EditorFeatures\VisualBasicTest\Diagnostics\AddImport\AddImportTests.vb:line 308 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

```
</Description>
        <CreatedDate>05/05/2016</CreatedDate>
        <ClosedDate>01/06/2016</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>11091</PullRequestID>
      <File>src/EditorFeatures/CSharp/CSharpEditorResources.Designer.cs</File>
      <File>src/EditorFeatures/CSharpTest/SignatureHelp/AttributeSignatureHelpProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/SignatureHelp/ConstructorInitializerSignatureHelpProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/SignatureHelp/ElementAccessExpressionSignatureHelpProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/SignatureHelp/GenericNamePartiallyWrittenSignatureHelpProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/SignatureHelp/GenericNameSignatureHelpProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/SignatureHelp/InvocationExpressionSignatureHelpProviderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/SignatureHelp/ObjectCreationExpressionSignatureHelpProviderTests.cs</File>
      <File>src/EditorFeatures/Core/CommandHandlers/SignatureHelpCommandHandler.cs</File>
      <File>src/EditorFeatures/Core/EditorFeaturesResources.Designer.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/SignatureHelp/ISignatureHelpPresenterSession.cs</File>
      <File>src/EditorFeatures/Core/Extensibility/SignatureHelp/SignatureHelpItemEventArgs.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Controller.Session_ComputeModel.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Controller.Session_SetModelSelectedItem.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Controller.Session_UpdateModel.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Controller.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Controller_InvokeSignatureHelp.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Controller_TypeChar.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Model.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Presentation/Parameter.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Presentation/Signature.cs</File>
      <File>src/EditorFeatures/Core/Implementation/IntelliSense/SignatureHelp/Presentation/SignatureHelpPresenter.SignatureHelpPresenterSession.cs</File>
      <File>src/EditorFeatures/Test/SignatureHelp/AbstractSignatureHelpProviderTests.cs</File>
      <File>src/Features/CSharp/Portable/CSharpFeaturesResources.Designer.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/AbstractCSharpSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/AttributeSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/ConstructorInitializerSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/ElementAccessExpressionSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/GenericNamePartiallyWrittenSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/GenericNameSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/GenericNameSignatureHelpProvider_Method.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/GenericNameSignatureHelpProvider_NamedType.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/InvocationExpressionSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/InvocationExpressionSignatureHelpProvider_DelegateInvoke.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/InvocationExpressionSignatureHelpProvider_MethodGroup.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/ObjectCreationExpressionSignatureHelpProvider.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/ObjectCreationExpressionSignatureHelpProvider_DelegateType.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/ObjectCreationExpressionSignatureHelpProvider_NormalType.cs</File>
      <File>src/Features/CSharp/Portable/SignatureHelp/SignatureHelpUtilities.cs</File>
      <File>src/Features/Core/Portable/FeaturesResources.Designer.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/AbstractSignatureHelpProvider.SymbolKeySignatureHelpItem.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/AbstractSignatureHelpProvider.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/CommonSignatureHelpUtilities.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/ExportSignatureHelpProviderAttribute.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/ISignatureHelpProvider.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/SignatureHelpItem.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/SignatureHelpItems.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/SignatureHelpParameter.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/SignatureHelpState.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/SignatureHelpTriggerInfo.cs</File>
      <File>src/Features/Core/Portable/SignatureHelp/SignatureHelpTriggerReason.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>9137</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fixing Socket async connect for connection-less protocols; Fixing and enabling Socket perf tests.</Title>
    <Description>Simulating an asynchronous Connect (APM/TPL) for connection-less protocols. 
Moving SocketPerformance to Outerloop and enabling the tests without an execution time expectation.

Fixes #4968, #3635
</Description>
    <CreatedDate>04/06/2016</CreatedDate>
    <ClosedDate>07/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>9137</PullRequestID>
        <IssueID>4968</IssueID>
        <Title>Proposal: Allow single-line namespace directives</Title>
        <Description>Problem: namespace scoping braces almost always apply to the whole file yet increase indentation unnecessarily, making the code harder to read than necessary.

Solution: allow source-level single-line namespace declarations. Instead of

```
using System;
namespace Acme.Tools
{
    public class VeryUseful
    {
         public int FirstMethod()
         {
             // first line of code starts 12-spaces in
         }
    }
}
```

Change namespace directive to:

```
using System;
namespace Acme.Tools; // applies to the whole source file - can't be repeated in the source or mixed with scoped namespace directive

public class VeryUseful
{
     public int FirstMethod()
     {
         // first line of code starts 8-spaces in --- better readability
     }
}
```

Old behavior will still be supported and new editors/IDEs/authors will take advantage of this. This is not a solution by itself but it certainly helps.
</Description>
        <CreatedDate>03/09/2015</CreatedDate>
        <ClosedDate>03/09/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>9137</PullRequestID>
        <IssueID>3635</IssueID>
        <Title>Fix DeclarePublicAPIAnalyzer</Title>
        <Description>The analyzer can report three different diagnostics, but currently only
returns two from the `SupportedDiagnostics` property.

This is the first step in addressing #3626. The second step is moving to a new build of the Roslyn diagnostics once it has been checked in.
</Description>
        <CreatedDate>22/06/2015</CreatedDate>
        <ClosedDate>23/06/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>9137</PullRequestID>
      <File>src/Compilers/CSharp/Test/Semantic/Diagnostics/DiagnosticAnalyzerTests.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticStartAnalysisScope.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>8996</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fix some memory leaks in WinHttpRequestState</Title>
    <Description>When HTTP requests are canceled, we are leaking WinHttpRequestState objects and some child objects. Since WInHttpRequestState is strongly pinned, it's important to release things as soon as possible.

This fix addresses part of the leaks involved in #8819 by removing references to some fields in the state object related to the request/response phase (CancellationToken).  In addition, this fix addresses some cases where the state object is created and pinned but the request is canceled before we hook up the state object to the WInHTTP status callback. Because of not being hooked up yet, the state object won't get HANDLE_CLOSING notifications and remains pinned forever.

We now pin the state object later when we're sure that we've hooked up the status callback.

I also added some DEBUG tracking to help diagnose the rest of the leaks of #8819.
</Description>
    <CreatedDate>31/05/2016</CreatedDate>
    <ClosedDate>01/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>8996</PullRequestID>
        <IssueID>8819</IssueID>
        <Title>Implement integral pattern matching by runtime integral conversions</Title>
        <Description>A runtime value of type short whose value is 3 should match the pattern `3`.

We should develop a clear specification for what kinds of conversions are performed for integral value matching, and implement that. It will probably require the compiler to generate some tiny helper methods into the assembly.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>16/04/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>8996</PullRequestID>
        <IssueID>8819</IssueID>
        <Title>Implement integral pattern matching by runtime integral conversions</Title>
        <Description>A runtime value of type short whose value is 3 should match the pattern `3`.

We should develop a clear specification for what kinds of conversions are performed for integral value matching, and implement that. It will probably require the compiler to generate some tiny helper methods into the assembly.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>16/04/2016</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>8996</PullRequestID>
      <File>src/EditorFeatures/Core/Implementation/Diagnostics/AbstractDiagnosticsTaggerProvider.TaggerProvider.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Preview/PreviewFactoryService.cs</File>
      <File>src/EditorFeatures/Core/Shared/Preview/PredefinedPreviewTaggerKeys.cs</File>
      <File>src/Workspaces/Core/Portable/CodeActions/Annotations/SuppressDiagnosticsAnnotation.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>8252</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Update dotnet cli version.</Title>
    <Description>cc @dagood @ericstj 

Following the discussion in the issue, the changes made gave a successful build.

Fixes #8185 #7294 
</Description>
    <CreatedDate>03/05/2016</CreatedDate>
    <ClosedDate>04/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>8252</PullRequestID>
        <IssueID>8185</IssueID>
        <Title>explicitly list analyzer exceptions when they fail a test</Title>
        <Description>While investigating flaky tests I found that whoever wrote this helper method &lt;sub&gt;it was me&lt;/sub&gt; didn't think it prudent to actually list the analyzer diagnostics that failed the test.  This fixes that so that flaky test investigation is hopefully easier.

@dotnet/roslyn-ide @dotnet/roslyn-infrastructure
</Description>
        <CreatedDate>26/01/2016</CreatedDate>
        <ClosedDate>27/01/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>8252</PullRequestID>
        <IssueID>7294</IssueID>
        <Title>XAML references are partially highlighted when searching for references from a constructor</Title>
        <Description>1. Create a new WPF application.
2. Go to MainWindow.xaml.cs, invoke find references on the constructor.

_Expected:_ the reference to the class name in XAML is entirely highlighted.
_Actual:_ it's partially highlighted.
_Observation:_ the number of characters highlighted is the same number as ".ctor".

![image](https://cloud.githubusercontent.com/assets/201340/11640217/4b6ce908-9ce6-11e5-934d-345d9f17c5ed.png)
</Description>
        <CreatedDate>07/12/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>8252</PullRequestID>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalysisState.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>7617</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Cleanup System.IO.*Exception tests</Title>
    <Description>- Take advantage of xunit
- Refactor tests to be more readable

Contributes to #6286
Cherry picked from #5490
</Description>
    <CreatedDate>09/04/2016</CreatedDate>
    <ClosedDate>09/04/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>7617</PullRequestID>
        <IssueID>6286</IssueID>
        <Title>VisualStudioWorkspaceDiagnosticAnalyzerProviderService.TryGetRootAndShellFolder is broken</Title>
        <Description>[TryGetRootAndShellFolder](http://source.roslyn.io/Microsoft.VisualStudio.LanguageServices/R/a6cb92baaa80a016.html) is doing reflection on the VS Extension manager to find properties "ShellFolder" and "RootFolder" - these properties seem to have been removed from the Extension Manager type and hence this method always returns false. We need to delete/fix this code.
</Description>
        <CreatedDate>23/10/2015</CreatedDate>
        <ClosedDate>16/02/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>7617</PullRequestID>
        <IssueID>5490</IssueID>
        <Title>Always use GetEncoding(0) to try getting the default encoding</Title>
        <Description>
        </Description>
        <CreatedDate>28/09/2015</CreatedDate>
        <ClosedDate>29/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>7617</PullRequestID>
      <File>src/VisualStudio/Core/Def/Implementation/LanguageService/AbstractLanguageService`2.IVsLanguageBlock.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>7600</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Use IntPtr-based file descriptors exclusively, in native calls from Sockets code, part 2</Title>
    <Description>Part 2 of the fix for #6928.  Change signatures of the "permanent" native networking methods to take IntPtr arguments, and switch back to using those methods.  Once this change propagates everywhere, we can remove the *_IntPtr methods introduced in #7587.

@stephentoub
</Description>
    <CreatedDate>08/04/2016</CreatedDate>
    <ClosedDate>08/04/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>7600</PullRequestID>
        <IssueID>6928</IssueID>
        <Title>CSharpScript.EvaluateAsync() blocks until script has run to completion (or first await)</Title>
        <Description>I expected CSharpScript.EvaluateAsync(string code) to return a Task before the script has completed execution and that the task would then complete when the script has completed. This would be especially useful for potentially rong running scripts. This however is not how it currently works in version 1.1.0-rc1-20151109-01.

when I run the following 

```
        var code = @"
System.Console.WriteLine(""Script Start"" );
System.Threading.Thread.Sleep(10000);
System.Console.WriteLine(""Script End"" );";

        var task = CSharpScript.EvaluateAsync(code);
        Console.WriteLine("EvaluateAsync Done");
        task.Wait();
        Console.WriteLine("Task Completed");
        Console.ReadLine();
```

It produces the output

```
Script Start
Script End
EvaluateAsync Done
Task Completed
```
</Description>
        <CreatedDate>20/11/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>7600</PullRequestID>
        <IssueID>7587</IssueID>
        <Title>Compiler doesn't produce either FieldReferenceExpression or PropertyReferenceExpression for events.</Title>
        <Description>Similar to #7584, events don't generate any `IOperation`s.

FYI @CyrusNajmabadi @JohnHamby
</Description>
        <CreatedDate>18/12/2015</CreatedDate>
        <ClosedDate>23/12/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>7600</PullRequestID>
      <File>src/Debugging/Microsoft.DiaSymReader.PortablePdb.Tests/TestHelpers/SymTestHelpers.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/DynamicTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ExpressionCompilerTestBase.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ExpressionCompilerTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/HoistedThisTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/LocalsTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/MissingAssemblyTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/NoPIATests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/PseudoVariableTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ReferencedModulesTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ResultPropertiesTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/UsingDebugInfoTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/WinMdTests.cs</File>
      <File>src/Test/PdbUtilities/Pdb/PdbToXml.cs</File>
      <File>src/Test/PdbUtilities/Pdb/SymReader.cs</File>
      <File>src/Test/PdbUtilities/Pdb/SymReaderFactory.cs</File>
      <File>src/Test/PdbUtilities/Shared/DummyMetadataImport.cs</File>
      <File>src/Test/PdbUtilities/Shared/SymUnmanagedReaderExtensions.cs</File>
      <File>src/Test/Utilities/Desktop/CommonTestBase.CompilationVerifier.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5867</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Disable Unix workarounds for Connect'ing to multiple endpoints</Title>
    <Description>On unix, once connect fails on a socket, that socket becomes unusable for further operations, including additional connect attempts.  This is at direct odds with Socket's instance Connect methods, some of which allow for multiple connect attempts, either due to multiple IPAddresses being provided or due to a string hostname / DnsEndPoint being provided that could then result in multiple IPAddresses to be tried.

We've explored multiple workarounds for this, all of which have problems.  The workaround still in the code involves creating a temporary socket for each address, connecting to it, and if that's successful then immediately disconnecting and connecting with the actual socket.  But that causes mayhem for a server not expecting that pattern, e.g. that fails if the client disconnects and attempts a reconnect, e.g. #5436.

This leaves us with a few choices, none of which are great:
1. Remove the offending Connect instance methods.  Ideally they'd be replaced with static methods, which can be implemented with POSIX-compliant behavior.  But these methods are heavily used and work on Windows.
2. Always throw from the instance Connect methods when there's a possibility that multiple addresses will be tried, e.g. from Connect(IPAddress[], ...) but also from Connect(EndPoint) if a DnsEndPoint is specified.  This will break existing code that tries to run on unix, but it's also predictable in that usage of these APIs will always fail, and developers will know quickly when using a problematic API and move away from it to supported patterns.
3. Throw from the Connect methods only if multiple addresses are actually supplied, e.g. calling Connect(IPAddress[]) with an array of length 1 would work but an array of length 2 would throw. This will allow a lot more existing code to work, but it's also very unpredictable, e.g. if a string host is provided and gets mapped by DNS to a single IPAddress in the test environment but then multiple IPAddresses in the production environment, everything will work fine in test but then fail in production.

I'm torn between (2) and (3).  This commit implements the more conservative (2), as I expect (3) would actually cause serious problems for deployments, but we can loosen from (2) to (3) if that turns out to be better.  In the meantime, we should also seriously explore adding static methods for v1 for the same functionality (developers can also write such code themselves), and write guidance and helpers folks can use in the meantime, e.g. pseudo-code:

``` C#
public static async Task&lt;Socket&gt; Connect(
    AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType,
    IPAddress[] addresses, int port)
{
    Exception lastExc = null;
    foreach (IPAddress address in addresses)
    {
        Socket s = new Socket(addressFamily, socketType, protocolType);
        try
        {
            await s.ConnectAsync(address, port).ConfigureAwait(false);
            return s;
        }
        catch (Exception exc)
        {
            lastExc = exc;
        }
    }

    if (lastExc != null) throw lastExc;
    throw new ArgumentException("No addresses provided", "addresses");
}
```

cc: @ericeil, @pgavlin, @davidsh, @CIPop 
Fixes #5829 
Fixes #5436 
</Description>
    <CreatedDate>03/02/2016</CreatedDate>
    <ClosedDate>06/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5867</PullRequestID>
        <IssueID>5436</IssueID>
        <Title>Remove unnecessary references that we causing warnings on Mono</Title>
        <Description>These are references that haven't been ported to Mono, so the xplat build throws warnings when they're referenced.

@jaredpar @tannergooding @tmat @TyOverby @VSadov @AlekseyTs 
</Description>
        <CreatedDate>24/09/2015</CreatedDate>
        <ClosedDate>25/09/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5867</PullRequestID>
        <IssueID>5829</IssueID>
        <Title>Complete the testing for the pathmap option</Title>
        <Description>This covers testing of the `pathmap` option described in #949.  In particular we need to validate the following features respect the option as passed to the compiler:
- [x] `[CallerFilePath]` 
- [x] `#line` directives
</Description>
        <CreatedDate>09/10/2015</CreatedDate>
        <ClosedDate>20/11/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5867</PullRequestID>
        <IssueID>5436</IssueID>
        <Title>Remove unnecessary references that we causing warnings on Mono</Title>
        <Description>These are references that haven't been ported to Mono, so the xplat build throws warnings when they're referenced.

@jaredpar @tannergooding @tmat @TyOverby @VSadov @AlekseyTs 
</Description>
        <CreatedDate>24/09/2015</CreatedDate>
        <ClosedDate>25/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5867</PullRequestID>
      <File>src/EditorFeatures/Test/Threading/ForegroundNotificationServiceTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5862</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Add finalizers to DbConnection and DbCommand</Title>
    <Description>Fixes #5861

Closes #5841
</Description>
    <CreatedDate>03/02/2016</CreatedDate>
    <ClosedDate>03/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5862</PullRequestID>
        <IssueID>5861</IssueID>
        <Title>After moving all Diagnostics from PCL to VSIX Project, I get same error on every Diagnostic</Title>
        <Description>All code is in one VSIX project. The errors only show up when you build the project.

```
Error Method 'get_SupportedDiagnostics' in type 'VBCodeRefactoring.Usage.UriAnalyzer' from assembly 'VBCodeRefactoring.Vsix, Version=2.0.5761.26877, Culture=neutral, PublicKeyToken=70174ec4ec31f8a5' does not have an implementation.
```

Every Diagnostic implements

```
        Public Overrides ReadOnly Property SupportedDiagnostics() As ImmutableArray(Of DiagnosticDescriptor)
            Get
                Return ImmutableArray.Create(Rule)
            End Get
        End Property

```

This repeats for every Diagnostic with only the name of the type changing

I get a similar error for CodeFix Providers

```
Error       Method 'get_FixableDiagnosticIds' in type 'VBCodeRefactoring.Design.EmptyCatchBlockCodeFixProvider' from assembly 'VBCodeRefactoring.Vsix, Version=2.0.5761.26877, Culture=neutral, PublicKeyToken=70174ec4ec31f8a5' does not have an implementation.       
```

I also get 6 very strange partial errors that start with "at" at the end of the list

```
Error       at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)
Error       at System.Reflection.RuntimeModule.GetTypes()       
Error       at System.Reflection.Assembly.GetTypes()    
Error       at Microsoft.VisualStudio.Tools.CreatePkgDef.ProcessAssembly(String fileName, Hive hive, PkgDefContext context, Boolean register, RegistrationMode mode)    
Error       at Microsoft.VisualStudio.Tools.CreatePkgDef.Main(String[] arguments)
Error       at Microsoft.VisualStudio.Tools.CreatePkgDef.DoCreatePkgDef(InputArguments inputArguments)
```
</Description>
        <CreatedDate>10/10/2015</CreatedDate>
        <ClosedDate>19/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5862</PullRequestID>
        <IssueID>5841</IssueID>
        <Title>Microsoft.VisualStudio.LanguageServices.UnitTests.CodeModel.VisualBasic.CodeAttributeTests.AddAttributeArgument1 is flaky</Title>
        <Description>http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/295/console

Microsoft.VisualStudio.LanguageServices.UnitTests.CodeModel.VisualBasic.CodeAttributeTests.AddAttributeArgument1 [FAIL]
10:13:36         System.InvalidOperationException : Key already exists in table.
10:13:36         Stack Trace:
10:13:36            src\VisualStudio\Core\Def\Implementation\Interop\CleanableWeakComHandleTable.cs(174,0): at Microsoft.VisualStudio.LanguageServices.Implementation.Interop.CleanableWeakComHandleTable`2.Add(TKey key, TValue value)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\FileCodeModel.cs(193,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.OnCodeElementCreated(SyntaxNodeKey nodeKey, CodeElement element)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\InternalElements\CodeClass.cs(31,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.InternalElements.CodeClass.Create(CodeModelState state, FileCodeModel fileCodeModel, SyntaxNodeKey nodeKey, Nullable`1 nodeKind)
10:13:36            src\VisualStudio\VisualBasic\Impl\CodeModel\VisualBasicCodeModelService.vb(563,0): at Microsoft.VisualStudio.LanguageServices.VisualBasic.CodeModel.VisualBasicCodeModelService.CreateInternalCodeElement(CodeModelState state, FileCodeModel fileCodeModel, SyntaxNode node)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\FileCodeModel.cs(226,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.GetOrCreateCodeElement[T](SyntaxNode node)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\AbstractCodeModelService.cs(400,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.AbstractCodeModelService.CreateInternalCodeAttribute(CodeModelState state, FileCodeModel fileCodeModel, SyntaxNode node)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\AbstractCodeModelService.cs(506,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.AbstractCodeModelService.CreateInternalCodeAttributeArgument(CodeModelState state, FileCodeModel fileCodeModel, SyntaxNode node)
10:13:36            src\VisualStudio\VisualBasic\Impl\CodeModel\VisualBasicCodeModelService.vb(538,0): at Microsoft.VisualStudio.LanguageServices.VisualBasic.CodeModel.VisualBasicCodeModelService.CreateInternalCodeElement(CodeModelState state, FileCodeModel fileCodeModel, SyntaxNode node)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\FileCodeModel_CodeGen.cs(155,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.AddAttributeArgument(SyntaxNode containerNode, String name, String value, Object position)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\InternalElements\CodeAttribute.cs(150,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.InternalElements.CodeAttribute.&lt;&gt;c__DisplayClass23_0.&lt;AddArgument&gt;b__0()
10:13:36            src\VisualStudio\Core\Impl\CodeModel\FileCodeModel.cs(275,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.EnsureEditor[T](Func`1 action)
10:13:36            src\VisualStudio\Core\Impl\CodeModel\InternalElements\CodeAttribute.cs(148,0): at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.InternalElements.CodeAttribute.AddArgument(String value, Object nameObj, Object position)
10:13:36               at EnvDTE80.CodeAttribute2.AddArgument(String Value, Object Name, Object Position)
10:13:36            src\VisualStudio\Core\Test\CodeModel\AbstractCodeAttributeTests.vb(55,0): at Microsoft.VisualStudio.LanguageServices.UnitTests.CodeModel.AbstractCodeAttributeTests.AddAttributeArgument(CodeAttribute2 codeElement, AttributeArgumentData data)
10:13:36            src\VisualStudio\Core\Test\CodeModel\AbstractCodeAttributeTests.vb(123,0): at Microsoft.VisualStudio.LanguageServices.UnitTests.CodeModel.AbstractCodeAttributeTests.TestAddAttributeArgument(XElement code, XElement expectedCode, AttributeArgumentData data)
10:13:36            src\VisualStudio\Core\Test\CodeModel\VisualBasic\CodeAttributeTests.vb(797,0): at Microsoft.VisualStudio.LanguageServices.UnitTests.CodeModel.VisualBasic.CodeAttributeTests.AddAttributeArgument1()
</Description>
        <CreatedDate>09/10/2015</CreatedDate>
        <ClosedDate>12/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5862</PullRequestID>
      <File>src/EditorFeatures/CSharpTest/Classification/SyntacticTaggerTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SyntacticClassificationTaggerProvider.TagComputer.cs</File>
      <File>src/EditorFeatures/Core/Implementation/Classification/SyntacticClassificationTaggerProvider.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5790</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Disable multiple connect attempts per socket on Linux.</Title>
    <Description>The Linux implementation of multiple connect attempts per socket does not work correctly, per #5754.  This change disables multiple connect attempts on all Unix platforms (since Linux was the only one that claimed to support it).

Fixes #5754

@pgavlin , @stephentoub 
</Description>
    <CreatedDate>29/01/2016</CreatedDate>
    <ClosedDate>01/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5790</PullRequestID>
        <IssueID>5754</IssueID>
        <Title>Collapse '#region' tags the first time a file is ever opened.</Title>
        <Description>After that, we will persist and restore whatever outlining spans the user opens/closes.
</Description>
        <CreatedDate>07/10/2015</CreatedDate>
        <ClosedDate>08/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5790</PullRequestID>
        <IssueID>5754</IssueID>
        <Title>Collapse '#region' tags the first time a file is ever opened.</Title>
        <Description>After that, we will persist and restore whatever outlining spans the user opens/closes.
</Description>
        <CreatedDate>07/10/2015</CreatedDate>
        <ClosedDate>08/10/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5790</PullRequestID>
      <File>src/EditorFeatures/CSharp/AutomaticCompletion/AutomaticLineEnderCommandHandler.cs</File>
      <File>src/EditorFeatures/CSharpTest/AutomaticCompletion/AutomaticLineEnderTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/AutomaticCompletion/AbstractAutomaticLineEnderCommandHandler.cs</File>
      <File>src/EditorFeatures/Test/AutomaticCompletion/AbstractAutomaticLineEnderTests.cs</File>
      <File>src/Workspaces/CSharp/Portable/Utilities/FormattingRangeHelper.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5779</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Unix LM\Root X509Store should also read SSL_CERT_FILE</Title>
    <Description>The default resolver in OpenSSL has two providers
1) SSL_CERT_DIR
Every file in this directory has all certificates therein read as a trusted cert.
2) SSL_CERT_FILE
This one extra file is also read, and all certificates therein are trusted certs.

Up until now we've only emulated the SSL_CERT_DIR approach, and that
worked on the Linux distributions tested thus far (Ubuntu 14.04/15.04,
CentOS 7.1, others).

The Homebrew provided OpenSSL for OS X, however, builds the root
store in a single file in the location pointed to by SSL_CERT_FILE.

So, now, read the SSL_CERT_FILE-based content in addition to the
SSL_CERT_DIR content, and things should work better on OS X (and better
match the behavior of an application that would directly be using OpenSSL).

Fixes #5173.
Will address #5555 (OSX) after the packages baseline is updated.
cc: @stephentoub
</Description>
    <CreatedDate>29/01/2016</CreatedDate>
    <ClosedDate>29/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5779</PullRequestID>
        <IssueID>5173</IssueID>
        <Title>Proposal: Forward reference for local functions</Title>
        <Description>We would like to change the definite assignment rules for _local functions_ (#259 and #2930) to allow a local function to be invoked before its point of declaration if all variables that are read before being assigned in the local function are definitely assigned at the point of invocation.

This would make it possible to have two mutually recursive local functions declared side-by-side.

We would also remove the requirement that a local function declaration statement be _reachable_, as executing that declaration now has no meaning.
</Description>
        <CreatedDate>11/09/2015</CreatedDate>
        <ClosedDate>22/09/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5779</PullRequestID>
        <IssueID>5555</IssueID>
        <Title>Roslyn.Services.Editor.VisualBasic.UnitTests.dll fail in Standalone Run</Title>
        <Description>There are 13 unit tests in this suite with failures. Each are looking for slightly different items but are unable to find them. Tests names indicate Intellisense, specifically Completion List. I will be disabling the suite until these are fixed.

Example:
OverrideCompletionProviderTests.EscapedPropertyNameInIntelliSenseList [FAIL]
      No expected item was found.\nExisting items: ToString(), Equals(obj As Object), GetHashCode(), [Class]
      Stack Trace:
            at Roslyn.Test.Utilities.AssertEx.Any[T](IEnumerable`1 actual, Func`2 predicate)
            at Microsoft.CodeAnalysis.Editor.UnitTests.Completion.AbstractCompletionProviderTests`1.CheckResults(Document document, Int32 position, String expectedItemOrNull, String expectedDescriptionOrNull, Boolean usePreviousCharAsTrigger, Boolean checkForAbsence, Nullable`1 glyph)
            at Microsoft.CodeAnalysis.Editor.UnitTests.Completion.AbstractCompletionProviderTests`1.VerifyWorker(String code, Int32 position, String expectedItemOrNull, String expectedDescriptionOrNull, SourceCodeKind sourceCodeKind, Boolean usePreviousCharAsTrigger, Boolean checkForAbsence, Boolean experimental, Nullable`1 glyph)
            at OverrideCompletionProviderTests.EscapedPropertyNameInIntelliSenseList()
</Description>
        <CreatedDate>29/09/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5779</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedEntryPointSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedInteractiveInitializerMethod.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests_Dynamic.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenDynamicTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenScriptTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EntryPointTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ImplicitlyTypedLocalsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/ScriptSemanticsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SwitchTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UnsafeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/CompilationAPITests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/GetUnusedImportDirectivesTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/LoadDirectiveTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/ReferenceManagerTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/CompilationCreationTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/ExtensionMethodTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/ImplicitClassTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/ExternAliasTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/ModifierTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolErrorTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5764</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Simplify and Modernize System.Collections tests</Title>
    <Description>The tests for System.Collections were ported from an old framework and filled with Drivers and unnecessary obfuscations. I simplified them and consolidated code wherever possible.
- refactored the tests to maximize code reuse and achieve a higher coverage rate. 
- Interface-specific tests were added for interface-specific behavior e.g. ICollection_Generic_tests. I added these tests to Common/tests alongside the existing IEnumerableTest, ICollectionTests, etc. 
  - Note that these new classes encompass all of the coverage that the existing IEnumerableTest/IDictionaryTest/etc do. However, those classes are being used in System.ObjectModel and may not be deleted until that library is modified to use the new structures. I am going to do that at a later date.
- removed some lines of code form System.Collections that weren't being hit.
- Added generic scenarios for every collections for at least one value type (int) and one reference type (string). Some collections (e.g. HashSet) have many more test sets

Improvements:
16547 additions, 44866 deletions =&gt; 28319 lines removed

|  | before | after |
| --- | --- | --- |
| line coverage | 74.5% | 96.2% |
| branch coverage | 70.4% | 92.8% |
| execution time | 49.388 s | 41.496 s |
| number of tests | 1604 | 36140 |

*coverage doesn't include Dictionary or List since those are in mscorlib. For those libraries (particularly Dictionary) I &lt;i&gt;mostly&lt;/i&gt; just added new tests and didn't remove old ones.

resolves #754, #4964 

cc: people who have been active in the Collections space recently: @stephentoub @hughbe @Clockwork-Muse 
</Description>
    <CreatedDate>29/01/2016</CreatedDate>
    <ClosedDate>12/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5764</PullRequestID>
        <IssueID>754</IssueID>
        <Title>Revert "Fix for issues around analyzer exception diagnostics getting sup...</Title>
        <Description>Reverts dotnet/roslyn#673 as it seems to be causing test leaks. 
</Description>
        <CreatedDate>21/02/2015</CreatedDate>
        <ClosedDate>21/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5764</PullRequestID>
        <IssueID>4964</IssueID>
        <Title>Add explanatory comment</Title>
        <Description>Replaces https://github.com/dotnet/roslyn/pull/4962.

@rchande I made the change you suggested.
</Description>
        <CreatedDate>03/09/2015</CreatedDate>
        <ClosedDate>03/09/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5764</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/BindingTests.cs</File>
      <File>src/Compilers/Core/Portable/Text/TextSpan.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5713</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fixing expression interpreter issues with Convert[Checked]</Title>
    <Description>This addresses the issues reported in #4019 and #4022. Fixes for those issues will be accumulated in this PR.

This is the same changes as in https://github.com/dotnet/corefx/pull/4028 merged and resolved
</Description>
    <CreatedDate>26/01/2016</CreatedDate>
    <ClosedDate>28/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5713</PullRequestID>
        <IssueID>4019</IssueID>
        <Title>Metadata as Source completely breaks with tab indentation</Title>
        <Description>Running the RTM build:

MAS completely fails on [`Microsoft.VisualStudio.Settings.SettingsStore`](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.settings.settingsstore).

F12 shows an AggregateException message in a dialog.  Peek just hangs.  Attaching a debugger shows an ArgumentOutRange complaining the `start` is less than `end` from the following stack:

```
&gt;   Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(int start, int end) Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.ComplexTrivia.ShouldFormat(Microsoft.CodeAnalysis.Formatting.FormattingContext context)  Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.ComplexTrivia.Format(Microsoft.CodeAnalysis.Formatting.FormattingContext context, Microsoft.CodeAnalysis.Formatting.ChainedFormattingRules formattingRules, System.Action&lt;int, Microsoft.CodeAnalysis.Formatting.TriviaData&gt; formattingResultApplier, System.Threading.CancellationToken cancellationToken, int tokenPairIndex)  Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.ApplyEndOfTreeTriviaOperation(Microsoft.CodeAnalysis.Formatting.FormattingContext context, Microsoft.CodeAnalysis.Formatting.TokenStream tokenStream, System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.Format(System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.CSharpStructuredTriviaFormatEngine.Format(Microsoft.CodeAnalysis.SyntaxTrivia trivia, int initialColumn, Microsoft.CodeAnalysis.Options.OptionSet optionSet, Microsoft.CodeAnalysis.Formatting.ChainedFormattingRules formattingRules, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.CSharpTriviaFormatter.FormatStructuredTrivia(Microsoft.CodeAnalysis.Formatting.LineColumn lineColumn, Microsoft.CodeAnalysis.SyntaxTrivia trivia, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; changes, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.CSharpTriviaFormatter.Format(Microsoft.CodeAnalysis.Formatting.LineColumn lineColumn, Microsoft.CodeAnalysis.SyntaxTrivia commonTrivia, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; changes, System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;.FormatFirstTriviaAndWhitespaceAfter&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;(Microsoft.CodeAnalysis.Formatting.LineColumn lineColumnBeforeTrivia1, Microsoft.CodeAnalysis.SyntaxTrivia trivia1, Microsoft.CodeAnalysis.Formatting.LineColumnDelta existingWhitespaceBetween, Microsoft.CodeAnalysis.SyntaxTrivia trivia2, Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;.Formatter&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; format, Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;.WhitespaceAppender&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; addWhitespaceTrivia, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; changes, bool implicitLineBreak, System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;.FormatTrivia&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;(Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;.Formatter&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; formatter, Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;.WhitespaceAppender&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; whitespaceAdder, System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; changes, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;.FormatToTextChanges(System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.FormattedComplexTrivia.FormattedComplexTrivia(Microsoft.CodeAnalysis.Formatting.FormattingContext context, Microsoft.CodeAnalysis.Formatting.ChainedFormattingRules formattingRules, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, int lineBreaks, int spaces, string originalString, System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.ComplexTrivia.Format(Microsoft.CodeAnalysis.Formatting.FormattingContext context, Microsoft.CodeAnalysis.Formatting.ChainedFormattingRules formattingRules, int lines, int spaces, System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.ComplexTrivia.Format(Microsoft.CodeAnalysis.Formatting.FormattingContext context, Microsoft.CodeAnalysis.Formatting.ChainedFormattingRules formattingRules, System.Action&lt;int, Microsoft.CodeAnalysis.Formatting.TriviaData&gt; formattingResultApplier, System.Threading.CancellationToken cancellationToken, int tokenPairIndex)  Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.ApplyBeginningOfTreeTriviaOperation(Microsoft.CodeAnalysis.Formatting.FormattingContext context, Microsoft.CodeAnalysis.Formatting.TokenStream tokenStream, System.Threading.CancellationToken cancellationToken)    Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.Format(System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.CSharp.Formatting.CSharpSyntaxFormattingService.Format(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule&gt; formattingRules, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, System.Threading.CancellationToken cancellationToken)  Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.FormatIndividually(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Options.OptionSet options, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule&gt; rules, System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; spansToFormat, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.Format(Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, Microsoft.CodeAnalysis.Options.OptionSet options, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule&gt; rules, System.Threading.CancellationToken cancellationToken) Unknown
    Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule&gt; rules, System.Threading.CancellationToken cancellationToken)   Unknown
    Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, Microsoft.CodeAnalysis.Options.OptionSet options, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule&gt; rules, System.Threading.CancellationToken cancellationToken)    Unknown
```

The debugger reveals that the tokens being formatted are

```
#region Assembly Microsoft.VisualStudio.Shell.11.0, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// C:\Users\SSL\Development\Open Source\Mine\C#\VSEmbed\References\v11.0\Microsoft.VisualStudio.Shell.11.0.dll
#endregion

usingSystem;usingSystem.Collections.Generic;usingSystem.IO;namespaceMicrosoft.VisualStudio.Settings{publicabstractclassSettingsStore{protectedSettingsStore();publicabstractSystem.BooleanCollectionExists(System.StringcollectionPath);publicabstractSystem.BooleanGetBoolean(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.BooleanGetBoolean(System.StringcollectionPath,System.StringpropertyName,System.BooleandefaultValue);publicabstractSystem.Int32GetInt32(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.Int32GetInt32(System.StringcollectionPath,System.StringpropertyName,System.Int32defaultValue);publicabstractSystem.Int64GetInt64(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.Int64GetInt64(System.StringcollectionPath,System.StringpropertyName,System.Int64defaultValue);publicabstractglobal::System.DateTimeGetLastWriteTime(System.StringcollectionPath);publicabstractglobal::System.IO.MemoryStreamGetMemoryStream(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.Int32GetPropertyCount(System.StringcollectionPath);publicabstractglobal::System.Collections.Generic.IEnumerable&lt;System.String&gt;GetPropertyNames(System.StringcollectionPath);publicabstractglobal::Microsoft.VisualStudio.Settings.SettingsTypeGetPropertyType(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.StringGetString(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.StringGetString(System.StringcollectionPath,System.StringpropertyName,System.StringdefaultValue);publicabstractSystem.Int32GetSubCollectionCount(System.StringcollectionPath);publicabstractglobal::System.Collections.Generic.IEnumerable&lt;System.String&gt;GetSubCollectionNames(System.StringcollectionPath);publicabstractSystem.UInt32GetUInt32(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.UInt32GetUInt32(System.StringcollectionPath,System.StringpropertyName,System.UInt32defaultValue);publicabstractSystem.UInt64GetUInt64(System.StringcollectionPath,System.StringpropertyName);publicabstractSystem.UInt64GetUInt64(System.StringcollectionPath,System.StringpropertyName,System.UInt64defaultValue);publicabstractSystem.BooleanPropertyExists(System.StringcollectionPath,System.StringpropertyName);}}
```

It looks like the error comes when trying to format the `#endregion`
</Description>
        <CreatedDate>21/07/2015</CreatedDate>
        <ClosedDate>30/07/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5713</PullRequestID>
        <IssueID>4022</IssueID>
        <Title>.NET compiler produces incorrect string constants in MSIL when C# source files encoded with non-UTF-8 encoding</Title>
        <Description>.NET compiler produces incorrect string constants in MSIL (as compared to previous version,  even to VS 2015 RC)  when C# source files encoded with non-UTF-8 encoding (e.g. UTF-8 without BOM or windows-1251 (Russian)) and contains string constants in international language (e.g. Russian text). The source text file encoding seems not respected anymore and treated as ASCII when encoding is not UTF-8. 

The similar issue also has resource compiler (*.resx) result in generating incorrect source file.

The issue appears after a transition from VS 2015 RC to VS 2015. VS 2015 RC works as expected.

Visual Studio info:

Microsoft Visual Studio Enterprise 2015
Version 14.0.23107.0 D14REL
Microsoft .NET Framework
Version 4.6.00079

OS info:

Microsoft Windows 10 Pro /  Version 10.0.10240 Build 10240

**Steps to reproduce the issue:**

Create console project with following source file in windows-1251 encoding and compile it.

``` C#
using System;

namespace EncodingTest
{
    class Program
    {
        static void Main(string[] args)
        {
            string test = "Тестовая строка";
            Console.WriteLine(test);
        }
    }
}
```

[Ready to use solution](https://connect.microsoft.com/VisualStudio/Feedback/DownloadFile?downloadLink=2110cc92-d654-4d3e-8f44-050700a428f4%3BEncodingTest.zip)

**Expected results:**

``` C#
.method private hidebysig static void Main(string[] args) cil managed
{
    .entrypoint
    .maxstack 1
    .locals init (
        [0] string str)
    L_0000: nop 
    L_0001: ldstr "\u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430"
    L_0006: stloc.0 
    L_0007: ldloc.0 
    L_0008: call void [mscorlib]System.Console::WriteLine(string)
    L_000d: nop 
    L_000e: ret 
}
```

To emphasize:

``` C#
L_0001: ldstr "\u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430"
```

**Actual results:**

``` C#
.method private hidebysig static void Main(string[] args) cil managed
{
    .entrypoint
    .maxstack 1
    .locals init (
        [0] string str)
    L_0000: nop 
    L_0001: ldstr "\u00d2\u00e5\u00f1\u00f2\u00ee\u00e2\u00e0\u00ff \u00f1\u00f2\u00f0\u00ee\u00ea\u00e0"
    L_0006: stloc.0 
    L_0007: ldloc.0 
    L_0008: call void [mscorlib]System.Console::WriteLine(string)
    L_000d: nop 
    L_000e: ret 
}
```

To emphasize:

``` C#
L_0001: ldstr "\u00d2\u00e5\u00f1\u00f2\u00ee\u00e2\u00e0\u00ff \u00f1\u00f2\u00f0\u00ee\u00ea\u00e0"
```

[Microsoft Connect Entry](https://connect.microsoft.com/VisualStudio/feedback/details/1571354/net-compiler-produces-incorrect-string-constants-in-msil-when-c-source-files-encoded-with-non-utf-8-encoding)
</Description>
        <CreatedDate>21/07/2015</CreatedDate>
        <ClosedDate>05/08/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5713</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/ConversionsBase.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/CodeGen/Optimizer.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_Call.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_TryStatement.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ArrayTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Symbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenExprLambdaTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/CompilationEmitTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBDynamicLocalsTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/UnsafeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/SemanticModelAPITests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/AnonymousTypesSymbolTests.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs</File>
      <File>src/Compilers/Core/Portable/NativePdbWriter/PdbWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/BlobBuilder.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/MetadataWriter.PortablePdb.cs</File>
      <File>src/Compilers/Core/Portable/ReferenceManager/CommonReferenceManager.Resolution.cs</File>
      <File>src/Compilers/Test/Resources/Core/SymbolsTests/CustomModifiers/ModoptTestOrignal.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>5691</IssueID>
    <RepoID>corefx</RepoID>
    <Title>RC2: Porting SslStream &lt;Read|Write&gt;Async overrides and regression fix</Title>
    <Description>Porting the fixes for #5077: #5541 #5642 

The second commit is fixing a regression that was introduced during a merge/pattern change made concurrently with the initial port development.

@leecow @ellismg PTAL
/cc: @davidsh @stephentoub 
</Description>
    <CreatedDate>26/01/2016</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>5691</PullRequestID>
        <IssueID>5077</IssueID>
        <Title>Add "IsManaged" API on C# types if there is enough demand.</Title>
        <Description>Language has concept of managed type - roughly types that might be reference types themselves or may contain references. 
The most common use of this info is that the language does not allow pointers like T\* if T happens to be a managed type.

Compiler knows internally whether any given type is considered "managed" or not since it needs this information for error checking. The question is whether there is enough potential value for this to be a public property.
</Description>
        <CreatedDate>08/09/2015</CreatedDate>
        <ClosedDate>08/09/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5691</PullRequestID>
        <IssueID>5541</IssueID>
        <Title>[portable pdb] Finalize Portable PDB format 1.0</Title>
        <Description>
        </Description>
        <CreatedDate>29/09/2015</CreatedDate>
        <ClosedDate>13/10/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>5691</PullRequestID>
        <IssueID>5642</IssueID>
        <Title>Enable Find All References in Interactive</Title>
        <Description>1. Start VS, start Interactive.
2. Type 'Console.WriteLine("TEST");', execute this submission.
3. Hit SHIFT+F12 with cursor on 'WriteLine'.
4. Find-references toolwindow shows up, with the submission's usage in the list.
5. Double-click the usage.

**Results:**
We currently block Ctrl+F12 in the command filter.  However, even if that check is removed, we won't set focus to the REPL window.

**Expected results:**
We should set focus to the REPL window as well.
</Description>
        <CreatedDate>02/10/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>5691</PullRequestID>
      <File>src/Compilers/Core/Portable/MetadataReader/MetadataHelpers.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>4740</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fix WebException constructor parameters to match Desktop naming</Title>
    <Description>As per the System.Net.\* API review dotnet/apireviews#21 fixing the
parameter name used for the inner exception in the WebException
constructor overloads to match the name used in .NET Framework (Desktop).

Part of #4732
</Description>
    <CreatedDate>30/11/2015</CreatedDate>
    <ClosedDate>01/12/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>4740</PullRequestID>
        <IssueID>21</IssueID>
        <Title>CCRewrite unhappy with Toolset Compilers 1.0.0-rc1-20150113-03</Title>
        <Description>After upgrading from to Microsoft.Net.ToolsetCompilers.1.0.0-beta2-20141216-04, CodeContract ccrewrite.exe (latest, v1.7.11202.10) starts to fail during build with:
error CC1099: Contract extraction failed: Found field &lt;&gt;8__1 in contract that shouldn't be here: In method ns.type.member.
Exact same code had no issue with Microsoft.Net.ToolsetCompilers.1.0.0-beta2-20141223-03.
Function exhibiting error is in a static class, along the lines of:

```
public static IEnumerable&lt;tuple&lt;object, MemberInfo, LinkArity, int, LinkDirection, object, LinkOutput&gt;&gt; BreadthFirstTraversal(
        object fromObject,
        Func&lt;object, IEnumerable&lt;Tuple&lt;MemberInfo, LinkArity&gt;&gt;&gt; getSubjectRelations,
        Func&lt;object, MemberInfo, LinkArity, IEnumerable&lt;Tuple&lt;int, object, LinkOutput&gt;&gt;&gt; getRelatedObjects,
        IEqualityComparer&lt;object&gt; nodeComparer = null
        )
    {
        Contract.Requires&lt;ArgumentNullException&gt;(getSubjectRelations != null);
        Contract.Requires&lt;ArgumentNullException&gt;(getRelatedObjects != null);
    ...
```

so with only 2 simple preconditions. Function body uses yield return after that.
Commenting out the contracts removes the build error.
This only occurs in a few instances overall, the majority of contracts are unaffected, but I haven't identified the exact pattern causing that issue yet.
In another instance, ccrewrite goes through, but runtime behavior becomes faulty with a precondition asserting systematically.

&lt;!---
@huboard:{"order":138.0,"milestone_order":21,"custom_state":""}
--&gt;
</Description>
        <CreatedDate>17/01/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>4740</PullRequestID>
        <IssueID>4732</IssueID>
        <Title>Move to readonly properties.</Title>
        <Description>
        </Description>
        <CreatedDate>21/08/2015</CreatedDate>
        <ClosedDate>22/08/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>4740</PullRequestID>
      <File>src/Compilers/CSharp/CscCore/Csc.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Symbols.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/UserDefinedImplicitConversions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/MethodTypeInference.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/OverloadResolution.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs</File>
      <File>src/Compilers/CSharp/Portable/Compiler/MethodCompiler.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/EditAndContinue/CSharpSymbolMatcher.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/GenericTypeInstanceReference.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/NamedTypeSymbolAdapter.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/PEModuleBuilder.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/ParameterSymbolAdapter.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/ParameterTypeInformation.cs</File>
      <File>src/Compilers/CSharp/Portable/Emitter/Model/SpecializedGenericNestedTypeInstanceReference.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncMethodBuilderMemberCollection.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/IteratorRewriter/IteratorStateMachine.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/ExpressionLambdaRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/LambdaCapturedVariable.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/LambdaRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/MethodToClassRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/MethodToStateMachineRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/StateMachineRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/SynthesizedMethodBaseSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/SymbolDisplay/SymbolDisplayVisitor.Members.cs</File>
      <File>src/Compilers/CSharp/Portable/SymbolDisplay/SymbolDisplayVisitor.Types.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AbstractTypeMap.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AbstractTypeParameterMap.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/AnonymousTypeManager.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/PublicSymbols/AnonymousType.TypePublicSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/SynthesizedSymbols/AnonymousType.TemplateSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ArrayTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/AssemblySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ByRefReturnErrorTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ConstraintsHelper.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ConstructedMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ConstructedNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/DynamicTypeEraser.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ErrorTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/MemberSignatureComparer.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/DynamicTypeDecoder.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/MemberRefMetadataDecoder.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PEMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PENamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PEParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PEPropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Metadata/PE/SymbolFactory.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/MethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/MethodSymbolExtensions.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/MutableTypeMap.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/NamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ReducedExtensionMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Retargeting/RetargetingSymbolTranslator.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SignatureOnlyParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/CustomModifierUtils.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/ImplicitNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceClonedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceComplexParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceParameterSymbolBase.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceTypeParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/ThisParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedEventSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedFieldSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedMethodSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedPropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedTypeParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SymbolExtensions.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedAccessorValueParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedContainer.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/TypeMap.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/TypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/TypeUnification.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/TypeWithModifiers.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/UnboundGenericType.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/WrappedParameterSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Utilities/TypeSymbolExtensions.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/AttributeTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/SwitchTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/EmitCustomModifiers.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBConstantTests.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/PDB/PDBTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/OverloadResolutionTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SwitchTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/CustomModifiersTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/MockNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/OverriddenOrHiddenMembersTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/CustomModifierCopyTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/ModifierTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/TypeMapTests.cs</File>
      <File>src/Compilers/CSharp/csc/Csc.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/MetadataReferences/AssemblyIdentityComparerTests.cs</File>
      <File>src/Compilers/Core/Portable/CodeAnalysisResources.Designer.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/ArrayMembers.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/BasicBlock.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/PermissionSetAttribute.cs</File>
      <File>src/Compilers/Core/Portable/CommandLine/CommonCompiler.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalysisScope.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalysisState.AnalyzerStateData.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalysisState.SyntaxReferenceAnalyzerStateData.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerTelemetry.ActionCounts.cs</File>
      <File>src/Compilers/Core/Portable/Emit/CommonPEModuleBuilder.cs</File>
      <File>src/Compilers/Core/Portable/Emit/NoPia/CommonEmbeddedParameter.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/MetadataDecoder.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/SymbolFactory.cs</File>
      <File>src/Compilers/Core/Portable/MetadataReader/TypeNameDecoder.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/CoffHeader.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/CorHeader.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/MetadataWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/PeWriter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/ReturnValueParameter.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/Types.cs</File>
      <File>src/Compilers/Core/Portable/PEWriter/Units.cs</File>
      <File>src/Compilers/Core/VBCSCompiler/CSharpCompilerServer.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/CompilingTestBase.cs</File>
      <File>src/EditorFeatures/CSharp/Completion/CompletionProviders/OverrideCompletionProvider.cs</File>
      <File>src/EditorFeatures/CSharp/Completion/CompletionProviders/PartialCompletionProvider.cs</File>
      <File>src/EditorFeatures/CSharpTest/ExtractMethod/ExtractMethodBase.cs</File>
      <File>src/EditorFeatures/CSharpTest/ExtractMethod/MiscTests.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/Dashboard/Dashboard.xaml.cs</File>
      <File>src/EditorFeatures/Core/Implementation/InlineRename/InlineRenameSession.cs</File>
      <File>src/EditorFeatures/Test/AbstractCommandHandlerTestState.cs</File>
      <File>src/EditorFeatures/Test/EditorAdapter/TextSnapshotImplementationTest.cs</File>
      <File>src/EditorFeatures/Test/QuickInfo/AbstractSemanticQuickInfoSourceTests.cs</File>
      <File>src/EditorFeatures/Test/Tagging/AsynchronousTaggerTests.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CSharpInstructionDecoder.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/DisplayClassVariable.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EELocalConstantSymbol.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EELocalSymbol.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EELocalSymbolBase.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EENamedTypeSymbol.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/EETypeParameterSymbol.cs</File>
      <File>src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/ExpressionCompilerTests.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ExpressionCompiler/ExpressionCompilerTestHelpers.cs</File>
      <File>src/Features/CSharp/ChangeSignature/CSharpChangeSignatureService.cs</File>
      <File>src/Features/CSharp/CodeFixes/FullyQualify/CSharpFullyQualifyCodeFixProvider.cs</File>
      <File>src/Features/CSharp/CodeFixes/Iterator/CSharpAddYieldCodeFixProvider.cs</File>
      <File>src/Features/CSharp/CodeRefactorings/MoveDeclarationNearReference/MoveDeclarationNearReferenceCodeRefactoringProvider.State.cs</File>
      <File>src/Features/CSharp/Completion/CompletionProviders/NamedParameterCompletionProvider.cs</File>
      <File>src/Features/CSharp/EditAndContinue/SyntaxUtilities.cs</File>
      <File>src/Features/CSharp/ExtractMethod/CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.cs</File>
      <File>src/Features/CSharp/ExtractMethod/CSharpMethodExtractor.CSharpCodeGenerator.cs</File>
      <File>src/Features/CSharp/ExtractMethod/CSharpSelectionResult.StatementResult.cs</File>
      <File>src/Features/CSharp/ExtractMethod/CSharpSelectionValidator.cs</File>
      <File>src/Features/CSharp/GenerateMember/GenerateParameterizedMember/CSharpGenerateMethodService.cs</File>
      <File>src/Features/CSharp/GenerateMember/GenerateVariable/CSharpGenerateVariableService.cs</File>
      <File>src/Features/CSharp/GenerateType/CSharpGenerateTypeService.cs</File>
      <File>src/Features/CSharp/IntroduceVariable/CSharpIntroduceVariableService.Rewriter.cs</File>
      <File>src/Features/CSharp/IntroduceVariable/CSharpIntroduceVariableService_IntroduceField.cs</File>
      <File>src/Features/CSharp/IntroduceVariable/CSharpIntroduceVariableService_IntroduceLocal.cs</File>
      <File>src/Features/CSharp/IntroduceVariable/CSharpIntroduceVariableService_IntroduceQueryLocal.cs</File>
      <File>src/Features/CSharp/MetadataAsSource/CSharpMetadataAsSourceService.cs</File>
      <File>src/Features/Core/ChangeSignature/AbstractChangeSignatureService.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.StateManager.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.cs</File>
      <File>src/Features/Core/ExtractMethod/AbstractSyntaxTriviaService.cs</File>
      <File>src/Features/Core/GenerateMember/GenerateConstructor/GenerateConstructorHelpers.cs</File>
      <File>src/Features/Core/GenerateMember/GenerateVariable/AbstractGenerateVariableService.State.cs</File>
      <File>src/Features/Core/GenerateType/AbstractGenerateTypeService.GenerateNamedType.cs</File>
      <File>src/Features/Core/MetadataAsSource/AbstractMetadataAsSourceService.cs</File>
      <File>src/InteractiveWindow/VisualStudio/ContentTypeMetadata.cs</File>
      <File>src/InteractiveWindow/VisualStudio/ProvideInteractiveWindowAttribute.cs</File>
      <File>src/Test/Utilities/Desktop/CommonTestBase.CompilationVerifier.cs</File>
      <File>src/Test/Utilities/Desktop/HostedRuntimeEnvironment.cs</File>
      <File>src/Test/Utilities/Portable/Compilation/CompilationExtensions.cs</File>
      <File>src/Test/Utilities/Portable/Pdb/PdbValidation.cs</File>
      <File>src/VisualStudio/CSharp/Impl/CodeModel/CSharpCodeModelService.cs</File>
      <File>src/VisualStudio/CSharp/Impl/CodeModel/EndRegionFormattingRule.cs</File>
      <File>src/VisualStudio/CSharp/Impl/CodeModel/MethodXml/MethodXmlBuilder.cs</File>
      <File>src/VisualStudio/CSharp/Impl/Debugging/LocationInfoGetter.cs</File>
      <File>src/VisualStudio/CSharp/Impl/LanguageService/CSharpHelpContextService.cs</File>
      <File>src/VisualStudio/CSharp/Test/CodeModel/AbstractFileCodeElementTests.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ChangeSignature/ChangeSignatureDialog.xaml.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ChangeSignature/ChangeSignatureDialogViewModel.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/DebuggerIntelliSense/DebuggerTextView.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ExtractInterface/ExtractInterfaceDialogViewModel.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/GenerateType/GenerateTypeDialogViewModel.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/LanguageService/AbstractLanguageService`2.IVsLanguageTextOps.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/LanguageService/AbstractLanguageService`2.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Preview/ChangeList.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/AbstractEntryPointFinder.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/MiscellaneousFilesWorkspace.HostProject.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/ProjectSystem/MiscellaneousFilesWorkspace.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/TableDataSource/AbstractTable.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Venus/AbstractContainedLanguage.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Venus/IVsContainedLanguageCodeSupport.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Watson/ErrorReportSettings.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Workspace/Esent/EsentPersistentStorage.cs</File>
      <File>src/VisualStudio/Core/Def/Implementation/Workspace/VisualStudioSymbolNavigationService.cs</File>
      <File>src/VisualStudio/Core/Impl/CodeModel/CodeModelState.cs</File>
      <File>src/VisualStudio/Core/Impl/CodeModel/Collections/NamespaceCollection.cs</File>
      <File>src/VisualStudio/Core/Impl/CodeModel/Collections/NodeSnapshot.cs</File>
      <File>src/VisualStudio/Core/Impl/Options/AbstractOptionPreviewViewModel.cs</File>
      <File>src/VisualStudio/Core/Impl/Options/AbstractRadioButtonViewModel.cs</File>
      <File>src/VisualStudio/Core/Impl/Options/CheckBoxViewModel.cs</File>
      <File>src/VisualStudio/Core/SolutionExplorerShim/AnalyzerItem/AnalyzerItemSource.cs</File>
      <File>src/VisualStudio/VisualStudioDiagnosticsToolWindow/VenusMargin/ProjectionBufferViewModel.cs</File>
      <File>src/Workspaces/CSharp/Portable/CodeGeneration/CSharpCodeGenerationHelpers.cs</File>
      <File>src/Workspaces/CSharp/Portable/CodeGeneration/CSharpCodeGenerationService.cs</File>
      <File>src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs</File>
      <File>src/Workspaces/CSharp/Portable/CodeGeneration/ExpressionGenerator.cs</File>
      <File>src/Workspaces/CSharp/Portable/Extensions/CastExpressionSyntaxExtensions.cs</File>
      <File>src/Workspaces/CSharp/Portable/Extensions/ExpressionSyntaxExtensions.cs</File>
      <File>src/Workspaces/CSharp/Portable/Extensions/SemanticModelExtensions.cs</File>
      <File>src/Workspaces/CSharp/Portable/Extensions/SyntaxNodeExtensions.cs</File>
      <File>src/Workspaces/CSharp/Portable/Formatting/Rules/ElasticTriviaFormattingRule.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpSemanticFactsService.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpSyntaxFactsService.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs</File>
      <File>src/Workspaces/CSharp/Portable/Rename/CSharpRenameRewriterLanguageService.cs</File>
      <File>src/Workspaces/CSharp/Portable/Simplification/AbstractCSharpReducer.AbstractExpressionRewriter.cs</File>
      <File>src/Workspaces/CSharp/Portable/Simplification/CSharpExtensionMethodReducer.cs</File>
      <File>src/Workspaces/CSharp/Portable/Simplification/CSharpSimplificationService.Expander.cs</File>
      <File>src/Workspaces/CSharp/Portable/Simplification/CSharpSimplificationService.cs</File>
      <File>src/Workspaces/CSharp/Portable/Utilities/SpeculationAnalyzer.cs</File>
      <File>src/Workspaces/Core/Portable/CodeGeneration/AbstractCodeGenerationService.cs</File>
      <File>src/Workspaces/Core/Portable/CodeGeneration/CodeGenerationHelpers.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/Finders/NamedTypeSymbolReferenceFinder.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/SymbolTree/SymbolTreeInfo.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/ConflictEngine/RenamedSpansTracker.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/RenameLocation.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/ICodeDefinitionFactoryExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Extensions/ISymbolExtensions.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Utilities/BloomFilter.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Utilities/SymbolEquivalenceComparer.cs</File>
      <File>src/Workspaces/Core/Portable/SymbolId/SymbolKey.SymbolKeyComparer.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/SerializableBytes.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/SyntaxPath.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Host/SyntaxTreeFactory/AbstractSyntaxTreeFactoryService.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/Solution.CompilationTracker.State.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Workspace_Editor.cs</File>
      <File>src/Workspaces/CoreTest/CodeCleanup/Extensions.cs</File>
      <File>src/Workspaces/CoreTest/FindReferencesTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>3959</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Add tests for exception-related expressions.</Title>
    <Description>Try, Catch, Throw, Rethrow.

Includes active-issue tests for #3838, #3957 &amp; #3958

Replaces a couple of always-true or always-false checks with assertions.
</Description>
    <CreatedDate>19/10/2015</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>3959</PullRequestID>
        <IssueID>3838</IssueID>
        <Title>PEWriter refactoring: sync PE header structures with those of PEReader</Title>
        <Description>
        </Description>
        <CreatedDate>06/07/2015</CreatedDate>
        <ClosedDate>07/07/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3959</PullRequestID>
        <IssueID>3957</IssueID>
        <Title>Make TokenOfStringCached  independent of length</Title>
        <Description>For lengths that are not between 2 and 16 (inclusive) it immediately
returned its second argument.  For all other cases, it inspected the
string.  When the second argument was anything other than
SyntaxKind.Identifier (in particular, SyntaxKind.XmlNameToken), the
two values would not agree and so the output depended on the length
of the first (string) argument.

For example, passing ("a", SyntaxKind.XmlNameToken) used to return
SyntaxKind.XmlNameToken, but passing ("aa", SyntaxKind.XmlNameToken)
used to return SyntaxKind.IdentifierToken.  Now they both return
SyntaxKind.XmlNameToken (Edit: this isn't quite true - they both return
SyntaxKind.IdentifierToken, which is then mapped to XmlNameToken).

The only impact seems to be on parsing error recovery.  If this
turns out to make the behavior less desirable, then then we should
change the behavior so that _both_ return SyntaxKind.IdentifierToken
(i.e. stop remapping the output).
</Description>
        <CreatedDate>15/07/2015</CreatedDate>
        <ClosedDate>17/07/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>3959</PullRequestID>
        <IssueID>3958</IssueID>
        <Title>Make CompilerTestResources portable</Title>
        <Description>Remove resx files and embed the resources directly. Resx files add unnecessary complexity and the portable ResourceManager doesn't support blobs stored in resx files.
</Description>
        <CreatedDate>15/07/2015</CreatedDate>
        <ClosedDate>15/07/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>3959</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Expressions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Symbols.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Parser/LanguageParser.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/SyntaxKind.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenExprLambdaTests.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/CompilationAPITests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/Source/FieldTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Symbols/SymbolErrorTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/DeclarationParsingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/ExpressionParsingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/ParserErrorMessageTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/ParsingErrorRecoveryTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/SeparatedSyntaxListParsingTests.cs</File>
      <File>src/Compilers/CSharp/Test/Syntax/Parsing/StatementParsingTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Diagnostics/GenerateVariable/GenerateVariableTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/EditAndContinue/CSharpEditAndContinueAnalyzerTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Recommendations/OutKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Recommendations/RefKeywordRecommenderTests.cs</File>
      <File>src/EditorFeatures/CSharpTest/Recommendations/VoidKeywordRecommenderTests.cs</File>
      <File>src/VisualStudio/CSharp/Test/Debugging/LocationInfoGetterTests.cs</File>
      <File>src/Workspaces/CSharp/Portable/LanguageServices/CSharpSyntaxFactsService.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2426</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Tighter loops on Enumerable.Min, .Max &amp; .Average.</Title>
    <Description>Fixes #2238.

Changes the flow of these aggregate operations to use tighter loops.

A test of the performance changes can be see at
https://github.com/hackcraft/Enumerable-Tester/blob/master/Enumerable%20Aggregate%20Performance.ods?raw=true

Notably:
1. Most tested uses showed an increase in performance, sometimes dramatically.
2. The only cases with a decrease in performance greater than 5% were in short
   paths (e.g. single-element sequences) and so the total performance impact is
   slight.
3. For other cases that showed a decrease in performance there were similar
   cases (same operation on same datatype) with an increase in performance either
   comparable or overwhelming the decrease.

These changes make no short-circuits as per #2350 though they do take a short-cut to the end of the sequence in those cases. #2350 still offers yet greater improvements in the applicable cases.
</Description>
    <CreatedDate>20/07/2015</CreatedDate>
    <ClosedDate>24/07/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2426</PullRequestID>
        <IssueID>2238</IssueID>
        <Title>What about all the cool features VB can but not C#?</Title>
        <Description>ISSUE 1:

In VB I can easily create an inner interface like this (or also an inner class within an interface): 

Public Interface ICustomerService

```
Function Save(customer As ICustomer) As IMethodResult

Interface Version2
    Inherits ICustomerService

    Sub SaveAsync(customer As ICustomer, callback As Action(Of IMethodResult))

End Interface

Interface Version3
    Inherits ICustomerService.Version2

    Overloads Function SaveAsync(customer As ICustomer) As Guid
    Function GetMethodResult(trackingNumber As Guid) As IMethodResult

End Interface
```

End Interface
## When can I do this in C#?

ISSUE 2:

C# compiler is poor in field initializations like this, which the VB compiler handles without any problem:

```
public class OuterClass {

    private InnerClass _InnerClass = new InnerClass(this); // &lt;-COMPILE ERROR!

    private class InnerClass {

        private OuterClass _OuterInstance;

        public InnerClass(OuterClass outerInstance) {
            _OuterInstance = outerInstance;
        }

    }

}
```

Same problem which field initialization of fields that reference a previously initialized field. In VB, no problem, in C# a compile error occurs:

```
public class Test {

    private Int32 _FieldA = 55;
    private Int32 _FieldB = _FieldA * 5; // &lt;-COMPILE ERROR!
    private List&lt;String&gt; _Cache = new List&lt;String&gt;(_FieldA + _FieldB); // &lt;-COMPILE ERROR!

}
```

ISSUE 3:
C# compiler is poor in compiling foreach loops, which the VB compiler handles without any problem:

```
    public void DoSomething(IEnumerable&lt;String&gt; stringCollection) {
        foreach (String myString in stringCollection) {
            myString = myString ?? ""; // &lt;- COMPILE ERROR!
            //Do something with it
        }
    }
```

When are these issues fixed?

Thank you
Chris
</Description>
        <CreatedDate>24/04/2015</CreatedDate>
        <ClosedDate>20/03/2017</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2426</PullRequestID>
        <IssueID>2350</IssueID>
        <Title>Use more accurate assert condition in BuildMembersAndInitializers.</Title>
        <Description>Fixes #2349.

@VSadov, @gafter, @agocke, @jaredpar Please review.   
</Description>
        <CreatedDate>29/04/2015</CreatedDate>
        <ClosedDate>29/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2426</PullRequestID>
        <IssueID>2350</IssueID>
        <Title>Use more accurate assert condition in BuildMembersAndInitializers.</Title>
        <Description>Fixes #2349.

@VSadov, @gafter, @agocke, @jaredpar Please review.   
</Description>
        <CreatedDate>29/04/2015</CreatedDate>
        <ClosedDate>29/04/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2426</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder.QueryTranslationState.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Semantics/OverloadResolution/OverloadResolution.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/TypeofBinder.cs</File>
      <File>src/Compilers/CSharp/Portable/CodeGen/CodeGenerator.cs</File>
      <File>src/Compilers/CSharp/Portable/CodeGen/Optimizer.cs</File>
      <File>src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs</File>
      <File>src/Compilers/CSharp/Portable/Compiler/DocumentationCommentCompiler.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/CSharpDataFlowAnalysis.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/ControlFlowAnalysis.cs</File>
      <File>src/Compilers/CSharp/Portable/FlowAnalysis/PreciseAbstractFlowPass.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncExceptionHandlerRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/IteratorRewriter/IteratorMethodToStateMachineRewriter.IteratorFinallyFrame.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/IteratorRewriter/IteratorMethodToStateMachineRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_ConditionalAccess.cs</File>
      <File>src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/MethodToStateMachineRewriter.cs</File>
      <File>src/Compilers/CSharp/Portable/Parser/SyntaxListPool.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/ReferenceManager.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceNamedTypeSymbol_Bases.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourcePropertySymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/SubstitutedNamedTypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/TypeSymbol.cs</File>
      <File>src/Compilers/CSharp/Portable/Syntax/InternalSyntax/SyntaxLastTokenReplacer.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Emit/DeterministicTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/DeclarationTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/InternalUtilities/ConcurrentLruCacheTests.cs</File>
      <File>src/Compilers/Core/MSBuildTask/ManagedCompiler.cs</File>
      <File>src/Compilers/Core/MSBuildTask/Vbc.cs</File>
      <File>src/Compilers/Core/Portable/CodeGen/ILBuilder.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/DiagnosticBag.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationUnitCompletedEvent.cs</File>
      <File>src/Compilers/Core/Portable/DiagnosticAnalyzer/SymbolDeclaredCompilationEvent.cs</File>
      <File>src/Compilers/Core/Portable/Text/SourceText.cs</File>
      <File>src/Compilers/Core/VBCSCompilerTests/CompilerServerApiTest.cs</File>
      <File>src/Compilers/Helpers/AbstractAnalyzerAssemblyLoader.cs</File>
      <File>src/Compilers/Helpers/ShadowCopyAnalyzerAssemblyLoader.cs</File>
      <File>src/Compilers/Test/Utilities/CSharp/CompilationTestUtils.cs</File>
      <File>src/Compilers/Test/Utilities/Core2/CSReflectionBasedKindProvider.cs</File>
      <File>src/Compilers/Test/Utilities/Core2/DirectoryHelper.cs</File>
      <File>src/Compilers/Test/Utilities/Core2/ParseHelpers.cs</File>
      <File>src/Compilers/Test/Utilities/Core2/VBReflectionBasedKindProvider.cs</File>
      <File>src/Diagnostics/FxCop/Core/Design/CA1024DiagnosticAnalyzer.cs</File>
      <File>src/EditorFeatures/TestUtilities/Parallel/AsyncFactCommand.cs</File>
      <File>src/EditorFeatures/TestUtilities/Parallel/AsyncTestClassCommand.cs</File>
      <File>src/EditorFeatures/TestUtilities/Parallel/ParallelTestClassCommand.cs</File>
      <File>src/ExpressionEvaluator/Core/Test/ResultProvider/Debugger/Engine/DkmClrModuleInstance.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticAnalyzerDriver.cs</File>
      <File>src/Features/Core/EditAndContinue/EncDebuggingSessionInfo.cs</File>
      <File>src/Features/Core/Shared/TestHooks/AsynchronousOperationListener.cs</File>
      <File>src/Interactive/Features/Interactive/Core/SynchronizedVersionedList.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindow.cs</File>
      <File>src/Tools/Source/CompilerGeneratorTools/Source/BoundTreeGenerator/BoundNodeClassWriter.cs</File>
      <File>src/Tools/Source/CompilerGeneratorTools/Source/CSharpSyntaxGenerator/AbstractFileWriter.cs</File>
      <File>src/Tools/Source/SyntaxVisualizer/SyntaxVisualizerControl/SyntaxVisualizerControl.xaml.cs</File>
      <File>src/Workspaces/CSharp/Portable/Rename/CSharpRenameRewriterLanguageService.cs</File>
      <File>src/Workspaces/CSharp/Portable/Simplification/AbstractCSharpReducer.AbstractExpressionRewriter.cs</File>
      <File>src/Workspaces/Core/Desktop/Log/RoslynEventSource.cs</File>
      <File>src/Workspaces/Core/Desktop/Workspace/MSBuild/ProjectFile/ProjectFile.cs</File>
      <File>src/Workspaces/Core/Desktop/Workspace/MSBuild/SolutionFile/LineScanner.cs</File>
      <File>src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferenceCache.cs</File>
      <File>src/Workspaces/Core/Portable/Log/KeyValueLogMessage.cs</File>
      <File>src/Workspaces/Core/Portable/Log/LogAggregator.cs</File>
      <File>src/Workspaces/Core/Portable/Log/Logger.cs</File>
      <File>src/Workspaces/Core/Portable/Rename/ConflictEngine/ConflictResolution.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Utilities/DocumentationComment.cs</File>
      <File>src/Workspaces/Core/Portable/Shared/Utilities/ProgressTracker.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/AnnotationTable.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/AsyncLazy`1.cs</File>
      <File>src/Workspaces/Core/Portable/Utilities/CompilerUtilities/linkedhashqueue.cs</File>
      <File>src/Workspaces/Core/Portable/Workspace/Solution/BranchId.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2367</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Fix stale async-related comments in FileStream</Title>
    <Description>Leftover after the async rewrite in #972.

Fixes #2117.
</Description>
    <CreatedDate>15/07/2015</CreatedDate>
    <ClosedDate>15/07/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2367</PullRequestID>
        <IssueID>972</IssueID>
        <Title>Skip GetMemberValue for Nullable&lt;T&gt; error value</Title>
        <Description>
        </Description>
        <CreatedDate>02/03/2015</CreatedDate>
        <ClosedDate>02/03/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2367</PullRequestID>
        <IssueID>2117</IssueID>
        <Title>Support conditional access expression in expression tree lambdas</Title>
        <Description>I can't do this:

```
var list = new List&lt;object&gt;();
Expression&lt;Func&lt;int?&gt;&gt; foo = () =&gt; list?.Count;
```

But I would like to.
</Description>
        <CreatedDate>20/04/2015</CreatedDate>
        <ClosedDate>20/04/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2367</PullRequestID>
      <File>src/Compilers/Core/CodeAnalysisTest/Emit/CustomDebugInfoTests.cs</File>
      <File>src/Test/PdbUtilities/Shared/CustomDebugInfoReader.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>2019</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Add TaskExtensions.Unwrap tests</Title>
    <Description>This commit provides a System.Threading.Tasks.Tests project that doesn't include all of the tests that @mellinoe is porting (#702).  However, it does include a new set of tests written from scratch for TaskExtensions.Unwrap, which is the portion of System.Threading.Tasks whose source lives in corefx rather than in coreclr.  

These new tests are meant to be the primary unit testing for Unwrap, as the existing tests only superficially exercise the functionality. Once these are committed, #1589 can be validated against them (and the TODOs in the tests can be uncommented, as they're addressed by the new implementation).
</Description>
    <CreatedDate>12/06/2015</CreatedDate>
    <ClosedDate>15/06/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>2019</PullRequestID>
        <IssueID>702</IssueID>
        <Title>[Portable PDB] Update the Expression Compiler to consume the portable PDB format</Title>
        <Description>Phase 1: introduce an abstraction over the custom debug info.
</Description>
        <CreatedDate>20/02/2015</CreatedDate>
        <ClosedDate>09/02/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>2019</PullRequestID>
        <IssueID>1589</IssueID>
        <Title>Allow subclasses of AbstractCompletionService to customize more behavior (esp. around MRU).</Title>
        <Description>Right now TypeScript doesn't want the precise MRU algorithm you get by default with Roslyn's
completion list.  For example, we are working toward a concept of 'strong' completion
suggestions and 'weak' completion suggestions.  We'd prefer a 'strong' completion suggestion
be preselected over a 'weak' one if both are viable.

However, the MRU logic is baked into the existing completion service code.  I've broken this
out in a couple of ways.  First, instead of referring to MRU anywhere in the API, there are
just simple methods used for asking 'should i preselect this?' and 'is this item better than
this other item'.  By default these are implemented by using the MRU list.  However, a subclass
can use another mechanism.  Second, i broke out the MRU into its own class.  That way
if TypeScript wants to use MRU in some fashion, they can still leverage the same algorithm.
</Description>
        <CreatedDate>25/03/2015</CreatedDate>
        <ClosedDate>28/07/2015</ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>2019</PullRequestID>
      <File>src/Compilers/Core/Portable/PEWriter/MetadataWriter.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>1999</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Add OSVersion APIs to .NET Core</Title>
    <Description>The contract System.Runtime.InteropServices.RuntimeInformation provides
RuntimeInformation type that has methods to query for underlying OS
information at runtime. The OS information is expressed by the OSPlatform type.
Reference issue: dotnet\corefx#1017, API Review done on 2015\06\09.

cc @KrzysztofCwalina @weshaggard @terrajobst @nguerrera @justinvp @ellismg @stephentoub 

closes issue #1017 
</Description>
    <CreatedDate>11/06/2015</CreatedDate>
    <ClosedDate>15/06/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>1999</PullRequestID>
        <IssueID>1017</IssueID>
        <Title>Inline Temp should keep comments</Title>
        <Description>Ported from TFS WorkItem: **580497**

---

**Repro Steps:**

``` VB
Module Program
    Sub Main()
        Dim a = 1, ' comment
            b = 1
        Dim c = a
    End Sub
End Module
```

Inline a.

**ACTUAL:**

``` VB
Module Program
    Sub Main()
        Dim b = 1
        Dim c = 1
    End Sub
End Module
```

**EXPECTED:**

``` VB
Module Program
    Sub Main()
        ' comment
        Dim b = 1
        Dim c = 1
    End Sub
End Module
```

---

**Revisions:**

1) Created By Vladimir Reshetnikov (1/17/2013 10:43:16 AM)

---

2) Edited By Collin Deel (Chinasoft) (4/11/2014 12:55:31 PM)

Results are now:

``` VB
Module Program
    Sub Main()
        Dim
            b = 1
        Dim c = 1
    End Sub
End Module
```

The comment still disappears, and not removing the line break introduces some errors.

---

3) Edited By Balaji Krishnan (6/18/2014 10:56:18 AM)

Notes: introducing compilation errors is a bug. 

Without breaking compilation, the current code's intent is to preserve/move trivia if the local declaration has more than 1 declarators, with a single or multi-line comment and &amp;quot;delete&amp;quot; them completely if there was only 1 variable declarator. 

Check how it actually works though. 

This is also related with how the feature handles pre-processor directives (Bug 527376)
</Description>
        <CreatedDate>04/03/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>1999</PullRequestID>
        <IssueID>1017</IssueID>
        <Title>Inline Temp should keep comments</Title>
        <Description>Ported from TFS WorkItem: **580497**

---

**Repro Steps:**

``` VB
Module Program
    Sub Main()
        Dim a = 1, ' comment
            b = 1
        Dim c = a
    End Sub
End Module
```

Inline a.

**ACTUAL:**

``` VB
Module Program
    Sub Main()
        Dim b = 1
        Dim c = 1
    End Sub
End Module
```

**EXPECTED:**

``` VB
Module Program
    Sub Main()
        ' comment
        Dim b = 1
        Dim c = 1
    End Sub
End Module
```

---

**Revisions:**

1) Created By Vladimir Reshetnikov (1/17/2013 10:43:16 AM)

---

2) Edited By Collin Deel (Chinasoft) (4/11/2014 12:55:31 PM)

Results are now:

``` VB
Module Program
    Sub Main()
        Dim
            b = 1
        Dim c = 1
    End Sub
End Module
```

The comment still disappears, and not removing the line break introduces some errors.

---

3) Edited By Balaji Krishnan (6/18/2014 10:56:18 AM)

Notes: introducing compilation errors is a bug. 

Without breaking compilation, the current code's intent is to preserve/move trivia if the local declaration has more than 1 declarators, with a single or multi-line comment and &amp;quot;delete&amp;quot; them completely if there was only 1 variable declarator. 

Check how it actually works though. 

This is also related with how the feature handles pre-processor directives (Bug 527376)
</Description>
        <CreatedDate>04/03/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>1999</PullRequestID>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Expressions.cs</File>
      <File>src/Compilers/CSharp/Portable/Binder/Binder_Invocation.cs</File>
      <File>src/Compilers/CSharp/Test/Semantic/Semantics/SemanticErrorTests.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>1881</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Update System.Text.Encoding.CodePage tests.</Title>
    <Description>Updated (existant) tests for System.Text.Encoding.CodePage, in response to #1872 .
Tests no longer require a specific run order, and should be safer to run in multiple threads (one other test had potential race conditions as a result of conversion...)

All tests passing on Windows.  An attempt was made to fix one of the tests failing in Unix (due to issue #846 ), but I have no way to verify this myself (`ActiveIssue` attribute left on).

There also appeared to be some entries missing for retrieving a 'WebName' from a given encoding (Europa, code page 29001).  The encoding could be retrieved, and even used to perform encodings, but attempting to call `WebName` would complain that such did not exist.  Given:
1. The encoders existence and working implementation
2. A returned value in the current implementation.
3. An entry on the relevant MSDN page.

... this was judged to be a bug, and corrected accordingly. 

&lt;hr /&gt;

Squashed commits:

Remove `EnsureInitialization` and pre-existing-encodings tests.
Ask CodePagesEncodingProvider directly for encodings.

Move encoding mapping data into member in prep for adding Theory attribute.

Add missing Europa (code page 29001) strings.
No obvious way to test "English" strings (unused!), leaving in for now.

Test for existence of all available default encodings.
Test replacement/supplementary behavior with addition of code-page mapping.
Attempt to add Unix-specific test (but not able to personally test, due to being on windows...).

Update TestCodepageEncoding to use Theory/MemberData.
Expand range of characters round-tripped (potentially more can be added, but additional tests for exceptions should be added).
Bring in code-page-&gt;webname mapping tests.

Remove existence test for Eudc encoding (part of testing data).

Update TestEncodingDisplayNames to use Theory/MemberData.
Raise lower bound of acceptable characters to only printable, and not solely whitespace.
Externalize culture setup to class load-time (in-method not thread safe!)

Move test classes out of default namespace.

Update TestSpecificCodepageEncodings
Extract test data to member.
Loft tests to method, use more idiomatic xUnit.

Update multibyte encoding tests.
Extract data to member.
Condense test methods into one.
</Description>
    <CreatedDate>31/05/2015</CreatedDate>
    <ClosedDate>08/06/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>1881</PullRequestID>
        <IssueID>1872</IssueID>
        <Title>VisualBasicCodeModelService should handle Constructor case for Function ...</Title>
        <Description>...Kind Properly

VisualBasicCodeModelService to get the function kind for Constructor had
a syntactic blunder where the case was not allowed to fall through
</Description>
        <CreatedDate>08/04/2015</CreatedDate>
        <ClosedDate>08/04/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>1881</PullRequestID>
        <IssueID>846</IssueID>
        <Title>Phase ordering issue in C# compiler with declaration diagnostics.</Title>
        <Description>The field `CSharpCompilation.SemanticDiagnostics` is actually used to gather _declaration_ diagnostics. Therefore no additional diagnostics should be placed into it once we are done with that phase. We had no code to check that invariant in the compiler. In practice what that means is that any diagnostics that are placed into this bag "too late" are simply dropped on the floor and not reported.

This should be fixed. It should not be possible to add diagnostics to that bag after we are done processing declarations.

I am changing the name of that to `CSharpCompilation.DeclarationDiagnostics` for clarity. I tried adding an assert to enforce the property that we do not add diagnostics too late, but that assert failed in a number of places (all of which are latent bugs). I am commenting out that assert for now, but we should track down and fix all of the latent bugs, and then reenable the assertion. The (disabled) assertion is the first line of `CSharpCompilation.DeclarationDiagnostics.get`
</Description>
        <CreatedDate>25/02/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>1881</PullRequestID>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer_GetDiagnostics.cs</File>
      <File>src/Features/Core/Diagnostics/EngineV1/DiagnosticIncrementalAnalyzer_GetLatestDiagnosticsForSpan.cs</File>
      <File>src/Features/Core/Shared/Extensions/DiagnosticAnalyzerExtensions.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>1071</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Merge master to dev/metadata</Title>
    <Description>In particular, the changes from PR #1026 are needed to address the CI failure in #1068.

There is no code review required as these commits have already been reviewed and there are no merge conflicts.
</Description>
    <CreatedDate>02/03/2015</CreatedDate>
    <ClosedDate>02/03/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>1071</PullRequestID>
        <IssueID>1026</IssueID>
        <Title>Fixing parentheses simplification in the presence of a conditional member access.</Title>
        <Description>Fixes #987

Giving the ConditionalMemberAcces the same precedence as member access while determining associativity fixes the issue.

In VB, removing parentheses simplification works fine. There is a case where cast simplfication doesn't work and I've filed #1025 to track that.
</Description>
        <CreatedDate>04/03/2015</CreatedDate>
        <ClosedDate>05/03/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>1071</PullRequestID>
        <IssueID>1068</IssueID>
        <Title>Rename doesn't disambiguate by casting to base type</Title>
        <Description>``` C#
class B {
    public void X() { }
}

class D : B {
    public void Y() =&gt; new D().X();
}
```

Renaming `Y` to `X` should change the callsite to `((B)new D()).X()`.
It also ought to add `new` to the now-shadowing declaration.
</Description>
        <CreatedDate>06/03/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>1071</PullRequestID>
      <File>src/Compilers/CSharp/Desktop/CSharpSerializableCompilationOptions.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpCompilationOptions.cs</File>
      <File>src/Compilers/CSharp/Portable/CSharpResources.Designer.cs</File>
      <File>src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/ErrorCode.cs</File>
      <File>src/Compilers/CSharp/Portable/Errors/MessageProvider.cs</File>
      <File>src/Compilers/CSharp/Portable/Symbols/Source/SourceAssemblySymbol.cs</File>
      <File>src/Compilers/CSharp/Test/Emit/Attributes/InternalsVisibleToAndStrongNameTests.cs</File>
      <File>src/Compilers/CSharp/Test/Symbol/Compilation/CSharpCompilationOptionsTests.cs</File>
      <File>src/Compilers/Core/CodeAnalysisTest/CommonCompilationOptionsTests.cs</File>
      <File>src/Compilers/Core/Desktop/SerializableCompilationOptions.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/Compilation.cs</File>
      <File>src/Compilers/Core/Portable/Compilation/CompilationOptions.cs</File>
      <File>src/Compilers/Core/Portable/Diagnostic/CommonMessageProvider.cs</File>
      <File>src/Compilers/Core/Portable/StrongNameKeys.cs</File>
      <File>src/Test/Utilities/TestMessageProvider.cs</File>
    </Files>
  </PullRequest>
  <PullRequest>
    <IssueID>589</IssueID>
    <RepoID>corefx</RepoID>
    <Title>Address remaining PLINQ test ActiveIssues</Title>
    <Description>A bunch of PLINQ tests are disabled as ActiveIssue.  This commit fixes all of them (issues #176 and #240), except for #235, which is addressed by a separate PR (#585) for a product bug rather than test issues.  I did not do a general pass through the PLINQ tests, even though they could use it.

PlinqModesTests - There's an explicit comment at the top of the test that it's not meant for DOP==1 (it verifies that work happens in parallel), and then apparently we were surprised when it was failing on single core machines that result in DOP == 1 ;)

UnionIntersectDistinctTests.RunOreredUnionTest1 - There's no reason this test should fail.  If it does, there's a bug to be investigated.  I'm assuming it was actually stalling because of another test running with it concurrently.

WithCancellationTests - A bunch of these tests were scheduling tasks to asynchronously cancel/dispose a query, and the query was written to take a certain amount of time to hopefully allow for cancellation to take place.  But it appears as part of the tests being ported, those timeouts were simply commented out, making it extremely likely the tests would fail.  I've just rewritten them to do the cancellation as part of the query's execution rather than using a separate asynchronous task.  I also deleted some duplicative tests.  And I made some tests that still did explicit delays/timeouts to be OuterLoop.
</Description>
    <CreatedDate>01/02/2015</CreatedDate>
    <ClosedDate>02/02/2015</ClosedDate>
    <Issues>
      <Issue>
        <PullRequestID>589</PullRequestID>
        <IssueID>176</IssueID>
        <Title>Proposal: Virtual arguments in methods</Title>
        <Description>Currently the virtual keyword can be used to mark a method as being virtual, so that calling the method on an object with the interface type will call it on the actual type:

``` cs
ISomething something = GetOneImplementationOfISomething();
something.DoIt();//this will call the correct DoIt based on the actual type of something
```

Unfortunately the same thing cannot be done with a method that gets a parameter, for example:

``` cs
private void DoIt(ISomething something){
  //this is the only one that gets called
}
private void DoIt(SomethingImplementation something){
  //this one is never called
}

ISomething something = GetOneImplementationOfISomething();
DoIt(something);
```

This means that extension methods can't be virtual today. 

I therefore propose that the virtual keyword can be declared on one of the arguments to a method if the method isn't marked as virtual (thereby restricting it to single dispatch and not multiple dispatch). For example: 

``` cs
public static class Extensions
{
    public static string NameOf(virtual this ISomething something)
    {
        return "interface";
    }
    public static string NameOf(virtual this SomethingOne something)
    {
        return "one";
    }
    public static string NameOf(virtual this SomethingTwo something)
    {
        return "two";
    }
}
//...
var s = GetSomething();
s.NameOf();
//or 
Extensions.NameOf(s);
```

This is currently possible today using `dynamic`, which means that, afaict, this proposal is only syntax sugar on top what is currently possible. 
</Description>
        <CreatedDate>30/01/2015</CreatedDate>
        <ClosedDate>15/08/2016</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>589</PullRequestID>
        <IssueID>240</IssueID>
        <Title>Test bug - TFS to Git port tool</Title>
        <Description>Ported from TFS WorkItem: &lt;b&gt;1119695&lt;/b&gt;

---

&lt;p&gt;&lt;b&gt;Repro Steps:&lt;/b&gt;&lt;/p&gt;

Test bug - TFS to Git port tool

---

&lt;p&gt;&lt;b&gt;Revisions:&lt;/b&gt;&lt;/p&gt;


1) Created By Manish Vasani (2/4/2015 11:21:26 AM)

---

2) Edited By Manish Vasani (2/4/2015 11:21:33 AM)

Dummy update.

---

3) Edited By Manish Vasani (2/4/2015 11:22:43 AM)

Another update.

---
</Description>
        <CreatedDate>04/02/2015</CreatedDate>
        <ClosedDate>04/02/2015</ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>589</PullRequestID>
        <IssueID>235</IssueID>
        <Title>XmlCrefAttributeSyntax with generic types</Title>
        <Description>I tried to create a `cref` attribute for an element in an XML documentation element using the following code:

``` csharp
TypeSyntax typeSyntax = SyntaxFactory.ParseTypeName("global::System.Lazy&lt;T&gt;");
TypeCrefSyntax cref = SyntaxFactory.TypeCref(typeSyntax);
XmlCrefAttributeSyntax crefAttribute = SyntaxFactory.XmlCrefAttribute(
    SyntaxFactory.XmlName("cref"),
    SyntaxFactory.Token(SyntaxKind.DoubleQuoteToken),
    cref,
    SyntaxFactory.Token(SyntaxKind.DoubleQuoteToken));
```

When I added this attribute to an element in a code fix operation with the `Simplifier.Annotation` annotation, the resulting code for this specific attribute looked like this:

```
cref="Lazy&lt;T&gt;"
```

I expected the attribute to actually be emitted as:

```
cref="Lazy{T}"
```

:question: How can I produce a correct `cref` attribute for an XML documentation comment from an arbitrary `TypeSyntax`?
</Description>
        <CreatedDate>04/02/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
      <Issue>
        <PullRequestID>589</PullRequestID>
        <IssueID>585</IssueID>
        <Title>Add direct test covereage for SymbolFinder</Title>
        <Description>Ported from TFS WorkItem: **975825**

---

**Repro Steps:**

**Affected Branch:** &lt;BR&gt;**Affected Build:** &lt;BR&gt;**Affected Product Language:** &lt;BR&gt;&lt;BR&gt;**Steps to reproduce:**&lt;BR&gt;&lt;BR&gt;Found during mobbing. 

&amp;nbsp;

SymbolFinder.FindImplementationsAsync has no calls from test code. We should test it directly rather than rely on tests of consumers of this api.

---

**Revisions:**

1) Created By David Poeschl (6/27/2014 11:28:38 AM)

---
</Description>
        <CreatedDate>17/02/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
      </Issue>
    </Issues>
    <Files>
      <PullRequestID>589</PullRequestID>
      <File>src/Interactive/EditorFeatures/CSharp/Completion/CompletionProviders/ReplCommandCompletionProvider.cs</File>
      <File>src/Interactive/EditorFeatures/CSharp/Interactive/CSharpInteractiveEvaluator.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveCommandHandler.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Extensibility/Interactive/InteractiveEvaluator.cs</File>
      <File>src/Interactive/EditorFeatures/Core/Implementation/Interactive/Commands/LoadCommand.cs</File>
      <File>src/InteractiveWindow/Editor/Commands/ClearScreenCommand.cs</File>
      <File>src/InteractiveWindow/Editor/Commands/HelpCommand.cs</File>
      <File>src/InteractiveWindow/Editor/Commands/IInteractiveWindowCommand.cs</File>
      <File>src/InteractiveWindow/Editor/Commands/InteractiveWindowCommand.cs</File>
      <File>src/InteractiveWindow/Editor/Commands/InteractiveWindowCommands.cs</File>
      <File>src/InteractiveWindow/Editor/Commands/ResetCommand.cs</File>
      <File>src/InteractiveWindow/Editor/IInteractiveEvaluator.cs</File>
      <File>src/InteractiveWindow/Editor/IInteractiveWindow.cs</File>
      <File>src/InteractiveWindow/Editor/IInteractiveWindowEditorFactoryService.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindow.cs</File>
      <File>src/InteractiveWindow/Editor/InteractiveWindowResources.Designer.cs</File>
      <File>src/InteractiveWindow/Editor/Output/OutputClassifierProvider.cs</File>
      <File>src/InteractiveWindow/Editor/Output/OutputWriter.cs</File>
      <File>src/InteractiveWindow/EditorTest/InteractiveWindowEditorsFactoryService.cs</File>
      <File>src/InteractiveWindow/EditorTest/InteractiveWindowTests.cs</File>
      <File>src/InteractiveWindow/EditorTest/TestInteractiveEngine.cs</File>
      <File>src/InteractiveWindow/VisualStudio/IVsInteractiveWindow.cs</File>
      <File>src/InteractiveWindow/VisualStudio/IVsInteractiveWindowEditorsFactoryService.cs</File>
      <File>src/InteractiveWindow/VisualStudio/IVsInteractiveWindowFactory.cs</File>
      <File>src/InteractiveWindow/VisualStudio/InteractiveWindowPackage.cs</File>
      <File>src/InteractiveWindow/VisualStudio/VsInteractiveWindow.cs</File>
      <File>src/InteractiveWindow/VisualStudio/VsInteractiveWindowCommandFilter.cs</File>
      <File>src/InteractiveWindow/VisualStudio/VsInteractiveWindowEditorFactoryService.cs</File>
      <File>src/InteractiveWindow/VisualStudio/VsInteractiveWindowExtensions.cs</File>
      <File>src/InteractiveWindow/VisualStudio/VsInteractiveWindowFactory.cs</File>
      <File>src/VisualStudio/InteractiveServices/Debugger/DebuggerEvaluator.cs</File>
      <File>src/VisualStudio/InteractiveServices/Debugger/VsImmediateWindowProvider.cs</File>
      <File>src/VisualStudio/InteractiveServices/Interactive/ResetInteractive.cs</File>
      <File>src/VisualStudio/InteractiveServices/Interactive/VsInteractiveWindowProvider.cs</File>
    </Files>
  </PullRequest>
</PullRequests>