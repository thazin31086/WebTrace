@{
    ViewBag.Title = "Hierarchical Tracing";
}

<div class="container" style="width:100%;max-width:100%">
    <h3>Hierarchical Tracing</h3>
    <hr />
    <div id="webtrace">

        <h2>User Define Trace Artifacts</h2>
        <section>
            <h3>Project Folder</h3>
            <div class="list-group">
                @{
                    var datafolders = ViewData["datafolders"] as System.Web.UI.WebControls.TreeNode;

                    <div class="list-group-item">
                        <div class="panel panel-default">
                            <div class="panel-heading">EasyClinic</div>
                            <div class="panel-body">
                                <div class="alert alert-info" role="alert">
                                    Project Description :  student-created datasets, which includes use case, interaction diagrams, test cases and class description.
                                </div>


                                <table class="table table-condensed">
                                    <thead>
                                        <tr>
                                            <th> <strong> Artifacts</strong></th>
                                            <th> <strong>Select Trace Direction</strong></th>
                                        </tr>
                                    </thead>
                                    @{
                                        int i = 0;
                                        foreach (System.Web.UI.WebControls.TreeNode subitem in datafolders.ChildNodes)
                                        {
                                            var selectlist = "selectlist" + i++;
                                            <tr>
                                                <td>@subitem.Text</td>
                                                <td>
                                                    <select class="form-control" name="dropdown" id=@selectlist>
                                                        <option value="None">Select..</option>
                                                        <option value="Source">Source</option>
                                                        <option value="Target">Target</option>
                                                    </select>
                                                </td>
                                            </tr>


                                        }
                                    }
                                </table>

                            </div>
                        </div>
                    </div>
                }
            </div>
        </section>
        <h2>Pre-Processing</h2>
        <section>
            <div class="row">
                <div class="col-sm-2">
                    <table class="table table-hover">
                        @{
                            var rawtermmap = ViewData["RawTermMap"] as List<string>;
                            <thead class="btn-info">
                                <tr><th class="text-center">1. Extract Raw Terms <br />(Total = @rawtermmap.Count())</th></tr>
                            </thead>
                            foreach (var item in rawtermmap)
                            {
                                <tr><td> @item</td></tr>
                            }
                        }
                    </table>
                </div>
                <div class="col-sm-2">
                    <table class="table table-hover">
                        @{
                            var termmap = ViewData["TermMap"] as List<string>;
                            <thead class="btn-info">
                                <tr><th class="text-center">2. Removed Stopwords <br />(Total = @termmap.Count())</th></tr>
                            </thead>
                            foreach (var item in termmap)
                            {
                                <tr><td> @item</td></tr>
                            }
                        }
                    </table>
                </div>
                <div class="col-sm-2">
                    <table class="table table-hover">
                        @{
                            var DocMap = ViewData["DocMap"] as List<string>;
                            var DocIndexLookup1 = ViewData["DocIndexLookup"] as Dictionary<string, int>;
                            <thead class="btn-info">
                                <tr><th class="text-center">3. Documents List <br /> (Total = @DocMap.Count())</th></tr>
                            </thead>
                            foreach (var item in ViewData["DocMap"] as List<string>)
                            {
                                <tr><td>@item</td></tr>
                            }
                        }
                    </table>
                </div>
                <div class="col-sm-2">
                    <table class="table table-hover">
                        <thead class="btn-info">
                            <tr><th class="text-center">Documents-Terms Mapping</th></tr>
                        </thead>
                        @{
                            var RawMatrix = ViewData["RawMatrix"] as double[][];
                            var TermIndexLookup = ViewData["TermIndexLookup"] as Dictionary<string, int>;
                            var DocIndexLookup = ViewData["DocIndexLookup"] as Dictionary<string, int>;
                            for (int x = 0; x < RawMatrix.GetUpperBound(0); x++)
                            {
                                var divname = "collapse" + x;
                                var refdivname = "#collapse" + x;
                                <tr>
                                    <td>
                                        <div class="panel panel-primary">
                                            <div>
                                                <div class="page-heading btn-warning" data-target=@refdivname>
                                                    @DocIndexLookup.Where(z => z.Value == Convert.ToInt64(RawMatrix[x][0])).Select(z => z.Key).FirstOrDefault()
                                                </div>
                                                <div id=@divname class="panel-body collapse show" aria-labelledby="headingOne">
                                                    <table class="table table-hover">
                                                        <thead style="text-align:center;">
                                                            <tr>
                                                                <th>Terms</th>
                                                                <th>Count</th>
                                                            </tr>
                                                        </thead>
                                                        @for (int y = 0; y < RawMatrix.GetUpperBound(0); y++)
                                                        {

                                                            <tbody>
                                                                @if (@RawMatrix[x][y] == 0)
                                                                {
                                                                    <tr>
                                                                        <td>@TermIndexLookup.Where(z => z.Value == y).Select(z => z.Key).FirstOrDefault()</td>
                                                                        <td>@RawMatrix[x][y] </td>
                                                                    </tr>
                                                                }
                                                                else
                                                                {
                                                                    <tr class="alert-success">
                                                                        <td>@TermIndexLookup.Where(z => z.Value == y).Select(z => z.Key).FirstOrDefault()</td>
                                                                        <td>@RawMatrix[x][y] </td>
                                                                    </tr>
                                                                }
                                                            </tbody>

                                                        }
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </table>
                </div>
                <div class="col-sm-2">
                    <table class="table table-hover">
                        @{
                            var FunctionMap = ViewData["FunctionMap"] as List<WebTrace.Services.Functions>;
                            <thead class="btn-info">
                                <tr>
                                    <td colspan="2" class="text-center">List of Source Code Functions <br /> (Total = @FunctionMap.Count())</td>
                                </tr>
                            </thead>
                            foreach (var item in ViewData["FunctionMap"] as List<WebTrace.Services.Functions>)
                            {
                                <tr>
                                    <td>@item.DocumentIndex</td>
                                    <td>@item.FunctionName</td>
                                </tr>
                            }
                        }
                    </table>
                </div>

            </div>
        </section>
        <h2>IR Engine Trace Links Generation</h2>
        <section>
            @{
                var similarityMatrices = ViewData["rankedlist"] as List<TraceLabSDK.Types.TLSimilarityMatrix>;

                if (similarityMatrices.Count() > 0)
                {
                    <table class="table table-bordered">
                        <tr><td colspan="3"><strong>Use IR Techniques - Vector Space Model</strong></td></tr>
                        <tr>
                            <td class="alert-success">Green - High Similarity</td>
                            <td class="alert-warning ">Amber - Low Similarity</td>
                            <td class="alert-danger">Red - No Similarity</td>
                        </tr>
                    </table>

                    foreach (var similarityMatrix in similarityMatrices)
                    {
                        if (similarityMatrix.AllLinks.Count() > 0)
                        {

                            <table class="table table-hover">
                                <thead class="btn-info">
                                    <tr>
                                        <th>Source Aritifact</th>
                                        <th>Target Aritifact</th>
                                        <th>Similarity Score</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var links in similarityMatrix.AllLinks.OrderByDescending(x => x.Score))
                                    {
                                        <tr>
                                            <td>@links.SourceArtifactId</td>
                                            <td>@links.TargetArtifactId</td>
                                            @if (links.Score == 0)
                                            {
                                                <td class="danger">@links.Score</td>
                                            }
                                            else if (links.Score >= 0.1)
                                            {
                                                <td class="success">@links.Score</td>
                                            }
                                            else
                                            {
                                                <td class="warning">@links.Score</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    }

                }


            }
        </section>
        <h2>User Verify Trace Links</h2>
        <section>
            <div id="dataTable"></div>
            <div id="treemap"></div>
            @section scripts {
                <script type="text/javascript">
            $(document).ready(function () {
                var appserverpath = @Html.Raw(Json.Encode(Server.MapPath("~/Data/EasyClinic")));
                // prepare the data
                var source =
                {
                    dataType: "json",
                    dataFields: [
                        { name: 'SourceFile', type: 'string' },
                        { name: 'TargetFile', type: 'string'  },
                        { name: 'Score', type: 'number' }
                    ],
                    url: '/api/IR/GetSimilarityMartrixes?path=' + appserverpath
                };

                var dataAdapter = new $.jqx.dataAdapter(source);
                console.log(dataAdapter);
                // create Tree Grid
                $("#dataTable").jqxDataTable(
                    {
                        width: 850,
                        source: dataAdapter,
                        theme: 'arctic',
                        pageSize: 50,
                        sortable: true,
                        filterable: true,
                        pageable: true,
                        columns: [
                            { text: 'Source', dataField: 'SourceFile', width: 200 },
                            { text: 'Target', dataField: 'TargetFile', width: 200 },
                            { text: 'Score', dataField: 'Score', width: 160 }
                        ]
                    });

                $('#treemap').jqxTreeMap({
                    width: '1000',
                    height: '1000',
                    source: dataAdapter,
                    displayMember: 'SourceFile',
                    valueMember: 'Score',
                    colorMode: 'rangeColors',
                    colorRanges: [
                        { min: 0.01, max: 0.1, color: '#ff0300' },
                        { min: 0.2, max: 0.6, color: '#fe2e00' },
                        { min: 0.8, max: 1, color: '#fe3900' }
                    ],
                    legendScaleCallback: function (v) {
                        return v;
                    },
                    renderCallbacks: {
                        '*': function (element, data) {
                            var content = '<div><div style="font-weight: bold; font-family: verdana; font-size: 13px;">Source File: ' + data.record.SourceFile + '</div>';
                            content += '<div style=" font-family: verdana; font-size: 12px;">Target File: ' + data.record.TargetFile + '</div>';
                            content += '<div style=" font-family: verdana; font-size: 12px;">Score: ' + data.record.Score + '</div>';
                            content += '</div>';
                            element.jqxTooltip({
                                content: content,
                                position: 'mouse',
                                autoHideDelay: 6000
                            });
                        }
                    },
                    legendLabel: 'Interest Rate'
                });
                     });

                </script>
            }
        </section>

    </div>


</div>
